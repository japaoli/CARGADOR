
FreeRTOS_ThreadCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005050  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c8  080052c8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080052c8  080052c8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052c8  080052c8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080052d0  080052d0  000152d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080052d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc0  20000020  080052f8  00020020  2**2
                  ALLOC
 10 RAM1_region   00000000  20001de0  20001de0  00020020  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020020  2**0
                  CONTENTS
 12 ._user_heap_stack 00000c00  20001de0  20001de0  00021de0  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 14 .debug_line   00016990  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00017519  00000000  00000000  000369da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000335e  00000000  00000000  0004def3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001778  00000000  00000000  00051258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be306  00000000  00000000  000529d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001620  00000000  00000000  00110cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000333d  00000000  00000000  001122f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00115635  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000623c  00000000  00000000  00115688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000020 	.word	0x20000020
 800015c:	00000000 	.word	0x00000000
 8000160:	08005174 	.word	0x08005174

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000024 	.word	0x20000024
 800017c:	08005174 	.word	0x08005174

08000180 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000180:	480d      	ldr	r0, [pc, #52]	; (80001b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000182:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000184:	f000 fa70 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000188:	480c      	ldr	r0, [pc, #48]	; (80001bc <LoopForever+0x6>)
  ldr r1, =_edata
 800018a:	490d      	ldr	r1, [pc, #52]	; (80001c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800018c:	4a0d      	ldr	r2, [pc, #52]	; (80001c4 <LoopForever+0xe>)
  movs r3, #0
 800018e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000190:	e002      	b.n	8000198 <LoopCopyDataInit>

08000192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000196:	3304      	adds	r3, #4

08000198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800019a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800019c:	d3f9      	bcc.n	8000192 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800019e:	4a0a      	ldr	r2, [pc, #40]	; (80001c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001a0:	4c0a      	ldr	r4, [pc, #40]	; (80001cc <LoopForever+0x16>)
  movs r3, #0
 80001a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001a4:	e001      	b.n	80001aa <LoopFillZerobss>

080001a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a8:	3204      	adds	r2, #4

080001aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001ac:	d3fb      	bcc.n	80001a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001ae:	f004 ffa7 	bl	8005100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001b2:	f000 f80f 	bl	80001d4 <main>

080001b6 <LoopForever>:

LoopForever:
    b LoopForever
 80001b6:	e7fe      	b.n	80001b6 <LoopForever>
  ldr   r0, =_estack
 80001b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80001bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001c0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80001c4:	080052d8 	.word	0x080052d8
  ldr r2, =_sbss
 80001c8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80001cc:	20001de0 	.word	0x20001de0

080001d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001d0:	e7fe      	b.n	80001d0 <ADC_IRQHandler>
	...

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa4c 	bl	8000674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f828 	bl	8000230 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize LEDs */
  BSP_LED_Init(LED1);
 80001e0:	2000      	movs	r0, #0
 80001e2:	f000 f9d3 	bl	800058c <BSP_LED_Init>
  BSP_LED_Init(LED2);
 80001e6:	2001      	movs	r0, #1
 80001e8:	f000 f9d0 	bl	800058c <BSP_LED_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ec:	f002 f8d2 	bl	8002394 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of THREAD1 */
  THREAD1Handle = osThreadNew(LED_Thread1, NULL, &THREAD1_attributes);
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <main+0x44>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4809      	ldr	r0, [pc, #36]	; (800021c <main+0x48>)
 80001f6:	f002 f95d 	bl	80024b4 <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <main+0x4c>)
 80001fe:	6013      	str	r3, [r2, #0]

  /* creation of THREAD2 */
  THREAD2Handle = osThreadNew(LED_Thread2, NULL, &THREAD2_attributes);
 8000200:	4a08      	ldr	r2, [pc, #32]	; (8000224 <main+0x50>)
 8000202:	2100      	movs	r1, #0
 8000204:	4808      	ldr	r0, [pc, #32]	; (8000228 <main+0x54>)
 8000206:	f002 f955 	bl	80024b4 <osThreadNew>
 800020a:	4603      	mov	r3, r0
 800020c:	4a07      	ldr	r2, [pc, #28]	; (800022c <main+0x58>)
 800020e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000210:	f002 f8f2 	bl	80023f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000214:	e7fe      	b.n	8000214 <main+0x40>
 8000216:	bf00      	nop
 8000218:	080051d4 	.word	0x080051d4
 800021c:	080002d5 	.word	0x080002d5
 8000220:	2000003c 	.word	0x2000003c
 8000224:	080051f8 	.word	0x080051f8
 8000228:	0800036d 	.word	0x0800036d
 800022c:	20000040 	.word	0x20000040

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b09a      	sub	sp, #104	; 0x68
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0320 	add.w	r3, r7, #32
 800023a:	2248      	movs	r2, #72	; 0x48
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f004 ff90 	bl	8005164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000256:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <SystemClock_Config+0xa0>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800025e:	4a1c      	ldr	r2, [pc, #112]	; (80002d0 <SystemClock_Config+0xa0>)
 8000260:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000264:	6013      	str	r3, [r2, #0]
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <SystemClock_Config+0xa0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800026e:	603b      	str	r3, [r7, #0]
 8000270:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000272:	2320      	movs	r3, #32
 8000274:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800027a:	2300      	movs	r3, #0
 800027c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800027e:	23b0      	movs	r3, #176	; 0xb0
 8000280:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000282:	2300      	movs	r3, #0
 8000284:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0320 	add.w	r3, r7, #32
 800028a:	4618      	mov	r0, r3
 800028c:	f000 ff7a 	bl	8001184 <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000296:	f000 f8b1 	bl	80003fc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800029a:	234f      	movs	r3, #79	; 0x4f
 800029c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800029e:	2300      	movs	r3, #0
 80002a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fb00 	bl	80018bc <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002c2:	f000 f89b 	bl	80003fc <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3768      	adds	r7, #104	; 0x68
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	58000400 	.word	0x58000400

080002d4 <LED_Thread1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LED_Thread1 */
void LED_Thread1(void *argument)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t count = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  (void) argument;
  /* Infinite loop */
  for (;;)
  {
    count = osKernelGetTickCount() + 5000;
 80002e0:	f002 f8c0 	bl	8002464 <osKernelGetTickCount>
 80002e4:	4603      	mov	r3, r0
 80002e6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80002ea:	3308      	adds	r3, #8
 80002ec:	60fb      	str	r3, [r7, #12]

    /* Toggle LED1 every 200 ms for 5 s */
    while (count > osKernelGetTickCount())
 80002ee:	e005      	b.n	80002fc <LED_Thread1+0x28>
    {
      BSP_LED_Toggle(LED1);
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 f99f 	bl	8000634 <BSP_LED_Toggle>

      osDelay(200);
 80002f6:	20c8      	movs	r0, #200	; 0xc8
 80002f8:	f002 f9ea 	bl	80026d0 <osDelay>
    while (count > osKernelGetTickCount())
 80002fc:	f002 f8b2 	bl	8002464 <osKernelGetTickCount>
 8000300:	4602      	mov	r2, r0
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4293      	cmp	r3, r2
 8000306:	d8f3      	bhi.n	80002f0 <LED_Thread1+0x1c>
    }

    /* Turn off LED1 */
    BSP_LED_Off(LED1);
 8000308:	2000      	movs	r0, #0
 800030a:	f000 f979 	bl	8000600 <BSP_LED_Off>

    /* Suspend Thread 1 */
    OsStatus = osThreadSuspend(THREAD1Handle);
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <LED_Thread1+0x8c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4618      	mov	r0, r3
 8000314:	f002 f974 	bl	8002600 <osThreadSuspend>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <LED_Thread1+0x90>)
 800031e:	601a      	str	r2, [r3, #0]

    count = osKernelGetTickCount() + 5000;
 8000320:	f002 f8a0 	bl	8002464 <osKernelGetTickCount>
 8000324:	4603      	mov	r3, r0
 8000326:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800032a:	3308      	adds	r3, #8
 800032c:	60fb      	str	r3, [r7, #12]

    /* Toggle LED1 every 500 ms for 5 s */
    while (count > osKernelGetTickCount())
 800032e:	e006      	b.n	800033e <LED_Thread1+0x6a>
    {
      BSP_LED_Toggle(LED1);
 8000330:	2000      	movs	r0, #0
 8000332:	f000 f97f 	bl	8000634 <BSP_LED_Toggle>

      osDelay(500);
 8000336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800033a:	f002 f9c9 	bl	80026d0 <osDelay>
    while (count > osKernelGetTickCount())
 800033e:	f002 f891 	bl	8002464 <osKernelGetTickCount>
 8000342:	4602      	mov	r2, r0
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	4293      	cmp	r3, r2
 8000348:	d8f2      	bhi.n	8000330 <LED_Thread1+0x5c>
    }

    /* Resume Thread 2*/
    OsStatus = osThreadResume(THREAD2Handle);
 800034a:	4b07      	ldr	r3, [pc, #28]	; (8000368 <LED_Thread1+0x94>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f002 f98a 	bl	8002668 <osThreadResume>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	4b02      	ldr	r3, [pc, #8]	; (8000364 <LED_Thread1+0x90>)
 800035a:	601a      	str	r2, [r3, #0]
    count = osKernelGetTickCount() + 5000;
 800035c:	e7c0      	b.n	80002e0 <LED_Thread1+0xc>
 800035e:	bf00      	nop
 8000360:	2000003c 	.word	0x2000003c
 8000364:	20000044 	.word	0x20000044
 8000368:	20000040 	.word	0x20000040

0800036c <LED_Thread2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_Thread2 */
void LED_Thread2(void *argument)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  uint32_t count;
  (void) argument;
  /* Infinite loop */
  for (;;)
  {
    count = osKernelGetTickCount() + 10000;
 8000374:	f002 f876 	bl	8002464 <osKernelGetTickCount>
 8000378:	4603      	mov	r3, r0
 800037a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800037e:	3310      	adds	r3, #16
 8000380:	60fb      	str	r3, [r7, #12]

    /* Toggle LED2 every 500 ms for 10 s */
    while (count > osKernelGetTickCount())
 8000382:	e006      	b.n	8000392 <LED_Thread2+0x26>
    {
      BSP_LED_Toggle(LED2);
 8000384:	2001      	movs	r0, #1
 8000386:	f000 f955 	bl	8000634 <BSP_LED_Toggle>

      osDelay(500);
 800038a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800038e:	f002 f99f 	bl	80026d0 <osDelay>
    while (count > osKernelGetTickCount())
 8000392:	f002 f867 	bl	8002464 <osKernelGetTickCount>
 8000396:	4602      	mov	r2, r0
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	4293      	cmp	r3, r2
 800039c:	d8f2      	bhi.n	8000384 <LED_Thread2+0x18>
    }

    /* Turn off LED2 */
    BSP_LED_Off(LED2);
 800039e:	2001      	movs	r0, #1
 80003a0:	f000 f92e 	bl	8000600 <BSP_LED_Off>

    /* Resume Thread 1 */
    OsStatus = osThreadResume(THREAD1Handle);
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <LED_Thread2+0x60>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 f95d 	bl	8002668 <osThreadResume>
 80003ae:	4603      	mov	r3, r0
 80003b0:	461a      	mov	r2, r3
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <LED_Thread2+0x64>)
 80003b4:	601a      	str	r2, [r3, #0]

    /* Suspend Thread 2 */
    OsStatus = osThreadSuspend(THREAD2Handle);
 80003b6:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <LED_Thread2+0x68>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 f920 	bl	8002600 <osThreadSuspend>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	4b02      	ldr	r3, [pc, #8]	; (80003d0 <LED_Thread2+0x64>)
 80003c6:	601a      	str	r2, [r3, #0]
    count = osKernelGetTickCount() + 10000;
 80003c8:	e7d4      	b.n	8000374 <LED_Thread2+0x8>
 80003ca:	bf00      	nop
 80003cc:	2000003c 	.word	0x2000003c
 80003d0:	20000044 	.word	0x20000044
 80003d4:	20000040 	.word	0x20000040

080003d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d101      	bne.n	80003ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ea:	f000 f963 	bl	80006b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40014800 	.word	0x40014800

080003fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800040c:	2200      	movs	r2, #0
 800040e:	210f      	movs	r1, #15
 8000410:	f06f 0001 	mvn.w	r0, #1
 8000414:	f000 fa1f 	bl	8000856 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}

0800041c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000428:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800042a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4313      	orrs	r3, r2
 8000432:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000438:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4013      	ands	r3, r2
 800043e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000440:	68fb      	ldr	r3, [r7, #12]
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b08e      	sub	sp, #56	; 0x38
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800045c:	2300      	movs	r3, #0
 800045e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000462:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000466:	f7ff ffd9 	bl	800041c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800046a:	f107 020c 	add.w	r2, r7, #12
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4611      	mov	r1, r2
 8000474:	4618      	mov	r0, r3
 8000476:	f001 fc29 	bl	8001ccc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800047a:	f001 fc15 	bl	8001ca8 <HAL_RCC_GetPCLK2Freq>
 800047e:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000482:	4a21      	ldr	r2, [pc, #132]	; (8000508 <HAL_InitTick+0xbc>)
 8000484:	fba2 2303 	umull	r2, r3, r2, r3
 8000488:	0c9b      	lsrs	r3, r3, #18
 800048a:	3b01      	subs	r3, #1
 800048c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800048e:	4b1f      	ldr	r3, [pc, #124]	; (800050c <HAL_InitTick+0xc0>)
 8000490:	4a1f      	ldr	r2, [pc, #124]	; (8000510 <HAL_InitTick+0xc4>)
 8000492:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000494:	4b1d      	ldr	r3, [pc, #116]	; (800050c <HAL_InitTick+0xc0>)
 8000496:	f240 32e7 	movw	r2, #999	; 0x3e7
 800049a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <HAL_InitTick+0xc0>)
 800049e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004a0:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	; (800050c <HAL_InitTick+0xc0>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <HAL_InitTick+0xc0>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80004ae:	4817      	ldr	r0, [pc, #92]	; (800050c <HAL_InitTick+0xc0>)
 80004b0:	f001 fcfc 	bl	8001eac <HAL_TIM_Base_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80004ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d11b      	bne.n	80004fa <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80004c2:	4812      	ldr	r0, [pc, #72]	; (800050c <HAL_InitTick+0xc0>)
 80004c4:	f001 fd52 	bl	8001f6c <HAL_TIM_Base_Start_IT>
 80004c8:	4603      	mov	r3, r0
 80004ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80004ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d111      	bne.n	80004fa <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80004d6:	201d      	movs	r0, #29
 80004d8:	f000 f9d7 	bl	800088a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b0f      	cmp	r3, #15
 80004e0:	d808      	bhi.n	80004f4 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80004e2:	2200      	movs	r2, #0
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	201d      	movs	r0, #29
 80004e8:	f000 f9b5 	bl	8000856 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004ec:	4a09      	ldr	r2, [pc, #36]	; (8000514 <HAL_InitTick+0xc8>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6013      	str	r3, [r2, #0]
 80004f2:	e002      	b.n	80004fa <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 80004f4:	2301      	movs	r3, #1
 80004f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
 /* Return function status */
  return status;
 80004fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3738      	adds	r7, #56	; 0x38
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	431bde83 	.word	0x431bde83
 800050c:	20000048 	.word	0x20000048
 8000510:	40014800 	.word	0x40014800
 8000514:	20000010 	.word	0x20000010

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <HardFault_Handler+0x4>

0800052a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <MemManage_Handler+0x4>

08000530 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <BusFault_Handler+0x4>

08000536 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <UsageFault_Handler+0x4>

0800053c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <TIM17_IRQHandler+0x10>)
 800054e:	f001 fd59 	bl	8002004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000048 	.word	0x20000048

0800055c <LL_AHB2_GRP1_EnableClock>:
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff ffd8 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <BSP_LED_Init+0x6c>)
 80005b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80005be:	2302      	movs	r3, #2
 80005c0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <BSP_LED_Init+0x70>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	f107 020c 	add.w	r2, r7, #12
 80005ce:	4611      	mov	r1, r2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f969 	bl	80008a8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4a08      	ldr	r2, [pc, #32]	; (80005fc <BSP_LED_Init+0x70>)
 80005da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <BSP_LED_Init+0x6c>)
 80005e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e6:	2200      	movs	r2, #0
 80005e8:	4619      	mov	r1, r3
 80005ea:	f000 fabd 	bl	8000b68 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	0800521c 	.word	0x0800521c
 80005fc:	20000000 	.word	0x20000000

08000600 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <BSP_LED_Off+0x2c>)
 800060e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <BSP_LED_Off+0x30>)
 8000616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	f000 faa3 	bl	8000b68 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000000 	.word	0x20000000
 8000630:	0800521c 	.word	0x0800521c

08000634 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <BSP_LED_Toggle+0x2c>)
 8000642:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4906      	ldr	r1, [pc, #24]	; (8000664 <BSP_LED_Toggle+0x30>)
 800064a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800064e:	4619      	mov	r1, r3
 8000650:	4610      	mov	r0, r2
 8000652:	f000 faa0 	bl	8000b96 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000000 	.word	0x20000000
 8000664:	0800521c 	.word	0x0800521c

08000668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067e:	2003      	movs	r0, #3
 8000680:	f000 f8de 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000684:	f001 fafc 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8000688:	4603      	mov	r3, r0
 800068a:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <HAL_Init+0x3c>)
 800068c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800068e:	200f      	movs	r0, #15
 8000690:	f7ff fedc 	bl	800044c <HAL_InitTick>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	e001      	b.n	80006a4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006a0:	f7ff feb2 	bl	8000408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000000c 	.word	0x2000000c

080006b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x1c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x20>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a03      	ldr	r2, [pc, #12]	; (80006d4 <HAL_IncTick+0x20>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000014 	.word	0x20000014
 80006d4:	20000094 	.word	0x20000094

080006d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <HAL_GetTick+0x10>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	20000094 	.word	0x20000094

080006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db0b      	blt.n	800077a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 021f 	and.w	r2, r3, #31
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <__NVIC_EnableIRQ+0x34>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	2001      	movs	r0, #1
 8000772:	fa00 f202 	lsl.w	r2, r0, r2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100

08000788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db0a      	blt.n	80007b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	490c      	ldr	r1, [pc, #48]	; (80007d4 <__NVIC_SetPriority+0x4c>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b0:	e00a      	b.n	80007c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4908      	ldr	r1, [pc, #32]	; (80007d8 <__NVIC_SetPriority+0x50>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	3b04      	subs	r3, #4
 80007c0:	0112      	lsls	r2, r2, #4
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	761a      	strb	r2, [r3, #24]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	f1c3 0307 	rsb	r3, r3, #7
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	bf28      	it	cs
 80007fa:	2304      	movcs	r3, #4
 80007fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3304      	adds	r3, #4
 8000802:	2b06      	cmp	r3, #6
 8000804:	d902      	bls.n	800080c <NVIC_EncodePriority+0x30>
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3b03      	subs	r3, #3
 800080a:	e000      	b.n	800080e <NVIC_EncodePriority+0x32>
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	f04f 32ff 	mov.w	r2, #4294967295
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43da      	mvns	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	401a      	ands	r2, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000824:	f04f 31ff 	mov.w	r1, #4294967295
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	43d9      	mvns	r1, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	4313      	orrs	r3, r2
         );
}
 8000836:	4618      	mov	r0, r3
 8000838:	3724      	adds	r7, #36	; 0x24
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff4f 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff66 	bl	8000734 <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ffb4 	bl	80007dc <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff83 	bl	8000788 <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff59 	bl	8000750 <__NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008b6:	e140      	b.n	8000b3a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	2101      	movs	r1, #1
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f000 8132 	beq.w	8000b34 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d005      	beq.n	80008e8 <HAL_GPIO_Init+0x40>
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d130      	bne.n	800094a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	2203      	movs	r2, #3
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68da      	ldr	r2, [r3, #12]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4313      	orrs	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800091e:	2201      	movs	r2, #1
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	091b      	lsrs	r3, r3, #4
 8000934:	f003 0201 	and.w	r2, r3, #1
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f003 0303 	and.w	r3, r3, #3
 8000952:	2b03      	cmp	r3, #3
 8000954:	d017      	beq.n	8000986 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	2203      	movs	r2, #3
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 0303 	and.w	r3, r3, #3
 800098e:	2b02      	cmp	r3, #2
 8000990:	d123      	bne.n	80009da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	08da      	lsrs	r2, r3, #3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3208      	adds	r2, #8
 800099a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800099e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	220f      	movs	r2, #15
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	691a      	ldr	r2, [r3, #16]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f003 0307 	and.w	r3, r3, #7
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	08da      	lsrs	r2, r3, #3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3208      	adds	r2, #8
 80009d4:	6939      	ldr	r1, [r7, #16]
 80009d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	2203      	movs	r2, #3
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f003 0203 	and.w	r2, r3, #3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 808c 	beq.w	8000b34 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a1c:	4a4e      	ldr	r2, [pc, #312]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	2207      	movs	r2, #7
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x1bc>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a44      	ldr	r2, [pc, #272]	; (8000b5c <HAL_GPIO_Init+0x2b4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x1b8>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a43      	ldr	r2, [pc, #268]	; (8000b60 <HAL_GPIO_Init+0x2b8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_GPIO_Init+0x1b4>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e004      	b.n	8000a66 <HAL_GPIO_Init+0x1be>
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	e002      	b.n	8000a66 <HAL_GPIO_Init+0x1be>
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <HAL_GPIO_Init+0x1be>
 8000a64:	2300      	movs	r3, #0
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	f002 0203 	and.w	r2, r2, #3
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	4093      	lsls	r3, r2
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a76:	4938      	ldr	r1, [pc, #224]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a84:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <HAL_GPIO_Init+0x2bc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aa8:	4a2e      	ldr	r2, [pc, #184]	; (8000b64 <HAL_GPIO_Init+0x2bc>)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <HAL_GPIO_Init+0x2bc>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ad2:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <HAL_GPIO_Init+0x2bc>)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <HAL_GPIO_Init+0x2bc>)
 8000ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ade:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000afe:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_GPIO_Init+0x2bc>)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_GPIO_Init+0x2bc>)
 8000b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b0c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_GPIO_Init+0x2bc>)
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	3301      	adds	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	fa22 f303 	lsr.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f47f aeb7 	bne.w	80008b8 <HAL_GPIO_Init+0x10>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	371c      	adds	r7, #28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48000800 	.word	0x48000800
 8000b64:	58000800 	.word	0x58000800

08000b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b78:	787b      	ldrb	r3, [r7, #1]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b84:	e002      	b.n	8000b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ba8:	887a      	ldrh	r2, [r7, #2]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4013      	ands	r3, r2
 8000bae:	041a      	lsls	r2, r3, #16
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	887b      	ldrh	r3, [r7, #2]
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	619a      	str	r2, [r3, #24]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	58000400 	.word	0x58000400

08000be4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_PWREx_GetVoltageRange+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	58000400 	.word	0x58000400

08000bfc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c0c:	d101      	bne.n	8000c12 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	58000400 	.word	0x58000400

08000c20 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000c6a:	d101      	bne.n	8000c70 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8c:	6013      	str	r3, [r2, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000cc4:	d101      	bne.n	8000cca <LL_RCC_HSE_IsReady+0x18>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e000      	b.n	8000ccc <LL_RCC_HSE_IsReady+0x1a>
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d1e:	d101      	bne.n	8000d24 <LL_RCC_HSI_IsReady+0x18>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <LL_RCC_HSI_IsReady+0x1a>
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	061b      	lsls	r3, r3, #24
 8000d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d101      	bne.n	8000d6e <LL_RCC_LSE_IsReady+0x18>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <LL_RCC_LSE_IsReady+0x1a>
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000da8:	f023 0301 	bic.w	r3, r3, #1
 8000dac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d101      	bne.n	8000dd0 <LL_RCC_LSI_IsReady+0x18>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <LL_RCC_LSI_IsReady+0x1a>
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6013      	str	r3, [r2, #0]
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d101      	bne.n	8000e28 <LL_RCC_MSI_IsReady+0x16>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e000      	b.n	8000e2a <LL_RCC_MSI_IsReady+0x18>
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d101      	bne.n	8000e48 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	604b      	str	r3, [r1, #4]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f023 0203 	bic.w	r2, r3, #3
 8000eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	608b      	str	r3, [r1, #8]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	608b      	str	r3, [r1, #8]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000f44:	f023 020f 	bic.w	r2, r3, #15
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f50:	4313      	orrs	r3, r2
 8000f52:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	608b      	str	r3, [r1, #8]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	608b      	str	r3, [r1, #8]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8000fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800100e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800102e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800104a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800105c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800106a:	d101      	bne.n	8001070 <LL_RCC_PLL_IsReady+0x18>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <LL_RCC_PLL_IsReady+0x1a>
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800107e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80010ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80010c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f003 0303 	and.w	r3, r3, #3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80010d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e6:	d101      	bne.n	80010ec <LL_RCC_IsActiveFlag_HPRE+0x18>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80010fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800110a:	d101      	bne.n	8001110 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001122:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112e:	d101      	bne.n	8001134 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001150:	d101      	bne.n	8001156 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800116e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001172:	d101      	bne.n	8001178 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
	...

08001184 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e38b      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001196:	f7ff fe9a 	bl	8000ece <LL_RCC_GetSysClkSource>
 800119a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800119c:	f7ff ff8f 	bl	80010be <LL_RCC_PLL_GetMainSource>
 80011a0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80c9 	beq.w	8001342 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x3e>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	d17b      	bne.n	80012b4 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d178      	bne.n	80012b4 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c2:	f7ff fe26 	bl	8000e12 <LL_RCC_MSI_IsReady>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_OscConfig+0x54>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e36a      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x72>
 80011ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011f4:	e006      	b.n	8001204 <HAL_RCC_OscConfig+0x80>
 80011f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001204:	4293      	cmp	r3, r2
 8001206:	d222      	bcs.n	800124e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fd9b 	bl	8001d48 <RCC_SetFlashLatencyFromMSIRange>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e348      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800121c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001226:	f043 0308 	orr.w	r3, r3, #8
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fe1a 	bl	8000e80 <LL_RCC_MSI_SetCalibTrimming>
 800124c:	e021      	b.n	8001292 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe01 	bl	8000e80 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fd60 	bl	8001d48 <RCC_SetFlashLatencyFromMSIRange>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e30d      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001292:	f000 fcf5 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001296:	4603      	mov	r3, r0
 8001298:	4aa1      	ldr	r2, [pc, #644]	; (8001520 <HAL_RCC_OscConfig+0x39c>)
 800129a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800129c:	4ba1      	ldr	r3, [pc, #644]	; (8001524 <HAL_RCC_OscConfig+0x3a0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f8d3 	bl	800044c <HAL_InitTick>
 80012a6:	4603      	mov	r3, r0
 80012a8:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80012aa:	7cfb      	ldrb	r3, [r7, #19]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d047      	beq.n	8001340 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	e2fc      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d02c      	beq.n	8001316 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012bc:	f7ff fd8d 	bl	8000dda <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fa0a 	bl	80006d8 <HAL_GetTick>
 80012c4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c8:	f7ff fa06 	bl	80006d8 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e2e9      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80012da:	f7ff fd9a 	bl	8000e12 <LL_RCC_MSI_IsReady>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f1      	beq.n	80012c8 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fdb6 	bl	8000e80 <LL_RCC_MSI_SetCalibTrimming>
 8001314:	e015      	b.n	8001342 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001316:	f7ff fd6e 	bl	8000df6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800131a:	f7ff f9dd 	bl	80006d8 <HAL_GetTick>
 800131e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001322:	f7ff f9d9 	bl	80006d8 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e2bc      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001334:	f7ff fd6d 	bl	8000e12 <LL_RCC_MSI_IsReady>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f1      	bne.n	8001322 <HAL_RCC_OscConfig+0x19e>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001340:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d05f      	beq.n	800140e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2b08      	cmp	r3, #8
 8001352:	d005      	beq.n	8001360 <HAL_RCC_OscConfig+0x1dc>
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0c      	cmp	r3, #12
 8001358:	d10d      	bne.n	8001376 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d10a      	bne.n	8001376 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	f7ff fca7 	bl	8000cb2 <LL_RCC_HSE_IsReady>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d050      	beq.n	800140c <HAL_RCC_OscConfig+0x288>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d14c      	bne.n	800140c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e29b      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d102      	bne.n	800139c <HAL_RCC_OscConfig+0x218>
 8001396:	f7ff fc70 	bl	8000c7a <LL_RCC_HSE_Enable>
 800139a:	e00d      	b.n	80013b8 <HAL_RCC_OscConfig+0x234>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80013a4:	d104      	bne.n	80013b0 <HAL_RCC_OscConfig+0x22c>
 80013a6:	f7ff fc3b 	bl	8000c20 <LL_RCC_HSE_EnableTcxo>
 80013aa:	f7ff fc66 	bl	8000c7a <LL_RCC_HSE_Enable>
 80013ae:	e003      	b.n	80013b8 <HAL_RCC_OscConfig+0x234>
 80013b0:	f7ff fc71 	bl	8000c96 <LL_RCC_HSE_Disable>
 80013b4:	f7ff fc42 	bl	8000c3c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d012      	beq.n	80013e6 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff f98a 	bl	80006d8 <HAL_GetTick>
 80013c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff f986 	bl	80006d8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e269      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80013da:	f7ff fc6a 	bl	8000cb2 <LL_RCC_HSE_IsReady>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f1      	beq.n	80013c8 <HAL_RCC_OscConfig+0x244>
 80013e4:	e013      	b.n	800140e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff f977 	bl	80006d8 <HAL_GetTick>
 80013ea:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ee:	f7ff f973 	bl	80006d8 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b64      	cmp	r3, #100	; 0x64
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e256      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001400:	f7ff fc57 	bl	8000cb2 <LL_RCC_HSE_IsReady>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f1      	bne.n	80013ee <HAL_RCC_OscConfig+0x26a>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d04b      	beq.n	80014b2 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d005      	beq.n	800142c <HAL_RCC_OscConfig+0x2a8>
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d113      	bne.n	800144e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d110      	bne.n	800144e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800142c:	f7ff fc6e 	bl	8000d0c <LL_RCC_HSI_IsReady>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x2be>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e235      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fc71 	bl	8000d2e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800144c:	e031      	b.n	80014b2 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d019      	beq.n	800148a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001456:	f7ff fc3d 	bl	8000cd4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145a:	f7ff f93d 	bl	80006d8 <HAL_GetTick>
 800145e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001462:	f7ff f939 	bl	80006d8 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e21c      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001474:	f7ff fc4a 	bl	8000d0c <LL_RCC_HSI_IsReady>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f1      	beq.n	8001462 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fc53 	bl	8000d2e <LL_RCC_HSI_SetCalibTrimming>
 8001488:	e013      	b.n	80014b2 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148a:	f7ff fc31 	bl	8000cf0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff f923 	bl	80006d8 <HAL_GetTick>
 8001492:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff f91f 	bl	80006d8 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e202      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80014a8:	f7ff fc30 	bl	8000d0c <LL_RCC_HSI_IsReady>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f1      	bne.n	8001496 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d06f      	beq.n	800159e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d057      	beq.n	8001576 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ce:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69da      	ldr	r2, [r3, #28]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	429a      	cmp	r2, r3
 80014dc:	d036      	beq.n	800154c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1db      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d018      	beq.n	8001532 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8001500:	f7ff fc4a 	bl	8000d98 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001504:	f7ff f8e8 	bl	80006d8 <HAL_GetTick>
 8001508:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800150a:	e00d      	b.n	8001528 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff f8e4 	bl	80006d8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b11      	cmp	r3, #17
 8001518:	d906      	bls.n	8001528 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1c7      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
 800151e:	bf00      	nop
 8001520:	2000000c 	.word	0x2000000c
 8001524:	20000010 	.word	0x20000010
          while (LL_RCC_LSI_IsReady() != 0U)
 8001528:	f7ff fc46 	bl	8000db8 <LL_RCC_LSI_IsReady>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ec      	bne.n	800150c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153a:	f023 0210 	bic.w	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001546:	4313      	orrs	r3, r2
 8001548:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154c:	f7ff fc14 	bl	8000d78 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff f8c2 	bl	80006d8 <HAL_GetTick>
 8001554:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff f8be 	bl	80006d8 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b11      	cmp	r3, #17
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1a1      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800156a:	f7ff fc25 	bl	8000db8 <LL_RCC_LSI_IsReady>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f1      	beq.n	8001558 <HAL_RCC_OscConfig+0x3d4>
 8001574:	e013      	b.n	800159e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001576:	f7ff fc0f 	bl	8000d98 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157a:	f7ff f8ad 	bl	80006d8 <HAL_GetTick>
 800157e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001582:	f7ff f8a9 	bl	80006d8 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b11      	cmp	r3, #17
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e18c      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001594:	f7ff fc10 	bl	8000db8 <LL_RCC_LSI_IsReady>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f1      	bne.n	8001582 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80d8 	beq.w	800175c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015ac:	f7ff fb26 	bl	8000bfc <LL_PWR_IsEnabledBkUpAccess>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d113      	bne.n	80015de <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80015b6:	f7ff fb07 	bl	8000bc8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7ff f88d 	bl	80006d8 <HAL_GetTick>
 80015be:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7ff f889 	bl	80006d8 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e16c      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015d4:	f7ff fb12 	bl	8000bfc <LL_PWR_IsEnabledBkUpAccess>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f1      	beq.n	80015c2 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d07b      	beq.n	80016de <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b85      	cmp	r3, #133	; 0x85
 80015ec:	d003      	beq.n	80015f6 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d109      	bne.n	800160a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff f865 	bl	80006d8 <HAL_GetTick>
 800160e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff f857 	bl	80006d8 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e138      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800163c:	f7ff fb8b 	bl	8000d56 <LL_RCC_LSE_IsReady>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0ef      	beq.n	8001626 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b81      	cmp	r3, #129	; 0x81
 800164c:	d003      	beq.n	8001656 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b85      	cmp	r3, #133	; 0x85
 8001654:	d121      	bne.n	800169a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7ff f83f 	bl	80006d8 <HAL_GetTick>
 800165a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff f831 	bl	80006d8 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e112      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ec      	beq.n	8001672 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001698:	e060      	b.n	800175c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff f81d 	bl	80006d8 <HAL_GetTick>
 800169e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f80f 	bl	80006d8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0f0      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ec      	bne.n	80016b6 <HAL_RCC_OscConfig+0x532>
 80016dc:	e03e      	b.n	800175c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7fe fffb 	bl	80006d8 <HAL_GetTick>
 80016e2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7fe ffed 	bl	80006d8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	; 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e0ce      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ec      	bne.n	80016fa <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7fe ffda 	bl	80006d8 <HAL_GetTick>
 8001724:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7fe ffcc 	bl	80006d8 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e0ad      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001752:	f7ff fb00 	bl	8000d56 <LL_RCC_LSE_IsReady>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1ef      	bne.n	800173c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80a3 	beq.w	80018ac <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	2b0c      	cmp	r3, #12
 800176a:	d076      	beq.n	800185a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	2b02      	cmp	r3, #2
 8001772:	d14b      	bne.n	800180c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001774:	f7ff fc62 	bl	800103c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7fe ffae 	bl	80006d8 <HAL_GetTick>
 800177c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7fe ffaa 	bl	80006d8 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b0a      	cmp	r3, #10
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e08d      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001792:	f7ff fc61 	bl	8001058 <LL_RCC_PLL_IsReady>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f1      	bne.n	8001780 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	4b45      	ldr	r3, [pc, #276]	; (80018b8 <HAL_RCC_OscConfig+0x734>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017ae:	4311      	orrs	r1, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017b4:	0212      	lsls	r2, r2, #8
 80017b6:	4311      	orrs	r1, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017bc:	4311      	orrs	r1, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017c2:	4311      	orrs	r1, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017c8:	430a      	orrs	r2, r1
 80017ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d2:	f7ff fc25 	bl	8001020 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7fe ff77 	bl	80006d8 <HAL_GetTick>
 80017ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ee:	f7fe ff73 	bl	80006d8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b0a      	cmp	r3, #10
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e056      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001800:	f7ff fc2a 	bl	8001058 <LL_RCC_PLL_IsReady>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f1      	beq.n	80017ee <HAL_RCC_OscConfig+0x66a>
 800180a:	e04f      	b.n	80018ac <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180c:	f7ff fc16 	bl	800103c <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800182a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7fe ff50 	bl	80006d8 <HAL_GetTick>
 8001838:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7fe ff4c 	bl	80006d8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b0a      	cmp	r3, #10
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e02f      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800184e:	f7ff fc03 	bl	8001058 <LL_RCC_PLL_IsReady>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f1      	bne.n	800183c <HAL_RCC_OscConfig+0x6b8>
 8001858:	e028      	b.n	80018ac <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e023      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	429a      	cmp	r2, r3
 800187a:	d115      	bne.n	80018a8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001886:	429a      	cmp	r2, r3
 8001888:	d10e      	bne.n	80018a8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	429a      	cmp	r2, r3
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	11c1808c 	.word	0x11c1808c

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e12c      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b98      	ldr	r3, [pc, #608]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d91b      	bls.n	8001916 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b95      	ldr	r3, [pc, #596]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 0207 	bic.w	r2, r3, #7
 80018e6:	4993      	ldr	r1, [pc, #588]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ee:	f7fe fef3 	bl	80006d8 <HAL_GetTick>
 80018f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80018f6:	f7fe feef 	bl	80006d8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e110      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001908:	4b8a      	ldr	r3, [pc, #552]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d1ef      	bne.n	80018f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d016      	beq.n	8001950 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fadc 	bl	8000ee4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800192c:	f7fe fed4 	bl	80006d8 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001934:	f7fe fed0 	bl	80006d8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e0f1      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001946:	f7ff fbc5 	bl	80010d4 <LL_RCC_IsActiveFlag_HPRE>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f1      	beq.n	8001934 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	2b00      	cmp	r3, #0
 800195a:	d016      	beq.n	800198a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fad2 	bl	8000f0a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001966:	f7fe feb7 	bl	80006d8 <HAL_GetTick>
 800196a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800196e:	f7fe feb3 	bl	80006d8 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0d4      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001980:	f7ff fbb9 	bl	80010f6 <LL_RCC_IsActiveFlag_C2HPRE>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f1      	beq.n	800196e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001992:	2b00      	cmp	r3, #0
 8001994:	d016      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff faca 	bl	8000f34 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019a0:	f7fe fe9a 	bl	80006d8 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019a8:	f7fe fe96 	bl	80006d8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0b7      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80019ba:	f7ff fbae 	bl	800111a <LL_RCC_IsActiveFlag_SHDHPRE>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f1      	beq.n	80019a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d016      	beq.n	80019fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fac3 	bl	8000f60 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019da:	f7fe fe7d 	bl	80006d8 <HAL_GetTick>
 80019de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019e2:	f7fe fe79 	bl	80006d8 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e09a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80019f4:	f7ff fba3 	bl	800113e <LL_RCC_IsActiveFlag_PPRE1>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f1      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d017      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fab8 	bl	8000f86 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a16:	f7fe fe5f 	bl	80006d8 <HAL_GetTick>
 8001a1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a1e:	f7fe fe5b 	bl	80006d8 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e07c      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a30:	f7ff fb96 	bl	8001160 <LL_RCC_IsActiveFlag_PPRE2>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f1      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d043      	beq.n	8001ace <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001a4e:	f7ff f930 	bl	8000cb2 <LL_RCC_HSE_IsReady>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d11e      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e066      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001a64:	f7ff faf8 	bl	8001058 <LL_RCC_PLL_IsReady>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d113      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e05b      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001a7a:	f7ff f9ca 	bl	8000e12 <LL_RCC_MSI_IsReady>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e050      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001a88:	f7ff f940 	bl	8000d0c <LL_RCC_HSI_IsReady>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e049      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fa04 	bl	8000ea8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa0:	f7fe fe1a 	bl	80006d8 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7fe fe16 	bl	80006d8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e035      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	f7ff fa06 	bl	8000ece <LL_RCC_GetSysClkSource>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d1ec      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d21b      	bcs.n	8001b14 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 0207 	bic.w	r2, r3, #7
 8001ae4:	4913      	ldr	r1, [pc, #76]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aec:	f7fe fdf4 	bl	80006d8 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001af4:	f7fe fdf0 	bl	80006d8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e011      	b.n	8001b2a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1ef      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b14:	f000 f8b4 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_RCC_ClockConfig+0x27c>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_RCC_ClockConfig+0x280>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fc92 	bl	800044c <HAL_InitTick>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	58004000 	.word	0x58004000
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	20000010 	.word	0x20000010

08001b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4e:	f7ff f9be 	bl	8000ece <LL_RCC_GetSysClkSource>
 8001b52:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b54:	f7ff fab3 	bl	80010be <LL_RCC_PLL_GetMainSource>
 8001b58:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x2c>
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d139      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d136      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001b6c:	f7ff f961 	bl	8000e32 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d115      	bne.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x62>
 8001b76:	f7ff f95c 	bl	8000e32 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_GetSysClockFreq+0x4e>
 8001b80:	f7ff f967 	bl	8000e52 <LL_RCC_MSI_GetRange>
 8001b84:	4603      	mov	r3, r0
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	e005      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x5a>
 8001b8e:	f7ff f96b 	bl	8000e68 <LL_RCC_MSI_GetRangeAfterStandby>
 8001b92:	4603      	mov	r3, r0
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	4a36      	ldr	r2, [pc, #216]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x134>)
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	e014      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x8c>
 8001ba2:	f7ff f946 	bl	8000e32 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_GetSysClockFreq+0x7a>
 8001bac:	f7ff f951 	bl	8000e52 <LL_RCC_MSI_GetRange>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	e005      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x86>
 8001bba:	f7ff f955 	bl	8000e68 <LL_RCC_MSI_GetRangeAfterStandby>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x134>)
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d115      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bd8:	e012      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e00c      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d109      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001bec:	f7ff f834 	bl	8000c58 <LL_RCC_HSE_IsEnabledDiv2>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e001      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bfe:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c00:	f7ff f965 	bl	8000ece <LL_RCC_GetSysClkSource>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d12f      	bne.n	8001c6a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c0a:	f7ff fa58 	bl	80010be <LL_RCC_PLL_GetMainSource>
 8001c0e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0xde>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d003      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0xe4>
 8001c1c:	e00d      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c20:	60fb      	str	r3, [r7, #12]
        break;
 8001c22:	e00d      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c24:	f7ff f818 	bl	8000c58 <LL_RCC_HSE_IsEnabledDiv2>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c30:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c32:	e005      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c36:	60fb      	str	r3, [r7, #12]
        break;
 8001c38:	e002      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	60fb      	str	r3, [r7, #12]
        break;
 8001c3e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001c40:	f7ff fa1b 	bl	800107a <LL_RCC_PLL_GetN>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	fb03 f402 	mul.w	r4, r3, r2
 8001c4c:	f7ff fa2c 	bl	80010a8 <LL_RCC_PLL_GetDivider>
 8001c50:	4603      	mov	r3, r0
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	3301      	adds	r3, #1
 8001c56:	fbb4 f4f3 	udiv	r4, r4, r3
 8001c5a:	f7ff fa1a 	bl	8001092 <LL_RCC_PLL_GetR>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	0f5b      	lsrs	r3, r3, #29
 8001c62:	3301      	adds	r3, #1
 8001c64:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c68:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001c6a:	697b      	ldr	r3, [r7, #20]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	08005284 	.word	0x08005284
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	01e84800 	.word	0x01e84800

08001c80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b598      	push	{r3, r4, r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c84:	f7ff ff5c 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001c88:	4604      	mov	r4, r0
 8001c8a:	f7ff f98f 	bl	8000fac <LL_RCC_GetAHBPrescaler>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd98      	pop	{r3, r4, r7, pc}
 8001ca4:	08005224 	.word	0x08005224

08001ca8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca8:	b598      	push	{r3, r4, r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001cac:	f7ff ffe8 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	f7ff f9aa 	bl	800100a <LL_RCC_GetAPB2Prescaler>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	0adb      	lsrs	r3, r3, #11
 8001cba:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd98      	pop	{r3, r4, r7, pc}
 8001cc8:	08005264 	.word	0x08005264

08001ccc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d02f      	beq.n	8001d3c <HAL_RCC_GetClockConfig+0x70>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d02c      	beq.n	8001d3c <HAL_RCC_GetClockConfig+0x70>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	224f      	movs	r2, #79	; 0x4f
 8001ce6:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f043 0220 	orr.w	r2, r3, #32
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8001cf4:	f7ff f8eb 	bl	8000ece <LL_RCC_GetSysClkSource>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8001cfe:	f7ff f955 	bl	8000fac <LL_RCC_GetAHBPrescaler>
 8001d02:	4602      	mov	r2, r0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8001d08:	f7ff f974 	bl	8000ff4 <LL_RCC_GetAPB1Prescaler>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8001d12:	f7ff f97a 	bl	800100a <LL_RCC_GetAPB2Prescaler>
 8001d16:	4602      	mov	r2, r0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	611a      	str	r2, [r3, #16]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8001d1c:	f7ff f951 	bl	8000fc2 <LL_C2_RCC_GetAHBPrescaler>
 8001d20:	4602      	mov	r2, r0
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = LL_RCC_GetAHB3Prescaler();
 8001d26:	f7ff f958 	bl	8000fda <LL_RCC_GetAHB3Prescaler>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <HAL_RCC_GetClockConfig+0x78>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0207 	and.w	r2, r3, #7
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	601a      	str	r2, [r3, #0]
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	58004000 	.word	0x58004000

08001d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001d60:	f7ff f93b 	bl	8000fda <LL_RCC_GetAHB3Prescaler>
 8001d64:	4603      	mov	r3, r0
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9c      	lsrs	r4, r3, #18
 8001d84:	f7fe ff2e 	bl	8000be4 <HAL_PWREx_GetVoltageRange>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f000 f80b 	bl	8001da8 <RCC_SetFlashLatency>
 8001d92:	4603      	mov	r3, r0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd90      	pop	{r4, r7, pc}
 8001d9c:	08005284 	.word	0x08005284
 8001da0:	08005224 	.word	0x08005224
 8001da4:	431bde83 	.word	0x431bde83

08001da8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08e      	sub	sp, #56	; 0x38
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001db2:	4a3a      	ldr	r2, [pc, #232]	; (8001e9c <RCC_SetFlashLatency+0xf4>)
 8001db4:	f107 0320 	add.w	r3, r7, #32
 8001db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dbc:	6018      	str	r0, [r3, #0]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001dc2:	4a37      	ldr	r2, [pc, #220]	; (8001ea0 <RCC_SetFlashLatency+0xf8>)
 8001dc4:	f107 0318 	add.w	r3, r7, #24
 8001dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dcc:	6018      	str	r0, [r3, #0]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001dd2:	4a34      	ldr	r2, [pc, #208]	; (8001ea4 <RCC_SetFlashLatency+0xfc>)
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dda:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001dde:	2300      	movs	r3, #0
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de8:	d11b      	bne.n	8001e22 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
 8001dee:	e014      	b.n	8001e1a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	3338      	adds	r3, #56	; 0x38
 8001df6:	443b      	add	r3, r7
 8001df8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d807      	bhi.n	8001e14 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	3338      	adds	r3, #56	; 0x38
 8001e0a:	443b      	add	r3, r7
 8001e0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e12:	e021      	b.n	8001e58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	3301      	adds	r3, #1
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
 8001e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d9e7      	bls.n	8001df0 <RCC_SetFlashLatency+0x48>
 8001e20:	e01a      	b.n	8001e58 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e26:	e014      	b.n	8001e52 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	3338      	adds	r3, #56	; 0x38
 8001e2e:	443b      	add	r3, r7
 8001e30:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001e34:	461a      	mov	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d807      	bhi.n	8001e4c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	3338      	adds	r3, #56	; 0x38
 8001e42:	443b      	add	r3, r7
 8001e44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e4a:	e005      	b.n	8001e58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4e:	3301      	adds	r3, #1
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d9e7      	bls.n	8001e28 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <RCC_SetFlashLatency+0x100>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 0207 	bic.w	r2, r3, #7
 8001e60:	4911      	ldr	r1, [pc, #68]	; (8001ea8 <RCC_SetFlashLatency+0x100>)
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e68:	f7fe fc36 	bl	80006d8 <HAL_GetTick>
 8001e6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e6e:	e008      	b.n	8001e82 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e70:	f7fe fc32 	bl	80006d8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e007      	b.n	8001e92 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <RCC_SetFlashLatency+0x100>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d1ef      	bne.n	8001e70 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3738      	adds	r7, #56	; 0x38
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	080051a0 	.word	0x080051a0
 8001ea0:	080051a8 	.word	0x080051a8
 8001ea4:	080051b0 	.word	0x080051b0
 8001ea8:	58004000 	.word	0x58004000

08001eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e049      	b.n	8001f52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d106      	bne.n	8001ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f841 	bl	8001f5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4610      	mov	r0, r2
 8001eec:	f000 f9ce 	bl	800228c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d001      	beq.n	8001f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e036      	b.n	8001ff2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <HAL_TIM_Base_Start_IT+0x90>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x44>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fae:	d115      	bne.n	8001fdc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_TIM_Base_Start_IT+0x94>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d015      	beq.n	8001fee <HAL_TIM_Base_Start_IT+0x82>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d011      	beq.n	8001fee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fda:	e008      	b.n	8001fee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e000      	b.n	8001ff0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40012c00 	.word	0x40012c00
 8002000:	00010007 	.word	0x00010007

08002004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b02      	cmp	r3, #2
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0202 	mvn.w	r2, #2
 8002030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f904 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8f7 	bl	8002242 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f906 	bl	8002266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b04      	cmp	r3, #4
 800206c:	d122      	bne.n	80020b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0204 	mvn.w	r2, #4
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8da 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8cd 	bl	8002242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f8dc 	bl	8002266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0208 	mvn.w	r2, #8
 80020d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2204      	movs	r2, #4
 80020de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8b0 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8a3 	bl	8002242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f8b2 	bl	8002266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b10      	cmp	r3, #16
 8002114:	d122      	bne.n	800215c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b10      	cmp	r3, #16
 8002122:	d11b      	bne.n	800215c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0210 	mvn.w	r2, #16
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2208      	movs	r2, #8
 8002132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f886 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f879 	bl	8002242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f888 	bl	8002266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10e      	bne.n	8002188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d107      	bne.n	8002188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0201 	mvn.w	r2, #1
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe f928 	bl	80003d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b80      	cmp	r3, #128	; 0x80
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b80      	cmp	r3, #128	; 0x80
 80021a2:	d107      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8d7 	bl	8002362 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c2:	d10e      	bne.n	80021e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	2b80      	cmp	r3, #128	; 0x80
 80021d0:	d107      	bne.n	80021e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f8c9 	bl	8002374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d10e      	bne.n	800220e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b40      	cmp	r3, #64	; 0x40
 80021fc:	d107      	bne.n	800220e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f835 	bl	8002278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b20      	cmp	r3, #32
 800221a:	d10e      	bne.n	800223a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b20      	cmp	r3, #32
 8002228:	d107      	bne.n	800223a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f06f 0220 	mvn.w	r2, #32
 8002232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f88b 	bl	8002350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
	...

0800228c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a29      	ldr	r2, [pc, #164]	; (8002344 <TIM_Base_SetConfig+0xb8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_Base_SetConfig+0x20>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022aa:	d108      	bne.n	80022be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a20      	ldr	r2, [pc, #128]	; (8002344 <TIM_Base_SetConfig+0xb8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00b      	beq.n	80022de <TIM_Base_SetConfig+0x52>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d007      	beq.n	80022de <TIM_Base_SetConfig+0x52>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <TIM_Base_SetConfig+0xbc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d003      	beq.n	80022de <TIM_Base_SetConfig+0x52>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1c      	ldr	r2, [pc, #112]	; (800234c <TIM_Base_SetConfig+0xc0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d108      	bne.n	80022f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <TIM_Base_SetConfig+0xb8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <TIM_Base_SetConfig+0xa0>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <TIM_Base_SetConfig+0xbc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_Base_SetConfig+0xa0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <TIM_Base_SetConfig+0xc0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d103      	bne.n	8002334 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	615a      	str	r2, [r3, #20]
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40014400 	.word	0x40014400
 800234c:	40014800 	.word	0x40014800

08002350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
	...

08002394 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800239a:	f3ef 8305 	mrs	r3, IPSR
 800239e:	60bb      	str	r3, [r7, #8]
  return(result);
 80023a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10f      	bne.n	80023c6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a6:	f3ef 8310 	mrs	r3, PRIMASK
 80023aa:	607b      	str	r3, [r7, #4]
  return(result);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023b2:	f3ef 8311 	mrs	r3, BASEPRI
 80023b6:	603b      	str	r3, [r7, #0]
  return(result);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <osKernelInitialize+0x3a>
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <osKernelInitialize+0x60>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d103      	bne.n	80023ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80023c6:	f06f 0305 	mvn.w	r3, #5
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e00c      	b.n	80023e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <osKernelInitialize+0x60>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <osKernelInitialize+0x60>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e002      	b.n	80023e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80023e8:	68fb      	ldr	r3, [r7, #12]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	20000098 	.word	0x20000098

080023f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023fe:	f3ef 8305 	mrs	r3, IPSR
 8002402:	60bb      	str	r3, [r7, #8]
  return(result);
 8002404:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800240a:	f3ef 8310 	mrs	r3, PRIMASK
 800240e:	607b      	str	r3, [r7, #4]
  return(result);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002416:	f3ef 8311 	mrs	r3, BASEPRI
 800241a:	603b      	str	r3, [r7, #0]
  return(result);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <osKernelStart+0x3a>
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <osKernelStart+0x68>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d103      	bne.n	8002432 <osKernelStart+0x3a>
    stat = osErrorISR;
 800242a:	f06f 0305 	mvn.w	r3, #5
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e010      	b.n	8002454 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <osKernelStart+0x68>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d109      	bne.n	800244e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800243a:	f7ff ffa4 	bl	8002386 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <osKernelStart+0x68>)
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002444:	f001 fdda 	bl	8003ffc <vTaskStartScheduler>
      stat = osOK;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	e002      	b.n	8002454 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002454:	68fb      	ldr	r3, [r7, #12]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000098 	.word	0x20000098

08002464 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800246a:	f3ef 8305 	mrs	r3, IPSR
 800246e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002470:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002476:	f3ef 8310 	mrs	r3, PRIMASK
 800247a:	607b      	str	r3, [r7, #4]
  return(result);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002482:	f3ef 8311 	mrs	r3, BASEPRI
 8002486:	603b      	str	r3, [r7, #0]
  return(result);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <osKernelGetTickCount+0x3a>
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <osKernelGetTickCount+0x4c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d103      	bne.n	800249e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8002496:	f001 fed1 	bl	800423c <xTaskGetTickCountFromISR>
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	e002      	b.n	80024a4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800249e:	f001 febf 	bl	8004220 <xTaskGetTickCount>
 80024a2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80024a4:	68fb      	ldr	r3, [r7, #12]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000098 	.word	0x20000098

080024b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b090      	sub	sp, #64	; 0x40
 80024b8:	af04      	add	r7, sp, #16
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024c4:	f3ef 8305 	mrs	r3, IPSR
 80024c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80024ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 808f 	bne.w	80025f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024d2:	f3ef 8310 	mrs	r3, PRIMASK
 80024d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d105      	bne.n	80024ea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024de:	f3ef 8311 	mrs	r3, BASEPRI
 80024e2:	617b      	str	r3, [r7, #20]
  return(result);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <osThreadNew+0x3e>
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <osThreadNew+0x148>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d07e      	beq.n	80025f0 <osThreadNew+0x13c>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d07b      	beq.n	80025f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80024fc:	2318      	movs	r3, #24
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d045      	beq.n	800259c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <osThreadNew+0x6a>
        name = attr->name;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <osThreadNew+0x90>
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	2b38      	cmp	r3, #56	; 0x38
 8002536:	d805      	bhi.n	8002544 <osThreadNew+0x90>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <osThreadNew+0x94>
        return (NULL);
 8002544:	2300      	movs	r3, #0
 8002546:	e054      	b.n	80025f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <osThreadNew+0xca>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b5b      	cmp	r3, #91	; 0x5b
 8002566:	d90a      	bls.n	800257e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <osThreadNew+0xca>
        mem = 1;
 8002578:	2301      	movs	r3, #1
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	e010      	b.n	80025a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <osThreadNew+0xec>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <osThreadNew+0xec>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d104      	bne.n	80025a0 <osThreadNew+0xec>
          mem = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
 800259a:	e001      	b.n	80025a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d110      	bne.n	80025c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025ae:	9202      	str	r2, [sp, #8]
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f001 fa43 	bl	8003a48 <xTaskCreateStatic>
 80025c2:	4603      	mov	r3, r0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	e013      	b.n	80025f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d110      	bne.n	80025f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	f107 0310 	add.w	r3, r7, #16
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f001 fa8e 	bl	8003b02 <xTaskCreate>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d001      	beq.n	80025f0 <osThreadNew+0x13c>
          hTask = NULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025f0:	693b      	ldr	r3, [r7, #16]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3730      	adds	r7, #48	; 0x30
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000098 	.word	0x20000098

08002600 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260c:	f3ef 8305 	mrs	r3, IPSR
 8002610:	617b      	str	r3, [r7, #20]
  return(result);
 8002612:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10f      	bne.n	8002638 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002618:	f3ef 8310 	mrs	r3, PRIMASK
 800261c:	613b      	str	r3, [r7, #16]
  return(result);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002624:	f3ef 8311 	mrs	r3, BASEPRI
 8002628:	60fb      	str	r3, [r7, #12]
  return(result);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <osThreadSuspend+0x40>
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <osThreadSuspend+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d103      	bne.n	8002640 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8002638:	f06f 0305 	mvn.w	r3, #5
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e00b      	b.n	8002658 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d103      	bne.n	800264e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8002646:	f06f 0303 	mvn.w	r3, #3
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	e004      	b.n	8002658 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8002652:	69b8      	ldr	r0, [r7, #24]
 8002654:	f001 fbce 	bl	8003df4 <vTaskSuspend>
  }

  return (stat);
 8002658:	69fb      	ldr	r3, [r7, #28]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000098 	.word	0x20000098

08002668 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002674:	f3ef 8305 	mrs	r3, IPSR
 8002678:	617b      	str	r3, [r7, #20]
  return(result);
 800267a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10f      	bne.n	80026a0 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002680:	f3ef 8310 	mrs	r3, PRIMASK
 8002684:	613b      	str	r3, [r7, #16]
  return(result);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800268c:	f3ef 8311 	mrs	r3, BASEPRI
 8002690:	60fb      	str	r3, [r7, #12]
  return(result);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <osThreadResume+0x40>
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <osThreadResume+0x64>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d103      	bne.n	80026a8 <osThreadResume+0x40>
    stat = osErrorISR;
 80026a0:	f06f 0305 	mvn.w	r3, #5
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e00b      	b.n	80026c0 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <osThreadResume+0x4e>
    stat = osErrorParameter;
 80026ae:	f06f 0303 	mvn.w	r3, #3
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	e004      	b.n	80026c0 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 80026ba:	69b8      	ldr	r0, [r7, #24]
 80026bc:	f001 fc40 	bl	8003f40 <vTaskResume>
  }

  return (stat);
 80026c0:	69fb      	ldr	r3, [r7, #28]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000098 	.word	0x20000098

080026d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026d8:	f3ef 8305 	mrs	r3, IPSR
 80026dc:	613b      	str	r3, [r7, #16]
  return(result);
 80026de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10f      	bne.n	8002704 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e4:	f3ef 8310 	mrs	r3, PRIMASK
 80026e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026f0:	f3ef 8311 	mrs	r3, BASEPRI
 80026f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <osDelay+0x3c>
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <osDelay+0x58>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d103      	bne.n	800270c <osDelay+0x3c>
    stat = osErrorISR;
 8002704:	f06f 0305 	mvn.w	r3, #5
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e007      	b.n	800271c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f001 fb38 	bl	8003d8c <vTaskDelay>
    }
  }

  return (stat);
 800271c:	697b      	ldr	r3, [r7, #20]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000098 	.word	0x20000098

0800272c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a06      	ldr	r2, [pc, #24]	; (8002754 <vApplicationGetIdleTaskMemory+0x28>)
 800273c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	4a05      	ldr	r2, [pc, #20]	; (8002758 <vApplicationGetIdleTaskMemory+0x2c>)
 8002742:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	601a      	str	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	2000009c 	.word	0x2000009c
 8002758:	200000f8 	.word	0x200000f8

0800275c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <vApplicationGetTimerTaskMemory+0x2c>)
 800276c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4a06      	ldr	r2, [pc, #24]	; (800278c <vApplicationGetTimerTaskMemory+0x30>)
 8002772:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277a:	601a      	str	r2, [r3, #0]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	200002f8 	.word	0x200002f8
 800278c:	20000354 	.word	0x20000354

08002790 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800279c:	f001 fc94 	bl	80040c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80027a0:	4b58      	ldr	r3, [pc, #352]	; (8002904 <pvPortMalloc+0x174>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80027a8:	f000 f910 	bl	80029cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80027ac:	4b56      	ldr	r3, [pc, #344]	; (8002908 <pvPortMalloc+0x178>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f040 808e 	bne.w	80028d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01d      	beq.n	80027fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80027c0:	2208      	movs	r2, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d014      	beq.n	80027fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f023 0307 	bic.w	r3, r3, #7
 80027d8:	3308      	adds	r3, #8
 80027da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d069      	beq.n	80028d6 <pvPortMalloc+0x146>
 8002802:	4b42      	ldr	r3, [pc, #264]	; (800290c <pvPortMalloc+0x17c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d864      	bhi.n	80028d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800280c:	4b40      	ldr	r3, [pc, #256]	; (8002910 <pvPortMalloc+0x180>)
 800280e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002810:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <pvPortMalloc+0x180>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002816:	e004      	b.n	8002822 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	d903      	bls.n	8002834 <pvPortMalloc+0xa4>
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f1      	bne.n	8002818 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002834:	4b33      	ldr	r3, [pc, #204]	; (8002904 <pvPortMalloc+0x174>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283a:	429a      	cmp	r2, r3
 800283c:	d04b      	beq.n	80028d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2208      	movs	r2, #8
 8002844:	4413      	add	r3, r2
 8002846:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	1ad2      	subs	r2, r2, r3
 8002858:	2308      	movs	r3, #8
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	429a      	cmp	r2, r3
 800285e:	d91f      	bls.n	80028a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <pvPortMalloc+0xf8>
	__asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	613b      	str	r3, [r7, #16]
}
 8002884:	bf00      	nop
 8002886:	e7fe      	b.n	8002886 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	1ad2      	subs	r2, r2, r3
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800289a:	69b8      	ldr	r0, [r7, #24]
 800289c:	f000 f8f8 	bl	8002a90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <pvPortMalloc+0x17c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <pvPortMalloc+0x17c>)
 80028ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <pvPortMalloc+0x17c>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <pvPortMalloc+0x184>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d203      	bcs.n	80028c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <pvPortMalloc+0x17c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a15      	ldr	r2, [pc, #84]	; (8002914 <pvPortMalloc+0x184>)
 80028c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <pvPortMalloc+0x178>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80028d6:	f001 fc05 	bl	80040e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <pvPortMalloc+0x16a>
	__asm volatile
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	60fb      	str	r3, [r7, #12]
}
 80028f6:	bf00      	nop
 80028f8:	e7fe      	b.n	80028f8 <pvPortMalloc+0x168>
	return pvReturn;
 80028fa:	69fb      	ldr	r3, [r7, #28]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000175c 	.word	0x2000175c
 8002908:	20001768 	.word	0x20001768
 800290c:	20001760 	.word	0x20001760
 8002910:	20001754 	.word	0x20001754
 8002914:	20001764 	.word	0x20001764

08002918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d048      	beq.n	80029bc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800292a:	2308      	movs	r3, #8
 800292c:	425b      	negs	r3, r3
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4413      	add	r3, r2
 8002932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <vPortFree+0xac>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <vPortFree+0x44>
	__asm volatile
 8002946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294a:	f383 8811 	msr	BASEPRI, r3
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	60fb      	str	r3, [r7, #12]
}
 8002958:	bf00      	nop
 800295a:	e7fe      	b.n	800295a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <vPortFree+0x62>
	__asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	60bb      	str	r3, [r7, #8]
}
 8002976:	bf00      	nop
 8002978:	e7fe      	b.n	8002978 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <vPortFree+0xac>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d019      	beq.n	80029bc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d115      	bne.n	80029bc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <vPortFree+0xac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80029a0:	f001 fb92 	bl	80040c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <vPortFree+0xb0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <vPortFree+0xb0>)
 80029b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80029b2:	6938      	ldr	r0, [r7, #16]
 80029b4:	f000 f86c 	bl	8002a90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80029b8:	f001 fb94 	bl	80040e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20001768 	.word	0x20001768
 80029c8:	20001760 	.word	0x20001760

080029cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <prvHeapInit+0xac>)
 80029da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3307      	adds	r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0307 	bic.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <prvHeapInit+0xac>)
 80029fc:	4413      	add	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a04:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <prvHeapInit+0xb0>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <prvHeapInit+0xb0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4413      	add	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a18:	2208      	movs	r2, #8
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0307 	bic.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <prvHeapInit+0xb4>)
 8002a2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <prvHeapInit+0xb4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <prvHeapInit+0xb4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <prvHeapInit+0xb4>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <prvHeapInit+0xb8>)
 8002a5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <prvHeapInit+0xbc>)
 8002a62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <prvHeapInit+0xc0>)
 8002a66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000754 	.word	0x20000754
 8002a7c:	20001754 	.word	0x20001754
 8002a80:	2000175c 	.word	0x2000175c
 8002a84:	20001764 	.word	0x20001764
 8002a88:	20001760 	.word	0x20001760
 8002a8c:	20001768 	.word	0x20001768

08002a90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <prvInsertBlockIntoFreeList+0xa8>)
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	e002      	b.n	8002aa4 <prvInsertBlockIntoFreeList+0x14>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d8f7      	bhi.n	8002a9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4413      	add	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d108      	bne.n	8002ad2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	441a      	add	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	441a      	add	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d118      	bne.n	8002b18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <prvInsertBlockIntoFreeList+0xac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d00d      	beq.n	8002b0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e008      	b.n	8002b20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <prvInsertBlockIntoFreeList+0xac>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e003      	b.n	8002b20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d002      	beq.n	8002b2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	20001754 	.word	0x20001754
 8002b3c:	2000175c 	.word	0x2000175c

08002b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f103 0208 	add.w	r2, r3, #8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f103 0208 	add.w	r2, r3, #8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f103 0208 	add.w	r2, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d103      	bne.n	8002bfc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e00c      	b.n	8002c16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3308      	adds	r3, #8
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e002      	b.n	8002c0a <vListInsert+0x2e>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d2f6      	bcs.n	8002c04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	601a      	str	r2, [r3, #0]
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6892      	ldr	r2, [r2, #8]
 8002c62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6852      	ldr	r2, [r2, #4]
 8002c6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d103      	bne.n	8002c80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1e5a      	subs	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
	...

08002ca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3b04      	subs	r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f023 0201 	bic.w	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3b04      	subs	r3, #4
 8002cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002cd0:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <pxPortInitialiseStack+0x54>)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3b14      	subs	r3, #20
 8002cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	3b20      	subs	r3, #32
 8002ce6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	08002cf9 	.word	0x08002cf9

08002cf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <prvTaskExitError+0x54>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d00a      	beq.n	8002d22 <prvTaskExitError+0x2a>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	60fb      	str	r3, [r7, #12]
}
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <prvTaskExitError+0x28>
	__asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	60bb      	str	r3, [r7, #8]
}
 8002d34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002d36:	bf00      	nop
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0fc      	beq.n	8002d38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000018 	.word	0x20000018

08002d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <pxCurrentTCBConst2>)
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	6808      	ldr	r0, [r1, #0]
 8002d56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d5a:	f380 8809 	msr	PSP, r0
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	f380 8811 	msr	BASEPRI, r0
 8002d6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002d6e:	4770      	bx	lr

08002d70 <pxCurrentTCBConst2>:
 8002d70:	200017b4 	.word	0x200017b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop

08002d78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002d78:	4806      	ldr	r0, [pc, #24]	; (8002d94 <prvPortStartFirstTask+0x1c>)
 8002d7a:	6800      	ldr	r0, [r0, #0]
 8002d7c:	6800      	ldr	r0, [r0, #0]
 8002d7e:	f380 8808 	msr	MSP, r0
 8002d82:	b662      	cpsie	i
 8002d84:	b661      	cpsie	f
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	df00      	svc	0
 8002d90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d92:	bf00      	nop
 8002d94:	e000ed08 	.word	0xe000ed08

08002d98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d9e:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <xPortStartScheduler+0xd0>)
 8002da0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <xPortStartScheduler+0xd4>)
 8002dc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <xPortStartScheduler+0xd8>)
 8002dc8:	2207      	movs	r2, #7
 8002dca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dcc:	e009      	b.n	8002de2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002dce:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <xPortStartScheduler+0xd8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <xPortStartScheduler+0xd8>)
 8002dd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dea:	2b80      	cmp	r3, #128	; 0x80
 8002dec:	d0ef      	beq.n	8002dce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <xPortStartScheduler+0xd8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f1c3 0307 	rsb	r3, r3, #7
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d00a      	beq.n	8002e10 <xPortStartScheduler+0x78>
	__asm volatile
 8002dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfe:	f383 8811 	msr	BASEPRI, r3
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	60bb      	str	r3, [r7, #8]
}
 8002e0c:	bf00      	nop
 8002e0e:	e7fe      	b.n	8002e0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <xPortStartScheduler+0xd8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <xPortStartScheduler+0xd8>)
 8002e18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <xPortStartScheduler+0xd8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e22:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <xPortStartScheduler+0xd8>)
 8002e24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <xPortStartScheduler+0xdc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a10      	ldr	r2, [pc, #64]	; (8002e74 <xPortStartScheduler+0xdc>)
 8002e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <xPortStartScheduler+0xdc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <xPortStartScheduler+0xdc>)
 8002e40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e46:	f000 f8b9 	bl	8002fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <xPortStartScheduler+0xe0>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002e50:	f7ff ff92 	bl	8002d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002e54:	f001 fabe 	bl	80043d4 <vTaskSwitchContext>
	prvTaskExitError();
 8002e58:	f7ff ff4e 	bl	8002cf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	e000e400 	.word	0xe000e400
 8002e6c:	2000176c 	.word	0x2000176c
 8002e70:	20001770 	.word	0x20001770
 8002e74:	e000ed20 	.word	0xe000ed20
 8002e78:	20000018 	.word	0x20000018

08002e7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
	__asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	607b      	str	r3, [r7, #4]
}
 8002e94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <vPortEnterCritical+0x58>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <vPortEnterCritical+0x58>)
 8002e9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <vPortEnterCritical+0x58>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d10f      	bne.n	8002ec8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <vPortEnterCritical+0x5c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <vPortEnterCritical+0x4c>
	__asm volatile
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	603b      	str	r3, [r7, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	e7fe      	b.n	8002ec6 <vPortEnterCritical+0x4a>
	}
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000018 	.word	0x20000018
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <vPortExitCritical+0x4c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <vPortExitCritical+0x24>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	607b      	str	r3, [r7, #4]
}
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <vPortExitCritical+0x4c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	4a08      	ldr	r2, [pc, #32]	; (8002f28 <vPortExitCritical+0x4c>)
 8002f08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <vPortExitCritical+0x4c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <vPortExitCritical+0x42>
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	20000018 	.word	0x20000018
 8002f2c:	00000000 	.word	0x00000000

08002f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f30:	f3ef 8009 	mrs	r0, PSP
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <pxCurrentTCBConst>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f40:	6010      	str	r0, [r2, #0]
 8002f42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002f46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f4a:	f380 8811 	msr	BASEPRI, r0
 8002f4e:	f001 fa41 	bl	80043d4 <vTaskSwitchContext>
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f380 8811 	msr	BASEPRI, r0
 8002f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	6808      	ldr	r0, [r1, #0]
 8002f62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f66:	f380 8809 	msr	PSP, r0
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	4770      	bx	lr

08002f70 <pxCurrentTCBConst>:
 8002f70:	200017b4 	.word	0x200017b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop

08002f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	607b      	str	r3, [r7, #4]
}
 8002f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002f92:	f001 f965 	bl	8004260 <xTaskIncrementTick>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <SysTick_Handler+0x40>)
 8002f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f383 8811 	msr	BASEPRI, r3
}
 8002fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <vPortSetupTimerInterrupt+0x30>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <vPortSetupTimerInterrupt+0x34>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <vPortSetupTimerInterrupt+0x38>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <vPortSetupTimerInterrupt+0x3c>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <vPortSetupTimerInterrupt+0x40>)
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fde:	4b03      	ldr	r3, [pc, #12]	; (8002fec <vPortSetupTimerInterrupt+0x30>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	601a      	str	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	e000e010 	.word	0xe000e010
 8002ff0:	e000e018 	.word	0xe000e018
 8002ff4:	2000000c 	.word	0x2000000c
 8002ff8:	10624dd3 	.word	0x10624dd3
 8002ffc:	e000e014 	.word	0xe000e014

08003000 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003006:	f3ef 8305 	mrs	r3, IPSR
 800300a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b0f      	cmp	r3, #15
 8003010:	d914      	bls.n	800303c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003012:	4a16      	ldr	r2, [pc, #88]	; (800306c <vPortValidateInterruptPriority+0x6c>)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800301c:	4b14      	ldr	r3, [pc, #80]	; (8003070 <vPortValidateInterruptPriority+0x70>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	7afa      	ldrb	r2, [r7, #11]
 8003022:	429a      	cmp	r2, r3
 8003024:	d20a      	bcs.n	800303c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	607b      	str	r3, [r7, #4]
}
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <vPortValidateInterruptPriority+0x74>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <vPortValidateInterruptPriority+0x78>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d90a      	bls.n	8003062 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	603b      	str	r3, [r7, #0]
}
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <vPortValidateInterruptPriority+0x60>
	}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	e000e3f0 	.word	0xe000e3f0
 8003070:	2000176c 	.word	0x2000176c
 8003074:	e000ed0c 	.word	0xe000ed0c
 8003078:	20001770 	.word	0x20001770

0800307c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <xQueueGenericReset+0x2a>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	60bb      	str	r3, [r7, #8]
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030a6:	f7ff fee9 	bl	8002e7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	441a      	add	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	3b01      	subs	r3, #1
 80030d8:	68f9      	ldr	r1, [r7, #12]
 80030da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	441a      	add	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	22ff      	movs	r2, #255	; 0xff
 80030ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	22ff      	movs	r2, #255	; 0xff
 80030f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d114      	bne.n	8003126 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01a      	beq.n	800313a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3310      	adds	r3, #16
 8003108:	4618      	mov	r0, r3
 800310a:	f001 fa0f 	bl	800452c <xTaskRemoveFromEventList>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d012      	beq.n	800313a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <xQueueGenericReset+0xcc>)
 8003116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	e009      	b.n	800313a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3310      	adds	r3, #16
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fd08 	bl	8002b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3324      	adds	r3, #36	; 0x24
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fd03 	bl	8002b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800313a:	f7ff fecf 	bl	8002edc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	e000ed04 	.word	0xe000ed04

0800314c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08e      	sub	sp, #56	; 0x38
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003172:	bf00      	nop
 8003174:	e7fe      	b.n	8003174 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <xQueueGenericCreateStatic+0x52>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <xQueueGenericCreateStatic+0x56>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <xQueueGenericCreateStatic+0x58>
 80031a2:	2300      	movs	r3, #0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10a      	bne.n	80031be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	623b      	str	r3, [r7, #32]
}
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <xQueueGenericCreateStatic+0x7e>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <xQueueGenericCreateStatic+0x82>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <xQueueGenericCreateStatic+0x84>
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	61fb      	str	r3, [r7, #28]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031ea:	2350      	movs	r3, #80	; 0x50
 80031ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b50      	cmp	r3, #80	; 0x50
 80031f2:	d00a      	beq.n	800320a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	61bb      	str	r3, [r7, #24]
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800320a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00d      	beq.n	8003232 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800321e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f805 	bl	800323c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003234:	4618      	mov	r0, r3
 8003236:	3730      	adds	r7, #48	; 0x30
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d103      	bne.n	8003258 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e002      	b.n	800325e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800326a:	2101      	movs	r1, #1
 800326c:	69b8      	ldr	r0, [r7, #24]
 800326e:	f7ff ff05 	bl	800307c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08e      	sub	sp, #56	; 0x38
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003292:	2300      	movs	r3, #0
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <xQueueGenericSend+0x32>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032b2:	bf00      	nop
 80032b4:	e7fe      	b.n	80032b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <xQueueGenericSend+0x40>
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <xQueueGenericSend+0x44>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <xQueueGenericSend+0x46>
 80032c8:	2300      	movs	r3, #0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <xQueueGenericSend+0x60>
	__asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032e0:	bf00      	nop
 80032e2:	e7fe      	b.n	80032e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d103      	bne.n	80032f2 <xQueueGenericSend+0x6e>
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <xQueueGenericSend+0x72>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <xQueueGenericSend+0x74>
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <xQueueGenericSend+0x8e>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	623b      	str	r3, [r7, #32]
}
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003312:	f001 fac9 	bl	80048a8 <xTaskGetSchedulerState>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <xQueueGenericSend+0x9e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <xQueueGenericSend+0xa2>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <xQueueGenericSend+0xa4>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <xQueueGenericSend+0xbe>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	61fb      	str	r3, [r7, #28]
}
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003342:	f7ff fd9b 	bl	8002e7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <xQueueGenericSend+0xd4>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d129      	bne.n	80033ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800335e:	f000 fa07 	bl	8003770 <prvCopyDataToQueue>
 8003362:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	2b00      	cmp	r3, #0
 800336a:	d010      	beq.n	800338e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	3324      	adds	r3, #36	; 0x24
 8003370:	4618      	mov	r0, r3
 8003372:	f001 f8db 	bl	800452c <xTaskRemoveFromEventList>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800337c:	4b3f      	ldr	r3, [pc, #252]	; (800347c <xQueueGenericSend+0x1f8>)
 800337e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	e00a      	b.n	80033a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003394:	4b39      	ldr	r3, [pc, #228]	; (800347c <xQueueGenericSend+0x1f8>)
 8003396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80033a4:	f7ff fd9a 	bl	8002edc <vPortExitCritical>
				return pdPASS;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e063      	b.n	8003474 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d103      	bne.n	80033ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033b2:	f7ff fd93 	bl	8002edc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e05c      	b.n	8003474 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	4618      	mov	r0, r3
 80033c6:	f001 f915 	bl	80045f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033ca:	2301      	movs	r3, #1
 80033cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033ce:	f7ff fd85 	bl	8002edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033d2:	f000 fe79 	bl	80040c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033d6:	f7ff fd51 	bl	8002e7c <vPortEnterCritical>
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033e0:	b25b      	sxtb	r3, r3
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d103      	bne.n	80033f0 <xQueueGenericSend+0x16c>
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033f6:	b25b      	sxtb	r3, r3
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d103      	bne.n	8003406 <xQueueGenericSend+0x182>
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003406:	f7ff fd69 	bl	8002edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800340a:	1d3a      	adds	r2, r7, #4
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f001 f904 	bl	8004620 <xTaskCheckForTimeOut>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d124      	bne.n	8003468 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800341e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003420:	f000 fa9e 	bl	8003960 <prvIsQueueFull>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d018      	beq.n	800345c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	3310      	adds	r3, #16
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f001 f82a 	bl	800448c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800343a:	f000 fa29 	bl	8003890 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800343e:	f000 fe51 	bl	80040e4 <xTaskResumeAll>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	f47f af7c 	bne.w	8003342 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800344a:	4b0c      	ldr	r3, [pc, #48]	; (800347c <xQueueGenericSend+0x1f8>)
 800344c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	e772      	b.n	8003342 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800345c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800345e:	f000 fa17 	bl	8003890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003462:	f000 fe3f 	bl	80040e4 <xTaskResumeAll>
 8003466:	e76c      	b.n	8003342 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800346a:	f000 fa11 	bl	8003890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800346e:	f000 fe39 	bl	80040e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003472:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003474:	4618      	mov	r0, r3
 8003476:	3738      	adds	r7, #56	; 0x38
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	e000ed04 	.word	0xe000ed04

08003480 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08e      	sub	sp, #56	; 0x38
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <xQueueGenericSendFromISR+0x3c>
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <xQueueGenericSendFromISR+0x40>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <xQueueGenericSendFromISR+0x42>
 80034c0:	2300      	movs	r3, #0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	623b      	str	r3, [r7, #32]
}
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d103      	bne.n	80034ea <xQueueGenericSendFromISR+0x6a>
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <xQueueGenericSendFromISR+0x6e>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <xQueueGenericSendFromISR+0x70>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	61fb      	str	r3, [r7, #28]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800350a:	f7ff fd79 	bl	8003000 <vPortValidateInterruptPriority>
	__asm volatile
 800350e:	f3ef 8211 	mrs	r2, BASEPRI
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	61ba      	str	r2, [r7, #24]
 8003524:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003526:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <xQueueGenericSendFromISR+0xbc>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d12c      	bne.n	8003596 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800354c:	f000 f910 	bl	8003770 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003550:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d112      	bne.n	8003580 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	3324      	adds	r3, #36	; 0x24
 8003566:	4618      	mov	r0, r3
 8003568:	f000 ffe0 	bl	800452c <xTaskRemoveFromEventList>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00e      	beq.n	8003590 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e007      	b.n	8003590 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003584:	3301      	adds	r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	b25a      	sxtb	r2, r3
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003590:	2301      	movs	r3, #1
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003594:	e001      	b.n	800359a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003596:	2300      	movs	r3, #0
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f383 8811 	msr	BASEPRI, r3
}
 80035a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3738      	adds	r7, #56	; 0x38
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08c      	sub	sp, #48	; 0x30
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80035bc:	2300      	movs	r3, #0
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <xQueueReceive+0x30>
	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	623b      	str	r3, [r7, #32]
}
 80035dc:	bf00      	nop
 80035de:	e7fe      	b.n	80035de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <xQueueReceive+0x3e>
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <xQueueReceive+0x42>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <xQueueReceive+0x44>
 80035f2:	2300      	movs	r3, #0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <xQueueReceive+0x5e>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	61fb      	str	r3, [r7, #28]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800360e:	f001 f94b 	bl	80048a8 <xTaskGetSchedulerState>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <xQueueReceive+0x6e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <xQueueReceive+0x72>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <xQueueReceive+0x74>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <xQueueReceive+0x8e>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	61bb      	str	r3, [r7, #24]
}
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800363e:	f7ff fc1d 	bl	8002e7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01f      	beq.n	800368e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003652:	f000 f8f7 	bl	8003844 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	1e5a      	subs	r2, r3, #1
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00f      	beq.n	8003686 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	3310      	adds	r3, #16
 800366a:	4618      	mov	r0, r3
 800366c:	f000 ff5e 	bl	800452c <xTaskRemoveFromEventList>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003676:	4b3d      	ldr	r3, [pc, #244]	; (800376c <xQueueReceive+0x1bc>)
 8003678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003686:	f7ff fc29 	bl	8002edc <vPortExitCritical>
				return pdPASS;
 800368a:	2301      	movs	r3, #1
 800368c:	e069      	b.n	8003762 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003694:	f7ff fc22 	bl	8002edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003698:	2300      	movs	r3, #0
 800369a:	e062      	b.n	8003762 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036a2:	f107 0310 	add.w	r3, r7, #16
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 ffa4 	bl	80045f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036b0:	f7ff fc14 	bl	8002edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036b4:	f000 fd08 	bl	80040c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036b8:	f7ff fbe0 	bl	8002e7c <vPortEnterCritical>
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d103      	bne.n	80036d2 <xQueueReceive+0x122>
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036d8:	b25b      	sxtb	r3, r3
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d103      	bne.n	80036e8 <xQueueReceive+0x138>
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036e8:	f7ff fbf8 	bl	8002edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036ec:	1d3a      	adds	r2, r7, #4
 80036ee:	f107 0310 	add.w	r3, r7, #16
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 ff93 	bl	8004620 <xTaskCheckForTimeOut>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d123      	bne.n	8003748 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003702:	f000 f917 	bl	8003934 <prvIsQueueEmpty>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d017      	beq.n	800373c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	3324      	adds	r3, #36	; 0x24
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f000 feb9 	bl	800448c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800371a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800371c:	f000 f8b8 	bl	8003890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003720:	f000 fce0 	bl	80040e4 <xTaskResumeAll>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d189      	bne.n	800363e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <xQueueReceive+0x1bc>)
 800372c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	e780      	b.n	800363e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800373c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800373e:	f000 f8a7 	bl	8003890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003742:	f000 fccf 	bl	80040e4 <xTaskResumeAll>
 8003746:	e77a      	b.n	800363e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800374a:	f000 f8a1 	bl	8003890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800374e:	f000 fcc9 	bl	80040e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003754:	f000 f8ee 	bl	8003934 <prvIsQueueEmpty>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	f43f af6f 	beq.w	800363e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003760:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003762:	4618      	mov	r0, r3
 8003764:	3730      	adds	r7, #48	; 0x30
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d14d      	bne.n	8003832 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f001 f8a2 	bl	80048e4 <xTaskPriorityDisinherit>
 80037a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	e043      	b.n	8003832 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d119      	bne.n	80037e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6858      	ldr	r0, [r3, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	461a      	mov	r2, r3
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	f001 fcc4 	bl	8005148 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	441a      	add	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d32b      	bcc.n	8003832 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	e026      	b.n	8003832 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68d8      	ldr	r0, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	461a      	mov	r2, r3
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	f001 fcaa 	bl	8005148 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	425b      	negs	r3, r3
 80037fe:	441a      	add	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d207      	bcs.n	8003820 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	425b      	negs	r3, r3
 800381a:	441a      	add	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d105      	bne.n	8003832 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	3b01      	subs	r3, #1
 8003830:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800383a:	697b      	ldr	r3, [r7, #20]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	441a      	add	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	d303      	bcc.n	8003878 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68d9      	ldr	r1, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	461a      	mov	r2, r3
 8003882:	6838      	ldr	r0, [r7, #0]
 8003884:	f001 fc60 	bl	8005148 <memcpy>
	}
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003898:	f7ff faf0 	bl	8002e7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038a4:	e011      	b.n	80038ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3324      	adds	r3, #36	; 0x24
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fe3a 	bl	800452c <xTaskRemoveFromEventList>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038be:	f000 ff11 	bl	80046e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	dce9      	bgt.n	80038a6 <prvUnlockQueue+0x16>
 80038d2:	e000      	b.n	80038d6 <prvUnlockQueue+0x46>
					break;
 80038d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	22ff      	movs	r2, #255	; 0xff
 80038da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80038de:	f7ff fafd 	bl	8002edc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038e2:	f7ff facb 	bl	8002e7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038ee:	e011      	b.n	8003914 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3310      	adds	r3, #16
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fe15 	bl	800452c <xTaskRemoveFromEventList>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003908:	f000 feec 	bl	80046e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800390c:	7bbb      	ldrb	r3, [r7, #14]
 800390e:	3b01      	subs	r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003918:	2b00      	cmp	r3, #0
 800391a:	dce9      	bgt.n	80038f0 <prvUnlockQueue+0x60>
 800391c:	e000      	b.n	8003920 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800391e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	22ff      	movs	r2, #255	; 0xff
 8003924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003928:	f7ff fad8 	bl	8002edc <vPortExitCritical>
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800393c:	f7ff fa9e 	bl	8002e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003948:	2301      	movs	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e001      	b.n	8003952 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003952:	f7ff fac3 	bl	8002edc <vPortExitCritical>

	return xReturn;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003968:	f7ff fa88 	bl	8002e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	429a      	cmp	r2, r3
 8003976:	d102      	bne.n	800397e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003978:	2301      	movs	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e001      	b.n	8003982 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003982:	f7ff faab 	bl	8002edc <vPortExitCritical>

	return xReturn;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e014      	b.n	80039ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039a0:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <vQueueAddToRegistry+0x4c>)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039ac:	490b      	ldr	r1, [pc, #44]	; (80039dc <vQueueAddToRegistry+0x4c>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039b6:	4a09      	ldr	r2, [pc, #36]	; (80039dc <vQueueAddToRegistry+0x4c>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039c2:	e006      	b.n	80039d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b07      	cmp	r3, #7
 80039ce:	d9e7      	bls.n	80039a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	20001774 	.word	0x20001774

080039e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039f0:	f7ff fa44 	bl	8002e7c <vPortEnterCritical>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d103      	bne.n	8003a0a <vQueueWaitForMessageRestricted+0x2a>
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d103      	bne.n	8003a20 <vQueueWaitForMessageRestricted+0x40>
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a20:	f7ff fa5c 	bl	8002edc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	3324      	adds	r3, #36	; 0x24
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fd4d 	bl	80044d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a3a:	6978      	ldr	r0, [r7, #20]
 8003a3c:	f7ff ff28 	bl	8003890 <prvUnlockQueue>
	}
 8003a40:	bf00      	nop
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08e      	sub	sp, #56	; 0x38
 8003a4c:	af04      	add	r7, sp, #16
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	623b      	str	r3, [r7, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	e7fe      	b.n	8003a70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <xTaskCreateStatic+0x46>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	61fb      	str	r3, [r7, #28]
}
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a8e:	235c      	movs	r3, #92	; 0x5c
 8003a90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b5c      	cmp	r3, #92	; 0x5c
 8003a96:	d00a      	beq.n	8003aae <xTaskCreateStatic+0x66>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	61bb      	str	r3, [r7, #24]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003aae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01e      	beq.n	8003af4 <xTaskCreateStatic+0xac>
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01b      	beq.n	8003af4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9303      	str	r3, [sp, #12]
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	9302      	str	r3, [sp, #8]
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f850 	bl	8003b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aee:	f000 f8dd 	bl	8003cac <prvAddNewTaskToReadyList>
 8003af2:	e001      	b.n	8003af8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003af8:	697b      	ldr	r3, [r7, #20]
	}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3728      	adds	r7, #40	; 0x28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b08c      	sub	sp, #48	; 0x30
 8003b06:	af04      	add	r7, sp, #16
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fe3a 	bl	8002790 <pvPortMalloc>
 8003b1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00e      	beq.n	8003b42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b24:	205c      	movs	r0, #92	; 0x5c
 8003b26:	f7fe fe33 	bl	8002790 <pvPortMalloc>
 8003b2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
 8003b38:	e005      	b.n	8003b46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b3a:	6978      	ldr	r0, [r7, #20]
 8003b3c:	f7fe feec 	bl	8002918 <vPortFree>
 8003b40:	e001      	b.n	8003b46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d017      	beq.n	8003b7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	2300      	movs	r3, #0
 8003b58:	9303      	str	r3, [sp, #12]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	9302      	str	r3, [sp, #8]
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f80e 	bl	8003b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b70:	69f8      	ldr	r0, [r7, #28]
 8003b72:	f000 f89b 	bl	8003cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b76:	2301      	movs	r3, #1
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e002      	b.n	8003b82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b82:	69bb      	ldr	r3, [r7, #24]
	}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	21a5      	movs	r1, #165	; 0xa5
 8003ba6:	f001 fadd 	bl	8005164 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f023 0307 	bic.w	r3, r3, #7
 8003bc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	617b      	str	r3, [r7, #20]
}
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01f      	beq.n	8003c2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e012      	b.n	8003c16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	7819      	ldrb	r1, [r3, #0]
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3334      	adds	r3, #52	; 0x34
 8003c00:	460a      	mov	r2, r1
 8003c02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d006      	beq.n	8003c1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	d9e9      	bls.n	8003bf0 <prvInitialiseNewTask+0x64>
 8003c1c:	e000      	b.n	8003c20 <prvInitialiseNewTask+0x94>
			{
				break;
 8003c1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c28:	e003      	b.n	8003c32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	2b37      	cmp	r3, #55	; 0x37
 8003c36:	d901      	bls.n	8003c3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c38:	2337      	movs	r3, #55	; 0x37
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	3304      	adds	r3, #4
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe ff93 	bl	8002b7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	3318      	adds	r3, #24
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe ff8e 	bl	8002b7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	68f9      	ldr	r1, [r7, #12]
 8003c8a:	69b8      	ldr	r0, [r7, #24]
 8003c8c:	f7ff f808 	bl	8002ca0 <pxPortInitialiseStack>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca2:	bf00      	nop
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cb4:	f7ff f8e2 	bl	8002e7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cb8:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <prvAddNewTaskToReadyList+0xc4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <prvAddNewTaskToReadyList+0xc4>)
 8003cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cc2:	4b2c      	ldr	r3, [pc, #176]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cca:	4a2a      	ldr	r2, [pc, #168]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <prvAddNewTaskToReadyList+0xc4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d110      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cd8:	f000 fd28 	bl	800472c <prvInitialiseTaskLists>
 8003cdc:	e00d      	b.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cde:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <prvAddNewTaskToReadyList+0xcc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d802      	bhi.n	8003cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cf4:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <prvAddNewTaskToReadyList+0xd0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <prvAddNewTaskToReadyList+0xd0>)
 8003d02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <prvAddNewTaskToReadyList+0xd0>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <prvAddNewTaskToReadyList+0xd4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d903      	bls.n	8003d20 <prvAddNewTaskToReadyList+0x74>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <prvAddNewTaskToReadyList+0xd4>)
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <prvAddNewTaskToReadyList+0xd8>)
 8003d2e:	441a      	add	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7fe ff2d 	bl	8002b96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d3c:	f7ff f8ce 	bl	8002edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <prvAddNewTaskToReadyList+0xcc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00e      	beq.n	8003d66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <prvAddNewTaskToReadyList+0xc8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d207      	bcs.n	8003d66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <prvAddNewTaskToReadyList+0xdc>)
 8003d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20001c88 	.word	0x20001c88
 8003d74:	200017b4 	.word	0x200017b4
 8003d78:	20001c94 	.word	0x20001c94
 8003d7c:	20001ca4 	.word	0x20001ca4
 8003d80:	20001c90 	.word	0x20001c90
 8003d84:	200017b8 	.word	0x200017b8
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d017      	beq.n	8003dce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <vTaskDelay+0x60>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <vTaskDelay+0x30>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	60bb      	str	r3, [r7, #8]
}
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dbc:	f000 f984 	bl	80040c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fdfc 	bl	80049c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dc8:	f000 f98c 	bl	80040e4 <xTaskResumeAll>
 8003dcc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d107      	bne.n	8003de4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <vTaskDelay+0x64>)
 8003dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20001cb0 	.word	0x20001cb0
 8003df0:	e000ed04 	.word	0xe000ed04

08003df4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003dfc:	f7ff f83e 	bl	8002e7c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <vTaskSuspend+0x18>
 8003e06:	4b30      	ldr	r3, [pc, #192]	; (8003ec8 <vTaskSuspend+0xd4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	e000      	b.n	8003e0e <vTaskSuspend+0x1a>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe ff19 	bl	8002c4c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3318      	adds	r3, #24
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe ff10 	bl	8002c4c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4826      	ldr	r0, [pc, #152]	; (8003ecc <vTaskSuspend+0xd8>)
 8003e34:	f7fe feaf 	bl	8002b96 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d103      	bne.n	8003e4c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003e4c:	f7ff f846 	bl	8002edc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003e50:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <vTaskSuspend+0xdc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003e58:	f7ff f810 	bl	8002e7c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003e5c:	f000 fd04 	bl	8004868 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003e60:	f7ff f83c 	bl	8002edc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <vTaskSuspend+0xd4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d127      	bne.n	8003ebe <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <vTaskSuspend+0xdc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d017      	beq.n	8003ea6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003e76:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <vTaskSuspend+0xe0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <vTaskSuspend+0xa0>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	60bb      	str	r3, [r7, #8]
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8003e94:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <vTaskSuspend+0xe4>)
 8003e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ea4:	e00b      	b.n	8003ebe <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <vTaskSuspend+0xd8>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <vTaskSuspend+0xe8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d103      	bne.n	8003eba <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <vTaskSuspend+0xd4>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
	}
 8003eb8:	e001      	b.n	8003ebe <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8003eba:	f000 fa8b 	bl	80043d4 <vTaskSwitchContext>
	}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200017b4 	.word	0x200017b4
 8003ecc:	20001c74 	.word	0x20001c74
 8003ed0:	20001c94 	.word	0x20001c94
 8003ed4:	20001cb0 	.word	0x20001cb0
 8003ed8:	e000ed04 	.word	0xe000ed04
 8003edc:	20001c88 	.word	0x20001c88

08003ee0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	60fb      	str	r3, [r7, #12]
}
 8003f08:	bf00      	nop
 8003f0a:	e7fe      	b.n	8003f0a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	4a09      	ldr	r2, [pc, #36]	; (8003f38 <prvTaskIsTaskSuspended+0x58>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10a      	bne.n	8003f2c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <prvTaskIsTaskSuspended+0x5c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d005      	beq.n	8003f2c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f2c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003f2e:	4618      	mov	r0, r3
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr
 8003f38:	20001c74 	.word	0x20001c74
 8003f3c:	20001c48 	.word	0x20001c48

08003f40 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <vTaskResume+0x28>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	60bb      	str	r3, [r7, #8]
}
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003f68:	4b20      	ldr	r3, [pc, #128]	; (8003fec <vTaskResume+0xac>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d038      	beq.n	8003fe4 <vTaskResume+0xa4>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d035      	beq.n	8003fe4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8003f78:	f7fe ff80 	bl	8002e7c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff ffaf 	bl	8003ee0 <prvTaskIsTaskSuspended>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02b      	beq.n	8003fe0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe fe5d 	bl	8002c4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <vTaskResume+0xb0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d903      	bls.n	8003fa6 <vTaskResume+0x66>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <vTaskResume+0xb0>)
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4a10      	ldr	r2, [pc, #64]	; (8003ff4 <vTaskResume+0xb4>)
 8003fb4:	441a      	add	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f7fe fdea 	bl	8002b96 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <vTaskResume+0xac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d307      	bcc.n	8003fe0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <vTaskResume+0xb8>)
 8003fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003fe0:	f7fe ff7c 	bl	8002edc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200017b4 	.word	0x200017b4
 8003ff0:	20001c90 	.word	0x20001c90
 8003ff4:	200017b8 	.word	0x200017b8
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800400a:	463a      	mov	r2, r7
 800400c:	1d39      	adds	r1, r7, #4
 800400e:	f107 0308 	add.w	r3, r7, #8
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe fb8a 	bl	800272c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	9202      	str	r2, [sp, #8]
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	2300      	movs	r3, #0
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	2300      	movs	r3, #0
 8004028:	460a      	mov	r2, r1
 800402a:	4921      	ldr	r1, [pc, #132]	; (80040b0 <vTaskStartScheduler+0xb4>)
 800402c:	4821      	ldr	r0, [pc, #132]	; (80040b4 <vTaskStartScheduler+0xb8>)
 800402e:	f7ff fd0b 	bl	8003a48 <xTaskCreateStatic>
 8004032:	4603      	mov	r3, r0
 8004034:	4a20      	ldr	r2, [pc, #128]	; (80040b8 <vTaskStartScheduler+0xbc>)
 8004036:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004038:	4b1f      	ldr	r3, [pc, #124]	; (80040b8 <vTaskStartScheduler+0xbc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004040:	2301      	movs	r3, #1
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e001      	b.n	800404a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d102      	bne.n	8004056 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004050:	f000 fd0a 	bl	8004a68 <xTimerCreateTimerTask>
 8004054:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d116      	bne.n	800408a <vTaskStartScheduler+0x8e>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	613b      	str	r3, [r7, #16]
}
 800406e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <vTaskStartScheduler+0xc0>)
 8004072:	f04f 32ff 	mov.w	r2, #4294967295
 8004076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <vTaskStartScheduler+0xc4>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800407e:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <vTaskStartScheduler+0xc8>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004084:	f7fe fe88 	bl	8002d98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004088:	e00e      	b.n	80040a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d10a      	bne.n	80040a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	60fb      	str	r3, [r7, #12]
}
 80040a4:	bf00      	nop
 80040a6:	e7fe      	b.n	80040a6 <vTaskStartScheduler+0xaa>
}
 80040a8:	bf00      	nop
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	080051bc 	.word	0x080051bc
 80040b4:	080046fd 	.word	0x080046fd
 80040b8:	20001cac 	.word	0x20001cac
 80040bc:	20001ca8 	.word	0x20001ca8
 80040c0:	20001c94 	.word	0x20001c94
 80040c4:	20001c8c 	.word	0x20001c8c

080040c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <vTaskSuspendAll+0x18>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <vTaskSuspendAll+0x18>)
 80040d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20001cb0 	.word	0x20001cb0

080040e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040f2:	4b42      	ldr	r3, [pc, #264]	; (80041fc <xTaskResumeAll+0x118>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <xTaskResumeAll+0x2c>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	603b      	str	r3, [r7, #0]
}
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004110:	f7fe feb4 	bl	8002e7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004114:	4b39      	ldr	r3, [pc, #228]	; (80041fc <xTaskResumeAll+0x118>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3b01      	subs	r3, #1
 800411a:	4a38      	ldr	r2, [pc, #224]	; (80041fc <xTaskResumeAll+0x118>)
 800411c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800411e:	4b37      	ldr	r3, [pc, #220]	; (80041fc <xTaskResumeAll+0x118>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d162      	bne.n	80041ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004126:	4b36      	ldr	r3, [pc, #216]	; (8004200 <xTaskResumeAll+0x11c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d05e      	beq.n	80041ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800412e:	e02f      	b.n	8004190 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004130:	4b34      	ldr	r3, [pc, #208]	; (8004204 <xTaskResumeAll+0x120>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3318      	adds	r3, #24
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe fd85 	bl	8002c4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3304      	adds	r3, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fd80 	bl	8002c4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <xTaskResumeAll+0x124>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d903      	bls.n	8004160 <xTaskResumeAll+0x7c>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <xTaskResumeAll+0x124>)
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4a27      	ldr	r2, [pc, #156]	; (800420c <xTaskResumeAll+0x128>)
 800416e:	441a      	add	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f7fe fd0d 	bl	8002b96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	4b23      	ldr	r3, [pc, #140]	; (8004210 <xTaskResumeAll+0x12c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <xTaskResumeAll+0x130>)
 800418c:	2201      	movs	r2, #1
 800418e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <xTaskResumeAll+0x120>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1cb      	bne.n	8004130 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800419e:	f000 fb63 	bl	8004868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <xTaskResumeAll+0x134>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d010      	beq.n	80041d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041ae:	f000 f857 	bl	8004260 <xTaskIncrementTick>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80041b8:	4b16      	ldr	r3, [pc, #88]	; (8004214 <xTaskResumeAll+0x130>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f1      	bne.n	80041ae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <xTaskResumeAll+0x134>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <xTaskResumeAll+0x130>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <xTaskResumeAll+0x138>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041ec:	f7fe fe76 	bl	8002edc <vPortExitCritical>

	return xAlreadyYielded;
 80041f0:	68bb      	ldr	r3, [r7, #8]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20001cb0 	.word	0x20001cb0
 8004200:	20001c88 	.word	0x20001c88
 8004204:	20001c48 	.word	0x20001c48
 8004208:	20001c90 	.word	0x20001c90
 800420c:	200017b8 	.word	0x200017b8
 8004210:	200017b4 	.word	0x200017b4
 8004214:	20001c9c 	.word	0x20001c9c
 8004218:	20001c98 	.word	0x20001c98
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <xTaskGetTickCount+0x18>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800422c:	687b      	ldr	r3, [r7, #4]
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	20001c8c 	.word	0x20001c8c

0800423c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004242:	f7fe fedd 	bl	8003000 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <xTaskGetTickCountFromISR+0x20>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004250:	683b      	ldr	r3, [r7, #0]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20001c8c 	.word	0x20001c8c

08004260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800426a:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <xTaskIncrementTick+0x148>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 8089 	bne.w	8004386 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004274:	4b4d      	ldr	r3, [pc, #308]	; (80043ac <xTaskIncrementTick+0x14c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800427c:	4a4b      	ldr	r2, [pc, #300]	; (80043ac <xTaskIncrementTick+0x14c>)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d120      	bne.n	80042ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004288:	4b49      	ldr	r3, [pc, #292]	; (80043b0 <xTaskIncrementTick+0x150>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	603b      	str	r3, [r7, #0]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <xTaskIncrementTick+0x46>
 80042a8:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <xTaskIncrementTick+0x150>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	4b41      	ldr	r3, [pc, #260]	; (80043b4 <xTaskIncrementTick+0x154>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a3f      	ldr	r2, [pc, #252]	; (80043b0 <xTaskIncrementTick+0x150>)
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4a3f      	ldr	r2, [pc, #252]	; (80043b4 <xTaskIncrementTick+0x154>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4b3e      	ldr	r3, [pc, #248]	; (80043b8 <xTaskIncrementTick+0x158>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	4a3d      	ldr	r2, [pc, #244]	; (80043b8 <xTaskIncrementTick+0x158>)
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	f000 facf 	bl	8004868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042ca:	4b3c      	ldr	r3, [pc, #240]	; (80043bc <xTaskIncrementTick+0x15c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d349      	bcc.n	8004368 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042d4:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <xTaskIncrementTick+0x150>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042de:	4b37      	ldr	r3, [pc, #220]	; (80043bc <xTaskIncrementTick+0x15c>)
 80042e0:	f04f 32ff 	mov.w	r2, #4294967295
 80042e4:	601a      	str	r2, [r3, #0]
					break;
 80042e6:	e03f      	b.n	8004368 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e8:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <xTaskIncrementTick+0x150>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d203      	bcs.n	8004308 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004300:	4a2e      	ldr	r2, [pc, #184]	; (80043bc <xTaskIncrementTick+0x15c>)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004306:	e02f      	b.n	8004368 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	3304      	adds	r3, #4
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe fc9d 	bl	8002c4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3318      	adds	r3, #24
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fc94 	bl	8002c4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <xTaskIncrementTick+0x160>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d903      	bls.n	8004338 <xTaskIncrementTick+0xd8>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	4a22      	ldr	r2, [pc, #136]	; (80043c0 <xTaskIncrementTick+0x160>)
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4a1f      	ldr	r2, [pc, #124]	; (80043c4 <xTaskIncrementTick+0x164>)
 8004346:	441a      	add	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	3304      	adds	r3, #4
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f7fe fc21 	bl	8002b96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <xTaskIncrementTick+0x168>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	429a      	cmp	r2, r3
 8004360:	d3b8      	bcc.n	80042d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004362:	2301      	movs	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004366:	e7b5      	b.n	80042d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004368:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <xTaskIncrementTick+0x168>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	4915      	ldr	r1, [pc, #84]	; (80043c4 <xTaskIncrementTick+0x164>)
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d907      	bls.n	8004390 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004380:	2301      	movs	r3, #1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	e004      	b.n	8004390 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <xTaskIncrementTick+0x16c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3301      	adds	r3, #1
 800438c:	4a0f      	ldr	r2, [pc, #60]	; (80043cc <xTaskIncrementTick+0x16c>)
 800438e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004390:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <xTaskIncrementTick+0x170>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800439c:	697b      	ldr	r3, [r7, #20]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20001cb0 	.word	0x20001cb0
 80043ac:	20001c8c 	.word	0x20001c8c
 80043b0:	20001c40 	.word	0x20001c40
 80043b4:	20001c44 	.word	0x20001c44
 80043b8:	20001ca0 	.word	0x20001ca0
 80043bc:	20001ca8 	.word	0x20001ca8
 80043c0:	20001c90 	.word	0x20001c90
 80043c4:	200017b8 	.word	0x200017b8
 80043c8:	200017b4 	.word	0x200017b4
 80043cc:	20001c98 	.word	0x20001c98
 80043d0:	20001c9c 	.word	0x20001c9c

080043d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043da:	4b27      	ldr	r3, [pc, #156]	; (8004478 <vTaskSwitchContext+0xa4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043e2:	4b26      	ldr	r3, [pc, #152]	; (800447c <vTaskSwitchContext+0xa8>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043e8:	e041      	b.n	800446e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80043ea:	4b24      	ldr	r3, [pc, #144]	; (800447c <vTaskSwitchContext+0xa8>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f0:	4b23      	ldr	r3, [pc, #140]	; (8004480 <vTaskSwitchContext+0xac>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e010      	b.n	800441a <vTaskSwitchContext+0x46>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <vTaskSwitchContext+0x40>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	607b      	str	r3, [r7, #4]
}
 8004410:	bf00      	nop
 8004412:	e7fe      	b.n	8004412 <vTaskSwitchContext+0x3e>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3b01      	subs	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	491a      	ldr	r1, [pc, #104]	; (8004484 <vTaskSwitchContext+0xb0>)
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0e4      	beq.n	80043f8 <vTaskSwitchContext+0x24>
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4a12      	ldr	r2, [pc, #72]	; (8004484 <vTaskSwitchContext+0xb0>)
 800443a:	4413      	add	r3, r2
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	3308      	adds	r3, #8
 8004450:	429a      	cmp	r2, r3
 8004452:	d104      	bne.n	800445e <vTaskSwitchContext+0x8a>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a08      	ldr	r2, [pc, #32]	; (8004488 <vTaskSwitchContext+0xb4>)
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4a05      	ldr	r2, [pc, #20]	; (8004480 <vTaskSwitchContext+0xac>)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6013      	str	r3, [r2, #0]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	20001cb0 	.word	0x20001cb0
 800447c:	20001c9c 	.word	0x20001c9c
 8004480:	20001c90 	.word	0x20001c90
 8004484:	200017b8 	.word	0x200017b8
 8004488:	200017b4 	.word	0x200017b4

0800448c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	60fb      	str	r3, [r7, #12]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <vTaskPlaceOnEventList+0x44>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3318      	adds	r3, #24
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fe fb8e 	bl	8002bdc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044c0:	2101      	movs	r1, #1
 80044c2:	6838      	ldr	r0, [r7, #0]
 80044c4:	f000 fa7c 	bl	80049c0 <prvAddCurrentTaskToDelayedList>
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200017b4 	.word	0x200017b4

080044d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	617b      	str	r3, [r7, #20]
}
 80044f8:	bf00      	nop
 80044fa:	e7fe      	b.n	80044fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <vTaskPlaceOnEventListRestricted+0x54>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3318      	adds	r3, #24
 8004502:	4619      	mov	r1, r3
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7fe fb46 	bl	8002b96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004510:	f04f 33ff 	mov.w	r3, #4294967295
 8004514:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	68b8      	ldr	r0, [r7, #8]
 800451a:	f000 fa51 	bl	80049c0 <prvAddCurrentTaskToDelayedList>
	}
 800451e:	bf00      	nop
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200017b4 	.word	0x200017b4

0800452c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	60fb      	str	r3, [r7, #12]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	3318      	adds	r3, #24
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fb75 	bl	8002c4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004562:	4b1e      	ldr	r3, [pc, #120]	; (80045dc <xTaskRemoveFromEventList+0xb0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d11d      	bne.n	80045a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	3304      	adds	r3, #4
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe fb6c 	bl	8002c4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4b19      	ldr	r3, [pc, #100]	; (80045e0 <xTaskRemoveFromEventList+0xb4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d903      	bls.n	8004588 <xTaskRemoveFromEventList+0x5c>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <xTaskRemoveFromEventList+0xb4>)
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <xTaskRemoveFromEventList+0xb8>)
 8004596:	441a      	add	r2, r3
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f7fe faf9 	bl	8002b96 <vListInsertEnd>
 80045a4:	e005      	b.n	80045b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	3318      	adds	r3, #24
 80045aa:	4619      	mov	r1, r3
 80045ac:	480e      	ldr	r0, [pc, #56]	; (80045e8 <xTaskRemoveFromEventList+0xbc>)
 80045ae:	f7fe faf2 	bl	8002b96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <xTaskRemoveFromEventList+0xc0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	429a      	cmp	r2, r3
 80045be:	d905      	bls.n	80045cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <xTaskRemoveFromEventList+0xc4>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e001      	b.n	80045d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80045d0:	697b      	ldr	r3, [r7, #20]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20001cb0 	.word	0x20001cb0
 80045e0:	20001c90 	.word	0x20001c90
 80045e4:	200017b8 	.word	0x200017b8
 80045e8:	20001c48 	.word	0x20001c48
 80045ec:	200017b4 	.word	0x200017b4
 80045f0:	20001c9c 	.word	0x20001c9c

080045f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <vTaskInternalSetTimeOutState+0x24>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <vTaskInternalSetTimeOutState+0x28>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	605a      	str	r2, [r3, #4]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20001ca0 	.word	0x20001ca0
 800461c:	20001c8c 	.word	0x20001c8c

08004620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	613b      	str	r3, [r7, #16]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	60fb      	str	r3, [r7, #12]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004662:	f7fe fc0b 	bl	8002e7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004666:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <xTaskCheckForTimeOut+0xbc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467e:	d102      	bne.n	8004686 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e023      	b.n	80046ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <xTaskCheckForTimeOut+0xc0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d007      	beq.n	80046a2 <xTaskCheckForTimeOut+0x82>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	429a      	cmp	r2, r3
 800469a:	d302      	bcc.n	80046a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	e015      	b.n	80046ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d20b      	bcs.n	80046c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	1ad2      	subs	r2, r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ff9b 	bl	80045f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	e004      	b.n	80046ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046ca:	2301      	movs	r3, #1
 80046cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046ce:	f7fe fc05 	bl	8002edc <vPortExitCritical>

	return xReturn;
 80046d2:	69fb      	ldr	r3, [r7, #28]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20001c8c 	.word	0x20001c8c
 80046e0:	20001ca0 	.word	0x20001ca0

080046e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80046e8:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <vTaskMissedYield+0x14>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20001c9c 	.word	0x20001c9c

080046fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004704:	f000 f852 	bl	80047ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <prvIdleTask+0x28>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d9f9      	bls.n	8004704 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <prvIdleTask+0x2c>)
 8004712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004720:	e7f0      	b.n	8004704 <prvIdleTask+0x8>
 8004722:	bf00      	nop
 8004724:	200017b8 	.word	0x200017b8
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	e00c      	b.n	8004752 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4a12      	ldr	r2, [pc, #72]	; (800478c <prvInitialiseTaskLists+0x60>)
 8004744:	4413      	add	r3, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe f9fa 	bl	8002b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3301      	adds	r3, #1
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b37      	cmp	r3, #55	; 0x37
 8004756:	d9ef      	bls.n	8004738 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004758:	480d      	ldr	r0, [pc, #52]	; (8004790 <prvInitialiseTaskLists+0x64>)
 800475a:	f7fe f9f1 	bl	8002b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800475e:	480d      	ldr	r0, [pc, #52]	; (8004794 <prvInitialiseTaskLists+0x68>)
 8004760:	f7fe f9ee 	bl	8002b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004764:	480c      	ldr	r0, [pc, #48]	; (8004798 <prvInitialiseTaskLists+0x6c>)
 8004766:	f7fe f9eb 	bl	8002b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800476a:	480c      	ldr	r0, [pc, #48]	; (800479c <prvInitialiseTaskLists+0x70>)
 800476c:	f7fe f9e8 	bl	8002b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004770:	480b      	ldr	r0, [pc, #44]	; (80047a0 <prvInitialiseTaskLists+0x74>)
 8004772:	f7fe f9e5 	bl	8002b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <prvInitialiseTaskLists+0x78>)
 8004778:	4a05      	ldr	r2, [pc, #20]	; (8004790 <prvInitialiseTaskLists+0x64>)
 800477a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <prvInitialiseTaskLists+0x7c>)
 800477e:	4a05      	ldr	r2, [pc, #20]	; (8004794 <prvInitialiseTaskLists+0x68>)
 8004780:	601a      	str	r2, [r3, #0]
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	200017b8 	.word	0x200017b8
 8004790:	20001c18 	.word	0x20001c18
 8004794:	20001c2c 	.word	0x20001c2c
 8004798:	20001c48 	.word	0x20001c48
 800479c:	20001c5c 	.word	0x20001c5c
 80047a0:	20001c74 	.word	0x20001c74
 80047a4:	20001c40 	.word	0x20001c40
 80047a8:	20001c44 	.word	0x20001c44

080047ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047b2:	e019      	b.n	80047e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047b4:	f7fe fb62 	bl	8002e7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b8:	4b10      	ldr	r3, [pc, #64]	; (80047fc <prvCheckTasksWaitingTermination+0x50>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe fa41 	bl	8002c4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <prvCheckTasksWaitingTermination+0x54>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	4a0b      	ldr	r2, [pc, #44]	; (8004800 <prvCheckTasksWaitingTermination+0x54>)
 80047d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <prvCheckTasksWaitingTermination+0x58>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3b01      	subs	r3, #1
 80047da:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <prvCheckTasksWaitingTermination+0x58>)
 80047dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047de:	f7fe fb7d 	bl	8002edc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f810 	bl	8004808 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <prvCheckTasksWaitingTermination+0x58>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e1      	bne.n	80047b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20001c5c 	.word	0x20001c5c
 8004800:	20001c88 	.word	0x20001c88
 8004804:	20001c70 	.word	0x20001c70

08004808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004816:	2b00      	cmp	r3, #0
 8004818:	d108      	bne.n	800482c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe f87a 	bl	8002918 <vPortFree>
				vPortFree( pxTCB );
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fe f877 	bl	8002918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800482a:	e018      	b.n	800485e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004832:	2b01      	cmp	r3, #1
 8004834:	d103      	bne.n	800483e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fe f86e 	bl	8002918 <vPortFree>
	}
 800483c:	e00f      	b.n	800485e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004844:	2b02      	cmp	r3, #2
 8004846:	d00a      	beq.n	800485e <prvDeleteTCB+0x56>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	60fb      	str	r3, [r7, #12]
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <prvDeleteTCB+0x54>
	}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <prvResetNextTaskUnblockTime+0x38>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <prvResetNextTaskUnblockTime+0x3c>)
 800487a:	f04f 32ff 	mov.w	r2, #4294967295
 800487e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004880:	e008      	b.n	8004894 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <prvResetNextTaskUnblockTime+0x38>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004892:	6013      	str	r3, [r2, #0]
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20001c40 	.word	0x20001c40
 80048a4:	20001ca8 	.word	0x20001ca8

080048a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <xTaskGetSchedulerState+0x34>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048b6:	2301      	movs	r3, #1
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	e008      	b.n	80048ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <xTaskGetSchedulerState+0x38>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048c4:	2302      	movs	r3, #2
 80048c6:	607b      	str	r3, [r7, #4]
 80048c8:	e001      	b.n	80048ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048ca:	2300      	movs	r3, #0
 80048cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048ce:	687b      	ldr	r3, [r7, #4]
	}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20001c94 	.word	0x20001c94
 80048e0:	20001cb0 	.word	0x20001cb0

080048e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d056      	beq.n	80049a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048fa:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <xTaskPriorityDisinherit+0xd0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	429a      	cmp	r2, r3
 8004902:	d00a      	beq.n	800491a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	60fb      	str	r3, [r7, #12]
}
 8004916:	bf00      	nop
 8004918:	e7fe      	b.n	8004918 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60bb      	str	r3, [r7, #8]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	1e5a      	subs	r2, r3, #1
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	429a      	cmp	r2, r3
 800494c:	d02c      	beq.n	80049a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	2b00      	cmp	r3, #0
 8004954:	d128      	bne.n	80049a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3304      	adds	r3, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe f976 	bl	8002c4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <xTaskPriorityDisinherit+0xd4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d903      	bls.n	8004988 <xTaskPriorityDisinherit+0xa4>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <xTaskPriorityDisinherit+0xd4>)
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4a09      	ldr	r2, [pc, #36]	; (80049bc <xTaskPriorityDisinherit+0xd8>)
 8004996:	441a      	add	r2, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f7fe f8f9 	bl	8002b96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049a8:	697b      	ldr	r3, [r7, #20]
	}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	200017b4 	.word	0x200017b4
 80049b8:	20001c90 	.word	0x20001c90
 80049bc:	200017b8 	.word	0x200017b8

080049c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049ca:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <prvAddCurrentTaskToDelayedList+0x90>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049d0:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <prvAddCurrentTaskToDelayedList+0x94>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe f938 	bl	8002c4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d10a      	bne.n	80049fa <prvAddCurrentTaskToDelayedList+0x3a>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <prvAddCurrentTaskToDelayedList+0x94>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4819      	ldr	r0, [pc, #100]	; (8004a58 <prvAddCurrentTaskToDelayedList+0x98>)
 80049f4:	f7fe f8cf 	bl	8002b96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049f8:	e026      	b.n	8004a48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4413      	add	r3, r2
 8004a00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d209      	bcs.n	8004a26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a12:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fe f8dc 	bl	8002bdc <vListInsert>
}
 8004a24:	e010      	b.n	8004a48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a26:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f7fe f8d2 	bl	8002bdc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d202      	bcs.n	8004a48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a42:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6013      	str	r3, [r2, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20001c8c 	.word	0x20001c8c
 8004a54:	200017b4 	.word	0x200017b4
 8004a58:	20001c74 	.word	0x20001c74
 8004a5c:	20001c44 	.word	0x20001c44
 8004a60:	20001c40 	.word	0x20001c40
 8004a64:	20001ca8 	.word	0x20001ca8

08004a68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a72:	f000 fb05 	bl	8005080 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a76:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <xTimerCreateTimerTask+0x80>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d021      	beq.n	8004ac2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a86:	1d3a      	adds	r2, r7, #4
 8004a88:	f107 0108 	add.w	r1, r7, #8
 8004a8c:	f107 030c 	add.w	r3, r7, #12
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fd fe63 	bl	800275c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	9202      	str	r2, [sp, #8]
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	4910      	ldr	r1, [pc, #64]	; (8004aec <xTimerCreateTimerTask+0x84>)
 8004aaa:	4811      	ldr	r0, [pc, #68]	; (8004af0 <xTimerCreateTimerTask+0x88>)
 8004aac:	f7fe ffcc 	bl	8003a48 <xTaskCreateStatic>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4a10      	ldr	r2, [pc, #64]	; (8004af4 <xTimerCreateTimerTask+0x8c>)
 8004ab4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ab6:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <xTimerCreateTimerTask+0x8c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	613b      	str	r3, [r7, #16]
}
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ade:	697b      	ldr	r3, [r7, #20]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20001ce4 	.word	0x20001ce4
 8004aec:	080051c4 	.word	0x080051c4
 8004af0:	08004c2d 	.word	0x08004c2d
 8004af4:	20001ce8 	.word	0x20001ce8

08004af8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	623b      	str	r3, [r7, #32]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <xTimerGenericCommand+0x98>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02a      	beq.n	8004b84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	dc18      	bgt.n	8004b72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b40:	f7ff feb2 	bl	80048a8 <xTaskGetSchedulerState>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d109      	bne.n	8004b5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <xTimerGenericCommand+0x98>)
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	f107 0110 	add.w	r1, r7, #16
 8004b52:	2300      	movs	r3, #0
 8004b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b56:	f7fe fb95 	bl	8003284 <xQueueGenericSend>
 8004b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8004b5c:	e012      	b.n	8004b84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <xTimerGenericCommand+0x98>)
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	f107 0110 	add.w	r1, r7, #16
 8004b66:	2300      	movs	r3, #0
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f7fe fb8b 	bl	8003284 <xQueueGenericSend>
 8004b6e:	6278      	str	r0, [r7, #36]	; 0x24
 8004b70:	e008      	b.n	8004b84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <xTimerGenericCommand+0x98>)
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	f107 0110 	add.w	r1, r7, #16
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	f7fe fc7f 	bl	8003480 <xQueueGenericSendFromISR>
 8004b82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3728      	adds	r7, #40	; 0x28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20001ce4 	.word	0x20001ce4

08004b94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b9e:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <prvProcessExpiredTimer+0x94>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe f84d 	bl	8002c4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d022      	beq.n	8004c06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	18d1      	adds	r1, r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	6978      	ldr	r0, [r7, #20]
 8004bce:	f000 f8cf 	bl	8004d70 <prvInsertTimerInActiveList>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01f      	beq.n	8004c18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	2100      	movs	r1, #0
 8004be2:	6978      	ldr	r0, [r7, #20]
 8004be4:	f7ff ff88 	bl	8004af8 <xTimerGenericCommand>
 8004be8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d113      	bne.n	8004c18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	60fb      	str	r3, [r7, #12]
}
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	6978      	ldr	r0, [r7, #20]
 8004c1e:	4798      	blx	r3
}
 8004c20:	bf00      	nop
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20001cdc 	.word	0x20001cdc

08004c2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c34:	f107 0308 	add.w	r3, r7, #8
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f857 	bl	8004cec <prvGetNextExpireTime>
 8004c3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4619      	mov	r1, r3
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f803 	bl	8004c50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c4a:	f000 f8d3 	bl	8004df4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c4e:	e7f1      	b.n	8004c34 <prvTimerTask+0x8>

08004c50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c5a:	f7ff fa35 	bl	80040c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c5e:	f107 0308 	add.w	r3, r7, #8
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f864 	bl	8004d30 <prvSampleTimeNow>
 8004c68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d130      	bne.n	8004cd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <prvProcessTimerOrBlockTask+0x3c>
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d806      	bhi.n	8004c8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c7e:	f7ff fa31 	bl	80040e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ff85 	bl	8004b94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c8a:	e024      	b.n	8004cd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c92:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <prvProcessTimerOrBlockTask+0x90>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <prvProcessTimerOrBlockTask+0x50>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <prvProcessTimerOrBlockTask+0x52>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <prvProcessTimerOrBlockTask+0x94>)
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f7fe fe95 	bl	80039e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004cb6:	f7ff fa15 	bl	80040e4 <xTaskResumeAll>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <prvProcessTimerOrBlockTask+0x98>)
 8004cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
}
 8004cd0:	e001      	b.n	8004cd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004cd2:	f7ff fa07 	bl	80040e4 <xTaskResumeAll>
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20001ce0 	.word	0x20001ce0
 8004ce4:	20001ce4 	.word	0x20001ce4
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <prvGetNextExpireTime+0x40>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <prvGetNextExpireTime+0x16>
 8004cfe:	2201      	movs	r2, #1
 8004d00:	e000      	b.n	8004d04 <prvGetNextExpireTime+0x18>
 8004d02:	2200      	movs	r2, #0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <prvGetNextExpireTime+0x40>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	e001      	b.n	8004d20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d20:	68fb      	ldr	r3, [r7, #12]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	20001cdc 	.word	0x20001cdc

08004d30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d38:	f7ff fa72 	bl	8004220 <xTaskGetTickCount>
 8004d3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <prvSampleTimeNow+0x3c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d205      	bcs.n	8004d54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d48:	f000 f936 	bl	8004fb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	e002      	b.n	8004d5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d5a:	4a04      	ldr	r2, [pc, #16]	; (8004d6c <prvSampleTimeNow+0x3c>)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d60:	68fb      	ldr	r3, [r7, #12]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20001cec 	.word	0x20001cec

08004d70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d812      	bhi.n	8004dbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	1ad2      	subs	r2, r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e01b      	b.n	8004de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <prvInsertTimerInActiveList+0x7c>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fd ff11 	bl	8002bdc <vListInsert>
 8004dba:	e012      	b.n	8004de2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d206      	bcs.n	8004dd2 <prvInsertTimerInActiveList+0x62>
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d302      	bcc.n	8004dd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e007      	b.n	8004de2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <prvInsertTimerInActiveList+0x80>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f7fd fefd 	bl	8002bdc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004de2:	697b      	ldr	r3, [r7, #20]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20001ce0 	.word	0x20001ce0
 8004df0:	20001cdc 	.word	0x20001cdc

08004df4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08e      	sub	sp, #56	; 0x38
 8004df8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dfa:	e0ca      	b.n	8004f92 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da18      	bge.n	8004e34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e02:	1d3b      	adds	r3, r7, #4
 8004e04:	3304      	adds	r3, #4
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	61fb      	str	r3, [r7, #28]
}
 8004e20:	bf00      	nop
 8004e22:	e7fe      	b.n	8004e22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e2a:	6850      	ldr	r0, [r2, #4]
 8004e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e2e:	6892      	ldr	r2, [r2, #8]
 8004e30:	4611      	mov	r1, r2
 8004e32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f2c0 80aa 	blt.w	8004f90 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d004      	beq.n	8004e52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fd fefd 	bl	8002c4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e52:	463b      	mov	r3, r7
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff ff6b 	bl	8004d30 <prvSampleTimeNow>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b09      	cmp	r3, #9
 8004e60:	f200 8097 	bhi.w	8004f92 <prvProcessReceivedCommands+0x19e>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <prvProcessReceivedCommands+0x78>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e95 	.word	0x08004e95
 8004e70:	08004e95 	.word	0x08004e95
 8004e74:	08004e95 	.word	0x08004e95
 8004e78:	08004f09 	.word	0x08004f09
 8004e7c:	08004f1d 	.word	0x08004f1d
 8004e80:	08004f67 	.word	0x08004f67
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004e95 	.word	0x08004e95
 8004e8c:	08004f09 	.word	0x08004f09
 8004e90:	08004f1d 	.word	0x08004f1d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	18d1      	adds	r1, r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb4:	f7ff ff5c 	bl	8004d70 <prvInsertTimerInActiveList>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d069      	beq.n	8004f92 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d05e      	beq.n	8004f92 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	441a      	add	r2, r3
 8004edc:	2300      	movs	r3, #0
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee6:	f7ff fe07 	bl	8004af8 <xTimerGenericCommand>
 8004eea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d14f      	bne.n	8004f92 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	61bb      	str	r3, [r7, #24]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004f1a:	e03a      	b.n	8004f92 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	617b      	str	r3, [r7, #20]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	18d1      	adds	r1, r2, r3
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f60:	f7ff ff06 	bl	8004d70 <prvInsertTimerInActiveList>
					break;
 8004f64:	e015      	b.n	8004f92 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f76:	f7fd fccf 	bl	8002918 <vPortFree>
 8004f7a:	e00a      	b.n	8004f92 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f8e:	e000      	b.n	8004f92 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004f90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f92:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <prvProcessReceivedCommands+0x1c0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	1d39      	adds	r1, r7, #4
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe fb08 	bl	80035b0 <xQueueReceive>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f47f af2a 	bne.w	8004dfc <prvProcessReceivedCommands+0x8>
	}
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	3730      	adds	r7, #48	; 0x30
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20001ce4 	.word	0x20001ce4

08004fb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fbe:	e048      	b.n	8005052 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fc0:	4b2d      	ldr	r3, [pc, #180]	; (8005078 <prvSwitchTimerLists+0xc0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fca:	4b2b      	ldr	r3, [pc, #172]	; (8005078 <prvSwitchTimerLists+0xc0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fd fe37 	bl	8002c4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02e      	beq.n	8005052 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	429a      	cmp	r2, r3
 8005004:	d90e      	bls.n	8005024 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005012:	4b19      	ldr	r3, [pc, #100]	; (8005078 <prvSwitchTimerLists+0xc0>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3304      	adds	r3, #4
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7fd fddd 	bl	8002bdc <vListInsert>
 8005022:	e016      	b.n	8005052 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005024:	2300      	movs	r3, #0
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	2100      	movs	r1, #0
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fd62 	bl	8004af8 <xTimerGenericCommand>
 8005034:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	603b      	str	r3, [r7, #0]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <prvSwitchTimerLists+0xc0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1b1      	bne.n	8004fc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <prvSwitchTimerLists+0xc0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <prvSwitchTimerLists+0xc4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a04      	ldr	r2, [pc, #16]	; (8005078 <prvSwitchTimerLists+0xc0>)
 8005068:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800506a:	4a04      	ldr	r2, [pc, #16]	; (800507c <prvSwitchTimerLists+0xc4>)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	6013      	str	r3, [r2, #0]
}
 8005070:	bf00      	nop
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20001cdc 	.word	0x20001cdc
 800507c:	20001ce0 	.word	0x20001ce0

08005080 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005086:	f7fd fef9 	bl	8002e7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <prvCheckForValidListAndQueue+0x60>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d120      	bne.n	80050d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005092:	4814      	ldr	r0, [pc, #80]	; (80050e4 <prvCheckForValidListAndQueue+0x64>)
 8005094:	f7fd fd54 	bl	8002b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005098:	4813      	ldr	r0, [pc, #76]	; (80050e8 <prvCheckForValidListAndQueue+0x68>)
 800509a:	f7fd fd51 	bl	8002b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800509e:	4b13      	ldr	r3, [pc, #76]	; (80050ec <prvCheckForValidListAndQueue+0x6c>)
 80050a0:	4a10      	ldr	r2, [pc, #64]	; (80050e4 <prvCheckForValidListAndQueue+0x64>)
 80050a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050a4:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <prvCheckForValidListAndQueue+0x70>)
 80050a6:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <prvCheckForValidListAndQueue+0x68>)
 80050a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050aa:	2300      	movs	r3, #0
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <prvCheckForValidListAndQueue+0x74>)
 80050b0:	4a11      	ldr	r2, [pc, #68]	; (80050f8 <prvCheckForValidListAndQueue+0x78>)
 80050b2:	2110      	movs	r1, #16
 80050b4:	200a      	movs	r0, #10
 80050b6:	f7fe f849 	bl	800314c <xQueueGenericCreateStatic>
 80050ba:	4603      	mov	r3, r0
 80050bc:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <prvCheckForValidListAndQueue+0x60>)
 80050be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <prvCheckForValidListAndQueue+0x60>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <prvCheckForValidListAndQueue+0x60>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	490b      	ldr	r1, [pc, #44]	; (80050fc <prvCheckForValidListAndQueue+0x7c>)
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fc5e 	bl	8003990 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050d4:	f7fd ff02 	bl	8002edc <vPortExitCritical>
}
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20001ce4 	.word	0x20001ce4
 80050e4:	20001cb4 	.word	0x20001cb4
 80050e8:	20001cc8 	.word	0x20001cc8
 80050ec:	20001cdc 	.word	0x20001cdc
 80050f0:	20001ce0 	.word	0x20001ce0
 80050f4:	20001d90 	.word	0x20001d90
 80050f8:	20001cf0 	.word	0x20001cf0
 80050fc:	080051cc 	.word	0x080051cc

08005100 <__libc_init_array>:
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	4d0d      	ldr	r5, [pc, #52]	; (8005138 <__libc_init_array+0x38>)
 8005104:	4c0d      	ldr	r4, [pc, #52]	; (800513c <__libc_init_array+0x3c>)
 8005106:	1b64      	subs	r4, r4, r5
 8005108:	10a4      	asrs	r4, r4, #2
 800510a:	2600      	movs	r6, #0
 800510c:	42a6      	cmp	r6, r4
 800510e:	d109      	bne.n	8005124 <__libc_init_array+0x24>
 8005110:	4d0b      	ldr	r5, [pc, #44]	; (8005140 <__libc_init_array+0x40>)
 8005112:	4c0c      	ldr	r4, [pc, #48]	; (8005144 <__libc_init_array+0x44>)
 8005114:	f000 f82e 	bl	8005174 <_init>
 8005118:	1b64      	subs	r4, r4, r5
 800511a:	10a4      	asrs	r4, r4, #2
 800511c:	2600      	movs	r6, #0
 800511e:	42a6      	cmp	r6, r4
 8005120:	d105      	bne.n	800512e <__libc_init_array+0x2e>
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	f855 3b04 	ldr.w	r3, [r5], #4
 8005128:	4798      	blx	r3
 800512a:	3601      	adds	r6, #1
 800512c:	e7ee      	b.n	800510c <__libc_init_array+0xc>
 800512e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005132:	4798      	blx	r3
 8005134:	3601      	adds	r6, #1
 8005136:	e7f2      	b.n	800511e <__libc_init_array+0x1e>
 8005138:	080052c8 	.word	0x080052c8
 800513c:	080052c8 	.word	0x080052c8
 8005140:	080052c8 	.word	0x080052c8
 8005144:	080052cc 	.word	0x080052cc

08005148 <memcpy>:
 8005148:	440a      	add	r2, r1
 800514a:	4291      	cmp	r1, r2
 800514c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005150:	d100      	bne.n	8005154 <memcpy+0xc>
 8005152:	4770      	bx	lr
 8005154:	b510      	push	{r4, lr}
 8005156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800515a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800515e:	4291      	cmp	r1, r2
 8005160:	d1f9      	bne.n	8005156 <memcpy+0xe>
 8005162:	bd10      	pop	{r4, pc}

08005164 <memset>:
 8005164:	4402      	add	r2, r0
 8005166:	4603      	mov	r3, r0
 8005168:	4293      	cmp	r3, r2
 800516a:	d100      	bne.n	800516e <memset+0xa>
 800516c:	4770      	bx	lr
 800516e:	f803 1b01 	strb.w	r1, [r3], #1
 8005172:	e7f9      	b.n	8005168 <memset+0x4>

08005174 <_init>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr

08005180 <_fini>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr
 800518c:	0000      	movs	r0, r0
	...
