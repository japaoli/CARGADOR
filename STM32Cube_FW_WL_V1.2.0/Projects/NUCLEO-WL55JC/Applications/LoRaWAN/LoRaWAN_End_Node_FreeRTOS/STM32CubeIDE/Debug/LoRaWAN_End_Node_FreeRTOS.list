
LoRaWAN_End_Node_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d20  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001030  08014e60  08014e60  00024e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e90  08015e90  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08015e90  08015e90  00025e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e98  08015e98  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015e98  08015e98  00025e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08015ea0  08015ea0  00025ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08015ea8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b18  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          000043a8  20000118  20000118  00040118  2**2
                  ALLOC
 12 RAM1_region   00000000  200044c0  200044c0  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  200044c0  200044c0  00040118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   000732d5  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000e005  00000000  00000000  000b18bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0003ae82  00000000  00000000  000bf8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003bf0  00000000  00000000  000fa748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003f08  00000000  00000000  000fe338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002f573  00000000  00000000  00102240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00068798  00000000  00000000  001317b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f7184  00000000  00000000  00199f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  002910cf  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000abb4  00000000  00000000  00291120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	08014e48 	.word	0x08014e48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	08014e48 	.word	0x08014e48

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	; 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_fmul>:
 8000884:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000888:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800088c:	bf1e      	ittt	ne
 800088e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000892:	ea92 0f0c 	teqne	r2, ip
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d06f      	beq.n	800097c <__aeabi_fmul+0xf8>
 800089c:	441a      	add	r2, r3
 800089e:	ea80 0c01 	eor.w	ip, r0, r1
 80008a2:	0240      	lsls	r0, r0, #9
 80008a4:	bf18      	it	ne
 80008a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008aa:	d01e      	beq.n	80008ea <__aeabi_fmul+0x66>
 80008ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b8:	fba0 3101 	umull	r3, r1, r0, r1
 80008bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008c4:	bf3e      	ittt	cc
 80008c6:	0049      	lslcc	r1, r1, #1
 80008c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008cc:	005b      	lslcc	r3, r3, #1
 80008ce:	ea40 0001 	orr.w	r0, r0, r1
 80008d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008d6:	2afd      	cmp	r2, #253	; 0xfd
 80008d8:	d81d      	bhi.n	8000916 <__aeabi_fmul+0x92>
 80008da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e2:	bf08      	it	eq
 80008e4:	f020 0001 	biceq.w	r0, r0, #1
 80008e8:	4770      	bx	lr
 80008ea:	f090 0f00 	teq	r0, #0
 80008ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f2:	bf08      	it	eq
 80008f4:	0249      	lsleq	r1, r1, #9
 80008f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008fe:	3a7f      	subs	r2, #127	; 0x7f
 8000900:	bfc2      	ittt	gt
 8000902:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000906:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800090a:	4770      	bxgt	lr
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	3a01      	subs	r2, #1
 8000916:	dc5d      	bgt.n	80009d4 <__aeabi_fmul+0x150>
 8000918:	f112 0f19 	cmn.w	r2, #25
 800091c:	bfdc      	itt	le
 800091e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000922:	4770      	bxle	lr
 8000924:	f1c2 0200 	rsb	r2, r2, #0
 8000928:	0041      	lsls	r1, r0, #1
 800092a:	fa21 f102 	lsr.w	r1, r1, r2
 800092e:	f1c2 0220 	rsb	r2, r2, #32
 8000932:	fa00 fc02 	lsl.w	ip, r0, r2
 8000936:	ea5f 0031 	movs.w	r0, r1, rrx
 800093a:	f140 0000 	adc.w	r0, r0, #0
 800093e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000942:	bf08      	it	eq
 8000944:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000948:	4770      	bx	lr
 800094a:	f092 0f00 	teq	r2, #0
 800094e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000952:	bf02      	ittt	eq
 8000954:	0040      	lsleq	r0, r0, #1
 8000956:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800095a:	3a01      	subeq	r2, #1
 800095c:	d0f9      	beq.n	8000952 <__aeabi_fmul+0xce>
 800095e:	ea40 000c 	orr.w	r0, r0, ip
 8000962:	f093 0f00 	teq	r3, #0
 8000966:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800096a:	bf02      	ittt	eq
 800096c:	0049      	lsleq	r1, r1, #1
 800096e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000972:	3b01      	subeq	r3, #1
 8000974:	d0f9      	beq.n	800096a <__aeabi_fmul+0xe6>
 8000976:	ea41 010c 	orr.w	r1, r1, ip
 800097a:	e78f      	b.n	800089c <__aeabi_fmul+0x18>
 800097c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000980:	ea92 0f0c 	teq	r2, ip
 8000984:	bf18      	it	ne
 8000986:	ea93 0f0c 	teqne	r3, ip
 800098a:	d00a      	beq.n	80009a2 <__aeabi_fmul+0x11e>
 800098c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000990:	bf18      	it	ne
 8000992:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000996:	d1d8      	bne.n	800094a <__aeabi_fmul+0xc6>
 8000998:	ea80 0001 	eor.w	r0, r0, r1
 800099c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f090 0f00 	teq	r0, #0
 80009a6:	bf17      	itett	ne
 80009a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009ac:	4608      	moveq	r0, r1
 80009ae:	f091 0f00 	teqne	r1, #0
 80009b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009b6:	d014      	beq.n	80009e2 <__aeabi_fmul+0x15e>
 80009b8:	ea92 0f0c 	teq	r2, ip
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fmul+0x13e>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d10f      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009c2:	ea93 0f0c 	teq	r3, ip
 80009c6:	d103      	bne.n	80009d0 <__aeabi_fmul+0x14c>
 80009c8:	024b      	lsls	r3, r1, #9
 80009ca:	bf18      	it	ne
 80009cc:	4608      	movne	r0, r1
 80009ce:	d108      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009d0:	ea80 0001 	eor.w	r0, r0, r1
 80009d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bx	lr

080009ec <__aeabi_fdiv>:
 80009ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f4:	bf1e      	ittt	ne
 80009f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009fa:	ea92 0f0c 	teqne	r2, ip
 80009fe:	ea93 0f0c 	teqne	r3, ip
 8000a02:	d069      	beq.n	8000ad8 <__aeabi_fdiv+0xec>
 8000a04:	eba2 0203 	sub.w	r2, r2, r3
 8000a08:	ea80 0c01 	eor.w	ip, r0, r1
 8000a0c:	0249      	lsls	r1, r1, #9
 8000a0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a12:	d037      	beq.n	8000a84 <__aeabi_fdiv+0x98>
 8000a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf38      	it	cc
 8000a28:	005b      	lslcc	r3, r3, #1
 8000a2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a32:	428b      	cmp	r3, r1
 8000a34:	bf24      	itt	cs
 8000a36:	1a5b      	subcs	r3, r3, r1
 8000a38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a4e:	bf24      	itt	cs
 8000a50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a5c:	bf24      	itt	cs
 8000a5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a6e:	d1e0      	bne.n	8000a32 <__aeabi_fdiv+0x46>
 8000a70:	2afd      	cmp	r2, #253	; 0xfd
 8000a72:	f63f af50 	bhi.w	8000916 <__aeabi_fmul+0x92>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8c:	327f      	adds	r2, #127	; 0x7f
 8000a8e:	bfc2      	ittt	gt
 8000a90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a98:	4770      	bxgt	lr
 8000a9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	e737      	b.n	8000916 <__aeabi_fmul+0x92>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0040      	lsleq	r0, r0, #1
 8000ab2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ab6:	3a01      	subeq	r2, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fdiv+0xc2>
 8000aba:	ea40 000c 	orr.w	r0, r0, ip
 8000abe:	f093 0f00 	teq	r3, #0
 8000ac2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac6:	bf02      	ittt	eq
 8000ac8:	0049      	lsleq	r1, r1, #1
 8000aca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ace:	3b01      	subeq	r3, #1
 8000ad0:	d0f9      	beq.n	8000ac6 <__aeabi_fdiv+0xda>
 8000ad2:	ea41 010c 	orr.w	r1, r1, ip
 8000ad6:	e795      	b.n	8000a04 <__aeabi_fdiv+0x18>
 8000ad8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000adc:	ea92 0f0c 	teq	r2, ip
 8000ae0:	d108      	bne.n	8000af4 <__aeabi_fdiv+0x108>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	f47f af7d 	bne.w	80009e2 <__aeabi_fmul+0x15e>
 8000ae8:	ea93 0f0c 	teq	r3, ip
 8000aec:	f47f af70 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e776      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	d104      	bne.n	8000b04 <__aeabi_fdiv+0x118>
 8000afa:	024b      	lsls	r3, r1, #9
 8000afc:	f43f af4c 	beq.w	8000998 <__aeabi_fmul+0x114>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e76e      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	d1ca      	bne.n	8000aa6 <__aeabi_fdiv+0xba>
 8000b10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b14:	f47f af5c 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000b18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b1c:	f47f af3c 	bne.w	8000998 <__aeabi_fmul+0x114>
 8000b20:	e75f      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b22:	bf00      	nop

08000b24 <__aeabi_f2iz>:
 8000b24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b2c:	d30f      	bcc.n	8000b4e <__aeabi_f2iz+0x2a>
 8000b2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_f2iz+0x30>
 8000b38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b40:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b44:	fa23 f002 	lsr.w	r0, r3, r2
 8000b48:	bf18      	it	ne
 8000b4a:	4240      	negne	r0, r0
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr
 8000b54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b58:	d101      	bne.n	8000b5e <__aeabi_f2iz+0x3a>
 8000b5a:	0242      	lsls	r2, r0, #9
 8000b5c:	d105      	bne.n	8000b6a <__aeabi_f2iz+0x46>
 8000b5e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b62:	bf08      	it	eq
 8000b64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_f2uiz>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	d20e      	bcs.n	8000b92 <__aeabi_f2uiz+0x22>
 8000b74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b78:	d30b      	bcc.n	8000b92 <__aeabi_f2uiz+0x22>
 8000b7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b82:	d409      	bmi.n	8000b98 <__aeabi_f2uiz+0x28>
 8000b84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr
 8000b98:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b9c:	d101      	bne.n	8000ba2 <__aeabi_f2uiz+0x32>
 8000b9e:	0242      	lsls	r2, r0, #9
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_f2uiz+0x38>
 8000ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b974 	b.w	8000eb0 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	4688      	mov	r8, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14d      	bne.n	8000c8c <__udivmoddi4+0xac>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4694      	mov	ip, r2
 8000bf4:	d968      	bls.n	8000cc8 <__udivmoddi4+0xe8>
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	b152      	cbz	r2, 8000c12 <__udivmoddi4+0x32>
 8000bfc:	fa01 f302 	lsl.w	r3, r1, r2
 8000c00:	f1c2 0120 	rsb	r1, r2, #32
 8000c04:	fa20 f101 	lsr.w	r1, r0, r1
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	ea41 0803 	orr.w	r8, r1, r3
 8000c10:	4094      	lsls	r4, r2
 8000c12:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c16:	0c21      	lsrs	r1, r4, #16
 8000c18:	fbb8 fef5 	udiv	lr, r8, r5
 8000c1c:	fa1f f78c 	uxth.w	r7, ip
 8000c20:	fb05 831e 	mls	r3, r5, lr, r8
 8000c24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c28:	fb0e f107 	mul.w	r1, lr, r7
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d90b      	bls.n	8000c48 <__udivmoddi4+0x68>
 8000c30:	eb1c 0303 	adds.w	r3, ip, r3
 8000c34:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c38:	f080 811e 	bcs.w	8000e78 <__udivmoddi4+0x298>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	f240 811b 	bls.w	8000e78 <__udivmoddi4+0x298>
 8000c42:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c50:	fb05 3310 	mls	r3, r5, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 f707 	mul.w	r7, r0, r7
 8000c5c:	42a7      	cmp	r7, r4
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x96>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c68:	f080 8108 	bcs.w	8000e7c <__udivmoddi4+0x29c>
 8000c6c:	42a7      	cmp	r7, r4
 8000c6e:	f240 8105 	bls.w	8000e7c <__udivmoddi4+0x29c>
 8000c72:	4464      	add	r4, ip
 8000c74:	3802      	subs	r0, #2
 8000c76:	1be4      	subs	r4, r4, r7
 8000c78:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa8>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0xc2>
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	f000 80ee 	beq.w	8000e72 <__udivmoddi4+0x292>
 8000c96:	2100      	movs	r1, #0
 8000c98:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x160>
 8000caa:	42ab      	cmp	r3, r5
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xd4>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80f9 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb65 0303 	sbc.w	r3, r5, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d0e2      	beq.n	8000c88 <__udivmoddi4+0xa8>
 8000cc2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc6:	e7df      	b.n	8000c88 <__udivmoddi4+0xa8>
 8000cc8:	b902      	cbnz	r2, 8000ccc <__udivmoddi4+0xec>
 8000cca:	deff      	udf	#255	; 0xff
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	f040 8091 	bne.w	8000df8 <__udivmoddi4+0x218>
 8000cd6:	eba1 050c 	sub.w	r5, r1, ip
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce8:	fb07 5013 	mls	r0, r7, r3, r5
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cf2:	fb0e f003 	mul.w	r0, lr, r3
 8000cf6:	42a8      	cmp	r0, r5
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x12c>
 8000cfa:	eb1c 0505 	adds.w	r5, ip, r5
 8000cfe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x12a>
 8000d04:	42a8      	cmp	r0, r5
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	1a2d      	subs	r5, r5, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d14:	fb07 5510 	mls	r5, r7, r0, r5
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x156>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x154>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d34:	4628      	mov	r0, r5
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3e:	e79e      	b.n	8000c7e <__udivmoddi4+0x9e>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d52:	fa05 f301 	lsl.w	r3, r5, r1
 8000d56:	431c      	orrs	r4, r3
 8000d58:	40fd      	lsrs	r5, r7
 8000d5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5e:	fa00 f301 	lsl.w	r3, r0, r1
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	0c20      	lsrs	r0, r4, #16
 8000d68:	fa1f fe8c 	uxth.w	lr, ip
 8000d6c:	fb09 5518 	mls	r5, r9, r8, r5
 8000d70:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d74:	fb08 f00e 	mul.w	r0, r8, lr
 8000d78:	42a8      	cmp	r0, r5
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d80:	eb1c 0505 	adds.w	r5, ip, r5
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2bc>
 8000d8c:	42a8      	cmp	r0, r5
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2bc>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4465      	add	r5, ip
 8000d98:	1a2d      	subs	r5, r5, r0
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000da0:	fb09 5510 	mls	r5, r9, r0, r5
 8000da4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45ae      	cmp	lr, r5
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1e2>
 8000db0:	eb1c 0505 	adds.w	r5, ip, r5
 8000db4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2b4>
 8000dba:	45ae      	cmp	lr, r5
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2b4>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4465      	add	r5, ip
 8000dc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dca:	eba5 050e 	sub.w	r5, r5, lr
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46a6      	mov	lr, r4
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x2a4>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x2a0>
 8000dd8:	b15e      	cbz	r6, 8000df2 <__udivmoddi4+0x212>
 8000dda:	ebb3 0208 	subs.w	r2, r3, r8
 8000dde:	eb65 050e 	sbc.w	r5, r5, lr
 8000de2:	fa05 f707 	lsl.w	r7, r5, r7
 8000de6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dea:	40cd      	lsrs	r5, r1
 8000dec:	431f      	orrs	r7, r3
 8000dee:	e9c6 7500 	strd	r7, r5, [r6]
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	fa25 f303 	lsr.w	r3, r5, r3
 8000e08:	4095      	lsls	r5, r2
 8000e0a:	430d      	orrs	r5, r1
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e18:	fb07 3011 	mls	r0, r7, r1, r3
 8000e1c:	0c2b      	lsrs	r3, r5, #16
 8000e1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e22:	fb01 f00e 	mul.w	r0, r1, lr
 8000e26:	4298      	cmp	r0, r3
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x260>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b8>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b8>
 8000e3c:	3902      	subs	r1, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a1b      	subs	r3, r3, r0
 8000e42:	b2ad      	uxth	r5, r5
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3310 	mls	r3, r7, r0, r3
 8000e4c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e50:	fb00 f30e 	mul.w	r3, r0, lr
 8000e54:	42ab      	cmp	r3, r5
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x28a>
 8000e58:	eb1c 0505 	adds.w	r5, ip, r5
 8000e5c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2b0>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2b0>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4465      	add	r5, ip
 8000e6a:	1aed      	subs	r5, r5, r3
 8000e6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0x104>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e707      	b.n	8000c88 <__udivmoddi4+0xa8>
 8000e78:	4686      	mov	lr, r0
 8000e7a:	e6e5      	b.n	8000c48 <__udivmoddi4+0x68>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fa      	b.n	8000c76 <__udivmoddi4+0x96>
 8000e80:	454b      	cmp	r3, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f8>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f8>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x28a>
 8000e94:	4620      	mov	r0, r4
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1e2>
 8000e98:	4641      	mov	r1, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x260>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b8>
 8000ea0:	3b02      	subs	r3, #2
 8000ea2:	4465      	add	r5, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x12c>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e709      	b.n	8000cbe <__udivmoddi4+0xde>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x156>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eb4:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000eb6:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_ADC_Init+0x50>)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_ADC_Init+0x54>)
 8000eba:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ec0:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec6:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec8:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	2204      	movs	r2, #4
 8000ecc:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ece:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ed0:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ed2:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ed8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000edc:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ede:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ee0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee8:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000eea:	2207      	movs	r2, #7
 8000eec:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000eee:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ef0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ef4:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ef6:	f002 f869 	bl	8002fcc <HAL_ADC_Init>
 8000efa:	b900      	cbnz	r0, 8000efe <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000efc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000efe:	f000 fbeb 	bl	80016d8 <Error_Handler>
}
 8000f02:	e7fb      	b.n	8000efc <MX_ADC_Init+0x48>
 8000f04:	20000134 	.word	0x20000134
 8000f08:	40012400 	.word	0x40012400

08000f0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f0c:	6802      	ldr	r2, [r0, #0]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_ADC_MspInit+0x28>)
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d000      	beq.n	8000f16 <HAL_ADC_MspInit+0xa>
 8000f14:	4770      	bx	lr
{
 8000f16:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f22:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f2a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f2c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f2e:	b002      	add	sp, #8
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40012400 	.word	0x40012400

08000f38 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f38:	6802      	ldr	r2, [r0, #0]
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_ADC_MspDeInit+0x18>)
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d000      	beq.n	8000f42 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f40:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f46:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	e7f7      	b.n	8000f40 <HAL_ADC_MspDeInit+0x8>
 8000f50:	40012400 	.word	0x40012400

08000f54 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f54:	b530      	push	{r4, r5, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f62:	f7ff ffa7 	bl	8000eb4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f66:	4816      	ldr	r0, [pc, #88]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f68:	f002 fc74 	bl	8003854 <HAL_ADCEx_Calibration_Start>
 8000f6c:	b9f8      	cbnz	r0, 8000fae <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f6e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f74:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f76:	a901      	add	r1, sp, #4
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f7a:	f002 f9b5 	bl	80032e8 <HAL_ADC_ConfigChannel>
 8000f7e:	b9c8      	cbnz	r0, 8000fb4 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f80:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f82:	f002 fb75 	bl	8003670 <HAL_ADC_Start>
 8000f86:	b9c0      	cbnz	r0, 8000fba <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f88:	4c0d      	ldr	r4, [pc, #52]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f002 f948 	bl	8003224 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f94:	4620      	mov	r0, r4
 8000f96:	f002 fc3d 	bl	8003814 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f002 f9a1 	bl	80032e2 <HAL_ADC_GetValue>
 8000fa0:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f002 fbe0 	bl	8003768 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fa8:	4628      	mov	r0, r5
 8000faa:	b005      	add	sp, #20
 8000fac:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fae:	f000 fb93 	bl	80016d8 <Error_Handler>
 8000fb2:	e7dc      	b.n	8000f6e <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000fb4:	f000 fb90 	bl	80016d8 <Error_Handler>
 8000fb8:	e7e2      	b.n	8000f80 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000fba:	f000 fb8d 	bl	80016d8 <Error_Handler>
 8000fbe:	e7e3      	b.n	8000f88 <ADC_ReadChannels+0x34>
 8000fc0:	20000134 	.word	0x20000134

08000fc4 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <SYS_InitMeasurement+0x8>)
 8000fc6:	4a02      	ldr	r2, [pc, #8]	; (8000fd0 <SYS_InitMeasurement+0xc>)
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	4770      	bx	lr
 8000fcc:	20000134 	.word	0x20000134
 8000fd0:	40012400 	.word	0x40012400

08000fd4 <SYS_GetBatteryLevel>:
{
 8000fd4:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <SYS_GetBatteryLevel+0x38>)
 8000fd8:	f7ff ffbc 	bl	8000f54 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000fdc:	b1a0      	cbz	r0, 8001008 <SYS_GetBatteryLevel+0x34>
 8000fde:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <SYS_GetBatteryLevel+0x3c>)
 8000fe2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d007      	beq.n	8000ffe <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000fee:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000ff2:	fb03 f000 	mul.w	r0, r3, r0
 8000ff6:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ffa:	b280      	uxth	r0, r0
 8000ffc:	e005      	b.n	800100a <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <SYS_GetBatteryLevel+0x40>)
 8001000:	fbb0 f0f2 	udiv	r0, r0, r2
 8001004:	b280      	uxth	r0, r0
 8001006:	e000      	b.n	800100a <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001008:	2000      	movs	r0, #0
}
 800100a:	bd08      	pop	{r3, pc}
 800100c:	b4002000 	.word	0xb4002000
 8001010:	1fff7500 	.word	0x1fff7500
 8001014:	004c08d8 	.word	0x004c08d8

08001018 <SYS_GetTemperatureLevel>:
{
 8001018:	b510      	push	{r4, lr}
 800101a:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001022:	f7ff ffd7 	bl	8000fd4 <SYS_GetBatteryLevel>
 8001026:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001028:	4821      	ldr	r0, [pc, #132]	; (80010b0 <SYS_GetTemperatureLevel+0x98>)
 800102a:	f7ff ff93 	bl	8000f54 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <SYS_GetTemperatureLevel+0x9c>)
 8001030:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8001034:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001038:	428a      	cmp	r2, r1
 800103a:	d01d      	beq.n	8001078 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800103c:	fb00 f304 	mul.w	r3, r0, r4
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	4c1d      	ldr	r4, [pc, #116]	; (80010b8 <SYS_GetTemperatureLevel+0xa0>)
 8001044:	fba4 0303 	umull	r0, r3, r4, r3
 8001048:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	fb00 f303 	mul.w	r3, r0, r3
 8001052:	1a52      	subs	r2, r2, r1
 8001054:	fb93 f3f2 	sdiv	r3, r3, r2
 8001058:	331e      	adds	r3, #30
 800105a:	b21b      	sxth	r3, r3
 800105c:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001060:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001064:	b21b      	sxth	r3, r3
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21b      	sxth	r3, r3
 800106a:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 800106e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8001072:	b200      	sxth	r0, r0
 8001074:	b002      	add	sp, #8
 8001076:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001078:	fb00 f404 	mul.w	r4, r0, r4
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <SYS_GetTemperatureLevel+0xa4>)
 800107e:	fba3 2304 	umull	r2, r3, r3, r4
 8001082:	1ae4      	subs	r4, r4, r3
 8001084:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001088:	0ae4      	lsrs	r4, r4, #11
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fb03 f404 	mul.w	r4, r3, r4
 8001092:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 8001096:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <SYS_GetTemperatureLevel+0xa8>)
 800109c:	fb83 2304 	smull	r2, r3, r3, r4
 80010a0:	17e4      	asrs	r4, r4, #31
 80010a2:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 80010a6:	341e      	adds	r4, #30
 80010a8:	b224      	sxth	r4, r4
 80010aa:	f8ad 4006 	strh.w	r4, [sp, #6]
 80010ae:	e7d7      	b.n	8001060 <SYS_GetTemperatureLevel+0x48>
 80010b0:	b0001000 	.word	0xb0001000
 80010b4:	1fff7500 	.word	0x1fff7500
 80010b8:	09ee009f 	.word	0x09ee009f
 80010bc:	00100101 	.word	0x00100101
 80010c0:	68db8bad 	.word	0x68db8bad

080010c4 <WakeUpTimer_Cb>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void  WakeUpTimer_Cb(void *context)
{
  /*Nothing to do*/
}
 80010c4:	4770      	bx	lr

080010c6 <app_freertos_ms_to_tick>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    tick = (uint32_t)((((uint64_t)(ms)) * configTICK_RATE_HZ) / configTICK_RATE_HZ_1MS);
  }
  return tick;
}
 80010c6:	4770      	bx	lr

080010c8 <app_freertos_tick_to_ms>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    ms = (uint32_t)((((uint64_t)(tick)) * configTICK_RATE_HZ_1MS) / configTICK_RATE_HZ);
  }
  return ms;
}
 80010c8:	4770      	bx	lr
	...

080010cc <prueba_LED>:
{
 80010cc:	b508      	push	{r3, lr}
	 HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 80010ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d2:	4804      	ldr	r0, [pc, #16]	; (80010e4 <prueba_LED+0x18>)
 80010d4:	f003 fa25 	bl	8004522 <HAL_GPIO_TogglePin>
	 HAL_Delay(1000);
 80010d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010dc:	f000 fdb0 	bl	8001c40 <HAL_Delay>
 while (1)
 80010e0:	e7f5      	b.n	80010ce <prueba_LED+0x2>
 80010e2:	bf00      	nop
 80010e4:	48000400 	.word	0x48000400

080010e8 <StartDefaultTask>:
{
 80010e8:	b508      	push	{r3, lr}
  MX_LoRaWAN_Init();
 80010ea:	f001 f965 	bl	80023b8 <MX_LoRaWAN_Init>
    osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 80010ee:	f04f 32ff 	mov.w	r2, #4294967295
 80010f2:	2101      	movs	r1, #1
 80010f4:	4608      	mov	r0, r1
 80010f6:	f006 ff71 	bl	8007fdc <osThreadFlagsWait>
  for(;;)
 80010fa:	e7f8      	b.n	80010ee <StartDefaultTask+0x6>

080010fc <PreSleepProcessing>:
{
 80010fc:	b570      	push	{r4, r5, r6, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	4604      	mov	r4, r0
  uint32_t WakeUpTimer_timeOut_ms = app_freertos_tick_to_ms(*ulExpectedIdleTime);
 8001102:	6800      	ldr	r0, [r0, #0]
 8001104:	f7ff ffe0 	bl	80010c8 <app_freertos_tick_to_ms>
 8001108:	4601      	mov	r1, r0
  UTIL_TIMER_Create(&WakeUpTimer, WakeUpTimer_timeOut_ms, UTIL_TIMER_ONESHOT, WakeUpTimer_Cb, NULL);
 800110a:	4e0a      	ldr	r6, [pc, #40]	; (8001134 <PreSleepProcessing+0x38>)
 800110c:	2500      	movs	r5, #0
 800110e:	9500      	str	r5, [sp, #0]
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <PreSleepProcessing+0x3c>)
 8001112:	462a      	mov	r2, r5
 8001114:	4630      	mov	r0, r6
 8001116:	f013 fb1f 	bl	8014758 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&WakeUpTimer);
 800111a:	4630      	mov	r0, r6
 800111c:	f013 fbd4 	bl	80148c8 <UTIL_TIMER_Start>
  Time_BeforeSleep = UTIL_TIMER_GetCurrentTime();
 8001120:	f013 fb38 	bl	8014794 <UTIL_TIMER_GetCurrentTime>
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <PreSleepProcessing+0x40>)
 8001126:	6018      	str	r0, [r3, #0]
  UTIL_LPM_EnterLowPower();
 8001128:	f013 f9ee 	bl	8014508 <UTIL_LPM_EnterLowPower>
  *ulExpectedIdleTime = 0;
 800112c:	6025      	str	r5, [r4, #0]
}
 800112e:	b002      	add	sp, #8
 8001130:	bd70      	pop	{r4, r5, r6, pc}
 8001132:	bf00      	nop
 8001134:	200001a0 	.word	0x200001a0
 8001138:	080010c5 	.word	0x080010c5
 800113c:	2000019c 	.word	0x2000019c

08001140 <PostSleepProcessing>:
{
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4604      	mov	r4, r0
  uint32_t SleepDuration = UTIL_TIMER_GetElapsedTime(Time_BeforeSleep);
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <PostSleepProcessing+0x20>)
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	f013 fb2e 	bl	80147a8 <UTIL_TIMER_GetElapsedTime>
 800114c:	4605      	mov	r5, r0
  UTIL_TIMER_Stop(&WakeUpTimer);
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <PostSleepProcessing+0x24>)
 8001150:	f013 fb60 	bl	8014814 <UTIL_TIMER_Stop>
  *ulExpectedIdleTime = app_freertos_ms_to_tick(SleepDuration);
 8001154:	4628      	mov	r0, r5
 8001156:	f7ff ffb6 	bl	80010c6 <app_freertos_ms_to_tick>
 800115a:	6020      	str	r0, [r4, #0]
}
 800115c:	bd38      	pop	{r3, r4, r5, pc}
 800115e:	bf00      	nop
 8001160:	2000019c 	.word	0x2000019c
 8001164:	200001a0 	.word	0x200001a0

08001168 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001168:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800116a:	4a07      	ldr	r2, [pc, #28]	; (8001188 <MX_FREERTOS_Init+0x20>)
 800116c:	2100      	movs	r1, #0
 800116e:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_FREERTOS_Init+0x24>)
 8001170:	f006 fe80 	bl	8007e74 <osThreadNew>
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_FREERTOS_Init+0x28>)
 8001176:	6018      	str	r0, [r3, #0]
  THREADHandle = osThreadNew(prueba_LED, NULL, &THREAD_attributes);//Este es mi hilo para el LED
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <MX_FREERTOS_Init+0x2c>)
 800117a:	2100      	movs	r1, #0
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_FREERTOS_Init+0x30>)
 800117e:	f006 fe79 	bl	8007e74 <osThreadNew>
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_FREERTOS_Init+0x34>)
 8001184:	6018      	str	r0, [r3, #0]
}
 8001186:	bd08      	pop	{r3, pc}
 8001188:	08014f20 	.word	0x08014f20
 800118c:	080010e9 	.word	0x080010e9
 8001190:	200001b8 	.word	0x200001b8
 8001194:	08014efc 	.word	0x08014efc
 8001198:	080010cd 	.word	0x080010cd
 800119c:	20000198 	.word	0x20000198

080011a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011a0:	b500      	push	{lr}
 80011a2:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011aa:	f042 0204 	orr.w	r2, r2, #4
 80011ae:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011b2:	f002 0204 	and.w	r2, r2, #4
 80011b6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80011b8:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80011ca:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 7, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2107      	movs	r1, #7
 80011d0:	200f      	movs	r0, #15
 80011d2:	f002 fbf1 	bl	80039b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011d6:	200f      	movs	r0, #15
 80011d8:	f002 fc26 	bl	8003a28 <HAL_NVIC_EnableIRQ>

}
 80011dc:	b003      	add	sp, #12
 80011de:	f85d fb04 	ldr.w	pc, [sp], #4

080011e2 <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80011e2:	e000      	b.n	80011e6 <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 80011e4:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80011e6:	f010 0307 	ands.w	r3, r0, #7
 80011ea:	d012      	beq.n	8001212 <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 80011ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80011f0:	2bff      	cmp	r3, #255	; 0xff
 80011f2:	d0f7      	beq.n	80011e4 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 80011f4:	2001      	movs	r0, #1
 80011f6:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 80011f8:	3901      	subs	r1, #1
  while (size != 0)
 80011fa:	b129      	cbz	r1, 8001208 <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 80011fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001200:	2bff      	cmp	r3, #255	; 0xff
 8001202:	d0f9      	beq.n	80011f8 <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8001204:	2001      	movs	r0, #1
 8001206:	e002      	b.n	800120e <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 8001208:	2000      	movs	r0, #0
 800120a:	e000      	b.n	800120e <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 800120c:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800120e:	bc10      	pop	{r4}
 8001210:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001212:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001216:	d212      	bcs.n	800123e <FLASH_IF_IsEmpty+0x5c>
{
 8001218:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 800121a:	4602      	mov	r2, r0
 800121c:	f852 4b08 	ldr.w	r4, [r2], #8
 8001220:	6840      	ldr	r0, [r0, #4]
 8001222:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001226:	bf08      	it	eq
 8001228:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 800122c:	d1ee      	bne.n	800120c <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800122e:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 8001230:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001232:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001236:	d3f0      	bcc.n	800121a <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 8001238:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 800123c:	e7dd      	b.n	80011fa <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 800123e:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001242:	b129      	cbz	r1, 8001250 <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 8001244:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001248:	2bff      	cmp	r3, #255	; 0xff
 800124a:	d103      	bne.n	8001254 <FLASH_IF_IsEmpty+0x72>
    size--;
 800124c:	3901      	subs	r1, #1
 800124e:	e7f8      	b.n	8001242 <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 8001250:	2000      	movs	r0, #0
 8001252:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 8001254:	2001      	movs	r0, #1
}
 8001256:	4770      	bx	lr

08001258 <FLASH_IF_Write64>:
{
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	4604      	mov	r4, r0
 800125c:	4616      	mov	r6, r2
 800125e:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 8001260:	e005      	b.n	800126e <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001262:	4632      	mov	r2, r6
 8001264:	462b      	mov	r3, r5
 8001266:	4621      	mov	r1, r4
 8001268:	2001      	movs	r0, #1
 800126a:	f002 ff09 	bl	8004080 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800126e:	6822      	ldr	r2, [r4, #0]
 8001270:	6863      	ldr	r3, [r4, #4]
 8001272:	42ab      	cmp	r3, r5
 8001274:	bf08      	it	eq
 8001276:	42b2      	cmpeq	r2, r6
 8001278:	d005      	beq.n	8001286 <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 800127a:	4904      	ldr	r1, [pc, #16]	; (800128c <FLASH_IF_Write64+0x34>)
 800127c:	6909      	ldr	r1, [r1, #16]
 800127e:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 8001282:	d1fa      	bne.n	800127a <FLASH_IF_Write64+0x22>
 8001284:	e7ed      	b.n	8001262 <FLASH_IF_Write64+0xa>
}
 8001286:	2000      	movs	r0, #0
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	bf00      	nop
 800128c:	58004000 	.word	0x58004000

08001290 <FLASH_IF_Write_Buffer>:
{
 8001290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	4606      	mov	r6, r0
 8001298:	460c      	mov	r4, r1
 800129a:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800129c:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 800129e:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80012a0:	e003      	b.n	80012aa <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 80012a2:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 80012a4:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 80012a6:	b9af      	cbnz	r7, 80012d4 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80012a8:	3501      	adds	r5, #1
 80012aa:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 80012ae:	d211      	bcs.n	80012d4 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80012b0:	2208      	movs	r2, #8
 80012b2:	4621      	mov	r1, r4
 80012b4:	4668      	mov	r0, sp
 80012b6:	f013 f94b 	bl	8014550 <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 80012ba:	9a00      	ldr	r2, [sp, #0]
 80012bc:	9b01      	ldr	r3, [sp, #4]
 80012be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c2:	bf08      	it	eq
 80012c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80012c8:	d0eb      	beq.n	80012a2 <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 80012ca:	4630      	mov	r0, r6
 80012cc:	f7ff ffc4 	bl	8001258 <FLASH_IF_Write64>
 80012d0:	4607      	mov	r7, r0
 80012d2:	e7e6      	b.n	80012a2 <FLASH_IF_Write_Buffer+0x12>
}
 80012d4:	4638      	mov	r0, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080012dc <FLASH_IF_EraseByPages>:
{
 80012dc:	b500      	push	{lr}
 80012de:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80012e0:	2302      	movs	r3, #2
 80012e2:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 80012e4:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 80012e6:	9103      	str	r1, [sp, #12]
  if (interrupt)
 80012e8:	b13a      	cbz	r2, 80012fa <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 80012ea:	a801      	add	r0, sp, #4
 80012ec:	f002 ff90 	bl	8004210 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80012f0:	b140      	cbz	r0, 8001304 <FLASH_IF_EraseByPages+0x28>
 80012f2:	2802      	cmp	r0, #2
 80012f4:	d10a      	bne.n	800130c <FLASH_IF_EraseByPages+0x30>
 80012f6:	2001      	movs	r0, #1
 80012f8:	e005      	b.n	8001306 <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80012fa:	4669      	mov	r1, sp
 80012fc:	a801      	add	r0, sp, #4
 80012fe:	f002 ff47 	bl	8004190 <HAL_FLASHEx_Erase>
 8001302:	e7f5      	b.n	80012f0 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001304:	2000      	movs	r0, #0
}
 8001306:	b005      	add	sp, #20
 8001308:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800130c:	f06f 0001 	mvn.w	r0, #1
 8001310:	e7f9      	b.n	8001306 <FLASH_IF_EraseByPages+0x2a>
	...

08001314 <FLASH_IF_Write>:
{
 8001314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001318:	4693      	mov	fp, r2
 800131a:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 800131c:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 8001320:	4b3e      	ldr	r3, [pc, #248]	; (800141c <FLASH_IF_Write+0x108>)
 8001322:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001326:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <FLASH_IF_Write+0x10c>)
 8001328:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 800132c:	fbb5 f2f3 	udiv	r2, r5, r3
 8001330:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001334:	eb00 0a0b 	add.w	sl, r0, fp
 8001338:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 800133c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001340:	fbba f2f3 	udiv	r2, sl, r3
 8001344:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001348:	2900      	cmp	r1, #0
 800134a:	d052      	beq.n	80013f2 <FLASH_IF_Write+0xde>
 800134c:	4606      	mov	r6, r0
 800134e:	0aed      	lsrs	r5, r5, #11
 8001350:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 8001354:	4688      	mov	r8, r1
 8001356:	f01b 0f07 	tst.w	fp, #7
 800135a:	d14d      	bne.n	80013f8 <FLASH_IF_Write+0xe4>
 800135c:	f010 0f07 	tst.w	r0, #7
 8001360:	d14d      	bne.n	80013fe <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <FLASH_IF_Write+0x110>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db4c      	blt.n	8001404 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 800136a:	4555      	cmp	r5, sl
 800136c:	d004      	beq.n	8001378 <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800136e:	f3c0 040a 	ubfx	r4, r0, #0, #11
 8001372:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 8001376:	e00d      	b.n	8001394 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 8001378:	465c      	mov	r4, fp
 800137a:	e00b      	b.n	8001394 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 800137c:	4622      	mov	r2, r4
 800137e:	4641      	mov	r1, r8
 8001380:	4630      	mov	r0, r6
 8001382:	f7ff ff85 	bl	8001290 <FLASH_IF_Write_Buffer>
 8001386:	2800      	cmp	r0, #0
 8001388:	d145      	bne.n	8001416 <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 800138a:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 800138c:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 800138e:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001392:	3501      	adds	r5, #1
 8001394:	4555      	cmp	r5, sl
 8001396:	d829      	bhi.n	80013ec <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001398:	4621      	mov	r1, r4
 800139a:	4630      	mov	r0, r6
 800139c:	f7ff ff21 	bl	80011e2 <FLASH_IF_IsEmpty>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d0eb      	beq.n	800137c <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 80013a4:	f1b9 0f00 	cmp.w	r9, #0
 80013a8:	d02f      	beq.n	800140a <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80013aa:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 80013ae:	02ff      	lsls	r7, r7, #11
 80013b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b4:	4639      	mov	r1, r7
 80013b6:	4648      	mov	r0, r9
 80013b8:	f013 f8ca 	bl	8014550 <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80013bc:	f3c6 000a 	ubfx	r0, r6, #0, #11
 80013c0:	b2a2      	uxth	r2, r4
 80013c2:	4641      	mov	r1, r8
 80013c4:	4448      	add	r0, r9
 80013c6:	f013 f8c3 	bl	8014550 <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80013ca:	2200      	movs	r2, #0
 80013cc:	2101      	movs	r1, #1
 80013ce:	4628      	mov	r0, r5
 80013d0:	f7ff ff84 	bl	80012dc <FLASH_IF_EraseByPages>
 80013d4:	b9e0      	cbnz	r0, 8001410 <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80013d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013da:	4649      	mov	r1, r9
 80013dc:	4638      	mov	r0, r7
 80013de:	f7ff ff57 	bl	8001290 <FLASH_IF_Write_Buffer>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d0d1      	beq.n	800138a <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 80013e6:	f06f 0002 	mvn.w	r0, #2
 80013ea:	e000      	b.n	80013ee <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 80013ec:	2000      	movs	r0, #0
}
 80013ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 80013f2:	f06f 0004 	mvn.w	r0, #4
 80013f6:	e7fa      	b.n	80013ee <FLASH_IF_Write+0xda>
 80013f8:	f06f 0004 	mvn.w	r0, #4
 80013fc:	e7f7      	b.n	80013ee <FLASH_IF_Write+0xda>
 80013fe:	f06f 0004 	mvn.w	r0, #4
 8001402:	e7f4      	b.n	80013ee <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 8001404:	f06f 0003 	mvn.w	r0, #3
 8001408:	e7f1      	b.n	80013ee <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 800140a:	f06f 0004 	mvn.w	r0, #4
 800140e:	e7ee      	b.n	80013ee <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 8001410:	f06f 0001 	mvn.w	r0, #1
 8001414:	e7eb      	b.n	80013ee <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 8001416:	f06f 0002 	mvn.w	r0, #2
 800141a:	e7e8      	b.n	80013ee <FLASH_IF_Write+0xda>
 800141c:	1fff7000 	.word	0x1fff7000
 8001420:	03fffc00 	.word	0x03fffc00
 8001424:	58004000 	.word	0x58004000

08001428 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	2400      	movs	r4, #0
 8001430:	9403      	str	r4, [sp, #12]
 8001432:	9404      	str	r4, [sp, #16]
 8001434:	9405      	str	r4, [sp, #20]
 8001436:	9406      	str	r4, [sp, #24]
 8001438:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001448:	f002 0201 	and.w	r2, r2, #1
 800144c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800144e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001452:	f042 0202 	orr.w	r2, r2, #2
 8001456:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001458:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800145a:	f002 0202 	and.w	r2, r2, #2
 800145e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001460:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001464:	f042 0204 	orr.w	r2, r2, #4
 8001468:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001472:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001474:	4e26      	ldr	r6, [pc, #152]	; (8001510 <MX_GPIO_Init+0xe8>)
 8001476:	4622      	mov	r2, r4
 8001478:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 800147c:	4630      	mov	r0, r6
 800147e:	f003 f84b 	bl	8004518 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001482:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8001486:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2501      	movs	r5, #1
 800148a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148e:	2302      	movs	r3, #2
 8001490:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	a903      	add	r1, sp, #12
 8001494:	4630      	mov	r0, r6
 8001496:	f002 feef 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 800149a:	f04f 0803 	mov.w	r8, #3
 800149e:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a2:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80014a6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	a903      	add	r1, sp, #12
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b0:	f002 fee2 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80014b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014b8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	a903      	add	r1, sp, #12
 80014c4:	4630      	mov	r0, r6
 80014c6:	f002 fed7 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80014ca:	2340      	movs	r3, #64	; 0x40
 80014cc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ce:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80014d2:	a903      	add	r1, sp, #12
 80014d4:	480f      	ldr	r0, [pc, #60]	; (8001514 <MX_GPIO_Init+0xec>)
 80014d6:	f002 fecf 	bl	8004278 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80014da:	4622      	mov	r2, r4
 80014dc:	2105      	movs	r1, #5
 80014de:	2006      	movs	r0, #6
 80014e0:	f002 fa6a 	bl	80039b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014e4:	2006      	movs	r0, #6
 80014e6:	f002 fa9f 	bl	8003a28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80014ea:	4622      	mov	r2, r4
 80014ec:	2105      	movs	r1, #5
 80014ee:	2007      	movs	r0, #7
 80014f0:	f002 fa62 	bl	80039b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014f4:	2007      	movs	r0, #7
 80014f6:	f002 fa97 	bl	8003a28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80014fa:	4622      	mov	r2, r4
 80014fc:	2105      	movs	r1, #5
 80014fe:	2016      	movs	r0, #22
 8001500:	f002 fa5a 	bl	80039b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001504:	2016      	movs	r0, #22
 8001506:	f002 fa8f 	bl	8003a28 <HAL_NVIC_EnableIRQ>

}
 800150a:	b008      	add	sp, #32
 800150c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001510:	48000400 	.word	0x48000400
 8001514:	48000800 	.word	0x48000800

08001518 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001518:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800151a:	4812      	ldr	r0, [pc, #72]	; (8001564 <MX_I2C1_Init+0x4c>)
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C1_Init+0x50>)
 800151e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00101520;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_I2C1_Init+0x54>)
 8001522:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001528:	2201      	movs	r2, #1
 800152a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800152e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001530:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001532:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001534:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001536:	f003 f80b 	bl	8004550 <HAL_I2C_Init>
 800153a:	b950      	cbnz	r0, 8001552 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153c:	2100      	movs	r1, #0
 800153e:	4809      	ldr	r0, [pc, #36]	; (8001564 <MX_I2C1_Init+0x4c>)
 8001540:	f003 f864 	bl	800460c <HAL_I2CEx_ConfigAnalogFilter>
 8001544:	b940      	cbnz	r0, 8001558 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001546:	2100      	movs	r1, #0
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_I2C1_Init+0x4c>)
 800154a:	f003 f88d 	bl	8004668 <HAL_I2CEx_ConfigDigitalFilter>
 800154e:	b930      	cbnz	r0, 800155e <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001550:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001552:	f000 f8c1 	bl	80016d8 <Error_Handler>
 8001556:	e7f1      	b.n	800153c <MX_I2C1_Init+0x24>
    Error_Handler();
 8001558:	f000 f8be 	bl	80016d8 <Error_Handler>
 800155c:	e7f3      	b.n	8001546 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800155e:	f000 f8bb 	bl	80016d8 <Error_Handler>
}
 8001562:	e7f5      	b.n	8001550 <MX_I2C1_Init+0x38>
 8001564:	200001bc 	.word	0x200001bc
 8001568:	40005400 	.word	0x40005400
 800156c:	00101520 	.word	0x00101520

08001570 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001570:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001572:	4812      	ldr	r0, [pc, #72]	; (80015bc <MX_I2C2_Init+0x4c>)
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_I2C2_Init+0x50>)
 8001576:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00101520;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_I2C2_Init+0x54>)
 800157a:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001580:	2201      	movs	r2, #1
 8001582:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001586:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001588:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800158e:	f002 ffdf 	bl	8004550 <HAL_I2C_Init>
 8001592:	b950      	cbnz	r0, 80015aa <MX_I2C2_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001594:	2100      	movs	r1, #0
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <MX_I2C2_Init+0x4c>)
 8001598:	f003 f838 	bl	800460c <HAL_I2CEx_ConfigAnalogFilter>
 800159c:	b940      	cbnz	r0, 80015b0 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_I2C2_Init+0x4c>)
 80015a2:	f003 f861 	bl	8004668 <HAL_I2CEx_ConfigDigitalFilter>
 80015a6:	b930      	cbnz	r0, 80015b6 <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015a8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015aa:	f000 f895 	bl	80016d8 <Error_Handler>
 80015ae:	e7f1      	b.n	8001594 <MX_I2C2_Init+0x24>
    Error_Handler();
 80015b0:	f000 f892 	bl	80016d8 <Error_Handler>
 80015b4:	e7f3      	b.n	800159e <MX_I2C2_Init+0x2e>
    Error_Handler();
 80015b6:	f000 f88f 	bl	80016d8 <Error_Handler>
}
 80015ba:	e7f5      	b.n	80015a8 <MX_I2C2_Init+0x38>
 80015bc:	20000208 	.word	0x20000208
 80015c0:	40005800 	.word	0x40005800
 80015c4:	00101520 	.word	0x00101520

080015c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c8:	b510      	push	{r4, lr}
 80015ca:	b098      	sub	sp, #96	; 0x60
 80015cc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	2100      	movs	r1, #0
 80015d0:	9113      	str	r1, [sp, #76]	; 0x4c
 80015d2:	9114      	str	r1, [sp, #80]	; 0x50
 80015d4:	9115      	str	r1, [sp, #84]	; 0x54
 80015d6:	9116      	str	r1, [sp, #88]	; 0x58
 80015d8:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015da:	2238      	movs	r2, #56	; 0x38
 80015dc:	a805      	add	r0, sp, #20
 80015de:	f013 fbab 	bl	8014d38 <memset>
  if(i2cHandle->Instance==I2C1)
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	4a33      	ldr	r2, [pc, #204]	; (80016b4 <HAL_I2C_MspInit+0xec>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d004      	beq.n	80015f4 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 80015ea:	4a33      	ldr	r2, [pc, #204]	; (80016b8 <HAL_I2C_MspInit+0xf0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d030      	beq.n	8001652 <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015f0:	b018      	add	sp, #96	; 0x60
 80015f2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015f8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015fc:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fe:	a805      	add	r0, sp, #20
 8001600:	f003 feb4 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 8001604:	bb10      	cbnz	r0, 800164c <HAL_I2C_MspInit+0x84>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001606:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800160a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001612:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800161a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800161c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001620:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001622:	2312      	movs	r3, #18
 8001624:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162c:	2304      	movs	r3, #4
 800162e:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	a913      	add	r1, sp, #76	; 0x4c
 8001632:	4822      	ldr	r0, [pc, #136]	; (80016bc <HAL_I2C_MspInit+0xf4>)
 8001634:	f002 fe20 	bl	8004278 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001638:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800163a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163e:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001640:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001646:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001648:	9b01      	ldr	r3, [sp, #4]
}
 800164a:	e7d1      	b.n	80015f0 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 800164c:	f000 f844 	bl	80016d8 <Error_Handler>
 8001650:	e7d9      	b.n	8001606 <HAL_I2C_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001656:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800165a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800165c:	a805      	add	r0, sp, #20
 800165e:	f003 fe85 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 8001662:	bb18      	cbnz	r0, 80016ac <HAL_I2C_MspInit+0xe4>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001664:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001668:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001670:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001678:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 800167a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800167e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001680:	2312      	movs	r3, #18
 8001682:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800168a:	2304      	movs	r3, #4
 800168c:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	a913      	add	r1, sp, #76	; 0x4c
 8001690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001694:	f002 fdf0 	bl	8004278 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800169a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800169e:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80016a8:	9b03      	ldr	r3, [sp, #12]
}
 80016aa:	e7a1      	b.n	80015f0 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80016ac:	f000 f814 	bl	80016d8 <Error_Handler>
 80016b0:	e7d8      	b.n	8001664 <HAL_I2C_MspInit+0x9c>
 80016b2:	bf00      	nop
 80016b4:	40005400 	.word	0x40005400
 80016b8:	40005800 	.word	0x40005800
 80016bc:	48000400 	.word	0x48000400

080016c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80016c2:	6802      	ldr	r2, [r0, #0]
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d000      	beq.n	80016cc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ca:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80016cc:	f001 fc48 	bl	8002f60 <HAL_IncTick>
}
 80016d0:	e7fb      	b.n	80016ca <HAL_TIM_PeriodElapsedCallback+0xa>
 80016d2:	bf00      	nop
 80016d4:	40014800 	.word	0x40014800

080016d8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016da:	e7fe      	b.n	80016da <Error_Handler+0x2>

080016dc <SystemClock_Config>:
{
 80016dc:	b510      	push	{r4, lr}
 80016de:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e0:	2248      	movs	r2, #72	; 0x48
 80016e2:	2100      	movs	r1, #0
 80016e4:	a808      	add	r0, sp, #32
 80016e6:	f013 fb27 	bl	8014d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ea:	2400      	movs	r4, #0
 80016ec:	9401      	str	r4, [sp, #4]
 80016ee:	9402      	str	r4, [sp, #8]
 80016f0:	9403      	str	r4, [sp, #12]
 80016f2:	9404      	str	r4, [sp, #16]
 80016f4:	9405      	str	r4, [sp, #20]
 80016f6:	9406      	str	r4, [sp, #24]
 80016f8:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80016fa:	f002 ffe1 	bl	80046c0 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001702:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001706:	f023 0318 	bic.w	r3, r3, #24
 800170a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800170e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001712:	6813      	ldr	r3, [r2, #0]
 8001714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	6813      	ldr	r3, [r2, #0]
 8001720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001728:	2324      	movs	r3, #36	; 0x24
 800172a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800172c:	2381      	movs	r3, #129	; 0x81
 800172e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001730:	2301      	movs	r3, #1
 8001732:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001734:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001736:	23b0      	movs	r3, #176	; 0xb0
 8001738:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800173a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173c:	a808      	add	r0, sp, #32
 800173e:	f003 f959 	bl	80049f4 <HAL_RCC_OscConfig>
 8001742:	b980      	cbnz	r0, 8001766 <SystemClock_Config+0x8a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001744:	234f      	movs	r3, #79	; 0x4f
 8001746:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001748:	2300      	movs	r3, #0
 800174a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800174e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001752:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001754:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001756:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001758:	2102      	movs	r1, #2
 800175a:	a801      	add	r0, sp, #4
 800175c:	f003 fc86 	bl	800506c <HAL_RCC_ClockConfig>
 8001760:	b918      	cbnz	r0, 800176a <SystemClock_Config+0x8e>
}
 8001762:	b01a      	add	sp, #104	; 0x68
 8001764:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001766:	f7ff ffb7 	bl	80016d8 <Error_Handler>
    Error_Handler();
 800176a:	f7ff ffb5 	bl	80016d8 <Error_Handler>
	...

08001770 <main>:
{
 8001770:	b508      	push	{r3, lr}
  HAL_Init();
 8001772:	f001 fbdf 	bl	8002f34 <HAL_Init>
  SystemClock_Config();
 8001776:	f7ff ffb1 	bl	80016dc <SystemClock_Config>
  MX_GPIO_Init();
 800177a:	f7ff fe55 	bl	8001428 <MX_GPIO_Init>
  MX_I2C1_Init();
 800177e:	f7ff fecb 	bl	8001518 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001782:	f7ff fef5 	bl	8001570 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001786:	f000 fb11 	bl	8001dac <MX_TIM1_Init>
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) //Aquí inicio el PWM pero no hace nada.
 800178a:	2104      	movs	r1, #4
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <main+0x38>)
 800178e:	f005 f891 	bl	80068b4 <HAL_TIM_PWM_Start>
 8001792:	b108      	cbz	r0, 8001798 <main+0x28>
     Error_Handler();
 8001794:	f7ff ffa0 	bl	80016d8 <Error_Handler>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001798:	f006 fb2a 	bl	8007df0 <osKernelInitialize>
  MX_FREERTOS_Init();
 800179c:	f7ff fce4 	bl	8001168 <MX_FREERTOS_Init>
  osKernelStart();
 80017a0:	f006 fb44 	bl	8007e2c <osKernelStart>
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <main+0x34>
 80017a6:	bf00      	nop
 80017a8:	200002e8 	.word	0x200002e8

080017ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017ac:	b500      	push	{lr}
 80017ae:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80017b0:	222c      	movs	r2, #44	; 0x2c
 80017b2:	2100      	movs	r1, #0
 80017b4:	a801      	add	r0, sp, #4
 80017b6:	f013 fabf 	bl	8014d38 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017ba:	4819      	ldr	r0, [pc, #100]	; (8001820 <MX_RTC_Init+0x74>)
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_RTC_Init+0x78>)
 80017be:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80017c0:	231f      	movs	r3, #31
 80017c2:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017c8:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017ca:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d0:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80017d2:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80017d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017da:	f003 ffd9 	bl	8005790 <HAL_RTC_Init>
 80017de:	b9a8      	cbnz	r0, 800180c <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80017e0:	480f      	ldr	r0, [pc, #60]	; (8001820 <MX_RTC_Init+0x74>)
 80017e2:	f004 f90f 	bl	8005a04 <HAL_RTCEx_SetSSRU_IT>
 80017e6:	b9a0      	cbnz	r0, 8001812 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80017e8:	2200      	movs	r2, #0
 80017ea:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017ec:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017ee:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80017f0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017f4:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80017f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fa:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80017fc:	a901      	add	r1, sp, #4
 80017fe:	4808      	ldr	r0, [pc, #32]	; (8001820 <MX_RTC_Init+0x74>)
 8001800:	f004 f824 	bl	800584c <HAL_RTC_SetAlarm_IT>
 8001804:	b940      	cbnz	r0, 8001818 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001806:	b00d      	add	sp, #52	; 0x34
 8001808:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800180c:	f7ff ff64 	bl	80016d8 <Error_Handler>
 8001810:	e7e6      	b.n	80017e0 <MX_RTC_Init+0x34>
    Error_Handler();
 8001812:	f7ff ff61 	bl	80016d8 <Error_Handler>
 8001816:	e7e7      	b.n	80017e8 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001818:	f7ff ff5e 	bl	80016d8 <Error_Handler>
}
 800181c:	e7f3      	b.n	8001806 <MX_RTC_Init+0x5a>
 800181e:	bf00      	nop
 8001820:	20000254 	.word	0x20000254
 8001824:	40002800 	.word	0x40002800

08001828 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001828:	b510      	push	{r4, lr}
 800182a:	b090      	sub	sp, #64	; 0x40
 800182c:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800182e:	2238      	movs	r2, #56	; 0x38
 8001830:	2100      	movs	r1, #0
 8001832:	a802      	add	r0, sp, #8
 8001834:	f013 fa80 	bl	8014d38 <memset>
  if(rtcHandle->Instance==RTC)
 8001838:	6822      	ldr	r2, [r4, #0]
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_RTC_MspInit+0x7c>)
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001840:	b010      	add	sp, #64	; 0x40
 8001842:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001848:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800184a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184e:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001850:	a802      	add	r0, sp, #8
 8001852:	f003 fd8b 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 8001856:	bb08      	cbnz	r0, 800189c <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001868:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800186a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800186e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001876:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001878:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 5, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2105      	movs	r1, #5
 800187e:	2002      	movs	r0, #2
 8001880:	f002 f89a 	bl	80039b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001884:	2002      	movs	r0, #2
 8001886:	f002 f8cf 	bl	8003a28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2105      	movs	r1, #5
 800188e:	202a      	movs	r0, #42	; 0x2a
 8001890:	f002 f892 	bl	80039b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001894:	202a      	movs	r0, #42	; 0x2a
 8001896:	f002 f8c7 	bl	8003a28 <HAL_NVIC_EnableIRQ>
}
 800189a:	e7d1      	b.n	8001840 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 800189c:	f7ff ff1c 	bl	80016d8 <Error_Handler>
 80018a0:	e7da      	b.n	8001858 <HAL_RTC_MspInit+0x30>
 80018a2:	bf00      	nop
 80018a4:	40002800 	.word	0x40002800

080018a8 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80018a8:	4770      	bx	lr

080018aa <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80018aa:	4770      	bx	lr

080018ac <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80018ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80018ae:	f000 f86b 	bl	8001988 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80018b2:	2001      	movs	r0, #1
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <PWR_EnterStopMode+0x14>)
 80018b6:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80018ba:	f002 ff65 	bl	8004788 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80018be:	bd08      	pop	{r3, pc}
 80018c0:	58000400 	.word	0x58000400

080018c4 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80018c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80018c6:	f000 f869 	bl	800199c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80018ca:	bd08      	pop	{r3, pc}

080018cc <PWR_ExitStopMode>:
{
 80018cc:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80018ce:	f000 f865 	bl	800199c <HAL_ResumeTick>
  vcom_Resume();
 80018d2:	f000 fd31 	bl	8002338 <vcom_Resume>
}
 80018d6:	bd08      	pop	{r3, pc}

080018d8 <PWR_EnterSleepMode>:
{
 80018d8:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 80018da:	f000 f855 	bl	8001988 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80018de:	2101      	movs	r1, #1
 80018e0:	2000      	movs	r0, #0
 80018e2:	f002 fef5 	bl	80046d0 <HAL_PWR_EnterSLEEPMode>
}
 80018e6:	bd08      	pop	{r3, pc}

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b508      	push	{r3, lr}

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	210f      	movs	r1, #15
 80018ee:	f06f 0001 	mvn.w	r0, #1
 80018f2:	f002 f861 	bl	80039b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bd08      	pop	{r3, pc}

080018f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b530      	push	{r4, r5, lr}
 80018fa:	b08b      	sub	sp, #44	; 0x2c
 80018fc:	4604      	mov	r4, r0
  SET_BIT(RCC->APB2ENR, Periphs);
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001902:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001904:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001908:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800190a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001910:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001912:	9b01      	ldr	r3, [sp, #4]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001914:	a902      	add	r1, sp, #8
 8001916:	a803      	add	r0, sp, #12
 8001918:	f003 fcfc 	bl	8005314 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800191c:	f003 fcea 	bl	80052f4 <HAL_RCC_GetPCLK2Freq>
 8001920:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001922:	4815      	ldr	r0, [pc, #84]	; (8001978 <HAL_InitTick+0x80>)
 8001924:	fba0 2303 	umull	r2, r3, r0, r3
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	3b01      	subs	r3, #1

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800192c:	4813      	ldr	r0, [pc, #76]	; (800197c <HAL_InitTick+0x84>)
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_InitTick+0x88>)
 8001930:	6002      	str	r2, [r0, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001932:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001936:	60c2      	str	r2, [r0, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001938:	6043      	str	r3, [r0, #4]
  htim17.Init.ClockDivision = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	6103      	str	r3, [r0, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	6083      	str	r3, [r0, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8001940:	f004 fe70 	bl	8006624 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001944:	4605      	mov	r5, r0
 8001946:	b110      	cbz	r0, 800194e <HAL_InitTick+0x56>
      }
    }
  }
 /* Return function status */
  return status;
}
 8001948:	4628      	mov	r0, r5
 800194a:	b00b      	add	sp, #44	; 0x2c
 800194c:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim17);
 800194e:	480b      	ldr	r0, [pc, #44]	; (800197c <HAL_InitTick+0x84>)
 8001950:	f004 fd2c 	bl	80063ac <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001954:	4605      	mov	r5, r0
 8001956:	2800      	cmp	r0, #0
 8001958:	d1f6      	bne.n	8001948 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800195a:	201d      	movs	r0, #29
 800195c:	f002 f864 	bl	8003a28 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001960:	2c0f      	cmp	r4, #15
 8001962:	d901      	bls.n	8001968 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8001964:	2501      	movs	r5, #1
 8001966:	e7ef      	b.n	8001948 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	4621      	mov	r1, r4
 800196c:	201d      	movs	r0, #29
 800196e:	f002 f823 	bl	80039b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <HAL_InitTick+0x8c>)
 8001974:	601c      	str	r4, [r3, #0]
 8001976:	e7e7      	b.n	8001948 <HAL_InitTick+0x50>
 8001978:	431bde83 	.word	0x431bde83
 800197c:	2000028c 	.word	0x2000028c
 8001980:	40014800 	.word	0x40014800
 8001984:	20000078 	.word	0x20000078

08001988 <HAL_SuspendTick>:
  * @retval None
  */
void HAL_SuspendTick(void)
{
  /* Disable TIM17 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim17, TIM_IT_UPDATE);
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_SuspendTick+0x10>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68d3      	ldr	r3, [r2, #12]
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	2000028c 	.word	0x2000028c

0800199c <HAL_ResumeTick>:
  * @retval None
  */
void HAL_ResumeTick(void)
{
  /* Enable TIM17 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_ResumeTick+0x10>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68d3      	ldr	r3, [r2, #12]
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2000028c 	.word	0x2000028c

080019b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler>

080019b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler>

080019b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler>

080019b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler>

080019b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <UsageFault_Handler>

080019ba <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ba:	4770      	bx	lr

080019bc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80019bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80019be:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 80019c0:	f004 f84c 	bl	8005a5c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80019c4:	bd08      	pop	{r3, pc}
 80019c6:	bf00      	nop
 80019c8:	20000254 	.word	0x20000254

080019cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f002 fdb0 	bl	8004534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019d4:	bd08      	pop	{r3, pc}

080019d6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80019d6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 80019d8:	2002      	movs	r0, #2
 80019da:	f002 fdab 	bl	8004534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019de:	bd08      	pop	{r3, pc}

080019e0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019e2:	4802      	ldr	r0, [pc, #8]	; (80019ec <DMA1_Channel5_IRQHandler+0xc>)
 80019e4:	f002 fa3e 	bl	8003e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019e8:	bd08      	pop	{r3, pc}
 80019ea:	bf00      	nop
 80019ec:	2000033c 	.word	0x2000033c

080019f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80019f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 80019f2:	2040      	movs	r0, #64	; 0x40
 80019f4:	f002 fd9e 	bl	8004534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019f8:	bd08      	pop	{r3, pc}
	...

080019fc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 80019fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80019fe:	4802      	ldr	r0, [pc, #8]	; (8001a08 <TIM17_IRQHandler+0xc>)
 8001a00:	f004 fd0a 	bl	8006418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001a04:	bd08      	pop	{r3, pc}
 8001a06:	bf00      	nop
 8001a08:	2000028c 	.word	0x2000028c

08001a0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a0e:	4802      	ldr	r0, [pc, #8]	; (8001a18 <USART2_IRQHandler+0xc>)
 8001a10:	f005 f982 	bl	8006d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a14:	bd08      	pop	{r3, pc}
 8001a16:	bf00      	nop
 8001a18:	2000039c 	.word	0x2000039c

08001a1c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a1e:	4802      	ldr	r0, [pc, #8]	; (8001a28 <RTC_Alarm_IRQHandler+0xc>)
 8001a20:	f003 fe2e 	bl	8005680 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a24:	bd08      	pop	{r3, pc}
 8001a26:	bf00      	nop
 8001a28:	20000254 	.word	0x20000254

08001a2c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001a2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001a2e:	4802      	ldr	r0, [pc, #8]	; (8001a38 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001a30:	f004 fabe 	bl	8005fb0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001a34:	bd08      	pop	{r3, pc}
 8001a36:	bf00      	nop
 8001a38:	200002d8 	.word	0x200002d8

08001a3c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001a3c:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_SUBGHZ_Init+0x18>)
 8001a40:	2308      	movs	r3, #8
 8001a42:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001a44:	f004 f840 	bl	8005ac8 <HAL_SUBGHZ_Init>
 8001a48:	b900      	cbnz	r0, 8001a4c <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001a4a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a4c:	f7ff fe44 	bl	80016d8 <Error_Handler>
}
 8001a50:	e7fb      	b.n	8001a4a <MX_SUBGHZ_Init+0xe>
 8001a52:	bf00      	nop
 8001a54:	200002d8 	.word	0x200002d8

08001a58 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001a58:	b500      	push	{lr}
 8001a5a:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a70:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2105      	movs	r1, #5
 8001a76:	2032      	movs	r0, #50	; 0x32
 8001a78:	f001 ff9e 	bl	80039b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001a7c:	2032      	movs	r0, #50	; 0x32
 8001a7e:	f001 ffd3 	bl	8003a28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001a82:	b003      	add	sp, #12
 8001a84:	f85d fb04 	ldr.w	pc, [sp], #4

08001a88 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001a88:	b40c      	push	{r2, r3}
 8001a8a:	b500      	push	{lr}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	ab04      	add	r3, sp, #16
 8001a90:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001a94:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001a96:	f013 f859 	bl	8014b4c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001a9a:	b003      	add	sp, #12
 8001a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001aa0:	b002      	add	sp, #8
 8001aa2:	4770      	bx	lr

08001aa4 <TimestampNow>:
{
 8001aa4:	b530      	push	{r4, r5, lr}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001aac:	a802      	add	r0, sp, #8
 8001aae:	f012 fdc3 	bl	8014638 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001ab2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	9b02      	ldr	r3, [sp, #8]
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <TimestampNow+0x2c>)
 8001abc:	2110      	movs	r1, #16
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f7ff ffe2 	bl	8001a88 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7fe fb5b 	bl	8000180 <strlen>
 8001aca:	8028      	strh	r0, [r5, #0]
}
 8001acc:	b005      	add	sp, #20
 8001ace:	bd30      	pop	{r4, r5, pc}
 8001ad0:	08014f5c 	.word	0x08014f5c

08001ad4 <SystemApp_Init>:
{
 8001ad4:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ada:	6893      	ldr	r3, [r2, #8]
 8001adc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ae0:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001ae2:	f012 fe2d 	bl	8014740 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001ae6:	2401      	movs	r4, #1
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <SystemApp_Init+0x4c>)
 8001aea:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001aec:	f000 f8b2 	bl	8001c54 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001af0:	f012 fba4 	bl	801423c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001af4:	480b      	ldr	r0, [pc, #44]	; (8001b24 <SystemApp_Init+0x50>)
 8001af6:	f012 fbbb 	bl	8014270 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <SystemApp_Init+0x54>)
 8001afc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b00:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001b02:	2002      	movs	r0, #2
 8001b04:	f012 fbba 	bl	801427c <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001b08:	f7ff fa5c 	bl	8000fc4 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001b0c:	f000 f90a 	bl	8001d24 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001b10:	f012 fcc4 	bl	801449c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001b14:	4621      	mov	r1, r4
 8001b16:	4620      	mov	r0, r4
 8001b18:	f012 fce0 	bl	80144dc <UTIL_LPM_SetOffMode>
}
 8001b1c:	bd10      	pop	{r4, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002e4 	.word	0x200002e4
 8001b24:	08001aa5 	.word	0x08001aa5
 8001b28:	58004000 	.word	0x58004000

08001b2c <GetBatteryLevel>:
{
 8001b2c:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001b2e:	f7ff fa51 	bl	8000fd4 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001b32:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b36:	4298      	cmp	r0, r3
 8001b38:	d80d      	bhi.n	8001b56 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001b3a:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001b3e:	d30c      	bcc.n	8001b5a <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001b40:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001b44:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001b48:	0040      	lsls	r0, r0, #1
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <GetBatteryLevel+0x34>)
 8001b4c:	fba3 3000 	umull	r3, r0, r3, r0
 8001b50:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001b54:	e000      	b.n	8001b58 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001b56:	20fe      	movs	r0, #254	; 0xfe
}
 8001b58:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	e7fc      	b.n	8001b58 <GetBatteryLevel+0x2c>
 8001b5e:	bf00      	nop
 8001b60:	1b4e81b5 	.word	0x1b4e81b5

08001b64 <GetTemperatureLevel>:
{
 8001b64:	b500      	push	{lr}
 8001b66:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001b68:	4668      	mov	r0, sp
 8001b6a:	f000 f8bf 	bl	8001cec <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001b6e:	9801      	ldr	r0, [sp, #4]
 8001b70:	f7fe ffd8 	bl	8000b24 <__aeabi_f2iz>
}
 8001b74:	b200      	sxth	r0, r0
 8001b76:	b007      	add	sp, #28
 8001b78:	f85d fb04 	ldr.w	pc, [sp], #4

08001b7c <GetUniqueId>:
{
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001b80:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <GetUniqueId+0x68>)
 8001b82:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8a:	d013      	beq.n	8001bb4 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001b8c:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001b8e:	0a1a      	lsrs	r2, r3, #8
 8001b90:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001b92:	0c1a      	lsrs	r2, r3, #16
 8001b94:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001b96:	0e1b      	lsrs	r3, r3, #24
 8001b98:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <GetUniqueId+0x68>)
 8001b9c:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001ba0:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001ba2:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001ba6:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001ba8:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001baa:	0c1a      	lsrs	r2, r3, #16
 8001bac:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001bae:	0e1b      	lsrs	r3, r3, #24
 8001bb0:	7003      	strb	r3, [r0, #0]
}
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001bb4:	f001 f9e0 	bl	8002f78 <HAL_GetUIDw0>
 8001bb8:	4605      	mov	r5, r0
 8001bba:	f001 f9e9 	bl	8002f90 <HAL_GetUIDw2>
 8001bbe:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001bc0:	f001 f9e0 	bl	8002f84 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001bc4:	0e2b      	lsrs	r3, r5, #24
 8001bc6:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001bc8:	0c2b      	lsrs	r3, r5, #16
 8001bca:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001bcc:	0a2b      	lsrs	r3, r5, #8
 8001bce:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001bd0:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001bd2:	0e03      	lsrs	r3, r0, #24
 8001bd4:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001bd6:	0c03      	lsrs	r3, r0, #16
 8001bd8:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001bda:	0a03      	lsrs	r3, r0, #8
 8001bdc:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001bde:	7020      	strb	r0, [r4, #0]
 8001be0:	e7e7      	b.n	8001bb2 <GetUniqueId+0x36>
 8001be2:	bf00      	nop
 8001be4:	1fff7000 	.word	0x1fff7000

08001be8 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <GetDevAddr+0x24>)
 8001bea:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 8001bee:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001bf2:	d000      	beq.n	8001bf6 <GetDevAddr+0xe>
}
 8001bf4:	4770      	bx	lr
{
 8001bf6:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001bf8:	f001 f9be 	bl	8002f78 <HAL_GetUIDw0>
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	f001 f9c1 	bl	8002f84 <HAL_GetUIDw1>
 8001c02:	4044      	eors	r4, r0
 8001c04:	f001 f9c4 	bl	8002f90 <HAL_GetUIDw2>
 8001c08:	4060      	eors	r0, r4
}
 8001c0a:	bd10      	pop	{r4, pc}
 8001c0c:	1fff7000 	.word	0x1fff7000

08001c10 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001c10:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c12:	2101      	movs	r1, #1
 8001c14:	2002      	movs	r0, #2
 8001c16:	f012 fc4b 	bl	80144b0 <UTIL_LPM_SetStopMode>
}
 8001c1a:	bd08      	pop	{r3, pc}

08001c1c <UTIL_ADV_TRACE_PostSendHook>:
{
 8001c1c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2002      	movs	r0, #2
 8001c22:	f012 fc45 	bl	80144b0 <UTIL_LPM_SetStopMode>
}
 8001c26:	bd08      	pop	{r3, pc}

08001c28 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c28:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001c2a:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <HAL_GetTick+0x14>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b90b      	cbnz	r3, 8001c34 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001c30:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001c32:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001c34:	f000 f94a 	bl	8001ecc <TIMER_IF_GetTimerValue>
 8001c38:	e7fb      	b.n	8001c32 <HAL_GetTick+0xa>
 8001c3a:	bf00      	nop
 8001c3c:	200002e4 	.word	0x200002e4

08001c40 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c40:	b500      	push	{lr}
 8001c42:	b083      	sub	sp, #12
 8001c44:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c46:	9801      	ldr	r0, [sp, #4]
 8001c48:	f000 fa26 	bl	8002098 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c4c:	b003      	add	sp, #12
 8001c4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c54 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c58:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <DBG_Init+0x90>)
 8001c5a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001c66:	f001 f999 	bl	8002f9c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001c6a:	f001 f99f 	bl	8002fac <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001c6e:	f001 f9a5 	bl	8002fbc <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001c72:	2400      	movs	r4, #0
 8001c74:	9403      	str	r4, [sp, #12]
 8001c76:	9404      	str	r4, [sp, #16]
 8001c78:	9405      	str	r4, [sp, #20]
 8001c7a:	9406      	str	r4, [sp, #24]
 8001c7c:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c8c:	f042 0202 	orr.w	r2, r2, #2
 8001c90:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c94:	f002 0202 	and.w	r2, r2, #2
 8001c98:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001c9a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c9e:	f042 0202 	orr.w	r2, r2, #2
 8001ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001cac:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001cae:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001cb2:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001cb4:	4d0c      	ldr	r5, [pc, #48]	; (8001ce8 <DBG_Init+0x94>)
 8001cb6:	a903      	add	r1, sp, #12
 8001cb8:	4628      	mov	r0, r5
 8001cba:	f002 fadd 	bl	8004278 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001cbe:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001cc2:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001cc4:	a903      	add	r1, sp, #12
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	f002 fad6 	bl	8004278 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001ccc:	4622      	mov	r2, r4
 8001cce:	4639      	mov	r1, r7
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	f002 fc21 	bl	8004518 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	4631      	mov	r1, r6
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f002 fc1c 	bl	8004518 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001ce0:	b009      	add	sp, #36	; 0x24
 8001ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce4:	58000800 	.word	0x58000800
 8001ce8:	48000400 	.word	0x48000400

08001cec <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001cec:	b510      	push	{r4, lr}
 8001cee:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001cf0:	f7ff f992 	bl	8001018 <SYS_GetTemperatureLevel>
 8001cf4:	f340 200f 	sbfx	r0, r0, #8, #16
 8001cf8:	f7fe fd70 	bl	80007dc <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <EnvSensors_Read+0x28>)
 8001cfe:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001d00:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <EnvSensors_Read+0x2c>)
 8001d04:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <EnvSensors_Read+0x30>)
 8001d08:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <EnvSensors_Read+0x34>)
 8001d0c:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001d0e:	2000      	movs	r0, #0
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	bf00      	nop
 8001d14:	42480000 	.word	0x42480000
 8001d18:	447a0000 	.word	0x447a0000
 8001d1c:	003e090d 	.word	0x003e090d
 8001d20:	000503ab 	.word	0x000503ab

08001d24 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001d24:	2000      	movs	r0, #0
 8001d26:	4770      	bx	lr

08001d28 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8001d28:	6802      	ldr	r2, [r0, #0]
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_TIM_PWM_MspInit+0x28>)
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d000      	beq.n	8001d32 <HAL_TIM_PWM_MspInit+0xa>
 8001d30:	4770      	bx	lr
{
 8001d32:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d46:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d48:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d4a:	b002      	add	sp, #8
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40012c00 	.word	0x40012c00

08001d54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d54:	b500      	push	{lr}
 8001d56:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	9302      	str	r3, [sp, #8]
 8001d5e:	9303      	str	r3, [sp, #12]
 8001d60:	9304      	str	r3, [sp, #16]
 8001d62:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8001d64:	6802      	ldr	r2, [r0, #0]
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_TIM_MspPostInit+0x54>)
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d002      	beq.n	8001d72 <HAL_TIM_MspPostInit+0x1e>


  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d6c:	b007      	add	sp, #28
 8001d6e:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001d86:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d8c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2203      	movs	r2, #3
 8001d98:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	a901      	add	r1, sp, #4
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da2:	f002 fa69 	bl	8004278 <HAL_GPIO_Init>
}
 8001da6:	e7e1      	b.n	8001d6c <HAL_TIM_MspPostInit+0x18>
 8001da8:	40012c00 	.word	0x40012c00

08001dac <MX_TIM1_Init>:
{
 8001dac:	b510      	push	{r4, lr}
 8001dae:	b098      	sub	sp, #96	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	2400      	movs	r4, #0
 8001db2:	9415      	str	r4, [sp, #84]	; 0x54
 8001db4:	9416      	str	r4, [sp, #88]	; 0x58
 8001db6:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db8:	940e      	str	r4, [sp, #56]	; 0x38
 8001dba:	940f      	str	r4, [sp, #60]	; 0x3c
 8001dbc:	9410      	str	r4, [sp, #64]	; 0x40
 8001dbe:	9411      	str	r4, [sp, #68]	; 0x44
 8001dc0:	9412      	str	r4, [sp, #72]	; 0x48
 8001dc2:	9413      	str	r4, [sp, #76]	; 0x4c
 8001dc4:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dc6:	2234      	movs	r2, #52	; 0x34
 8001dc8:	4621      	mov	r1, r4
 8001dca:	a801      	add	r0, sp, #4
 8001dcc:	f012 ffb4 	bl	8014d38 <memset>
  htim1.Instance = TIM1;
 8001dd0:	4827      	ldr	r0, [pc, #156]	; (8001e70 <MX_TIM1_Init+0xc4>)
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <MX_TIM1_Init+0xc8>)
 8001dd4:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001dd6:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 6000;
 8001dda:	f241 7370 	movw	r3, #6000	; 0x1770
 8001dde:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de0:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001de2:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001de6:	f004 fc4d 	bl	8006684 <HAL_TIM_PWM_Init>
 8001dea:	2800      	cmp	r0, #0
 8001dec:	d134      	bne.n	8001e58 <MX_TIM1_Init+0xac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001df2:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df6:	a915      	add	r1, sp, #84	; 0x54
 8001df8:	481d      	ldr	r0, [pc, #116]	; (8001e70 <MX_TIM1_Init+0xc4>)
 8001dfa:	f004 fded 	bl	80069d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	d12d      	bne.n	8001e5e <MX_TIM1_Init+0xb2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e02:	2360      	movs	r3, #96	; 0x60
 8001e04:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0a:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e0c:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0e:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e10:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e12:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e14:	2204      	movs	r2, #4
 8001e16:	a90e      	add	r1, sp, #56	; 0x38
 8001e18:	4815      	ldr	r0, [pc, #84]	; (8001e70 <MX_TIM1_Init+0xc4>)
 8001e1a:	f004 fc9f 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	bb08      	cbnz	r0, 8001e64 <MX_TIM1_Init+0xb8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e24:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e26:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e28:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e2a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e30:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e32:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e34:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e36:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3c:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e3e:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e40:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e42:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e44:	a901      	add	r1, sp, #4
 8001e46:	480a      	ldr	r0, [pc, #40]	; (8001e70 <MX_TIM1_Init+0xc4>)
 8001e48:	f004 fdfa 	bl	8006a40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e4c:	b968      	cbnz	r0, 8001e6a <MX_TIM1_Init+0xbe>
  HAL_TIM_MspPostInit(&htim1);
 8001e4e:	4808      	ldr	r0, [pc, #32]	; (8001e70 <MX_TIM1_Init+0xc4>)
 8001e50:	f7ff ff80 	bl	8001d54 <HAL_TIM_MspPostInit>
}
 8001e54:	b018      	add	sp, #96	; 0x60
 8001e56:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001e58:	f7ff fc3e 	bl	80016d8 <Error_Handler>
 8001e5c:	e7c7      	b.n	8001dee <MX_TIM1_Init+0x42>
    Error_Handler();
 8001e5e:	f7ff fc3b 	bl	80016d8 <Error_Handler>
 8001e62:	e7ce      	b.n	8001e02 <MX_TIM1_Init+0x56>
    Error_Handler();
 8001e64:	f7ff fc38 	bl	80016d8 <Error_Handler>
 8001e68:	e7da      	b.n	8001e20 <MX_TIM1_Init+0x74>
    Error_Handler();
 8001e6a:	f7ff fc35 	bl	80016d8 <Error_Handler>
 8001e6e:	e7ee      	b.n	8001e4e <MX_TIM1_Init+0xa2>
 8001e70:	200002e8 	.word	0x200002e8
 8001e74:	40012c00 	.word	0x40012c00

08001e78 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <TIMER_IF_SetTimerContext+0x1c>)
 8001e7a:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e7c:	e001      	b.n	8001e82 <TIMER_IF_SetTimerContext+0xa>
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <TIMER_IF_SetTimerContext+0x1c>)
 8001e80:	6898      	ldr	r0, [r3, #8]
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <TIMER_IF_SetTimerContext+0x1c>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4283      	cmp	r3, r0
 8001e88:	d1f9      	bne.n	8001e7e <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001e8a:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001e8c:	4b02      	ldr	r3, [pc, #8]	; (8001e98 <TIMER_IF_SetTimerContext+0x20>)
 8001e8e:	6018      	str	r0, [r3, #0]
}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40002800 	.word	0x40002800
 8001e98:	20000338 	.word	0x20000338

08001e9c <TIMER_IF_GetTimerContext>:
}
 8001e9c:	4b01      	ldr	r3, [pc, #4]	; (8001ea4 <TIMER_IF_GetTimerContext+0x8>)
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000338 	.word	0x20000338

08001ea8 <TIMER_IF_GetTimerElapsedTime>:
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001eaa:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001eac:	e001      	b.n	8001eb2 <TIMER_IF_GetTimerElapsedTime+0xa>
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001eb0:	6898      	ldr	r0, [r3, #8]
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4283      	cmp	r3, r0
 8001eb8:	d1f9      	bne.n	8001eae <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001eba:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	1ac0      	subs	r0, r0, r3
 8001ec2:	4770      	bx	lr
 8001ec4:	40002800 	.word	0x40002800
 8001ec8:	20000338 	.word	0x20000338

08001ecc <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <TIMER_IF_GetTimerValue+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b153      	cbz	r3, 8001ee8 <TIMER_IF_GetTimerValue+0x1c>
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <TIMER_IF_GetTimerValue+0x24>)
 8001ed4:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ed6:	e001      	b.n	8001edc <TIMER_IF_GetTimerValue+0x10>
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <TIMER_IF_GetTimerValue+0x24>)
 8001eda:	6898      	ldr	r0, [r3, #8]
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <TIMER_IF_GetTimerValue+0x24>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4283      	cmp	r3, r0
 8001ee2:	d1f9      	bne.n	8001ed8 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001ee4:	43c0      	mvns	r0, r0
 8001ee6:	4770      	bx	lr
  uint32_t ret = 0;
 8001ee8:	2000      	movs	r0, #0
}
 8001eea:	4770      	bx	lr
 8001eec:	20000334 	.word	0x20000334
 8001ef0:	40002800 	.word	0x40002800

08001ef4 <TIMER_IF_GetMinimumTimeout>:
}
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	4770      	bx	lr

08001ef8 <TIMER_IF_Convert_ms2Tick>:
{
 8001ef8:	b508      	push	{r3, lr}
 8001efa:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001efc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f00:	2300      	movs	r3, #0
 8001f02:	0280      	lsls	r0, r0, #10
 8001f04:	0d89      	lsrs	r1, r1, #22
 8001f06:	f7fe fe53 	bl	8000bb0 <__aeabi_uldivmod>
}
 8001f0a:	bd08      	pop	{r3, pc}

08001f0c <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001f0c:	0ec2      	lsrs	r2, r0, #27
 8001f0e:	0143      	lsls	r3, r0, #5
 8001f10:	1a1b      	subs	r3, r3, r0
 8001f12:	f162 0200 	sbc.w	r2, r2, #0
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	181b      	adds	r3, r3, r0
 8001f20:	f142 0000 	adc.w	r0, r2, #0
 8001f24:	00c0      	lsls	r0, r0, #3
 8001f26:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001f2a:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001f2e:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001f32:	4770      	bx	lr

08001f34 <TIMER_IF_StopTimer>:
{
 8001f34:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <TIMER_IF_StopTimer+0x20>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f3c:	4c06      	ldr	r4, [pc, #24]	; (8001f58 <TIMER_IF_StopTimer+0x24>)
 8001f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f42:	4620      	mov	r0, r4
 8001f44:	f003 fb5c 	bl	8005600 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4c:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001f4e:	2000      	movs	r0, #0
 8001f50:	bd10      	pop	{r4, pc}
 8001f52:	bf00      	nop
 8001f54:	40002800 	.word	0x40002800
 8001f58:	20000254 	.word	0x20000254

08001f5c <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001f5c:	b508      	push	{r3, lr}
 8001f5e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001f60:	2102      	movs	r1, #2
 8001f62:	4802      	ldr	r0, [pc, #8]	; (8001f6c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001f64:	f003 fd8f 	bl	8005a86 <HAL_RTCEx_BKUPWrite>
}
 8001f68:	bd08      	pop	{r3, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000254 	.word	0x20000254

08001f70 <TIMER_IF_Init>:
{
 8001f70:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <TIMER_IF_Init+0x40>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b10b      	cbz	r3, 8001f7c <TIMER_IF_Init+0xc>
}
 8001f78:	2000      	movs	r0, #0
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f7c:	4c0d      	ldr	r4, [pc, #52]	; (8001fb4 <TIMER_IF_Init+0x44>)
 8001f7e:	f04f 35ff 	mov.w	r5, #4294967295
 8001f82:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001f84:	f7ff fc12 	bl	80017ac <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001f88:	f7ff ffd4 	bl	8001f34 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f90:	4620      	mov	r0, r4
 8001f92:	f003 fb35 	bl	8005600 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f96:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f003 fd13 	bl	80059c4 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f7ff ffdc 	bl	8001f5c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001fa4:	f7ff ff68 	bl	8001e78 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001fa8:	4b01      	ldr	r3, [pc, #4]	; (8001fb0 <TIMER_IF_Init+0x40>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	e7e3      	b.n	8001f78 <TIMER_IF_Init+0x8>
 8001fb0:	20000334 	.word	0x20000334
 8001fb4:	20000254 	.word	0x20000254

08001fb8 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001fb8:	b508      	push	{r3, lr}
 8001fba:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001fc0:	f003 fd61 	bl	8005a86 <HAL_RTCEx_BKUPWrite>
}
 8001fc4:	bd08      	pop	{r3, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000254 	.word	0x20000254

08001fcc <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001fcc:	b508      	push	{r3, lr}
 8001fce:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4802      	ldr	r0, [pc, #8]	; (8001fdc <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001fd4:	f003 fd57 	bl	8005a86 <HAL_RTCEx_BKUPWrite>
}
 8001fd8:	bd08      	pop	{r3, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000254 	.word	0x20000254

08001fe0 <TIMER_IF_StartTimer>:
{
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001fe6:	222c      	movs	r2, #44	; 0x2c
 8001fe8:	2100      	movs	r1, #0
 8001fea:	a801      	add	r0, sp, #4
 8001fec:	f012 fea4 	bl	8014d38 <memset>
  TIMER_IF_StopTimer();
 8001ff0:	f7ff ffa0 	bl	8001f34 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <TIMER_IF_StartTimer+0x48>)
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001ffe:	43e4      	mvns	r4, r4
 8002000:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002002:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002004:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002008:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800200a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800200e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002010:	2201      	movs	r2, #1
 8002012:	a901      	add	r1, sp, #4
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <TIMER_IF_StartTimer+0x4c>)
 8002016:	f003 fc19 	bl	800584c <HAL_RTC_SetAlarm_IT>
 800201a:	b910      	cbnz	r0, 8002022 <TIMER_IF_StartTimer+0x42>
}
 800201c:	2000      	movs	r0, #0
 800201e:	b00c      	add	sp, #48	; 0x30
 8002020:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002022:	f7ff fb59 	bl	80016d8 <Error_Handler>
 8002026:	e7f9      	b.n	800201c <TIMER_IF_StartTimer+0x3c>
 8002028:	20000338 	.word	0x20000338
 800202c:	20000254 	.word	0x20000254

08002030 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002030:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002032:	2102      	movs	r1, #2
 8002034:	4801      	ldr	r0, [pc, #4]	; (800203c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8002036:	f003 fd2d 	bl	8005a94 <HAL_RTCEx_BKUPRead>
}
 800203a:	bd08      	pop	{r3, pc}
 800203c:	20000254 	.word	0x20000254

08002040 <TIMER_IF_GetTime>:
{
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	4605      	mov	r5, r0
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <TIMER_IF_GetTime+0x34>)
 8002046:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002048:	e001      	b.n	800204e <TIMER_IF_GetTime+0xe>
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <TIMER_IF_GetTime+0x34>)
 800204c:	689c      	ldr	r4, [r3, #8]
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <TIMER_IF_GetTime+0x34>)
 8002050:	6892      	ldr	r2, [r2, #8]
 8002052:	42a2      	cmp	r2, r4
 8002054:	d1f9      	bne.n	800204a <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8002056:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002058:	f7ff ffea 	bl	8002030 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800205c:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800205e:	0aa4      	lsrs	r4, r4, #10
 8002060:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002064:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002068:	f7ff ff50 	bl	8001f0c <TIMER_IF_Convert_Tick2ms>
 800206c:	8028      	strh	r0, [r5, #0]
}
 800206e:	4620      	mov	r0, r4
 8002070:	bd38      	pop	{r3, r4, r5, pc}
 8002072:	bf00      	nop
 8002074:	40002800 	.word	0x40002800

08002078 <TIMER_IF_BkUp_Read_Seconds>:
{
 8002078:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800207a:	2100      	movs	r1, #0
 800207c:	4801      	ldr	r0, [pc, #4]	; (8002084 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 800207e:	f003 fd09 	bl	8005a94 <HAL_RTCEx_BKUPRead>
}
 8002082:	bd08      	pop	{r3, pc}
 8002084:	20000254 	.word	0x20000254

08002088 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8002088:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800208a:	2101      	movs	r1, #1
 800208c:	4801      	ldr	r0, [pc, #4]	; (8002094 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 800208e:	f003 fd01 	bl	8005a94 <HAL_RTCEx_BKUPRead>
}
 8002092:	bd08      	pop	{r3, pc}
 8002094:	20000254 	.word	0x20000254

08002098 <TIMER_IF_DelayMs>:
{
 8002098:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800209a:	f7ff ff2d 	bl	8001ef8 <TIMER_IF_Convert_ms2Tick>
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <TIMER_IF_DelayMs+0x3c>)
 80020a0:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020a2:	e001      	b.n	80020a8 <TIMER_IF_DelayMs+0x10>
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <TIMER_IF_DelayMs+0x3c>)
 80020a6:	6899      	ldr	r1, [r3, #8]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <TIMER_IF_DelayMs+0x3c>)
 80020aa:	6892      	ldr	r2, [r2, #8]
 80020ac:	428a      	cmp	r2, r1
 80020ae:	d1f9      	bne.n	80020a4 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 80020b0:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80020b2:	e00a      	b.n	80020ca <TIMER_IF_DelayMs+0x32>
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <TIMER_IF_DelayMs+0x3c>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <TIMER_IF_DelayMs+0x3c>)
 80020ba:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020bc:	429a      	cmp	r2, r3
 80020be:	d1f9      	bne.n	80020b4 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 80020c0:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80020c2:	1a5b      	subs	r3, r3, r1
 80020c4:	4283      	cmp	r3, r0
 80020c6:	d203      	bcs.n	80020d0 <TIMER_IF_DelayMs+0x38>
    __NOP();
 80020c8:	bf00      	nop
 80020ca:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <TIMER_IF_DelayMs+0x3c>)
 80020cc:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020ce:	e7f3      	b.n	80020b8 <TIMER_IF_DelayMs+0x20>
}
 80020d0:	bd08      	pop	{r3, pc}
 80020d2:	bf00      	nop
 80020d4:	40002800 	.word	0x40002800

080020d8 <HAL_RTC_AlarmAEventCallback>:
{
 80020d8:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80020da:	f012 fc55 	bl	8014988 <UTIL_TIMER_IRQ_Handler>
}
 80020de:	bd08      	pop	{r3, pc}

080020e0 <HAL_RTCEx_SSRUEventCallback>:
{
 80020e0:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80020e2:	f7ff ffa5 	bl	8002030 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80020e6:	3001      	adds	r0, #1
 80020e8:	f7ff ff38 	bl	8001f5c <TIMER_IF_BkUp_Write_MSBticks>
}
 80020ec:	bd08      	pop	{r3, pc}
	...

080020f0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020f0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020f2:	4817      	ldr	r0, [pc, #92]	; (8002150 <MX_USART2_UART_Init+0x60>)
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <MX_USART2_UART_Init+0x64>)
 80020f6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80020f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80020fc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020fe:	2300      	movs	r3, #0
 8002100:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002102:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002104:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002106:	220c      	movs	r2, #12
 8002108:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800210c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800210e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002110:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002112:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002114:	f005 fc5f 	bl	80079d6 <HAL_UART_Init>
 8002118:	b970      	cbnz	r0, 8002138 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800211a:	2100      	movs	r1, #0
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <MX_USART2_UART_Init+0x60>)
 800211e:	f005 fe1c 	bl	8007d5a <HAL_UARTEx_SetTxFifoThreshold>
 8002122:	b960      	cbnz	r0, 800213e <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002124:	2100      	movs	r1, #0
 8002126:	480a      	ldr	r0, [pc, #40]	; (8002150 <MX_USART2_UART_Init+0x60>)
 8002128:	f005 fe3c 	bl	8007da4 <HAL_UARTEx_SetRxFifoThreshold>
 800212c:	b950      	cbnz	r0, 8002144 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800212e:	4808      	ldr	r0, [pc, #32]	; (8002150 <MX_USART2_UART_Init+0x60>)
 8002130:	f005 fdef 	bl	8007d12 <HAL_UARTEx_EnableFifoMode>
 8002134:	b948      	cbnz	r0, 800214a <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002136:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002138:	f7ff face 	bl	80016d8 <Error_Handler>
 800213c:	e7ed      	b.n	800211a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800213e:	f7ff facb 	bl	80016d8 <Error_Handler>
 8002142:	e7ef      	b.n	8002124 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002144:	f7ff fac8 	bl	80016d8 <Error_Handler>
 8002148:	e7f1      	b.n	800212e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 800214a:	f7ff fac5 	bl	80016d8 <Error_Handler>
}
 800214e:	e7f2      	b.n	8002136 <MX_USART2_UART_Init+0x46>
 8002150:	2000039c 	.word	0x2000039c
 8002154:	40004400 	.word	0x40004400

08002158 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002158:	b530      	push	{r4, r5, lr}
 800215a:	b097      	sub	sp, #92	; 0x5c
 800215c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215e:	2100      	movs	r1, #0
 8002160:	9111      	str	r1, [sp, #68]	; 0x44
 8002162:	9112      	str	r1, [sp, #72]	; 0x48
 8002164:	9113      	str	r1, [sp, #76]	; 0x4c
 8002166:	9114      	str	r1, [sp, #80]	; 0x50
 8002168:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800216a:	2238      	movs	r2, #56	; 0x38
 800216c:	a803      	add	r0, sp, #12
 800216e:	f012 fde3 	bl	8014d38 <memset>
  if(uartHandle->Instance==USART2)
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_UART_MspInit+0xd4>)
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800217a:	b017      	add	sp, #92	; 0x5c
 800217c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800217e:	2302      	movs	r3, #2
 8002180:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_UART_MspInit+0xd8>)
 8002184:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002186:	a803      	add	r0, sp, #12
 8002188:	f003 f8f0 	bl	800536c <HAL_RCCEx_PeriphCLKConfig>
 800218c:	2800      	cmp	r0, #0
 800218e:	d144      	bne.n	800221a <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002194:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002196:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800219a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800219c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800219e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80021a2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80021a4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80021b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80021b8:	230c      	movs	r3, #12
 80021ba:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2500      	movs	r5, #0
 80021c2:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c8:	2307      	movs	r3, #7
 80021ca:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021cc:	a911      	add	r1, sp, #68	; 0x44
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d2:	f002 f851 	bl	8004278 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80021d6:	4817      	ldr	r0, [pc, #92]	; (8002234 <HAL_UART_MspInit+0xdc>)
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_UART_MspInit+0xe0>)
 80021da:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80021dc:	2314      	movs	r3, #20
 80021de:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e0:	2310      	movs	r3, #16
 80021e2:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e4:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ea:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ec:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021ee:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021f0:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021f2:	f001 fca9 	bl	8003b48 <HAL_DMA_Init>
 80021f6:	b998      	cbnz	r0, 8002220 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80021f8:	2110      	movs	r1, #16
 80021fa:	480e      	ldr	r0, [pc, #56]	; (8002234 <HAL_UART_MspInit+0xdc>)
 80021fc:	f001 fea6 	bl	8003f4c <HAL_DMA_ConfigChannelAttributes>
 8002200:	b988      	cbnz	r0, 8002226 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <HAL_UART_MspInit+0xdc>)
 8002204:	67a3      	str	r3, [r4, #120]	; 0x78
 8002206:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2107      	movs	r1, #7
 800220c:	2025      	movs	r0, #37	; 0x25
 800220e:	f001 fbd3 	bl	80039b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002212:	2025      	movs	r0, #37	; 0x25
 8002214:	f001 fc08 	bl	8003a28 <HAL_NVIC_EnableIRQ>
}
 8002218:	e7af      	b.n	800217a <HAL_UART_MspInit+0x22>
      Error_Handler();
 800221a:	f7ff fa5d 	bl	80016d8 <Error_Handler>
 800221e:	e7b7      	b.n	8002190 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8002220:	f7ff fa5a 	bl	80016d8 <Error_Handler>
 8002224:	e7e8      	b.n	80021f8 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8002226:	f7ff fa57 	bl	80016d8 <Error_Handler>
 800222a:	e7ea      	b.n	8002202 <HAL_UART_MspInit+0xaa>
 800222c:	40004400 	.word	0x40004400
 8002230:	000c0004 	.word	0x000c0004
 8002234:	2000033c 	.word	0x2000033c
 8002238:	40020058 	.word	0x40020058

0800223c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 800223c:	6802      	ldr	r2, [r0, #0]
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_UART_MspDeInit+0x34>)
 8002240:	429a      	cmp	r2, r3
 8002242:	d000      	beq.n	8002246 <HAL_UART_MspDeInit+0xa>
 8002244:	4770      	bx	lr
{
 8002246:	b510      	push	{r4, lr}
 8002248:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800224a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800224e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002250:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002254:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002256:	210c      	movs	r1, #12
 8002258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225c:	f002 f8de 	bl	800441c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002260:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002262:	f001 fce3 	bl	8003c2c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002266:	2025      	movs	r0, #37	; 0x25
 8002268:	f001 fbec 	bl	8003a44 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800226c:	bd10      	pop	{r4, pc}
 800226e:	bf00      	nop
 8002270:	40004400 	.word	0x40004400

08002274 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002274:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <vcom_Init+0x20>)
 8002278:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800227a:	f7fe ff91 	bl	80011a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800227e:	f7ff ff37 	bl	80020f0 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <vcom_Init+0x24>)
 8002284:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002288:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800228c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002290:	2000      	movs	r0, #0
 8002292:	bd08      	pop	{r3, pc}
 8002294:	20000430 	.word	0x20000430
 8002298:	58000800 	.word	0x58000800

0800229c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800229c:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80022aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80022b2:	4804      	ldr	r0, [pc, #16]	; (80022c4 <vcom_DeInit+0x28>)
 80022b4:	f7ff ffc2 	bl	800223c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80022b8:	200f      	movs	r0, #15
 80022ba:	f001 fbc3 	bl	8003a44 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80022be:	2000      	movs	r0, #0
 80022c0:	bd08      	pop	{r3, pc}
 80022c2:	bf00      	nop
 80022c4:	2000039c 	.word	0x2000039c

080022c8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80022c8:	b508      	push	{r3, lr}
 80022ca:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80022cc:	4601      	mov	r1, r0
 80022ce:	4802      	ldr	r0, [pc, #8]	; (80022d8 <vcom_Trace_DMA+0x10>)
 80022d0:	f004 fc4e 	bl	8006b70 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80022d4:	2000      	movs	r0, #0
 80022d6:	bd08      	pop	{r3, pc}
 80022d8:	2000039c 	.word	0x2000039c

080022dc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80022dc:	b510      	push	{r4, lr}
 80022de:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <vcom_ReceiveInit+0x50>)
 80022e2:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80022e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022e8:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80022ea:	ab02      	add	r3, sp, #8
 80022ec:	e913 0006 	ldmdb	r3, {r1, r2}
 80022f0:	480f      	ldr	r0, [pc, #60]	; (8002330 <vcom_ReceiveInit+0x54>)
 80022f2:	f005 fcb6 	bl	8007c62 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <vcom_ReceiveInit+0x54>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69da      	ldr	r2, [r3, #28]
 80022fc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002300:	d1f9      	bne.n	80022f6 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002308:	d0fb      	beq.n	8002302 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002310:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002312:	4c07      	ldr	r4, [pc, #28]	; (8002330 <vcom_ReceiveInit+0x54>)
 8002314:	4620      	mov	r0, r4
 8002316:	f005 fce5 	bl	8007ce4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800231a:	2201      	movs	r2, #1
 800231c:	4905      	ldr	r1, [pc, #20]	; (8002334 <vcom_ReceiveInit+0x58>)
 800231e:	4620      	mov	r0, r4
 8002320:	f005 fc30 	bl	8007b84 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002324:	2000      	movs	r0, #0
 8002326:	b002      	add	sp, #8
 8002328:	bd10      	pop	{r4, pc}
 800232a:	bf00      	nop
 800232c:	2000042c 	.word	0x2000042c
 8002330:	2000039c 	.word	0x2000039c
 8002334:	20000434 	.word	0x20000434

08002338 <vcom_Resume>:

void vcom_Resume(void)
{
 8002338:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800233a:	4807      	ldr	r0, [pc, #28]	; (8002358 <vcom_Resume+0x20>)
 800233c:	f005 fb4b 	bl	80079d6 <HAL_UART_Init>
 8002340:	b920      	cbnz	r0, 800234c <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002342:	4806      	ldr	r0, [pc, #24]	; (800235c <vcom_Resume+0x24>)
 8002344:	f001 fc00 	bl	8003b48 <HAL_DMA_Init>
 8002348:	b918      	cbnz	r0, 8002352 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800234a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800234c:	f7ff f9c4 	bl	80016d8 <Error_Handler>
 8002350:	e7f7      	b.n	8002342 <vcom_Resume+0xa>
    Error_Handler();
 8002352:	f7ff f9c1 	bl	80016d8 <Error_Handler>
}
 8002356:	e7f8      	b.n	800234a <vcom_Resume+0x12>
 8002358:	2000039c 	.word	0x2000039c
 800235c:	2000033c 	.word	0x2000033c

08002360 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002360:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002362:	6802      	ldr	r2, [r0, #0]
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_UART_TxCpltCallback+0x18>)
 8002366:	429a      	cmp	r2, r3
 8002368:	d000      	beq.n	800236c <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800236a:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_UART_TxCpltCallback+0x1c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2000      	movs	r0, #0
 8002372:	4798      	blx	r3
}
 8002374:	e7f9      	b.n	800236a <HAL_UART_TxCpltCallback+0xa>
 8002376:	bf00      	nop
 8002378:	40004400 	.word	0x40004400
 800237c:	20000430 	.word	0x20000430

08002380 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002380:	6802      	ldr	r2, [r0, #0]
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_UART_RxCpltCallback+0x2c>)
 8002384:	429a      	cmp	r2, r3
 8002386:	d000      	beq.n	800238a <HAL_UART_RxCpltCallback+0xa>
 8002388:	4770      	bx	lr
{
 800238a:	b510      	push	{r4, lr}
 800238c:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_UART_RxCpltCallback+0x30>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b12b      	cbz	r3, 80023a0 <HAL_UART_RxCpltCallback+0x20>
 8002394:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8002398:	b912      	cbnz	r2, 80023a0 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800239a:	2101      	movs	r1, #1
 800239c:	4805      	ldr	r0, [pc, #20]	; (80023b4 <HAL_UART_RxCpltCallback+0x34>)
 800239e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80023a0:	2201      	movs	r2, #1
 80023a2:	4904      	ldr	r1, [pc, #16]	; (80023b4 <HAL_UART_RxCpltCallback+0x34>)
 80023a4:	4620      	mov	r0, r4
 80023a6:	f005 fbed 	bl	8007b84 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80023aa:	bd10      	pop	{r4, pc}
 80023ac:	40004400 	.word	0x40004400
 80023b0:	2000042c 	.word	0x2000042c
 80023b4:	20000434 	.word	0x20000434

080023b8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80023b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80023ba:	f7ff fb8b 	bl	8001ad4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80023be:	f000 fbbb 	bl	8002b38 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80023c2:	bd08      	pop	{r3, pc}

080023c4 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80023c4:	4b01      	ldr	r3, [pc, #4]	; (80023cc <OnTxFrameCtrlChanged+0x8>)
 80023c6:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000058 	.word	0x20000058

080023d0 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80023d0:	4b01      	ldr	r3, [pc, #4]	; (80023d8 <OnPingSlotPeriodicityChanged+0x8>)
 80023d2:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000058 	.word	0x20000058

080023dc <OnBeaconStatusChange>:
  if (params != NULL)
 80023dc:	2800      	cmp	r0, #0
 80023de:	d03f      	beq.n	8002460 <OnBeaconStatusChange+0x84>
{
 80023e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e4:	b08c      	sub	sp, #48	; 0x30
 80023e6:	4603      	mov	r3, r0
    switch (params->State)
 80023e8:	7842      	ldrb	r2, [r0, #1]
 80023ea:	2a02      	cmp	r2, #2
 80023ec:	d00a      	beq.n	8002404 <OnBeaconStatusChange+0x28>
 80023ee:	2a03      	cmp	r2, #3
 80023f0:	d02f      	beq.n	8002452 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <OnBeaconStatusChange+0x88>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	4611      	mov	r1, r2
 80023f8:	2002      	movs	r0, #2
 80023fa:	f011 ff93 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 80023fe:	b00c      	add	sp, #48	; 0x30
 8002400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002404:	7c02      	ldrb	r2, [r0, #16]
 8002406:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 800240a:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800240e:	7d9c      	ldrb	r4, [r3, #22]
 8002410:	7ddd      	ldrb	r5, [r3, #23]
 8002412:	7e1e      	ldrb	r6, [r3, #24]
 8002414:	7e5f      	ldrb	r7, [r3, #25]
 8002416:	f893 c01a 	ldrb.w	ip, [r3, #26]
 800241a:	f893 e01b 	ldrb.w	lr, [r3, #27]
 800241e:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002422:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002426:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800242a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800242e:	9708      	str	r7, [sp, #32]
 8002430:	9607      	str	r6, [sp, #28]
 8002432:	9506      	str	r5, [sp, #24]
 8002434:	9405      	str	r4, [sp, #20]
 8002436:	685c      	ldr	r4, [r3, #4]
 8002438:	9404      	str	r4, [sp, #16]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	9303      	str	r3, [sp, #12]
 800243e:	9002      	str	r0, [sp, #8]
 8002440:	9101      	str	r1, [sp, #4]
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <OnBeaconStatusChange+0x8c>)
 8002446:	2200      	movs	r2, #0
 8002448:	4611      	mov	r1, r2
 800244a:	2002      	movs	r0, #2
 800244c:	f011 ff6a 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002450:	e7d5      	b.n	80023fe <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <OnBeaconStatusChange+0x90>)
 8002454:	2200      	movs	r2, #0
 8002456:	4611      	mov	r1, r2
 8002458:	2002      	movs	r0, #2
 800245a:	f011 ff63 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 800245e:	e7ce      	b.n	80023fe <OnBeaconStatusChange+0x22>
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	08014fb8 	.word	0x08014fb8
 8002468:	08014fd0 	.word	0x08014fd0
 800246c:	08015044 	.word	0x08015044

08002470 <OnClassChange>:
{
 8002470:	b500      	push	{lr}
 8002472:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <OnClassChange+0x1c>)
 8002476:	5c1b      	ldrb	r3, [r3, r0]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <OnClassChange+0x20>)
 800247c:	2200      	movs	r2, #0
 800247e:	4611      	mov	r1, r2
 8002480:	2002      	movs	r0, #2
 8002482:	f011 ff4f 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 8002486:	b003      	add	sp, #12
 8002488:	f85d fb04 	ldr.w	pc, [sp], #4
 800248c:	08015080 	.word	0x08015080
 8002490:	08015064 	.word	0x08015064

08002494 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8002494:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8002496:	2801      	cmp	r0, #1
 8002498:	d006      	beq.n	80024a8 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <OnNvmDataChange+0x24>)
 800249c:	2200      	movs	r2, #0
 800249e:	4611      	mov	r1, r2
 80024a0:	2002      	movs	r0, #2
 80024a2:	f011 ff3f 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80024a6:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <OnNvmDataChange+0x28>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	4611      	mov	r1, r2
 80024ae:	2002      	movs	r0, #2
 80024b0:	f011 ff38 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 80024b4:	e7f7      	b.n	80024a6 <OnNvmDataChange+0x12>
 80024b6:	bf00      	nop
 80024b8:	08015098 	.word	0x08015098
 80024bc:	08015084 	.word	0x08015084

080024c0 <OnTxTimerEvent>:
{
 80024c0:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LoraSendProcessId, 1);
 80024c2:	2101      	movs	r1, #1
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <OnTxTimerEvent+0x14>)
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	f005 fd40 	bl	8007f4c <osThreadFlagsSet>
  UTIL_TIMER_Start(&TxTimer);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <OnTxTimerEvent+0x18>)
 80024ce:	f012 f9fb 	bl	80148c8 <UTIL_TIMER_Start>
}
 80024d2:	bd08      	pop	{r3, pc}
 80024d4:	20000578 	.word	0x20000578
 80024d8:	2000059c 	.word	0x2000059c

080024dc <OnMacProcessNotify>:
{
 80024dc:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LmHandlerProcessId, 1);
 80024de:	2101      	movs	r1, #1
 80024e0:	4b02      	ldr	r3, [pc, #8]	; (80024ec <OnMacProcessNotify+0x10>)
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	f005 fd32 	bl	8007f4c <osThreadFlagsSet>
}
 80024e8:	bd08      	pop	{r3, pc}
 80024ea:	bf00      	nop
 80024ec:	20000574 	.word	0x20000574

080024f0 <OnSystemReset>:
{
 80024f0:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80024f2:	f008 fa57 	bl	800a9a4 <LmHandlerHalt>
 80024f6:	b100      	cbz	r0, 80024fa <OnSystemReset+0xa>
}
 80024f8:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80024fa:	f007 fed5 	bl	800a2a8 <LmHandlerJoinStatus>
 80024fe:	2801      	cmp	r0, #1
 8002500:	d1fa      	bne.n	80024f8 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002502:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002506:	4905      	ldr	r1, [pc, #20]	; (800251c <OnSystemReset+0x2c>)
 8002508:	68ca      	ldr	r2, [r1, #12]
 800250a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <OnSystemReset+0x30>)
 8002510:	4313      	orrs	r3, r2
 8002512:	60cb      	str	r3, [r1, #12]
 8002514:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002518:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800251a:	e7fd      	b.n	8002518 <OnSystemReset+0x28>
 800251c:	e000ed00 	.word	0xe000ed00
 8002520:	05fa0004 	.word	0x05fa0004

08002524 <OnTxPeriodicityChanged>:
{
 8002524:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <OnTxPeriodicityChanged+0x28>)
 8002528:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800252a:	b910      	cbnz	r0, 8002532 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800252c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002530:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002532:	4c07      	ldr	r4, [pc, #28]	; (8002550 <OnTxPeriodicityChanged+0x2c>)
 8002534:	4620      	mov	r0, r4
 8002536:	f012 f96d 	bl	8014814 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <OnTxPeriodicityChanged+0x28>)
 800253c:	6819      	ldr	r1, [r3, #0]
 800253e:	4620      	mov	r0, r4
 8002540:	f012 fa08 	bl	8014954 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002544:	4620      	mov	r0, r4
 8002546:	f012 f9bf 	bl	80148c8 <UTIL_TIMER_Start>
}
 800254a:	bd10      	pop	{r4, pc}
 800254c:	2000006c 	.word	0x2000006c
 8002550:	2000059c 	.word	0x2000059c

08002554 <OnTxData>:
  if ((params != NULL))
 8002554:	2800      	cmp	r0, #0
 8002556:	d042      	beq.n	80025de <OnTxData+0x8a>
{
 8002558:	b510      	push	{r4, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800255e:	7803      	ldrb	r3, [r0, #0]
 8002560:	b90b      	cbnz	r3, 8002566 <OnTxData+0x12>
}
 8002562:	b004      	add	sp, #16
 8002564:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002566:	2201      	movs	r2, #1
 8002568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800256c:	481c      	ldr	r0, [pc, #112]	; (80025e0 <OnTxData+0x8c>)
 800256e:	f001 ffd3 	bl	8004518 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8002572:	481c      	ldr	r0, [pc, #112]	; (80025e4 <OnTxData+0x90>)
 8002574:	f012 f9a8 	bl	80148c8 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <OnTxData+0x94>)
 800257a:	2200      	movs	r2, #0
 800257c:	4611      	mov	r1, r2
 800257e:	2002      	movs	r0, #2
 8002580:	f011 fed0 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8002584:	7c23      	ldrb	r3, [r4, #16]
 8002586:	f994 200a 	ldrsb.w	r2, [r4, #10]
 800258a:	f994 1018 	ldrsb.w	r1, [r4, #24]
 800258e:	9103      	str	r1, [sp, #12]
 8002590:	9202      	str	r2, [sp, #8]
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	68e3      	ldr	r3, [r4, #12]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <OnTxData+0x98>)
 800259a:	2200      	movs	r2, #0
 800259c:	4611      	mov	r1, r2
 800259e:	2003      	movs	r0, #3
 80025a0:	f011 fec0 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <OnTxData+0x9c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	4611      	mov	r1, r2
 80025aa:	2003      	movs	r0, #3
 80025ac:	f011 feba 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80025b0:	7a23      	ldrb	r3, [r4, #8]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10c      	bne.n	80025d0 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80025b6:	7a63      	ldrb	r3, [r4, #9]
 80025b8:	b143      	cbz	r3, 80025cc <OnTxData+0x78>
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <OnTxData+0xa0>)
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <OnTxData+0xa4>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	4611      	mov	r1, r2
 80025c4:	2003      	movs	r0, #3
 80025c6:	f011 fead 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 80025ca:	e7ca      	b.n	8002562 <OnTxData+0xe>
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <OnTxData+0xa8>)
 80025ce:	e7f5      	b.n	80025bc <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <OnTxData+0xac>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	4611      	mov	r1, r2
 80025d6:	2003      	movs	r0, #3
 80025d8:	f011 fea4 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 80025dc:	e7c1      	b.n	8002562 <OnTxData+0xe>
 80025de:	4770      	bx	lr
 80025e0:	48000400 	.word	0x48000400
 80025e4:	20000584 	.word	0x20000584
 80025e8:	080150b8 	.word	0x080150b8
 80025ec:	080150ec 	.word	0x080150ec
 80025f0:	08015120 	.word	0x08015120
 80025f4:	080150b4 	.word	0x080150b4
 80025f8:	08015130 	.word	0x08015130
 80025fc:	080150ac 	.word	0x080150ac
 8002600:	08015144 	.word	0x08015144

08002604 <OnJoinRequest>:
  if (joinParams != NULL)
 8002604:	b358      	cbz	r0, 800265e <OnJoinRequest+0x5a>
{
 8002606:	b510      	push	{r4, lr}
 8002608:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800260a:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800260e:	b9fb      	cbnz	r3, 8002650 <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002610:	4813      	ldr	r0, [pc, #76]	; (8002660 <OnJoinRequest+0x5c>)
 8002612:	f012 f8ff 	bl	8014814 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002616:	2200      	movs	r2, #0
 8002618:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800261c:	4811      	ldr	r0, [pc, #68]	; (8002664 <OnJoinRequest+0x60>)
 800261e:	f001 ff7b 	bl	8004518 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <OnJoinRequest+0x64>)
 8002624:	2200      	movs	r2, #0
 8002626:	4611      	mov	r1, r2
 8002628:	2002      	movs	r0, #2
 800262a:	f011 fe7b 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800262e:	79a3      	ldrb	r3, [r4, #6]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d006      	beq.n	8002642 <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <OnJoinRequest+0x68>)
 8002636:	2200      	movs	r2, #0
 8002638:	4611      	mov	r1, r2
 800263a:	2002      	movs	r0, #2
 800263c:	f011 fe72 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 8002640:	e00c      	b.n	800265c <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <OnJoinRequest+0x6c>)
 8002644:	2200      	movs	r2, #0
 8002646:	4611      	mov	r1, r2
 8002648:	2002      	movs	r0, #2
 800264a:	f011 fe6b 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 800264e:	e005      	b.n	800265c <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <OnJoinRequest+0x70>)
 8002652:	2200      	movs	r2, #0
 8002654:	4611      	mov	r1, r2
 8002656:	2002      	movs	r0, #2
 8002658:	f011 fe64 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 800265c:	bd10      	pop	{r4, pc}
 800265e:	4770      	bx	lr
 8002660:	2000052c 	.word	0x2000052c
 8002664:	48000400 	.word	0x48000400
 8002668:	08015154 	.word	0x08015154
 800266c:	0801518c 	.word	0x0801518c
 8002670:	0801516c 	.word	0x0801516c
 8002674:	080151ac 	.word	0x080151ac

08002678 <OnStopJoinTimerEvent>:
{
 8002678:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <OnStopJoinTimerEvent+0x40>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d013      	beq.n	80026aa <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002682:	4c0e      	ldr	r4, [pc, #56]	; (80026bc <OnStopJoinTimerEvent+0x44>)
 8002684:	2200      	movs	r2, #0
 8002686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800268a:	4620      	mov	r0, r4
 800268c:	f001 ff44 	bl	8004518 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002696:	4620      	mov	r0, r4
 8002698:	f001 ff3e 	bl	8004518 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800269c:	2200      	movs	r2, #0
 800269e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026a2:	4620      	mov	r0, r4
 80026a4:	f001 ff38 	bl	8004518 <HAL_GPIO_WritePin>
}
 80026a8:	bd10      	pop	{r4, pc}
    osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 80026aa:	2101      	movs	r1, #1
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <OnStopJoinTimerEvent+0x48>)
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	f005 fc4c 	bl	8007f4c <osThreadFlagsSet>
 80026b4:	e7e5      	b.n	8002682 <OnStopJoinTimerEvent+0xa>
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000
 80026bc:	48000400 	.word	0x48000400
 80026c0:	2000057c 	.word	0x2000057c

080026c4 <OnRxTimerLedEvent>:
{
 80026c4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026c6:	2200      	movs	r2, #0
 80026c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026cc:	4801      	ldr	r0, [pc, #4]	; (80026d4 <OnRxTimerLedEvent+0x10>)
 80026ce:	f001 ff23 	bl	8004518 <HAL_GPIO_WritePin>
}
 80026d2:	bd08      	pop	{r3, pc}
 80026d4:	48000400 	.word	0x48000400

080026d8 <OnTxTimerLedEvent>:
{
 80026d8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80026da:	2200      	movs	r2, #0
 80026dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026e0:	4801      	ldr	r0, [pc, #4]	; (80026e8 <OnTxTimerLedEvent+0x10>)
 80026e2:	f001 ff19 	bl	8004518 <HAL_GPIO_WritePin>
}
 80026e6:	bd08      	pop	{r3, pc}
 80026e8:	48000400 	.word	0x48000400

080026ec <OnRxData>:
  if (params != NULL)
 80026ec:	2900      	cmp	r1, #0
 80026ee:	d06e      	beq.n	80027ce <OnRxData+0xe2>
{
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	4604      	mov	r4, r0
 80026f6:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 80026f8:	2201      	movs	r2, #1
 80026fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026fe:	4834      	ldr	r0, [pc, #208]	; (80027d0 <OnRxData+0xe4>)
 8002700:	f001 ff0a 	bl	8004518 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002704:	4833      	ldr	r0, [pc, #204]	; (80027d4 <OnRxData+0xe8>)
 8002706:	f012 f8df 	bl	80148c8 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800270a:	782e      	ldrb	r6, [r5, #0]
 800270c:	2e00      	cmp	r6, #0
 800270e:	d042      	beq.n	8002796 <OnRxData+0xaa>
      if (appData != NULL)
 8002710:	2c00      	cmp	r4, #0
 8002712:	d03f      	beq.n	8002794 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002714:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8002716:	6863      	ldr	r3, [r4, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d03c      	beq.n	8002796 <OnRxData+0xaa>
          switch (appData->Port)
 800271c:	2e02      	cmp	r6, #2
 800271e:	d016      	beq.n	800274e <OnRxData+0x62>
 8002720:	2e03      	cmp	r6, #3
 8002722:	d138      	bne.n	8002796 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002724:	7862      	ldrb	r2, [r4, #1]
 8002726:	2a01      	cmp	r2, #1
 8002728:	d135      	bne.n	8002796 <OnRxData+0xaa>
                switch (appData->Buffer[0])
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d006      	beq.n	800273e <OnRxData+0x52>
 8002730:	2b02      	cmp	r3, #2
 8002732:	d008      	beq.n	8002746 <OnRxData+0x5a>
 8002734:	bb7b      	cbnz	r3, 8002796 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 8002736:	2000      	movs	r0, #0
 8002738:	f007 fe6a 	bl	800a410 <LmHandlerRequestClass>
                    break;
 800273c:	e02b      	b.n	8002796 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 800273e:	2001      	movs	r0, #1
 8002740:	f007 fe66 	bl	800a410 <LmHandlerRequestClass>
                    break;
 8002744:	e027      	b.n	8002796 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 8002746:	2002      	movs	r0, #2
 8002748:	f007 fe62 	bl	800a410 <LmHandlerRequestClass>
                    break;
 800274c:	e023      	b.n	8002796 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800274e:	7862      	ldrb	r2, [r4, #1]
 8002750:	2a01      	cmp	r2, #1
 8002752:	d120      	bne.n	8002796 <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <OnRxData+0xec>)
 800275c:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 800275e:	b963      	cbnz	r3, 800277a <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <OnRxData+0xf0>)
 8002762:	2200      	movs	r2, #0
 8002764:	4611      	mov	r1, r2
 8002766:	2003      	movs	r0, #3
 8002768:	f011 fddc 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800276c:	2200      	movs	r2, #0
 800276e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002772:	4817      	ldr	r0, [pc, #92]	; (80027d0 <OnRxData+0xe4>)
 8002774:	f001 fed0 	bl	8004518 <HAL_GPIO_WritePin>
 8002778:	e00d      	b.n	8002796 <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <OnRxData+0xf4>)
 800277c:	2200      	movs	r2, #0
 800277e:	4611      	mov	r1, r2
 8002780:	2003      	movs	r0, #3
 8002782:	f011 fdcf 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002786:	2201      	movs	r2, #1
 8002788:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800278c:	4810      	ldr	r0, [pc, #64]	; (80027d0 <OnRxData+0xe4>)
 800278e:	f001 fec3 	bl	8004518 <HAL_GPIO_WritePin>
 8002792:	e000      	b.n	8002796 <OnRxData+0xaa>
  uint8_t RxPort = 0;
 8002794:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8002796:	7c2b      	ldrb	r3, [r5, #16]
 8002798:	2b05      	cmp	r3, #5
 800279a:	d901      	bls.n	80027a0 <OnRxData+0xb4>
}
 800279c:	b006      	add	sp, #24
 800279e:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80027a0:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80027a4:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80027a8:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80027ac:	9005      	str	r0, [sp, #20]
 80027ae:	9104      	str	r1, [sp, #16]
 80027b0:	490c      	ldr	r1, [pc, #48]	; (80027e4 <OnRxData+0xf8>)
 80027b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027b6:	9303      	str	r3, [sp, #12]
 80027b8:	9202      	str	r2, [sp, #8]
 80027ba:	9601      	str	r6, [sp, #4]
 80027bc:	68eb      	ldr	r3, [r5, #12]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <OnRxData+0xfc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	4611      	mov	r1, r2
 80027c6:	2003      	movs	r0, #3
 80027c8:	f011 fdac 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 80027cc:	e7e6      	b.n	800279c <OnRxData+0xb0>
 80027ce:	4770      	bx	lr
 80027d0:	48000400 	.word	0x48000400
 80027d4:	20000544 	.word	0x20000544
 80027d8:	2000052a 	.word	0x2000052a
 80027dc:	080151c8 	.word	0x080151c8
 80027e0:	080151d4 	.word	0x080151d4
 80027e4:	080154a4 	.word	0x080154a4
 80027e8:	080151e0 	.word	0x080151e0

080027ec <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80027ec:	b538      	push	{r3, r4, r5, lr}
 80027ee:	4605      	mov	r5, r0
 80027f0:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80027f2:	f001 fbe9 	bl	8003fc8 <HAL_FLASH_Unlock>
 80027f6:	b100      	cbz	r0, 80027fa <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 80027f8:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <OnStoreContextRequest+0x4c>)
 80027fc:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <OnStoreContextRequest+0x50>)
 8002802:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 8002806:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 800280a:	fbb3 f3f0 	udiv	r3, r3, r0
 800280e:	fb00 f303 	mul.w	r3, r0, r3
 8002812:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 8002816:	2200      	movs	r2, #0
 8002818:	2101      	movs	r1, #1
 800281a:	0ad8      	lsrs	r0, r3, #11
 800281c:	f7fe fd5e 	bl	80012dc <FLASH_IF_EraseByPages>
 8002820:	b110      	cbz	r0, 8002828 <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 8002822:	f001 fbe9 	bl	8003ff8 <HAL_FLASH_Lock>
}
 8002826:	e7e7      	b.n	80027f8 <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 8002828:	2300      	movs	r3, #0
 800282a:	4622      	mov	r2, r4
 800282c:	4629      	mov	r1, r5
 800282e:	4804      	ldr	r0, [pc, #16]	; (8002840 <OnStoreContextRequest+0x54>)
 8002830:	f7fe fd70 	bl	8001314 <FLASH_IF_Write>
 8002834:	e7f5      	b.n	8002822 <OnStoreContextRequest+0x36>
 8002836:	bf00      	nop
 8002838:	1fff7000 	.word	0x1fff7000
 800283c:	03fffc00 	.word	0x03fffc00
 8002840:	0803f000 	.word	0x0803f000

08002844 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002844:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002846:	b28a      	uxth	r2, r1
 8002848:	4901      	ldr	r1, [pc, #4]	; (8002850 <OnRestoreContextRequest+0xc>)
 800284a:	f011 fe81 	bl	8014550 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800284e:	bd08      	pop	{r3, pc}
 8002850:	0803f000 	.word	0x0803f000

08002854 <StopJoin>:
{
 8002854:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002856:	4c1e      	ldr	r4, [pc, #120]	; (80028d0 <StopJoin+0x7c>)
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285e:	4620      	mov	r0, r4
 8002860:	f001 fe5a 	bl	8004518 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002864:	2201      	movs	r2, #1
 8002866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800286a:	4620      	mov	r0, r4
 800286c:	f001 fe54 	bl	8004518 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002870:	2201      	movs	r2, #1
 8002872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002876:	4620      	mov	r0, r4
 8002878:	f001 fe4e 	bl	8004518 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 800287c:	4815      	ldr	r0, [pc, #84]	; (80028d4 <StopJoin+0x80>)
 800287e:	f011 ffc9 	bl	8014814 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002882:	f008 f887 	bl	800a994 <LmHandlerStop>
 8002886:	b148      	cbz	r0, 800289c <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <StopJoin+0x84>)
 800288a:	2200      	movs	r2, #0
 800288c:	4611      	mov	r1, r2
 800288e:	2002      	movs	r0, #2
 8002890:	f011 fd48 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002894:	4811      	ldr	r0, [pc, #68]	; (80028dc <StopJoin+0x88>)
 8002896:	f012 f817 	bl	80148c8 <UTIL_TIMER_Start>
}
 800289a:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <StopJoin+0x8c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	4611      	mov	r1, r2
 80028a2:	2002      	movs	r0, #2
 80028a4:	f011 fd3e 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80028a8:	4c0e      	ldr	r4, [pc, #56]	; (80028e4 <StopJoin+0x90>)
 80028aa:	2501      	movs	r5, #1
 80028ac:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <StopJoin+0x94>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	4611      	mov	r1, r2
 80028b4:	2002      	movs	r0, #2
 80028b6:	f011 fd35 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80028ba:	480c      	ldr	r0, [pc, #48]	; (80028ec <StopJoin+0x98>)
 80028bc:	f007 fee6 	bl	800a68c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80028c0:	4629      	mov	r1, r5
 80028c2:	7820      	ldrb	r0, [r4, #0]
 80028c4:	f007 fc78 	bl	800a1b8 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <StopJoin+0x80>)
 80028ca:	f011 fffd 	bl	80148c8 <UTIL_TIMER_Start>
 80028ce:	e7e1      	b.n	8002894 <StopJoin+0x40>
 80028d0:	48000400 	.word	0x48000400
 80028d4:	2000059c 	.word	0x2000059c
 80028d8:	08015228 	.word	0x08015228
 80028dc:	2000055c 	.word	0x2000055c
 80028e0:	08015248 	.word	0x08015248
 80028e4:	20000000 	.word	0x20000000
 80028e8:	0801525c 	.word	0x0801525c
 80028ec:	20000058 	.word	0x20000058

080028f0 <Thd_LoraStopJoin>:
{
 80028f0:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80028f2:	f04f 32ff 	mov.w	r2, #4294967295
 80028f6:	2100      	movs	r1, #0
 80028f8:	2001      	movs	r0, #1
 80028fa:	f005 fb6f 	bl	8007fdc <osThreadFlagsWait>
    StopJoin();  /*what you want to do*/
 80028fe:	f7ff ffa9 	bl	8002854 <StopJoin>
  for (;;)
 8002902:	e7f6      	b.n	80028f2 <Thd_LoraStopJoin+0x2>

08002904 <StoreContext>:
{
 8002904:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002906:	f008 f855 	bl	800a9b4 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800290a:	f110 0f08 	cmn.w	r0, #8
 800290e:	d003      	beq.n	8002918 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002910:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002914:	d007      	beq.n	8002926 <StoreContext+0x22>
}
 8002916:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <StoreContext+0x30>)
 800291a:	2200      	movs	r2, #0
 800291c:	4611      	mov	r1, r2
 800291e:	2002      	movs	r0, #2
 8002920:	f011 fd00 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 8002924:	e7f7      	b.n	8002916 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <StoreContext+0x34>)
 8002928:	2200      	movs	r2, #0
 800292a:	4611      	mov	r1, r2
 800292c:	2002      	movs	r0, #2
 800292e:	f011 fcf9 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 8002932:	e7f0      	b.n	8002916 <StoreContext+0x12>
 8002934:	0801527c 	.word	0x0801527c
 8002938:	08015294 	.word	0x08015294

0800293c <Thd_LoraStoreContext>:
{
 800293c:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800293e:	f04f 32ff 	mov.w	r2, #4294967295
 8002942:	2100      	movs	r1, #0
 8002944:	2001      	movs	r0, #1
 8002946:	f005 fb49 	bl	8007fdc <osThreadFlagsWait>
    StoreContext();  /*what you want to do*/
 800294a:	f7ff ffdb 	bl	8002904 <StoreContext>
  for (;;)
 800294e:	e7f6      	b.n	800293e <Thd_LoraStoreContext+0x2>

08002950 <SendTxData>:
{
 8002950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002952:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002954:	f7ff f8ea 	bl	8001b2c <GetBatteryLevel>
 8002958:	4604      	mov	r4, r0
  EnvSensors_Read(&sensor_data);
 800295a:	a802      	add	r0, sp, #8
 800295c:	f7ff f9c6 	bl	8001cec <EnvSensors_Read>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002960:	9400      	str	r4, [sp, #0]
 8002962:	4b58      	ldr	r3, [pc, #352]	; (8002ac4 <SendTxData+0x174>)
 8002964:	2201      	movs	r2, #1
 8002966:	2100      	movs	r1, #0
 8002968:	2002      	movs	r0, #2
 800296a:	f011 fcdb 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800296e:	9803      	ldr	r0, [sp, #12]
 8002970:	f7fe f8d8 	bl	8000b24 <__aeabi_f2iz>
 8002974:	b200      	sxth	r0, r0
 8002976:	9000      	str	r0, [sp, #0]
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <SendTxData+0x178>)
 800297a:	2201      	movs	r2, #1
 800297c:	2100      	movs	r1, #0
 800297e:	2002      	movs	r0, #2
 8002980:	f011 fcd0 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8002984:	4c51      	ldr	r4, [pc, #324]	; (8002acc <SendTxData+0x17c>)
 8002986:	2302      	movs	r3, #2
 8002988:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800298a:	4951      	ldr	r1, [pc, #324]	; (8002ad0 <SendTxData+0x180>)
 800298c:	9804      	ldr	r0, [sp, #16]
 800298e:	f7fd ff79 	bl	8000884 <__aeabi_fmul>
 8002992:	f7fe f8ed 	bl	8000b70 <__aeabi_f2uiz>
 8002996:	b285      	uxth	r5, r0
  temperature = (int16_t)(sensor_data.temperature);
 8002998:	9803      	ldr	r0, [sp, #12]
 800299a:	f7fe f8c3 	bl	8000b24 <__aeabi_f2iz>
 800299e:	b206      	sxth	r6, r0
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 80029a0:	494c      	ldr	r1, [pc, #304]	; (8002ad4 <SendTxData+0x184>)
 80029a2:	9802      	ldr	r0, [sp, #8]
 80029a4:	f7fd ff6e 	bl	8000884 <__aeabi_fmul>
 80029a8:	4949      	ldr	r1, [pc, #292]	; (8002ad0 <SendTxData+0x180>)
 80029aa:	f7fe f81f 	bl	80009ec <__aeabi_fdiv>
 80029ae:	f7fe f8df 	bl	8000b70 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 80029b2:	6863      	ldr	r3, [r4, #4]
 80029b4:	4a48      	ldr	r2, [pc, #288]	; (8002ad8 <SendTxData+0x188>)
 80029b6:	7812      	ldrb	r2, [r2, #0]
 80029b8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 80029ba:	6863      	ldr	r3, [r4, #4]
 80029bc:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80029c0:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 80029c2:	6863      	ldr	r3, [r4, #4]
 80029c4:	7098      	strb	r0, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 80029c6:	6863      	ldr	r3, [r4, #4]
 80029c8:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 80029ca:	6863      	ldr	r3, [r4, #4]
 80029cc:	0a2a      	lsrs	r2, r5, #8
 80029ce:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 80029d0:	6863      	ldr	r3, [r4, #4]
 80029d2:	715d      	strb	r5, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 80029d4:	4b41      	ldr	r3, [pc, #260]	; (8002adc <SendTxData+0x18c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d002      	beq.n	80029e2 <SendTxData+0x92>
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d000      	beq.n	80029e2 <SendTxData+0x92>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 80029e0:	bb63      	cbnz	r3, 8002a3c <SendTxData+0xec>
    AppData.Buffer[i++] = 0;
 80029e2:	4a3a      	ldr	r2, [pc, #232]	; (8002acc <SendTxData+0x17c>)
 80029e4:	6851      	ldr	r1, [r2, #4]
 80029e6:	2300      	movs	r3, #0
 80029e8:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 80029ea:	6851      	ldr	r1, [r2, #4]
 80029ec:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 80029ee:	6852      	ldr	r2, [r2, #4]
 80029f0:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 80029f2:	7253      	strb	r3, [r2, #9]
 80029f4:	220a      	movs	r2, #10
  AppData.BufferSize = i;
 80029f6:	4b35      	ldr	r3, [pc, #212]	; (8002acc <SendTxData+0x17c>)
 80029f8:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <SendTxData+0x190>)
 80029fc:	7a5b      	ldrb	r3, [r3, #9]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d138      	bne.n	8002a74 <SendTxData+0x124>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002a02:	2200      	movs	r2, #0
 8002a04:	4b35      	ldr	r3, [pc, #212]	; (8002adc <SendTxData+0x18c>)
 8002a06:	78d9      	ldrb	r1, [r3, #3]
 8002a08:	4830      	ldr	r0, [pc, #192]	; (8002acc <SendTxData+0x17c>)
 8002a0a:	f007 fc5f 	bl	800a2cc <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d03e      	beq.n	8002a90 <SendTxData+0x140>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002a12:	f110 0f06 	cmn.w	r0, #6
 8002a16:	d043      	beq.n	8002aa0 <SendTxData+0x150>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002a18:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002a1a:	4c32      	ldr	r4, [pc, #200]	; (8002ae4 <SendTxData+0x194>)
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f011 fef9 	bl	8014814 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <SendTxData+0x198>)
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	42a9      	cmp	r1, r5
 8002a28:	bf38      	it	cc
 8002a2a:	4629      	movcc	r1, r5
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f011 ff91 	bl	8014954 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002a32:	4620      	mov	r0, r4
 8002a34:	f011 ff48 	bl	80148c8 <UTIL_TIMER_Start>
}
 8002a38:	b009      	add	sp, #36	; 0x24
 8002a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 8002a3c:	9d05      	ldr	r5, [sp, #20]
    longitude = sensor_data.longitude;
 8002a3e:	9c06      	ldr	r4, [sp, #24]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002a40:	4e22      	ldr	r6, [pc, #136]	; (8002acc <SendTxData+0x17c>)
 8002a42:	6877      	ldr	r7, [r6, #4]
 8002a44:	f7ff f872 	bl	8001b2c <GetBatteryLevel>
 8002a48:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002a4a:	6873      	ldr	r3, [r6, #4]
 8002a4c:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002a50:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002a52:	6873      	ldr	r3, [r6, #4]
 8002a54:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002a58:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002a5a:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002a5c:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002a60:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002a62:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002a66:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002a68:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002a6e:	739a      	strb	r2, [r3, #14]
 8002a70:	220f      	movs	r2, #15
 8002a72:	e7c0      	b.n	80029f6 <SendTxData+0xa6>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002a74:	f007 fc18 	bl	800a2a8 <LmHandlerJoinStatus>
 8002a78:	2801      	cmp	r0, #1
 8002a7a:	d1c2      	bne.n	8002a02 <SendTxData+0xb2>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8002a7c:	4818      	ldr	r0, [pc, #96]	; (8002ae0 <SendTxData+0x190>)
 8002a7e:	f011 fec9 	bl	8014814 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a88:	4818      	ldr	r0, [pc, #96]	; (8002aec <SendTxData+0x19c>)
 8002a8a:	f001 fd45 	bl	8004518 <HAL_GPIO_WritePin>
 8002a8e:	e7b8      	b.n	8002a02 <SendTxData+0xb2>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <SendTxData+0x1a0>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	2100      	movs	r1, #0
 8002a96:	4610      	mov	r0, r2
 8002a98:	f011 fc44 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	e7bc      	b.n	8002a1a <SendTxData+0xca>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002aa0:	f007 fbfc 	bl	800a29c <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002aa4:	4605      	mov	r5, r0
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d0b7      	beq.n	8002a1a <SendTxData+0xca>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <SendTxData+0x1a4>)
 8002aac:	fba3 2300 	umull	r2, r3, r3, r0
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <SendTxData+0x1a8>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4610      	mov	r0, r2
 8002abc:	f011 fc32 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 8002ac0:	e7ab      	b.n	8002a1a <SendTxData+0xca>
 8002ac2:	bf00      	nop
 8002ac4:	080152ac 	.word	0x080152ac
 8002ac8:	080152b8 	.word	0x080152b8
 8002acc:	20000004 	.word	0x20000004
 8002ad0:	41200000 	.word	0x41200000
 8002ad4:	42c80000 	.word	0x42c80000
 8002ad8:	2000052a 	.word	0x2000052a
 8002adc:	20000058 	.word	0x20000058
 8002ae0:	2000052c 	.word	0x2000052c
 8002ae4:	2000059c 	.word	0x2000059c
 8002ae8:	2000006c 	.word	0x2000006c
 8002aec:	48000400 	.word	0x48000400
 8002af0:	080152c4 	.word	0x080152c4
 8002af4:	10624dd3 	.word	0x10624dd3
 8002af8:	080152d4 	.word	0x080152d4

08002afc <Thd_LoraSendProcess>:
{
 8002afc:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002afe:	f04f 32ff 	mov.w	r2, #4294967295
 8002b02:	2100      	movs	r1, #0
 8002b04:	2001      	movs	r0, #1
 8002b06:	f005 fa69 	bl	8007fdc <osThreadFlagsWait>
    SendTxData();  /*what you want to do*/
 8002b0a:	f7ff ff21 	bl	8002950 <SendTxData>
  for (;;)
 8002b0e:	e7f6      	b.n	8002afe <Thd_LoraSendProcess+0x2>

08002b10 <Thd_LmHandlerProcess>:
{
 8002b10:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002b12:	f04f 32ff 	mov.w	r2, #4294967295
 8002b16:	2100      	movs	r1, #0
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f005 fa5f 	bl	8007fdc <osThreadFlagsWait>
    LmHandlerProcess(); /*what you want to do*/
 8002b1e:	f007 fc53 	bl	800a3c8 <LmHandlerProcess>
  for (;;)
 8002b22:	e7f6      	b.n	8002b12 <Thd_LmHandlerProcess+0x2>

08002b24 <OnJoinTimerLedEvent>:
{
 8002b24:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002b26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b2a:	4802      	ldr	r0, [pc, #8]	; (8002b34 <OnJoinTimerLedEvent+0x10>)
 8002b2c:	f001 fcf9 	bl	8004522 <HAL_GPIO_TogglePin>
}
 8002b30:	bd08      	pop	{r3, pc}
 8002b32:	bf00      	nop
 8002b34:	48000400 	.word	0x48000400

08002b38 <LoRaWAN_Init>:
{
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 8002b3c:	2400      	movs	r4, #0
 8002b3e:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002b40:	9402      	str	r4, [sp, #8]
 8002b42:	2502      	movs	r5, #2
 8002b44:	9501      	str	r5, [sp, #4]
 8002b46:	2601      	movs	r6, #1
 8002b48:	9600      	str	r6, [sp, #0]
 8002b4a:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <LoRaWAN_Init+0x170>)
 8002b4c:	4622      	mov	r2, r4
 8002b4e:	4621      	mov	r1, r4
 8002b50:	4628      	mov	r0, r5
 8002b52:	f011 fbe7 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002b56:	9402      	str	r4, [sp, #8]
 8002b58:	2304      	movs	r3, #4
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	9500      	str	r5, [sp, #0]
 8002b5e:	4b53      	ldr	r3, [pc, #332]	; (8002cac <LoRaWAN_Init+0x174>)
 8002b60:	4622      	mov	r2, r4
 8002b62:	4621      	mov	r1, r4
 8002b64:	4628      	mov	r0, r5
 8002b66:	f011 fbdd 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002b6a:	9402      	str	r4, [sp, #8]
 8002b6c:	9501      	str	r5, [sp, #4]
 8002b6e:	9600      	str	r6, [sp, #0]
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <LoRaWAN_Init+0x178>)
 8002b72:	4622      	mov	r2, r4
 8002b74:	4621      	mov	r1, r4
 8002b76:	4628      	mov	r0, r5
 8002b78:	f011 fbd4 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002b7c:	a905      	add	r1, sp, #20
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f007 fef2 	bl	800a968 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002b84:	9b05      	ldr	r3, [sp, #20]
 8002b86:	0e1a      	lsrs	r2, r3, #24
 8002b88:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002b8c:	9102      	str	r1, [sp, #8]
 8002b8e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	9200      	str	r2, [sp, #0]
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <LoRaWAN_Init+0x17c>)
 8002b98:	4622      	mov	r2, r4
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	f011 fbc1 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002ba2:	a905      	add	r1, sp, #20
 8002ba4:	4630      	mov	r0, r6
 8002ba6:	f007 fedf 	bl	800a968 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002baa:	9b05      	ldr	r3, [sp, #20]
 8002bac:	0e1a      	lsrs	r2, r3, #24
 8002bae:	b2d9      	uxtb	r1, r3
 8002bb0:	9103      	str	r1, [sp, #12]
 8002bb2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002bb6:	9102      	str	r1, [sp, #8]
 8002bb8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	9200      	str	r2, [sp, #0]
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <LoRaWAN_Init+0x180>)
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f011 fbac 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002bcc:	9400      	str	r4, [sp, #0]
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <LoRaWAN_Init+0x184>)
 8002bd0:	4622      	mov	r2, r4
 8002bd2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bd6:	483a      	ldr	r0, [pc, #232]	; (8002cc0 <LoRaWAN_Init+0x188>)
 8002bd8:	f011 fdbe 	bl	8014758 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002bdc:	9400      	str	r4, [sp, #0]
 8002bde:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <LoRaWAN_Init+0x18c>)
 8002be0:	4622      	mov	r2, r4
 8002be2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002be6:	4838      	ldr	r0, [pc, #224]	; (8002cc8 <LoRaWAN_Init+0x190>)
 8002be8:	f011 fdb6 	bl	8014758 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002bec:	9400      	str	r4, [sp, #0]
 8002bee:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <LoRaWAN_Init+0x194>)
 8002bf0:	4632      	mov	r2, r6
 8002bf2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bf6:	4836      	ldr	r0, [pc, #216]	; (8002cd0 <LoRaWAN_Init+0x198>)
 8002bf8:	f011 fdae 	bl	8014758 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002bfc:	9400      	str	r4, [sp, #0]
 8002bfe:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <LoRaWAN_Init+0x19c>)
 8002c00:	4622      	mov	r2, r4
 8002c02:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002c06:	4834      	ldr	r0, [pc, #208]	; (8002cd8 <LoRaWAN_Init+0x1a0>)
 8002c08:	f011 fda6 	bl	8014758 <UTIL_TIMER_Create>
  Thd_LmHandlerProcessId = osThreadNew(Thd_LmHandlerProcess, NULL, &Thd_LmHandlerProcess_attr);
 8002c0c:	4a33      	ldr	r2, [pc, #204]	; (8002cdc <LoRaWAN_Init+0x1a4>)
 8002c0e:	4621      	mov	r1, r4
 8002c10:	4833      	ldr	r0, [pc, #204]	; (8002ce0 <LoRaWAN_Init+0x1a8>)
 8002c12:	f005 f92f 	bl	8007e74 <osThreadNew>
 8002c16:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <LoRaWAN_Init+0x1ac>)
 8002c18:	6018      	str	r0, [r3, #0]
  if (Thd_LmHandlerProcessId == NULL)
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d038      	beq.n	8002c90 <LoRaWAN_Init+0x158>
  Thd_LoraSendProcessId = osThreadNew(Thd_LoraSendProcess, NULL, &Thd_LoraSendProcess_attr);
 8002c1e:	4a32      	ldr	r2, [pc, #200]	; (8002ce8 <LoRaWAN_Init+0x1b0>)
 8002c20:	2100      	movs	r1, #0
 8002c22:	4832      	ldr	r0, [pc, #200]	; (8002cec <LoRaWAN_Init+0x1b4>)
 8002c24:	f005 f926 	bl	8007e74 <osThreadNew>
 8002c28:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <LoRaWAN_Init+0x1b8>)
 8002c2a:	6018      	str	r0, [r3, #0]
  if (Thd_LoraSendProcessId == NULL)
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d032      	beq.n	8002c96 <LoRaWAN_Init+0x15e>
  Thd_LoraStoreContextId = osThreadNew(Thd_LoraStoreContext, NULL, &Thd_LoraStoreContext_attr);
 8002c30:	4a30      	ldr	r2, [pc, #192]	; (8002cf4 <LoRaWAN_Init+0x1bc>)
 8002c32:	2100      	movs	r1, #0
 8002c34:	4830      	ldr	r0, [pc, #192]	; (8002cf8 <LoRaWAN_Init+0x1c0>)
 8002c36:	f005 f91d 	bl	8007e74 <osThreadNew>
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <LoRaWAN_Init+0x1c4>)
 8002c3c:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStoreContextId == NULL)
 8002c3e:	b368      	cbz	r0, 8002c9c <LoRaWAN_Init+0x164>
  Thd_LoraStopJoinId = osThreadNew(Thd_LoraStopJoin, NULL, &Thd_LoraStopJoin_attr);
 8002c40:	4a2f      	ldr	r2, [pc, #188]	; (8002d00 <LoRaWAN_Init+0x1c8>)
 8002c42:	2100      	movs	r1, #0
 8002c44:	482f      	ldr	r0, [pc, #188]	; (8002d04 <LoRaWAN_Init+0x1cc>)
 8002c46:	f005 f915 	bl	8007e74 <osThreadNew>
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <LoRaWAN_Init+0x1d0>)
 8002c4c:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStopJoinId == NULL)
 8002c4e:	b340      	cbz	r0, 8002ca2 <LoRaWAN_Init+0x16a>
  LoraInfo_Init();
 8002c50:	f000 f87e 	bl	8002d50 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002c54:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8002c58:	482c      	ldr	r0, [pc, #176]	; (8002d0c <LoRaWAN_Init+0x1d4>)
 8002c5a:	f007 fe4b 	bl	800a8f4 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002c5e:	482c      	ldr	r0, [pc, #176]	; (8002d10 <LoRaWAN_Init+0x1d8>)
 8002c60:	f007 fd14 	bl	800a68c <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002c64:	481a      	ldr	r0, [pc, #104]	; (8002cd0 <LoRaWAN_Init+0x198>)
 8002c66:	f011 fe2f 	bl	80148c8 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <LoRaWAN_Init+0x1dc>)
 8002c6e:	7818      	ldrb	r0, [r3, #0]
 8002c70:	f007 faa2 	bl	800a1b8 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002c74:	4c28      	ldr	r4, [pc, #160]	; (8002d18 <LoRaWAN_Init+0x1e0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	9200      	str	r2, [sp, #0]
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <LoRaWAN_Init+0x1e4>)
 8002c7c:	4928      	ldr	r1, [pc, #160]	; (8002d20 <LoRaWAN_Init+0x1e8>)
 8002c7e:	6809      	ldr	r1, [r1, #0]
 8002c80:	4620      	mov	r0, r4
 8002c82:	f011 fd69 	bl	8014758 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002c86:	4620      	mov	r0, r4
 8002c88:	f011 fe1e 	bl	80148c8 <UTIL_TIMER_Start>
}
 8002c8c:	b006      	add	sp, #24
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002c90:	f7fe fd22 	bl	80016d8 <Error_Handler>
 8002c94:	e7c3      	b.n	8002c1e <LoRaWAN_Init+0xe6>
    Error_Handler();
 8002c96:	f7fe fd1f 	bl	80016d8 <Error_Handler>
 8002c9a:	e7c9      	b.n	8002c30 <LoRaWAN_Init+0xf8>
    Error_Handler();
 8002c9c:	f7fe fd1c 	bl	80016d8 <Error_Handler>
 8002ca0:	e7ce      	b.n	8002c40 <LoRaWAN_Init+0x108>
    Error_Handler();
 8002ca2:	f7fe fd19 	bl	80016d8 <Error_Handler>
 8002ca6:	e7d3      	b.n	8002c50 <LoRaWAN_Init+0x118>
 8002ca8:	080152f4 	.word	0x080152f4
 8002cac:	08015318 	.word	0x08015318
 8002cb0:	0801533c 	.word	0x0801533c
 8002cb4:	08015360 	.word	0x08015360
 8002cb8:	08015384 	.word	0x08015384
 8002cbc:	080026d9 	.word	0x080026d9
 8002cc0:	20000584 	.word	0x20000584
 8002cc4:	080026c5 	.word	0x080026c5
 8002cc8:	20000544 	.word	0x20000544
 8002ccc:	08002b25 	.word	0x08002b25
 8002cd0:	2000052c 	.word	0x2000052c
 8002cd4:	08002679 	.word	0x08002679
 8002cd8:	2000055c 	.word	0x2000055c
 8002cdc:	08015414 	.word	0x08015414
 8002ce0:	08002b11 	.word	0x08002b11
 8002ce4:	20000574 	.word	0x20000574
 8002ce8:	08015438 	.word	0x08015438
 8002cec:	08002afd 	.word	0x08002afd
 8002cf0:	20000578 	.word	0x20000578
 8002cf4:	08015480 	.word	0x08015480
 8002cf8:	0800293d 	.word	0x0800293d
 8002cfc:	20000580 	.word	0x20000580
 8002d00:	0801545c 	.word	0x0801545c
 8002d04:	080028f1 	.word	0x080028f1
 8002d08:	2000057c 	.word	0x2000057c
 8002d0c:	2000000c 	.word	0x2000000c
 8002d10:	20000058 	.word	0x20000058
 8002d14:	20000000 	.word	0x20000000
 8002d18:	2000059c 	.word	0x2000059c
 8002d1c:	080024c1 	.word	0x080024c1
 8002d20:	2000006c 	.word	0x2000006c

08002d24 <HAL_GPIO_EXTI_Callback>:
{
 8002d24:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002d26:	2802      	cmp	r0, #2
 8002d28:	d002      	beq.n	8002d30 <HAL_GPIO_EXTI_Callback+0xc>
 8002d2a:	2840      	cmp	r0, #64	; 0x40
 8002d2c:	d006      	beq.n	8002d3c <HAL_GPIO_EXTI_Callback+0x18>
}
 8002d2e:	bd08      	pop	{r3, pc}
      osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 8002d30:	2101      	movs	r1, #1
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_GPIO_EXTI_Callback+0x24>)
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	f005 f909 	bl	8007f4c <osThreadFlagsSet>
      break;
 8002d3a:	e7f8      	b.n	8002d2e <HAL_GPIO_EXTI_Callback+0xa>
      osThreadFlagsSet(Thd_LoraStoreContextId, 1);
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <HAL_GPIO_EXTI_Callback+0x28>)
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	f005 f903 	bl	8007f4c <osThreadFlagsSet>
}
 8002d46:	e7f2      	b.n	8002d2e <HAL_GPIO_EXTI_Callback+0xa>
 8002d48:	2000057c 	.word	0x2000057c
 8002d4c:	20000580 	.word	0x20000580

08002d50 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <LoraInfo_Init+0x1c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002d56:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002d58:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002d5a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002d60:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002d64:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002d66:	2203      	movs	r2, #3
 8002d68:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002d6a:	4770      	bx	lr
 8002d6c:	200005b4 	.word	0x200005b4

08002d70 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002d70:	4800      	ldr	r0, [pc, #0]	; (8002d74 <LoraInfo_GetPtr+0x4>)
 8002d72:	4770      	bx	lr
 8002d74:	200005b4 	.word	0x200005b4

08002d78 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002d78:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002d7a:	f000 f83f 	bl	8002dfc <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d7e:	bd08      	pop	{r3, pc}

08002d80 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002d80:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002d82:	f000 f87d 	bl	8002e80 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002d86:	bd08      	pop	{r3, pc}

08002d88 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002d88:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002d8a:	f000 f8c7 	bl	8002f1c <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002d8e:	bd08      	pop	{r3, pc}

08002d90 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002d90:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002d92:	f000 f8c5 	bl	8002f20 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d96:	bd08      	pop	{r3, pc}

08002d98 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002d98:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002d9a:	f000 f8c3 	bl	8002f24 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d9e:	bd08      	pop	{r3, pc}

08002da0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002da0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002da2:	f000 f8c1 	bl	8002f28 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002da6:	bd08      	pop	{r3, pc}

08002da8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002da8:	480d      	ldr	r0, [pc, #52]	; (8002de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002daa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dac:	f000 f8c1 	bl	8002f32 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002db2:	490d      	ldr	r1, [pc, #52]	; (8002de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <LoopForever+0xe>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db8:	e002      	b.n	8002dc0 <LoopCopyDataInit>

08002dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dbe:	3304      	adds	r3, #4

08002dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc4:	d3f9      	bcc.n	8002dba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dc8:	4c0a      	ldr	r4, [pc, #40]	; (8002df4 <LoopForever+0x16>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dcc:	e001      	b.n	8002dd2 <LoopFillZerobss>

08002dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd0:	3204      	adds	r2, #4

08002dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd4:	d3fb      	bcc.n	8002dce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dd6:	f011 ff7d 	bl	8014cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dda:	f7fe fcc9 	bl	8001770 <main>

08002dde <LoopForever>:

LoopForever:
    b LoopForever
 8002dde:	e7fe      	b.n	8002dde <LoopForever>
  ldr   r0, =_estack
 8002de0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de8:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002dec:	08015ea8 	.word	0x08015ea8
  ldr r2, =_sbss
 8002df0:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002df4:	200044c0 	.word	0x200044c0

08002df8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002df8:	e7fe      	b.n	8002df8 <ADC_IRQHandler>
	...

08002dfc <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e00:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002e02:	2400      	movs	r4, #0
 8002e04:	9401      	str	r4, [sp, #4]
 8002e06:	9402      	str	r4, [sp, #8]
 8002e08:	9403      	str	r4, [sp, #12]
 8002e0a:	9404      	str	r4, [sp, #16]
 8002e0c:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e14:	f042 0204 	orr.w	r2, r2, #4
 8002e18:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002e22:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002e24:	2710      	movs	r7, #16
 8002e26:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002e30:	4d12      	ldr	r5, [pc, #72]	; (8002e7c <BSP_RADIO_Init+0x80>)
 8002e32:	a901      	add	r1, sp, #4
 8002e34:	4628      	mov	r0, r5
 8002e36:	f001 fa1f 	bl	8004278 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002e3a:	f04f 0820 	mov.w	r8, #32
 8002e3e:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002e42:	a901      	add	r1, sp, #4
 8002e44:	4628      	mov	r0, r5
 8002e46:	f001 fa17 	bl	8004278 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002e4a:	2608      	movs	r6, #8
 8002e4c:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002e4e:	a901      	add	r1, sp, #4
 8002e50:	4628      	mov	r0, r5
 8002e52:	f001 fa11 	bl	8004278 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e56:	4622      	mov	r2, r4
 8002e58:	4641      	mov	r1, r8
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f001 fb5c 	bl	8004518 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e60:	4622      	mov	r2, r4
 8002e62:	4639      	mov	r1, r7
 8002e64:	4628      	mov	r0, r5
 8002e66:	f001 fb57 	bl	8004518 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	4631      	mov	r1, r6
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f001 fb52 	bl	8004518 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002e74:	4620      	mov	r0, r4
 8002e76:	b006      	add	sp, #24
 8002e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e7c:	48000800 	.word	0x48000800

08002e80 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002e80:	b510      	push	{r4, lr}
  switch (Config)
 8002e82:	2803      	cmp	r0, #3
 8002e84:	d813      	bhi.n	8002eae <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002e86:	e8df f000 	tbb	[pc, r0]
 8002e8a:	1402      	.short	0x1402
 8002e8c:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002e8e:	4c22      	ldr	r4, [pc, #136]	; (8002f18 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	2108      	movs	r1, #8
 8002e94:	4620      	mov	r0, r4
 8002e96:	f001 fb3f 	bl	8004518 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2110      	movs	r1, #16
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f001 fb3a 	bl	8004518 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2120      	movs	r1, #32
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f001 fb35 	bl	8004518 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002eae:	2000      	movs	r0, #0
 8002eb0:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002eb2:	4c19      	ldr	r4, [pc, #100]	; (8002f18 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2108      	movs	r1, #8
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f001 fb2d 	bl	8004518 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f001 fb28 	bl	8004518 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2120      	movs	r1, #32
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f001 fb23 	bl	8004518 <HAL_GPIO_WritePin>
      break;
 8002ed2:	e7ec      	b.n	8002eae <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002ed4:	4c10      	ldr	r4, [pc, #64]	; (8002f18 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2108      	movs	r1, #8
 8002eda:	4620      	mov	r0, r4
 8002edc:	f001 fb1c 	bl	8004518 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2110      	movs	r1, #16
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f001 fb17 	bl	8004518 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002eea:	2201      	movs	r2, #1
 8002eec:	2120      	movs	r1, #32
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f001 fb12 	bl	8004518 <HAL_GPIO_WritePin>
      break;
 8002ef4:	e7db      	b.n	8002eae <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002ef6:	4c08      	ldr	r4, [pc, #32]	; (8002f18 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	2108      	movs	r1, #8
 8002efc:	4620      	mov	r0, r4
 8002efe:	f001 fb0b 	bl	8004518 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002f02:	2200      	movs	r2, #0
 8002f04:	2110      	movs	r1, #16
 8002f06:	4620      	mov	r0, r4
 8002f08:	f001 fb06 	bl	8004518 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2120      	movs	r1, #32
 8002f10:	4620      	mov	r0, r4
 8002f12:	f001 fb01 	bl	8004518 <HAL_GPIO_WritePin>
      break;
 8002f16:	e7ca      	b.n	8002eae <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002f18:	48000800 	.word	0x48000800

08002f1c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	4770      	bx	lr

08002f20 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002f20:	2001      	movs	r0, #1
 8002f22:	4770      	bx	lr

08002f24 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002f24:	2001      	movs	r0, #1
 8002f26:	4770      	bx	lr

08002f28 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002f28:	b908      	cbnz	r0, 8002f2e <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002f2a:	200f      	movs	r0, #15
 8002f2c:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002f2e:	2016      	movs	r0, #22
  }

  return ret;
}
 8002f30:	4770      	bx	lr

08002f32 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002f32:	4770      	bx	lr

08002f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f34:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f36:	2003      	movs	r0, #3
 8002f38:	f000 fd2c 	bl	8003994 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f3c:	f001 fd4a 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_Init+0x28>)
 8002f42:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f44:	200f      	movs	r0, #15
 8002f46:	f7fe fcd7 	bl	80018f8 <HAL_InitTick>
 8002f4a:	b110      	cbz	r0, 8002f52 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002f4c:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002f4e:	4620      	mov	r0, r4
 8002f50:	bd10      	pop	{r4, pc}
 8002f52:	4604      	mov	r4, r0
    HAL_MspInit();
 8002f54:	f7fe fcc8 	bl	80018e8 <HAL_MspInit>
 8002f58:	e7f9      	b.n	8002f4e <HAL_Init+0x1a>
 8002f5a:	bf00      	nop
 8002f5c:	20000070 	.word	0x20000070

08002f60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_IncTick+0x10>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4a03      	ldr	r2, [pc, #12]	; (8002f74 <HAL_IncTick+0x14>)
 8002f66:	6811      	ldr	r1, [r2, #0]
 8002f68:	440b      	add	r3, r1
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000074 	.word	0x20000074
 8002f74:	200005c4 	.word	0x200005c4

08002f78 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002f78:	4b01      	ldr	r3, [pc, #4]	; (8002f80 <HAL_GetUIDw0+0x8>)
 8002f7a:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002f7e:	4770      	bx	lr
 8002f80:	1fff7000 	.word	0x1fff7000

08002f84 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002f84:	4b01      	ldr	r3, [pc, #4]	; (8002f8c <HAL_GetUIDw1+0x8>)
 8002f86:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8002f8a:	4770      	bx	lr
 8002f8c:	1fff7000 	.word	0x1fff7000

08002f90 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002f90:	4b01      	ldr	r3, [pc, #4]	; (8002f98 <HAL_GetUIDw2+0x8>)
 8002f92:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002f96:	4770      	bx	lr
 8002f98:	1fff7000 	.word	0x1fff7000

08002f9c <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f9c:	4a02      	ldr	r2, [pc, #8]	; (8002fa8 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8002f9e:	6853      	ldr	r3, [r2, #4]
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8002fa6:	4770      	bx	lr
 8002fa8:	e0042000 	.word	0xe0042000

08002fac <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002fac:	4a02      	ldr	r2, [pc, #8]	; (8002fb8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8002fae:	6853      	ldr	r3, [r2, #4]
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8002fb6:	4770      	bx	lr
 8002fb8:	e0042000 	.word	0xe0042000

08002fbc <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002fbc:	4a02      	ldr	r2, [pc, #8]	; (8002fc8 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8002fbe:	6853      	ldr	r3, [r2, #4]
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8002fc6:	4770      	bx	lr
 8002fc8:	e0042000 	.word	0xe0042000

08002fcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	f000 811b 	beq.w	8003210 <HAL_ADC_Init+0x244>
 8002fda:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fdc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002fde:	b1bb      	cbz	r3, 8003010 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fe0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fe2:	6893      	ldr	r3, [r2, #8]
 8002fe4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002fe8:	d11f      	bne.n	800302a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002fea:	6893      	ldr	r3, [r2, #8]
 8002fec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ff0:	f023 0317 	bic.w	r3, r3, #23
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ffa:	4b86      	ldr	r3, [pc, #536]	; (8003214 <HAL_ADC_Init+0x248>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	4a85      	ldr	r2, [pc, #532]	; (8003218 <HAL_ADC_Init+0x24c>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	3301      	adds	r3, #1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800300e:	e009      	b.n	8003024 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003010:	f7fd ff7c 	bl	8000f0c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003014:	2300      	movs	r3, #0
 8003016:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003018:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800301c:	e7e0      	b.n	8002fe0 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800301e:	9b01      	ldr	r3, [sp, #4]
 8003020:	3b01      	subs	r3, #1
 8003022:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003024:	9b01      	ldr	r3, [sp, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f9      	bne.n	800301e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800302a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800302c:	6893      	ldr	r3, [r2, #8]
 800302e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003032:	f040 809c 	bne.w	800316e <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003036:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003038:	f043 0310 	orr.w	r3, r3, #16
 800303c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003046:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003048:	6893      	ldr	r3, [r2, #8]
 800304a:	f013 0304 	ands.w	r3, r3, #4
 800304e:	d000      	beq.n	8003052 <HAL_ADC_Init+0x86>
 8003050:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003052:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003054:	f011 0f10 	tst.w	r1, #16
 8003058:	f040 80d3 	bne.w	8003202 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800305c:	2b00      	cmp	r3, #0
 800305e:	f040 80d0 	bne.w	8003202 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003062:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003064:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003068:	f041 0102 	orr.w	r1, r1, #2
 800306c:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800306e:	6891      	ldr	r1, [r2, #8]
 8003070:	f011 0f01 	tst.w	r1, #1
 8003074:	d151      	bne.n	800311a <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003076:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003078:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800307a:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800307e:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003080:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003084:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003086:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800308a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800308c:	b10d      	cbz	r5, 8003092 <HAL_ADC_Init+0xc6>
 800308e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003092:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 8003094:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003096:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003098:	6925      	ldr	r5, [r4, #16]
 800309a:	2d00      	cmp	r5, #0
 800309c:	db69      	blt.n	8003172 <HAL_ADC_Init+0x1a6>
 800309e:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80030a2:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030a4:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80030a8:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030ac:	f894 5020 	ldrb.w	r5, [r4, #32]
 80030b0:	2d01      	cmp	r5, #1
 80030b2:	d061      	beq.n	8003178 <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80030b6:	b125      	cbz	r5, 80030c2 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80030b8:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80030bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80030be:	4335      	orrs	r5, r6
 80030c0:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80030c2:	68d5      	ldr	r5, [r2, #12]
 80030c4:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 80030c8:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 80030cc:	ea4c 0101 	orr.w	r1, ip, r1
 80030d0:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030d2:	6862      	ldr	r2, [r4, #4]
 80030d4:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80030d8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030da:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80030de:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80030e2:	2901      	cmp	r1, #1
 80030e4:	d055      	beq.n	8003192 <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80030e6:	6822      	ldr	r2, [r4, #0]
 80030e8:	6916      	ldr	r6, [r2, #16]
 80030ea:	494c      	ldr	r1, [pc, #304]	; (800321c <HAL_ADC_Init+0x250>)
 80030ec:	4031      	ands	r1, r6
 80030ee:	4329      	orrs	r1, r5
 80030f0:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80030f2:	6862      	ldr	r2, [r4, #4]
 80030f4:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 80030f8:	d00f      	beq.n	800311a <HAL_ADC_Init+0x14e>
 80030fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80030fe:	d00c      	beq.n	800311a <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003100:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003104:	d009      	beq.n	800311a <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003106:	4d46      	ldr	r5, [pc, #280]	; (8003220 <HAL_ADC_Init+0x254>)
 8003108:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 800310c:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8003110:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8003114:	430a      	orrs	r2, r1
 8003116:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800311a:	6825      	ldr	r5, [r4, #0]
 800311c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 800311e:	6969      	ldr	r1, [r5, #20]
 8003120:	f021 0107 	bic.w	r1, r1, #7
 8003124:	430a      	orrs	r2, r1
 8003126:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003128:	6821      	ldr	r1, [r4, #0]
 800312a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800312c:	694a      	ldr	r2, [r1, #20]
 800312e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003132:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003136:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003138:	6922      	ldr	r2, [r4, #16]
 800313a:	2a00      	cmp	r2, #0
 800313c:	d133      	bne.n	80031a6 <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003142:	f063 030f 	orn	r3, r3, #15
 8003146:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003148:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8003150:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003152:	429a      	cmp	r2, r3
 8003154:	d04c      	beq.n	80031f0 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003158:	f023 0312 	bic.w	r3, r3, #18
 800315c:	f043 0310 	orr.w	r3, r3, #16
 8003160:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003162:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800316a:	2001      	movs	r0, #1
 800316c:	e04e      	b.n	800320c <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316e:	2000      	movs	r0, #0
 8003170:	e76a      	b.n	8003048 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003172:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8003176:	e794      	b.n	80030a2 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003178:	b916      	cbnz	r6, 8003180 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800317a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800317e:	e799      	b.n	80030b4 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003180:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8003182:	f045 0520 	orr.w	r5, r5, #32
 8003186:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003188:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 800318a:	f045 0501 	orr.w	r5, r5, #1
 800318e:	65e5      	str	r5, [r4, #92]	; 0x5c
 8003190:	e790      	b.n	80030b4 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8003192:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003194:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003196:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003198:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 800319a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800319c:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800319e:	432a      	orrs	r2, r5
 80031a0:	f042 0501 	orr.w	r5, r2, #1
 80031a4:	e79f      	b.n	80030e6 <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031a6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80031aa:	d1cd      	bne.n	8003148 <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80031ac:	2b07      	cmp	r3, #7
 80031ae:	d808      	bhi.n	80031c2 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80031b0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80031b2:	0099      	lsls	r1, r3, #2
 80031b4:	40ca      	lsrs	r2, r1
 80031b6:	f002 020f 	and.w	r2, r2, #15
 80031ba:	2a0f      	cmp	r2, #15
 80031bc:	d001      	beq.n	80031c2 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80031be:	3301      	adds	r3, #1
 80031c0:	e7f4      	b.n	80031ac <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d00e      	beq.n	80031e4 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 80031c6:	6821      	ldr	r1, [r4, #0]
 80031c8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80031ca:	69e3      	ldr	r3, [r4, #28]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	f003 031c 	and.w	r3, r3, #28
 80031d4:	f06f 020f 	mvn.w	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80031de:	4313      	orrs	r3, r2
 80031e0:	628b      	str	r3, [r1, #40]	; 0x28
 80031e2:	e7b1      	b.n	8003148 <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 80031e4:	6822      	ldr	r2, [r4, #0]
 80031e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80031e8:	f063 030f 	orn	r3, r3, #15
 80031ec:	6293      	str	r3, [r2, #40]	; 0x28
 80031ee:	e7ab      	b.n	8003148 <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 80031f0:	2300      	movs	r3, #0
 80031f2:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80031f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8003200:	e004      	b.n	800320c <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003202:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003204:	f043 0310 	orr.w	r3, r3, #16
 8003208:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800320a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 800320c:	b002      	add	sp, #8
 800320e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003210:	2001      	movs	r0, #1
 8003212:	e7fb      	b.n	800320c <HAL_ADC_Init+0x240>
 8003214:	20000070 	.word	0x20000070
 8003218:	053e2d63 	.word	0x053e2d63
 800321c:	1ffffc02 	.word	0x1ffffc02
 8003220:	40012000 	.word	0x40012000

08003224 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	4604      	mov	r4, r0
 8003228:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800322a:	6946      	ldr	r6, [r0, #20]
 800322c:	2e08      	cmp	r6, #8
 800322e:	d005      	beq.n	800323c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003230:	6803      	ldr	r3, [r0, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f013 0f01 	tst.w	r3, #1
 8003238:	d11e      	bne.n	8003278 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800323a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800323c:	f7fe fcf4 	bl	8001c28 <HAL_GetTick>
 8003240:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4232      	tst	r2, r6
 8003248:	d11c      	bne.n	8003284 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800324a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800324e:	d0f8      	beq.n	8003242 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003250:	f7fe fcea 	bl	8001c28 <HAL_GetTick>
 8003254:	1bc3      	subs	r3, r0, r7
 8003256:	42ab      	cmp	r3, r5
 8003258:	d801      	bhi.n	800325e <HAL_ADC_PollForConversion+0x3a>
 800325a:	2d00      	cmp	r5, #0
 800325c:	d1f1      	bne.n	8003242 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4233      	tst	r3, r6
 8003264:	d1ed      	bne.n	8003242 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800326e:	2300      	movs	r3, #0
 8003270:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8003274:	2003      	movs	r0, #3
 8003276:	e028      	b.n	80032ca <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003278:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800327a:	f043 0320 	orr.w	r3, r3, #32
 800327e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003280:	2001      	movs	r0, #1
 8003282:	e022      	b.n	80032ca <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003284:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003292:	d115      	bne.n	80032c0 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003294:	7ea2      	ldrb	r2, [r4, #26]
 8003296:	b99a      	cbnz	r2, 80032c0 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	f012 0f08 	tst.w	r2, #8
 800329e:	d00f      	beq.n	80032c0 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	f012 0f04 	tst.w	r2, #4
 80032a6:	d111      	bne.n	80032cc <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	f022 020c 	bic.w	r2, r2, #12
 80032ae:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80032b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80032c0:	7e20      	ldrb	r0, [r4, #24]
 80032c2:	b960      	cbnz	r0, 80032de <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	220c      	movs	r2, #12
 80032c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80032ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032ce:	f043 0320 	orr.w	r3, r3, #32
 80032d2:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	65e3      	str	r3, [r4, #92]	; 0x5c
 80032dc:	e7f0      	b.n	80032c0 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80032de:	2000      	movs	r0, #0
 80032e0:	e7f3      	b.n	80032ca <HAL_ADC_PollForConversion+0xa6>

080032e2 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032e2:	6803      	ldr	r3, [r0, #0]
 80032e4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80032e8:	b470      	push	{r4, r5, r6}
 80032ea:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032ec:	2200      	movs	r2, #0
 80032ee:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032f0:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80032f2:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80032f6:	2a01      	cmp	r2, #1
 80032f8:	f000 8105 	beq.w	8003506 <HAL_ADC_ConfigChannel+0x21e>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2201      	movs	r2, #1
 8003300:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003304:	6802      	ldr	r2, [r0, #0]
 8003306:	6890      	ldr	r0, [r2, #8]
 8003308:	f010 0f04 	tst.w	r0, #4
 800330c:	d00a      	beq.n	8003324 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800330e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003310:	f042 0220 	orr.w	r2, r2, #32
 8003314:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003316:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 800331e:	b003      	add	sp, #12
 8003320:	bc70      	pop	{r4, r5, r6}
 8003322:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003324:	6848      	ldr	r0, [r1, #4]
 8003326:	2802      	cmp	r0, #2
 8003328:	f000 809e 	beq.w	8003468 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800332c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003330:	d029      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x9e>
 8003332:	4d76      	ldr	r5, [pc, #472]	; (800350c <HAL_ADC_ConfigChannel+0x224>)
 8003334:	42ac      	cmp	r4, r5
 8003336:	d026      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003338:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800333a:	f000 001f 	and.w	r0, r0, #31
 800333e:	250f      	movs	r5, #15
 8003340:	4085      	lsls	r5, r0
 8003342:	ea24 0505 	bic.w	r5, r4, r5
 8003346:	680c      	ldr	r4, [r1, #0]
 8003348:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800334c:	2e00      	cmp	r6, #0
 800334e:	d133      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0xd0>
 8003350:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003354:	fa04 f000 	lsl.w	r0, r4, r0
 8003358:	4328      	orrs	r0, r5
 800335a:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800335c:	684c      	ldr	r4, [r1, #4]
 800335e:	08a0      	lsrs	r0, r4, #2
 8003360:	3001      	adds	r0, #1
 8003362:	69dd      	ldr	r5, [r3, #28]
 8003364:	42a8      	cmp	r0, r5
 8003366:	d814      	bhi.n	8003392 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003368:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800336a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800336c:	f004 041f 	and.w	r4, r4, #31
 8003370:	260f      	movs	r6, #15
 8003372:	40a6      	lsls	r6, r4
 8003374:	ea20 0006 	bic.w	r0, r0, r6
 8003378:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800337c:	fa05 f404 	lsl.w	r4, r5, r4
 8003380:	4304      	orrs	r4, r0
 8003382:	6294      	str	r4, [r2, #40]	; 0x28
}
 8003384:	e005      	b.n	8003392 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003386:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003388:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800338a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800338e:	4320      	orrs	r0, r4
 8003390:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003392:	681c      	ldr	r4, [r3, #0]
 8003394:	680d      	ldr	r5, [r1, #0]
 8003396:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8003398:	6960      	ldr	r0, [r4, #20]
 800339a:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 800339e:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 80033a2:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 80033a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033aa:	4302      	orrs	r2, r0
 80033ac:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033ae:	680a      	ldr	r2, [r1, #0]
 80033b0:	2a00      	cmp	r2, #0
 80033b2:	db09      	blt.n	80033c8 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b4:	2000      	movs	r0, #0
 80033b6:	e7af      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033bc:	b114      	cbz	r4, 80033c4 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80033be:	fab4 f484 	clz	r4, r4
 80033c2:	e7c7      	b.n	8003354 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80033c4:	2420      	movs	r4, #32
 80033c6:	e7c5      	b.n	8003354 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033c8:	4951      	ldr	r1, [pc, #324]	; (8003510 <HAL_ADC_ConfigChannel+0x228>)
 80033ca:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 80033ce:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033d2:	4c50      	ldr	r4, [pc, #320]	; (8003514 <HAL_ADC_ConfigChannel+0x22c>)
 80033d4:	42a2      	cmp	r2, r4
 80033d6:	d007      	beq.n	80033e8 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033d8:	4c4f      	ldr	r4, [pc, #316]	; (8003518 <HAL_ADC_ConfigChannel+0x230>)
 80033da:	42a2      	cmp	r2, r4
 80033dc:	d026      	beq.n	800342c <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80033de:	4c4f      	ldr	r4, [pc, #316]	; (800351c <HAL_ADC_ConfigChannel+0x234>)
 80033e0:	42a2      	cmp	r2, r4
 80033e2:	d032      	beq.n	800344a <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e4:	2000      	movs	r0, #0
 80033e6:	e797      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80033ec:	d1f4      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033f2:	4847      	ldr	r0, [pc, #284]	; (8003510 <HAL_ADC_ConfigChannel+0x228>)
 80033f4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80033f8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80033fc:	4311      	orrs	r1, r2
 80033fe:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003402:	4a47      	ldr	r2, [pc, #284]	; (8003520 <HAL_ADC_ConfigChannel+0x238>)
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	0992      	lsrs	r2, r2, #6
 8003408:	4946      	ldr	r1, [pc, #280]	; (8003524 <HAL_ADC_ConfigChannel+0x23c>)
 800340a:	fba1 1202 	umull	r1, r2, r1, r2
 800340e:	0992      	lsrs	r2, r2, #6
 8003410:	3201      	adds	r2, #1
 8003412:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003416:	0092      	lsls	r2, r2, #2
 8003418:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800341a:	e002      	b.n	8003422 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 800341c:	9a01      	ldr	r2, [sp, #4]
 800341e:	3a01      	subs	r2, #1
 8003420:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003422:	9a01      	ldr	r2, [sp, #4]
 8003424:	2a00      	cmp	r2, #0
 8003426:	d1f9      	bne.n	800341c <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003428:	2000      	movs	r0, #0
 800342a:	e775      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800342c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003430:	d1d5      	bne.n	80033de <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003432:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003436:	4836      	ldr	r0, [pc, #216]	; (8003510 <HAL_ADC_ConfigChannel+0x228>)
 8003438:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800343c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003440:	4311      	orrs	r1, r2
 8003442:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003446:	2000      	movs	r0, #0
}
 8003448:	e766      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800344a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800344e:	d158      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003450:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003454:	482e      	ldr	r0, [pc, #184]	; (8003510 <HAL_ADC_ConfigChannel+0x228>)
 8003456:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800345a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800345e:	430a      	orrs	r2, r1
 8003460:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003464:	2000      	movs	r0, #0
}
 8003466:	e757      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003468:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800346c:	d002      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x18c>
 800346e:	4827      	ldr	r0, [pc, #156]	; (800350c <HAL_ADC_ConfigChannel+0x224>)
 8003470:	4284      	cmp	r4, r0
 8003472:	d106      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003474:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003476:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003478:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800347c:	ea20 0004 	bic.w	r0, r0, r4
 8003480:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003482:	680a      	ldr	r2, [r1, #0]
 8003484:	2a00      	cmp	r2, #0
 8003486:	db01      	blt.n	800348c <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003488:	2000      	movs	r0, #0
 800348a:	e745      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800348c:	4920      	ldr	r1, [pc, #128]	; (8003510 <HAL_ADC_ConfigChannel+0x228>)
 800348e:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003492:	4820      	ldr	r0, [pc, #128]	; (8003514 <HAL_ADC_ConfigChannel+0x22c>)
 8003494:	4282      	cmp	r2, r0
 8003496:	d007      	beq.n	80034a8 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003498:	481f      	ldr	r0, [pc, #124]	; (8003518 <HAL_ADC_ConfigChannel+0x230>)
 800349a:	4282      	cmp	r2, r0
 800349c:	d013      	beq.n	80034c6 <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800349e:	481f      	ldr	r0, [pc, #124]	; (800351c <HAL_ADC_ConfigChannel+0x234>)
 80034a0:	4282      	cmp	r2, r0
 80034a2:	d01f      	beq.n	80034e4 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a4:	2000      	movs	r0, #0
 80034a6:	e737      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a8:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034ac:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 80034b0:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 80034b4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80034b8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80034bc:	4311      	orrs	r1, r2
 80034be:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c2:	2000      	movs	r0, #0
}
 80034c4:	e728      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c6:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034ca:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 80034ce:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 80034d2:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80034d6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80034da:	430a      	orrs	r2, r1
 80034dc:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e0:	2000      	movs	r0, #0
}
 80034e2:	e719      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034e4:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034e8:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 80034ec:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80034f0:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80034f4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80034f8:	430a      	orrs	r2, r1
 80034fa:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fe:	2000      	movs	r0, #0
}
 8003500:	e70a      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
 8003502:	2000      	movs	r0, #0
 8003504:	e708      	b.n	8003318 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003506:	2002      	movs	r0, #2
 8003508:	e709      	b.n	800331e <HAL_ADC_ConfigChannel+0x36>
 800350a:	bf00      	nop
 800350c:	80000004 	.word	0x80000004
 8003510:	40012000 	.word	0x40012000
 8003514:	b0001000 	.word	0xb0001000
 8003518:	b8004000 	.word	0xb8004000
 800351c:	b4002000 	.word	0xb4002000
 8003520:	20000070 	.word	0x20000070
 8003524:	053e2d63 	.word	0x053e2d63

08003528 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003528:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800352a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	f012 0f04 	tst.w	r2, #4
 8003532:	d02a      	beq.n	800358a <ADC_ConversionStop+0x62>
 8003534:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	f012 0f02 	tst.w	r2, #2
 800353c:	d107      	bne.n	800354e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003544:	f022 0217 	bic.w	r2, r2, #23
 8003548:	f042 0210 	orr.w	r2, r2, #16
 800354c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800354e:	f7fe fb6b 	bl	8001c28 <HAL_GetTick>
 8003552:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f013 0f04 	tst.w	r3, #4
 800355c:	d013      	beq.n	8003586 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800355e:	f7fe fb63 	bl	8001c28 <HAL_GetTick>
 8003562:	1b43      	subs	r3, r0, r5
 8003564:	2b02      	cmp	r3, #2
 8003566:	d9f5      	bls.n	8003554 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f013 0f04 	tst.w	r3, #4
 8003570:	d0f0      	beq.n	8003554 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003574:	f043 0310 	orr.w	r3, r3, #16
 8003578:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003582:	2001      	movs	r0, #1
 8003584:	e002      	b.n	800358c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003586:	2000      	movs	r0, #0
 8003588:	e000      	b.n	800358c <ADC_ConversionStop+0x64>
 800358a:	2000      	movs	r0, #0
}
 800358c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003590 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003590:	b530      	push	{r4, r5, lr}
 8003592:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003594:	2300      	movs	r3, #0
 8003596:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003598:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	f012 0f01 	tst.w	r2, #1
 80035a0:	d15b      	bne.n	800365a <ADC_Enable+0xca>
 80035a2:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80035a4:	6899      	ldr	r1, [r3, #8]
 80035a6:	4a2e      	ldr	r2, [pc, #184]	; (8003660 <ADC_Enable+0xd0>)
 80035a8:	4211      	tst	r1, r2
 80035aa:	d117      	bne.n	80035dc <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035b2:	f022 0217 	bic.w	r2, r2, #23
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035bc:	4b29      	ldr	r3, [pc, #164]	; (8003664 <ADC_Enable+0xd4>)
 80035be:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035c2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80035c6:	d019      	beq.n	80035fc <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035c8:	4b27      	ldr	r3, [pc, #156]	; (8003668 <ADC_Enable+0xd8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	4a27      	ldr	r2, [pc, #156]	; (800366c <ADC_Enable+0xdc>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	3301      	adds	r3, #1
 80035d8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80035da:	e00c      	b.n	80035f6 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035dc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80035de:	f043 0310 	orr.w	r3, r3, #16
 80035e2:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80035ec:	2001      	movs	r0, #1
 80035ee:	e035      	b.n	800365c <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80035f0:	9b01      	ldr	r3, [sp, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80035f6:	9b01      	ldr	r3, [sp, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f9      	bne.n	80035f0 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80035fc:	7e63      	ldrb	r3, [r4, #25]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003602:	2000      	movs	r0, #0
 8003604:	e02a      	b.n	800365c <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8003606:	f7fe fb0f 	bl	8001c28 <HAL_GetTick>
 800360a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	f012 0f01 	tst.w	r2, #1
 8003614:	d11f      	bne.n	8003656 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	f012 0f01 	tst.w	r2, #1
 800361c:	d107      	bne.n	800362e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003624:	f022 0217 	bic.w	r2, r2, #23
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800362e:	f7fe fafb 	bl	8001c28 <HAL_GetTick>
 8003632:	1b40      	subs	r0, r0, r5
 8003634:	2802      	cmp	r0, #2
 8003636:	d9e9      	bls.n	800360c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f013 0f01 	tst.w	r3, #1
 8003640:	d1e4      	bne.n	800360c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003642:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003644:	f043 0310 	orr.w	r3, r3, #16
 8003648:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003652:	2001      	movs	r0, #1
 8003654:	e002      	b.n	800365c <ADC_Enable+0xcc>
  return HAL_OK;
 8003656:	2000      	movs	r0, #0
 8003658:	e000      	b.n	800365c <ADC_Enable+0xcc>
 800365a:	2000      	movs	r0, #0
}
 800365c:	b003      	add	sp, #12
 800365e:	bd30      	pop	{r4, r5, pc}
 8003660:	80000017 	.word	0x80000017
 8003664:	40012000 	.word	0x40012000
 8003668:	20000070 	.word	0x20000070
 800366c:	053e2d63 	.word	0x053e2d63

08003670 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003670:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f013 0f04 	tst.w	r3, #4
 8003678:	d128      	bne.n	80036cc <HAL_ADC_Start+0x5c>
{
 800367a:	b510      	push	{r4, lr}
 800367c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800367e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003682:	2b01      	cmp	r3, #1
 8003684:	d024      	beq.n	80036d0 <HAL_ADC_Start+0x60>
 8003686:	2301      	movs	r3, #1
 8003688:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 800368c:	f7ff ff80 	bl	8003590 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003690:	b9c0      	cbnz	r0, 80036c4 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003694:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80036a2:	2300      	movs	r3, #0
 80036a4:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	211c      	movs	r1, #28
 80036aa:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80036ac:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 80036b0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80036b2:	6893      	ldr	r3, [r2, #8]
 80036b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036b8:	f023 0317 	bic.w	r3, r3, #23
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6093      	str	r3, [r2, #8]
}
 80036c2:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80036c4:	2300      	movs	r3, #0
 80036c6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80036ca:	e7fa      	b.n	80036c2 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80036cc:	2002      	movs	r0, #2
}
 80036ce:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80036d0:	2002      	movs	r0, #2
 80036d2:	e7f6      	b.n	80036c2 <HAL_ADC_Start+0x52>

080036d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036d8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80036da:	6893      	ldr	r3, [r2, #8]
 80036dc:	f013 0302 	ands.w	r3, r3, #2
 80036e0:	d000      	beq.n	80036e4 <ADC_Disable+0x10>
 80036e2:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036e4:	6891      	ldr	r1, [r2, #8]
 80036e6:	f011 0f01 	tst.w	r1, #1
 80036ea:	d039      	beq.n	8003760 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d139      	bne.n	8003764 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036f0:	6893      	ldr	r3, [r2, #8]
 80036f2:	f003 0305 	and.w	r3, r3, #5
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d009      	beq.n	800370e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036fc:	f043 0310 	orr.w	r3, r3, #16
 8003700:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800370a:	2001      	movs	r0, #1
 800370c:	e029      	b.n	8003762 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800370e:	6893      	ldr	r3, [r2, #8]
 8003710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003714:	f023 0317 	bic.w	r3, r3, #23
 8003718:	f043 0302 	orr.w	r3, r3, #2
 800371c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	2203      	movs	r2, #3
 8003722:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003724:	f7fe fa80 	bl	8001c28 <HAL_GetTick>
 8003728:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f013 0f01 	tst.w	r3, #1
 8003732:	d013      	beq.n	800375c <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003734:	f7fe fa78 	bl	8001c28 <HAL_GetTick>
 8003738:	1b40      	subs	r0, r0, r5
 800373a:	2802      	cmp	r0, #2
 800373c:	d9f5      	bls.n	800372a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f013 0f01 	tst.w	r3, #1
 8003746:	d0f0      	beq.n	800372a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003748:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800374a:	f043 0310 	orr.w	r3, r3, #16
 800374e:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003750:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003758:	2001      	movs	r0, #1
 800375a:	e002      	b.n	8003762 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800375c:	2000      	movs	r0, #0
 800375e:	e000      	b.n	8003762 <ADC_Disable+0x8e>
 8003760:	2000      	movs	r0, #0
}
 8003762:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003764:	2000      	movs	r0, #0
 8003766:	e7fc      	b.n	8003762 <ADC_Disable+0x8e>

08003768 <HAL_ADC_DeInit>:
{
 8003768:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800376a:	2800      	cmp	r0, #0
 800376c:	d04c      	beq.n	8003808 <HAL_ADC_DeInit+0xa0>
 800376e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003770:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003778:	f7ff fed6 	bl	8003528 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800377c:	4606      	mov	r6, r0
 800377e:	2800      	cmp	r0, #0
 8003780:	d033      	beq.n	80037ea <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003782:	6822      	ldr	r2, [r4, #0]
 8003784:	6853      	ldr	r3, [r2, #4]
 8003786:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	f240 329f 	movw	r2, #927	; 0x39f
 8003796:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003798:	6822      	ldr	r2, [r4, #0]
 800379a:	68d1      	ldr	r1, [r2, #12]
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_ADC_DeInit+0xa4>)
 800379e:	400b      	ands	r3, r1
 80037a0:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	6913      	ldr	r3, [r2, #16]
 80037a6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80037aa:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80037ac:	6822      	ldr	r2, [r4, #0]
 80037ae:	6953      	ldr	r3, [r2, #20]
 80037b0:	f023 0307 	bic.w	r3, r3, #7
 80037b4:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	6a13      	ldr	r3, [r2, #32]
 80037ba:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80037be:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c4:	2500      	movs	r5, #0
 80037c6:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80037c8:	4a11      	ldr	r2, [pc, #68]	; (8003810 <HAL_ADC_DeInit+0xa8>)
 80037ca:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 80037ce:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80037d2:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 80037d6:	4620      	mov	r0, r4
 80037d8:	f7fd fbae 	bl	8000f38 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80037dc:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80037de:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80037e0:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80037e2:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 80037e6:	4630      	mov	r0, r6
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80037ea:	4620      	mov	r0, r4
 80037ec:	f7ff ff72 	bl	80036d4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80037f0:	4606      	mov	r6, r0
 80037f2:	b908      	cbnz	r0, 80037f8 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 80037f4:	2301      	movs	r3, #1
 80037f6:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80037f8:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80037fa:	6893      	ldr	r3, [r2, #8]
 80037fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003800:	f023 0317 	bic.w	r3, r3, #23
 8003804:	6093      	str	r3, [r2, #8]
}
 8003806:	e7bc      	b.n	8003782 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003808:	2601      	movs	r6, #1
 800380a:	e7ec      	b.n	80037e6 <HAL_ADC_DeInit+0x7e>
 800380c:	833e0200 	.word	0x833e0200
 8003810:	40012000 	.word	0x40012000

08003814 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003814:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003818:	2b01      	cmp	r3, #1
 800381a:	d019      	beq.n	8003850 <HAL_ADC_Stop+0x3c>
{
 800381c:	b510      	push	{r4, lr}
 800381e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003820:	2301      	movs	r3, #1
 8003822:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003826:	f7ff fe7f 	bl	8003528 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800382a:	b118      	cbz	r0, 8003834 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800382c:	2300      	movs	r3, #0
 800382e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003832:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003834:	4620      	mov	r0, r4
 8003836:	f7ff ff4d 	bl	80036d4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800383a:	2800      	cmp	r0, #0
 800383c:	d1f6      	bne.n	800382c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800383e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	65a3      	str	r3, [r4, #88]	; 0x58
 800384e:	e7ed      	b.n	800382c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003850:	2002      	movs	r0, #2
}
 8003852:	4770      	bx	lr

08003854 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003856:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003858:	2300      	movs	r3, #0
 800385a:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800385c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003860:	2b01      	cmp	r3, #1
 8003862:	f000 8094 	beq.w	800398e <HAL_ADCEx_Calibration_Start+0x13a>
 8003866:	4604      	mov	r4, r0
 8003868:	2301      	movs	r3, #1
 800386a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800386e:	f7ff ff31 	bl	80036d4 <ADC_Disable>
 8003872:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003874:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	f012 0201 	ands.w	r2, r2, #1
 800387c:	d009      	beq.n	8003892 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003880:	f043 0310 	orr.w	r3, r3, #16
 8003884:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003886:	2300      	movs	r3, #0
 8003888:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 800388c:	4628      	mov	r0, r5
 800388e:	b003      	add	sp, #12
 8003890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003892:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003894:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003898:	f041 0102 	orr.w	r1, r1, #2
 800389c:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800389e:	68de      	ldr	r6, [r3, #12]
 80038a0:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 80038a4:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 80038a8:	0436      	lsls	r6, r6, #16
 80038aa:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80038ac:	68d9      	ldr	r1, [r3, #12]
 80038ae:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80038b2:	f021 0103 	bic.w	r1, r1, #3
 80038b6:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80038b8:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80038ba:	e005      	b.n	80038c8 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80038bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80038c4:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80038c6:	3201      	adds	r2, #1
 80038c8:	2a07      	cmp	r2, #7
 80038ca:	d81e      	bhi.n	800390a <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 80038cc:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80038ce:	688b      	ldr	r3, [r1, #8]
 80038d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038d4:	f023 0317 	bic.w	r3, r3, #23
 80038d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038dc:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038de:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80038e0:	6899      	ldr	r1, [r3, #8]
 80038e2:	2900      	cmp	r1, #0
 80038e4:	daea      	bge.n	80038bc <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 80038e6:	9b01      	ldr	r3, [sp, #4]
 80038e8:	3301      	adds	r3, #1
 80038ea:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80038ec:	9b01      	ldr	r3, [sp, #4]
 80038ee:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80038f2:	d3f4      	bcc.n	80038de <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 80038f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038f6:	f023 0312 	bic.w	r3, r3, #18
 80038fa:	f043 0310 	orr.w	r3, r3, #16
 80038fe:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003900:	2300      	movs	r3, #0
 8003902:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003906:	2501      	movs	r5, #1
 8003908:	e7c0      	b.n	800388c <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800390a:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 800390e:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003910:	688b      	ldr	r3, [r1, #8]
 8003912:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003916:	f023 0317 	bic.w	r3, r3, #23
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003920:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003922:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8003926:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 800392a:	4302      	orrs	r2, r0
 800392c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003930:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003932:	6893      	ldr	r3, [r2, #8]
 8003934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003938:	f023 0317 	bic.w	r3, r3, #23
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003942:	f7fe f971 	bl	8001c28 <HAL_GetTick>
 8003946:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003948:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	f012 0f01 	tst.w	r2, #1
 8003950:	d109      	bne.n	8003966 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	4316      	orrs	r6, r2
 8003956:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800395a:	f023 0303 	bic.w	r3, r3, #3
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	65a3      	str	r3, [r4, #88]	; 0x58
 8003964:	e78f      	b.n	8003886 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003966:	f7fe f95f 	bl	8001c28 <HAL_GetTick>
 800396a:	1bc3      	subs	r3, r0, r7
 800396c:	2b02      	cmp	r3, #2
 800396e:	d9eb      	bls.n	8003948 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f013 0f01 	tst.w	r3, #1
 8003978:	d0e6      	beq.n	8003948 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800397c:	f043 0310 	orr.w	r3, r3, #16
 8003980:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003982:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800398a:	2501      	movs	r5, #1
 800398c:	e77e      	b.n	800388c <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 800398e:	2502      	movs	r5, #2
 8003990:	e77c      	b.n	800388c <HAL_ADCEx_Calibration_Start+0x38>
	...

08003994 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003994:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003996:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003998:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800399c:	041b      	lsls	r3, r3, #16
 800399e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a0:	0200      	lsls	r0, r0, #8
 80039a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80039a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80039b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ba:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_NVIC_SetPriority+0x68>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c2:	f1c3 0c07 	rsb	ip, r3, #7
 80039c6:	f1bc 0f04 	cmp.w	ip, #4
 80039ca:	bf28      	it	cs
 80039cc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d0:	f103 0e04 	add.w	lr, r3, #4
 80039d4:	f1be 0f06 	cmp.w	lr, #6
 80039d8:	d918      	bls.n	8003a0c <HAL_NVIC_SetPriority+0x54>
 80039da:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039dc:	f04f 3eff 	mov.w	lr, #4294967295
 80039e0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80039e4:	ea21 010c 	bic.w	r1, r1, ip
 80039e8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ea:	fa0e f303 	lsl.w	r3, lr, r3
 80039ee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80039f4:	2800      	cmp	r0, #0
 80039f6:	db0b      	blt.n	8003a10 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f8:	0109      	lsls	r1, r1, #4
 80039fa:	b2c9      	uxtb	r1, r1
 80039fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003a00:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003a04:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003a08:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e7e5      	b.n	80039dc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a10:	f000 000f 	and.w	r0, r0, #15
 8003a14:	0109      	lsls	r1, r1, #4
 8003a16:	b2c9      	uxtb	r1, r1
 8003a18:	4b02      	ldr	r3, [pc, #8]	; (8003a24 <HAL_NVIC_SetPriority+0x6c>)
 8003a1a:	5419      	strb	r1, [r3, r0]
 8003a1c:	e7f4      	b.n	8003a08 <HAL_NVIC_SetPriority+0x50>
 8003a1e:	bf00      	nop
 8003a20:	e000ed00 	.word	0xe000ed00
 8003a24:	e000ed14 	.word	0xe000ed14

08003a28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	db07      	blt.n	8003a3c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2c:	f000 021f 	and.w	r2, r0, #31
 8003a30:	0940      	lsrs	r0, r0, #5
 8003a32:	2301      	movs	r3, #1
 8003a34:	4093      	lsls	r3, r2
 8003a36:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <HAL_NVIC_EnableIRQ+0x18>)
 8003a38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	e000e100 	.word	0xe000e100

08003a44 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a44:	2800      	cmp	r0, #0
 8003a46:	db0c      	blt.n	8003a62 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a48:	f000 021f 	and.w	r2, r0, #31
 8003a4c:	0940      	lsrs	r0, r0, #5
 8003a4e:	2301      	movs	r3, #1
 8003a50:	4093      	lsls	r3, r2
 8003a52:	3020      	adds	r0, #32
 8003a54:	4a03      	ldr	r2, [pc, #12]	; (8003a64 <HAL_NVIC_DisableIRQ+0x20>)
 8003a56:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a5e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003a62:	4770      	bx	lr
 8003a64:	e000e100 	.word	0xe000e100

08003a68 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a68:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a6a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003a6c:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003a70:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a74:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003a76:	b124      	cbz	r4, 8003a82 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a78:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003a7a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8003a7e:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a82:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003a84:	f004 0c1c 	and.w	ip, r4, #28
 8003a88:	2401      	movs	r4, #1
 8003a8a:	fa04 f40c 	lsl.w	r4, r4, ip
 8003a8e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003a92:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a96:	6804      	ldr	r4, [r0, #0]
 8003a98:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a9a:	6883      	ldr	r3, [r0, #8]
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d005      	beq.n	8003aac <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003aa0:	6803      	ldr	r3, [r0, #0]
 8003aa2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003aa4:	6803      	ldr	r3, [r0, #0]
 8003aa6:	60da      	str	r2, [r3, #12]
  }
}
 8003aa8:	bc10      	pop	{r4}
 8003aaa:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003aac:	6803      	ldr	r3, [r0, #0]
 8003aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003ab0:	6803      	ldr	r3, [r0, #0]
 8003ab2:	60d9      	str	r1, [r3, #12]
 8003ab4:	e7f8      	b.n	8003aa8 <DMA_SetConfig+0x40>
	...

08003ab8 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ab8:	6803      	ldr	r3, [r0, #0]
 8003aba:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d816      	bhi.n	8003aee <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003ac0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003ac2:	f022 0203 	bic.w	r2, r2, #3
 8003ac6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003aca:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003ace:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	3b08      	subs	r3, #8
 8003ad4:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003ade:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003aec:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003aee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003af0:	f022 0103 	bic.w	r1, r2, #3
 8003af4:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003af6:	440a      	add	r2, r1
 8003af8:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	3b08      	subs	r3, #8
 8003afe:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	3307      	adds	r3, #7
 8003b08:	e7e8      	b.n	8003adc <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003b0a:	bf00      	nop
 8003b0c:	40020407 	.word	0x40020407
 8003b10:	cccccccd 	.word	0xcccccccd
 8003b14:	40020880 	.word	0x40020880
 8003b18:	4002081c 	.word	0x4002081c

08003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b1c:	6843      	ldr	r3, [r0, #4]
 8003b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b22:	4a07      	ldr	r2, [pc, #28]	; (8003b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003b24:	441a      	add	r2, r3
 8003b26:	0092      	lsls	r2, r2, #2
 8003b28:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b2a:	4a06      	ldr	r2, [pc, #24]	; (8003b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003b2c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2201      	movs	r2, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	1000823f 	.word	0x1000823f
 8003b44:	40020940 	.word	0x40020940

08003b48 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d060      	beq.n	8003c0e <HAL_DMA_Init+0xc6>
{
 8003b4c:	b510      	push	{r4, lr}
 8003b4e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b50:	6802      	ldr	r2, [r0, #0]
 8003b52:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <HAL_DMA_Init+0xcc>)
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d842      	bhi.n	8003bde <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b58:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <HAL_DMA_Init+0xd0>)
 8003b5a:	4413      	add	r3, r2
 8003b5c:	492f      	ldr	r1, [pc, #188]	; (8003c1c <HAL_DMA_Init+0xd4>)
 8003b5e:	fba1 1303 	umull	r1, r3, r1, r3
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_DMA_Init+0xd8>)
 8003b6a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b72:	6813      	ldr	r3, [r2, #0]
 8003b74:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003b7e:	6821      	ldr	r1, [r4, #0]
 8003b80:	680a      	ldr	r2, [r1, #0]
 8003b82:	68a3      	ldr	r3, [r4, #8]
 8003b84:	68e0      	ldr	r0, [r4, #12]
 8003b86:	4303      	orrs	r3, r0
 8003b88:	6920      	ldr	r0, [r4, #16]
 8003b8a:	4303      	orrs	r3, r0
 8003b8c:	6960      	ldr	r0, [r4, #20]
 8003b8e:	4303      	orrs	r3, r0
 8003b90:	69a0      	ldr	r0, [r4, #24]
 8003b92:	4303      	orrs	r3, r0
 8003b94:	69e0      	ldr	r0, [r4, #28]
 8003b96:	4303      	orrs	r3, r0
 8003b98:	6a20      	ldr	r0, [r4, #32]
 8003b9a:	4303      	orrs	r3, r0
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff ff89 	bl	8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ba6:	68a3      	ldr	r3, [r4, #8]
 8003ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bac:	d022      	beq.n	8003bf4 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bae:	6863      	ldr	r3, [r4, #4]
 8003bb0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bb8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003bba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003bbc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bbe:	6863      	ldr	r3, [r4, #4]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d919      	bls.n	8003bfa <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bca:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bcc:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bce:	2000      	movs	r0, #0
 8003bd0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003bd8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003bdc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_DMA_Init+0xdc>)
 8003be0:	4413      	add	r3, r2
 8003be2:	490e      	ldr	r1, [pc, #56]	; (8003c1c <HAL_DMA_Init+0xd4>)
 8003be4:	fba1 1303 	umull	r1, r3, r1, r3
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <HAL_DMA_Init+0xe0>)
 8003bf0:	6403      	str	r3, [r0, #64]	; 0x40
 8003bf2:	e7bb      	b.n	8003b6c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	6063      	str	r3, [r4, #4]
 8003bf8:	e7d9      	b.n	8003bae <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7ff ff8e 	bl	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c08:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	e7df      	b.n	8003bce <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003c0e:	2001      	movs	r0, #1
}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40020407 	.word	0x40020407
 8003c18:	bffdfff8 	.word	0xbffdfff8
 8003c1c:	cccccccd 	.word	0xcccccccd
 8003c20:	40020000 	.word	0x40020000
 8003c24:	bffdfbf8 	.word	0xbffdfbf8
 8003c28:	40020400 	.word	0x40020400

08003c2c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d04b      	beq.n	8003cc8 <HAL_DMA_DeInit+0x9c>
{
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003c34:	6802      	ldr	r2, [r0, #0]
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c3e:	6802      	ldr	r2, [r0, #0]
 8003c40:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <HAL_DMA_DeInit+0xa0>)
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d82c      	bhi.n	8003ca0 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c46:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <HAL_DMA_DeInit+0xa4>)
 8003c48:	4413      	add	r3, r2
 8003c4a:	4922      	ldr	r1, [pc, #136]	; (8003cd4 <HAL_DMA_DeInit+0xa8>)
 8003c4c:	fba1 1303 	umull	r1, r3, r1, r3
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <HAL_DMA_DeInit+0xac>)
 8003c58:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8003c5a:	2500      	movs	r5, #0
 8003c5c:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c60:	f003 021c 	and.w	r2, r3, #28
 8003c64:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c66:	2301      	movs	r3, #1
 8003c68:	4093      	lsls	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff ff23 	bl	8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003c72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c74:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c76:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003c78:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c7a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c7c:	6863      	ldr	r3, [r4, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d918      	bls.n	8003cb6 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8003c84:	2000      	movs	r0, #0
 8003c86:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003c88:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c8a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8003c8c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003c8e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003c90:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003c92:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c94:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003c96:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003c9a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ca0:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <HAL_DMA_DeInit+0xb0>)
 8003ca2:	4413      	add	r3, r2
 8003ca4:	490b      	ldr	r1, [pc, #44]	; (8003cd4 <HAL_DMA_DeInit+0xa8>)
 8003ca6:	fba1 1303 	umull	r1, r3, r1, r3
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_DMA_DeInit+0xb4>)
 8003cb2:	6403      	str	r3, [r0, #64]	; 0x40
 8003cb4:	e7d1      	b.n	8003c5a <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f7ff ff30 	bl	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cbe:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cc2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	e7dd      	b.n	8003c84 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003cc8:	2001      	movs	r0, #1
}
 8003cca:	4770      	bx	lr
 8003ccc:	40020407 	.word	0x40020407
 8003cd0:	bffdfff8 	.word	0xbffdfff8
 8003cd4:	cccccccd 	.word	0xcccccccd
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	bffdfbf8 	.word	0xbffdfbf8
 8003ce0:	40020400 	.word	0x40020400

08003ce4 <HAL_DMA_Start_IT>:
{
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003ce8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003cec:	2801      	cmp	r0, #1
 8003cee:	d043      	beq.n	8003d78 <HAL_DMA_Start_IT+0x94>
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003cf6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003cfa:	b2c0      	uxtb	r0, r0
 8003cfc:	2801      	cmp	r0, #1
 8003cfe:	d006      	beq.n	8003d0e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003d04:	2300      	movs	r3, #0
 8003d06:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8003d0a:	2001      	movs	r0, #1
}
 8003d0c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d0e:	2002      	movs	r0, #2
 8003d10:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d14:	2000      	movs	r0, #0
 8003d16:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003d18:	6825      	ldr	r5, [r4, #0]
 8003d1a:	6828      	ldr	r0, [r5, #0]
 8003d1c:	f020 0001 	bic.w	r0, r0, #1
 8003d20:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d22:	4620      	mov	r0, r4
 8003d24:	f7ff fea0 	bl	8003a68 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003d28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d2a:	b1d3      	cbz	r3, 8003d62 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d2c:	6822      	ldr	r2, [r4, #0]
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	f043 030e 	orr.w	r3, r3, #14
 8003d34:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003d3e:	d003      	beq.n	8003d48 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d46:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003d48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d4a:	b11b      	cbz	r3, 8003d54 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d52:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003d54:	6822      	ldr	r2, [r4, #0]
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2000      	movs	r0, #0
 8003d60:	e7d4      	b.n	8003d0c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	6813      	ldr	r3, [r2, #0]
 8003d66:	f023 0304 	bic.w	r3, r3, #4
 8003d6a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d6c:	6822      	ldr	r2, [r4, #0]
 8003d6e:	6813      	ldr	r3, [r2, #0]
 8003d70:	f043 030a 	orr.w	r3, r3, #10
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e7de      	b.n	8003d36 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003d78:	2002      	movs	r0, #2
 8003d7a:	e7c7      	b.n	8003d0c <HAL_DMA_Start_IT+0x28>

08003d7c <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d034      	beq.n	8003dec <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d82:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	2a02      	cmp	r2, #2
 8003d8a:	d006      	beq.n	8003d9a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003d90:	2200      	movs	r2, #0
 8003d92:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003d96:	2001      	movs	r0, #1
 8003d98:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d9a:	6801      	ldr	r1, [r0, #0]
 8003d9c:	680a      	ldr	r2, [r1, #0]
 8003d9e:	f022 020e 	bic.w	r2, r2, #14
 8003da2:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003da4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003da6:	680a      	ldr	r2, [r1, #0]
 8003da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dac:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003dae:	6801      	ldr	r1, [r0, #0]
 8003db0:	680a      	ldr	r2, [r1, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003db8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003dba:	f002 011c 	and.w	r1, r2, #28
 8003dbe:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	408a      	lsls	r2, r1
 8003dc4:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dc8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003dca:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dce:	b132      	cbz	r2, 8003dde <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dd0:	6811      	ldr	r1, [r2, #0]
 8003dd2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003dd6:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003dda:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003ddc:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8003dea:	4770      	bx	lr
    return HAL_ERROR;
 8003dec:	2001      	movs	r0, #1
}
 8003dee:	4770      	bx	lr

08003df0 <HAL_DMA_Abort_IT>:
{
 8003df0:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003df2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d003      	beq.n	8003e04 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003e00:	2001      	movs	r0, #1
}
 8003e02:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e04:	6802      	ldr	r2, [r0, #0]
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	f023 030e 	bic.w	r3, r3, #14
 8003e0c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003e0e:	6802      	ldr	r2, [r0, #0]
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e18:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003e1a:	6813      	ldr	r3, [r2, #0]
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e20:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e22:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e24:	f003 021c 	and.w	r2, r3, #28
 8003e28:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4093      	lsls	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003e32:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003e34:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003e36:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003e38:	b133      	cbz	r3, 8003e48 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e40:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e42:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003e44:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003e46:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003e54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e56:	b113      	cbz	r3, 8003e5e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003e58:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	e7d1      	b.n	8003e02 <HAL_DMA_Abort_IT+0x12>
 8003e5e:	2000      	movs	r0, #0
 8003e60:	e7cf      	b.n	8003e02 <HAL_DMA_Abort_IT+0x12>
	...

08003e64 <HAL_DMA_IRQHandler>:
{
 8003e64:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e68:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003e6a:	6804      	ldr	r4, [r0, #0]
 8003e6c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e70:	f003 031c 	and.w	r3, r3, #28
 8003e74:	2204      	movs	r2, #4
 8003e76:	409a      	lsls	r2, r3
 8003e78:	420a      	tst	r2, r1
 8003e7a:	d015      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x44>
 8003e7c:	f015 0f04 	tst.w	r5, #4
 8003e80:	d012      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	f013 0f20 	tst.w	r3, #32
 8003e88:	d103      	bne.n	8003e92 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e94:	f003 021c 	and.w	r2, r3, #28
 8003e98:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	4093      	lsls	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003ea0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003ea2:	b103      	cbz	r3, 8003ea6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003ea4:	4798      	blx	r3
}
 8003ea6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	420a      	tst	r2, r1
 8003eae:	d028      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x9e>
 8003eb0:	f015 0f02 	tst.w	r5, #2
 8003eb4:	d025      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	f013 0f20 	tst.w	r3, #32
 8003ebc:	d106      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	f023 030a 	bic.w	r3, r3, #10
 8003ec4:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003ecc:	6802      	ldr	r2, [r0, #0]
 8003ece:	4b1c      	ldr	r3, [pc, #112]	; (8003f40 <HAL_DMA_IRQHandler+0xdc>)
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d90e      	bls.n	8003ef2 <HAL_DMA_IRQHandler+0x8e>
 8003ed4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ed6:	f003 021c 	and.w	r2, r3, #28
 8003eda:	2302      	movs	r3, #2
 8003edc:	4093      	lsls	r3, r2
 8003ede:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <HAL_DMA_IRQHandler+0xe0>)
 8003ee0:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003ee8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0db      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003eee:	4798      	blx	r3
 8003ef0:	e7d9      	b.n	8003ea6 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003ef2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ef4:	f003 021c 	and.w	r2, r3, #28
 8003ef8:	2302      	movs	r3, #2
 8003efa:	4093      	lsls	r3, r2
 8003efc:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <HAL_DMA_IRQHandler+0xe4>)
 8003efe:	6053      	str	r3, [r2, #4]
 8003f00:	e7ef      	b.n	8003ee2 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003f02:	2208      	movs	r2, #8
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	420b      	tst	r3, r1
 8003f0a:	d0cc      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x42>
 8003f0c:	f015 0f08 	tst.w	r5, #8
 8003f10:	d0c9      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	f023 030e 	bic.w	r3, r3, #14
 8003f18:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f1c:	f003 031c 	and.w	r3, r3, #28
 8003f20:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003f22:	2201      	movs	r2, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f2a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003f2c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003f30:	2300      	movs	r3, #0
 8003f32:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003f36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0b4      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003f3c:	4798      	blx	r3
  return;
 8003f3e:	e7b2      	b.n	8003ea6 <HAL_DMA_IRQHandler+0x42>
 8003f40:	40020080 	.word	0x40020080
 8003f44:	40020400 	.word	0x40020400
 8003f48:	40020000 	.word	0x40020000

08003f4c <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003f4c:	b178      	cbz	r0, 8003f6e <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003f4e:	6803      	ldr	r3, [r0, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003f52:	f011 0f10 	tst.w	r1, #16
 8003f56:	d004      	beq.n	8003f62 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003f58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003f5c:	d004      	beq.n	8003f68 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003f5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003f62:	601a      	str	r2, [r3, #0]
  return status;
 8003f64:	2000      	movs	r0, #0
 8003f66:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003f68:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003f6c:	e7f9      	b.n	8003f62 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003f6e:	2001      	movs	r0, #1
}
 8003f70:	4770      	bx	lr
	...

08003f74 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003f74:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003f76:	4c05      	ldr	r4, [pc, #20]	; (8003f8c <FLASH_Program_DoubleWord+0x18>)
 8003f78:	6961      	ldr	r1, [r4, #20]
 8003f7a:	f041 0101 	orr.w	r1, r1, #1
 8003f7e:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003f80:	6002      	str	r2, [r0, #0]
 8003f82:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003f86:	6043      	str	r3, [r0, #4]
}
 8003f88:	bc10      	pop	{r4}
 8003f8a:	4770      	bx	lr
 8003f8c:	58004000 	.word	0x58004000

08003f90 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003f90:	4a0c      	ldr	r2, [pc, #48]	; (8003fc4 <FLASH_Program_Fast+0x34>)
 8003f92:	6953      	ldr	r3, [r2, #20]
 8003f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f98:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003f9e:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003fa0:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003fa2:	f851 2b04 	ldr.w	r2, [r1], #4
 8003fa6:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003faa:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003fac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003fb0:	d1f7      	bne.n	8003fa2 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003fb2:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <FLASH_Program_Fast+0x34>)
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003fba:	d1fa      	bne.n	8003fb2 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	58004000 	.word	0x58004000

08003fc8 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <HAL_FLASH_Unlock+0x28>)
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	db01      	blt.n	8003fd4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_FLASH_Unlock+0x28>)
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_FLASH_Unlock+0x2c>)
 8003fd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fda:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003fde:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	db01      	blt.n	8003fea <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	4770      	bx	lr
      status = HAL_ERROR;
 8003fea:	2001      	movs	r0, #1
}
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	58004000 	.word	0x58004000
 8003ff4:	45670123 	.word	0x45670123

08003ff8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_FLASH_Lock+0x18>)
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004000:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	db01      	blt.n	800400c <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004008:	2001      	movs	r0, #1
}
 800400a:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800400c:	2000      	movs	r0, #0
 800400e:	4770      	bx	lr
 8004010:	58004000 	.word	0x58004000

08004014 <FLASH_WaitForLastOperation>:
{
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004018:	f7fd fe06 	bl	8001c28 <HAL_GetTick>
 800401c:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800401e:	4b16      	ldr	r3, [pc, #88]	; (8004078 <FLASH_WaitForLastOperation+0x64>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004026:	d006      	beq.n	8004036 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004028:	f7fd fdfe 	bl	8001c28 <HAL_GetTick>
 800402c:	1b00      	subs	r0, r0, r4
 800402e:	42a8      	cmp	r0, r5
 8004030:	d3f5      	bcc.n	800401e <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004032:	2003      	movs	r0, #3
}
 8004034:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <FLASH_WaitForLastOperation+0x64>)
 8004038:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800403a:	f013 0f01 	tst.w	r3, #1
 800403e:	d002      	beq.n	8004046 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004040:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <FLASH_WaitForLastOperation+0x64>)
 8004042:	2101      	movs	r1, #1
 8004044:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004046:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 800404a:	4013      	ands	r3, r2
 800404c:	d001      	beq.n	8004052 <FLASH_WaitForLastOperation+0x3e>
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <FLASH_WaitForLastOperation+0x64>)
 8004050:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8004052:	b95b      	cbnz	r3, 800406c <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004054:	4b08      	ldr	r3, [pc, #32]	; (8004078 <FLASH_WaitForLastOperation+0x64>)
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800405c:	d00a      	beq.n	8004074 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800405e:	f7fd fde3 	bl	8001c28 <HAL_GetTick>
 8004062:	1b00      	subs	r0, r0, r4
 8004064:	42a8      	cmp	r0, r5
 8004066:	d3f5      	bcc.n	8004054 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004068:	2003      	movs	r0, #3
 800406a:	e7e3      	b.n	8004034 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 800406c:	4a03      	ldr	r2, [pc, #12]	; (800407c <FLASH_WaitForLastOperation+0x68>)
 800406e:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004070:	2001      	movs	r0, #1
 8004072:	e7df      	b.n	8004034 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004074:	2000      	movs	r0, #0
 8004076:	e7dd      	b.n	8004034 <FLASH_WaitForLastOperation+0x20>
 8004078:	58004000 	.word	0x58004000
 800407c:	200005c8 	.word	0x200005c8

08004080 <HAL_FLASH_Program>:
{
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_FLASH_Program+0x5c>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d025      	beq.n	80040d8 <HAL_FLASH_Program+0x58>
 800408c:	4604      	mov	r4, r0
 800408e:	460d      	mov	r5, r1
 8004090:	4616      	mov	r6, r2
 8004092:	4b12      	ldr	r3, [pc, #72]	; (80040dc <HAL_FLASH_Program+0x5c>)
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004098:	2200      	movs	r2, #0
 800409a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800409c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040a0:	f7ff ffb8 	bl	8004014 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80040a4:	b970      	cbnz	r0, 80040c4 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80040a6:	2c01      	cmp	r4, #1
 80040a8:	d010      	beq.n	80040cc <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80040aa:	4631      	mov	r1, r6
 80040ac:	4628      	mov	r0, r5
 80040ae:	f7ff ff6f 	bl	8003f90 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040b6:	f7ff ffad 	bl	8004014 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <HAL_FLASH_Program+0x60>)
 80040bc:	6953      	ldr	r3, [r2, #20]
 80040be:	ea23 0404 	bic.w	r4, r3, r4
 80040c2:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_FLASH_Program+0x5c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
}
 80040ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80040cc:	4632      	mov	r2, r6
 80040ce:	463b      	mov	r3, r7
 80040d0:	4628      	mov	r0, r5
 80040d2:	f7ff ff4f 	bl	8003f74 <FLASH_Program_DoubleWord>
 80040d6:	e7ec      	b.n	80040b2 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 80040d8:	2002      	movs	r0, #2
 80040da:	e7f6      	b.n	80040ca <HAL_FLASH_Program+0x4a>
 80040dc:	200005c8 	.word	0x200005c8
 80040e0:	58004000 	.word	0x58004000

080040e4 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80040e4:	4a03      	ldr	r2, [pc, #12]	; (80040f4 <FLASH_MassErase+0x10>)
 80040e6:	6953      	ldr	r3, [r2, #20]
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	f043 0304 	orr.w	r3, r3, #4
 80040f0:	6153      	str	r3, [r2, #20]
#endif
}
 80040f2:	4770      	bx	lr
 80040f4:	58004000 	.word	0x58004000

080040f8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <FLASH_FlushCaches+0x64>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004100:	2b01      	cmp	r3, #1
 8004102:	d006      	beq.n	8004112 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004104:	4b15      	ldr	r3, [pc, #84]	; (800415c <FLASH_FlushCaches+0x64>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	2b01      	cmp	r3, #1
 800410e:	d012      	beq.n	8004136 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004110:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <FLASH_FlushCaches+0x64>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800411a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e7e6      	b.n	8004104 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <FLASH_FlushCaches+0x64>)
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800414e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004156:	601a      	str	r2, [r3, #0]
}
 8004158:	e7da      	b.n	8004110 <FLASH_FlushCaches+0x18>
 800415a:	bf00      	nop
 800415c:	58004000 	.word	0x58004000

08004160 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004160:	4a03      	ldr	r2, [pc, #12]	; (8004170 <FLASH_AcknowledgePageErase+0x10>)
 8004162:	6953      	ldr	r3, [r2, #20]
 8004164:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004168:	f023 0302 	bic.w	r3, r3, #2
 800416c:	6153      	str	r3, [r2, #20]
#endif
}
 800416e:	4770      	bx	lr
 8004170:	58004000 	.word	0x58004000

08004174 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004174:	4a05      	ldr	r2, [pc, #20]	; (800418c <FLASH_PageErase+0x18>)
 8004176:	6953      	ldr	r3, [r2, #20]
 8004178:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800417c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004180:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004184:	f040 0002 	orr.w	r0, r0, #2
 8004188:	6150      	str	r0, [r2, #20]
}
 800418a:	4770      	bx	lr
 800418c:	58004000 	.word	0x58004000

08004190 <HAL_FLASHEx_Erase>:
{
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004192:	4b1e      	ldr	r3, [pc, #120]	; (800420c <HAL_FLASHEx_Erase+0x7c>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d035      	beq.n	8004206 <HAL_FLASHEx_Erase+0x76>
 800419a:	4605      	mov	r5, r0
 800419c:	460f      	mov	r7, r1
 800419e:	4b1b      	ldr	r3, [pc, #108]	; (800420c <HAL_FLASHEx_Erase+0x7c>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041a4:	2200      	movs	r2, #0
 80041a6:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041ac:	f7ff ff32 	bl	8004014 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80041b0:	4606      	mov	r6, r0
 80041b2:	bb18      	cbnz	r0, 80041fc <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d013      	beq.n	80041e2 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295
 80041be:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80041c0:	686c      	ldr	r4, [r5, #4]
 80041c2:	686b      	ldr	r3, [r5, #4]
 80041c4:	68aa      	ldr	r2, [r5, #8]
 80041c6:	4413      	add	r3, r2
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	d913      	bls.n	80041f4 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7ff ffd1 	bl	8004174 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041d6:	f7ff ff1d 	bl	8004014 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80041da:	4606      	mov	r6, r0
 80041dc:	b948      	cbnz	r0, 80041f2 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80041de:	3401      	adds	r4, #1
 80041e0:	e7ef      	b.n	80041c2 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 80041e2:	f7ff ff7f 	bl	80040e4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041ea:	f7ff ff13 	bl	8004014 <FLASH_WaitForLastOperation>
 80041ee:	4606      	mov	r6, r0
 80041f0:	e002      	b.n	80041f8 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 80041f2:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 80041f4:	f7ff ffb4 	bl	8004160 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 80041f8:	f7ff ff7e 	bl	80040f8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_FLASHEx_Erase+0x7c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
}
 8004202:	4630      	mov	r0, r6
 8004204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004206:	2602      	movs	r6, #2
 8004208:	e7fb      	b.n	8004202 <HAL_FLASHEx_Erase+0x72>
 800420a:	bf00      	nop
 800420c:	200005c8 	.word	0x200005c8

08004210 <HAL_FLASHEx_Erase_IT>:
{
 8004210:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <HAL_FLASHEx_Erase_IT+0x60>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d028      	beq.n	800426c <HAL_FLASHEx_Erase_IT+0x5c>
 800421a:	4604      	mov	r4, r0
 800421c:	4b14      	ldr	r3, [pc, #80]	; (8004270 <HAL_FLASHEx_Erase_IT+0x60>)
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004222:	2200      	movs	r2, #0
 8004224:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004226:	6802      	ldr	r2, [r0, #0]
 8004228:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800422a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800422e:	f7ff fef1 	bl	8004014 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 8004232:	4605      	mov	r5, r0
 8004234:	b120      	cbz	r0, 8004240 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 8004236:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <HAL_FLASHEx_Erase_IT+0x60>)
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
}
 800423c:	4628      	mov	r0, r5
 800423e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004240:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <HAL_FLASHEx_Erase_IT+0x64>)
 8004242:	6953      	ldr	r3, [r2, #20]
 8004244:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004248:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d007      	beq.n	8004260 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004250:	68a2      	ldr	r2, [r4, #8]
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <HAL_FLASHEx_Erase_IT+0x60>)
 8004254:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 8004256:	6860      	ldr	r0, [r4, #4]
 8004258:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 800425a:	f7ff ff8b 	bl	8004174 <FLASH_PageErase>
 800425e:	e7ed      	b.n	800423c <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_FLASHEx_Erase_IT+0x60>)
 8004262:	2200      	movs	r2, #0
 8004264:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 8004266:	f7ff ff3d 	bl	80040e4 <FLASH_MassErase>
 800426a:	e7e7      	b.n	800423c <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 800426c:	2502      	movs	r5, #2
 800426e:	e7e5      	b.n	800423c <HAL_FLASHEx_Erase_IT+0x2c>
 8004270:	200005c8 	.word	0x200005c8
 8004274:	58004000 	.word	0x58004000

08004278 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004278:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 800427a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800427c:	e069      	b.n	8004352 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800427e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004280:	005e      	lsls	r6, r3, #1
 8004282:	2403      	movs	r4, #3
 8004284:	40b4      	lsls	r4, r6
 8004286:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800428a:	68cc      	ldr	r4, [r1, #12]
 800428c:	40b4      	lsls	r4, r6
 800428e:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004290:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004292:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004294:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004298:	684c      	ldr	r4, [r1, #4]
 800429a:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800429e:	409c      	lsls	r4, r3
 80042a0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80042a4:	6044      	str	r4, [r0, #4]
 80042a6:	e065      	b.n	8004374 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042a8:	08dd      	lsrs	r5, r3, #3
 80042aa:	3508      	adds	r5, #8
 80042ac:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042b0:	f003 0407 	and.w	r4, r3, #7
 80042b4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80042b8:	240f      	movs	r4, #15
 80042ba:	fa04 f40c 	lsl.w	r4, r4, ip
 80042be:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042c2:	690c      	ldr	r4, [r1, #16]
 80042c4:	fa04 f40c 	lsl.w	r4, r4, ip
 80042c8:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 80042cc:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80042d0:	e067      	b.n	80043a2 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042d2:	2402      	movs	r4, #2
 80042d4:	e000      	b.n	80042d8 <HAL_GPIO_Init+0x60>
 80042d6:	2400      	movs	r4, #0
 80042d8:	fa04 f40e 	lsl.w	r4, r4, lr
 80042dc:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042de:	f10c 0c02 	add.w	ip, ip, #2
 80042e2:	4d4b      	ldr	r5, [pc, #300]	; (8004410 <HAL_GPIO_Init+0x198>)
 80042e4:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042e8:	4c4a      	ldr	r4, [pc, #296]	; (8004414 <HAL_GPIO_Init+0x19c>)
 80042ea:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80042ec:	43d4      	mvns	r4, r2
 80042ee:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042f2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80042f6:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 80042fa:	d001      	beq.n	8004300 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80042fc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004300:	4d44      	ldr	r5, [pc, #272]	; (8004414 <HAL_GPIO_Init+0x19c>)
 8004302:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004304:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004306:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800430a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800430e:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8004312:	d001      	beq.n	8004318 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8004314:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004318:	4d3e      	ldr	r5, [pc, #248]	; (8004414 <HAL_GPIO_Init+0x19c>)
 800431a:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800431c:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004320:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004324:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004328:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 800432c:	d001      	beq.n	8004332 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 800432e:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004332:	4d38      	ldr	r5, [pc, #224]	; (8004414 <HAL_GPIO_Init+0x19c>)
 8004334:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004338:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800433c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800433e:	684e      	ldr	r6, [r1, #4]
 8004340:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8004344:	d001      	beq.n	800434a <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8004346:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800434a:	4a32      	ldr	r2, [pc, #200]	; (8004414 <HAL_GPIO_Init+0x19c>)
 800434c:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004350:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004352:	680a      	ldr	r2, [r1, #0]
 8004354:	fa32 f403 	lsrs.w	r4, r2, r3
 8004358:	d058      	beq.n	800440c <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800435a:	f04f 0c01 	mov.w	ip, #1
 800435e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004362:	ea1c 0202 	ands.w	r2, ip, r2
 8004366:	d0f3      	beq.n	8004350 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004368:	684c      	ldr	r4, [r1, #4]
 800436a:	f004 0403 	and.w	r4, r4, #3
 800436e:	3c01      	subs	r4, #1
 8004370:	2c01      	cmp	r4, #1
 8004372:	d984      	bls.n	800427e <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004374:	684c      	ldr	r4, [r1, #4]
 8004376:	f004 0403 	and.w	r4, r4, #3
 800437a:	2c03      	cmp	r4, #3
 800437c:	d00c      	beq.n	8004398 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 800437e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004380:	005d      	lsls	r5, r3, #1
 8004382:	f04f 0c03 	mov.w	ip, #3
 8004386:	fa0c fc05 	lsl.w	ip, ip, r5
 800438a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800438e:	688c      	ldr	r4, [r1, #8]
 8004390:	40ac      	lsls	r4, r5
 8004392:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004396:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004398:	684c      	ldr	r4, [r1, #4]
 800439a:	f004 0403 	and.w	r4, r4, #3
 800439e:	2c02      	cmp	r4, #2
 80043a0:	d082      	beq.n	80042a8 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80043a2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043a4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80043a8:	f04f 0c03 	mov.w	ip, #3
 80043ac:	fa0c fc0e 	lsl.w	ip, ip, lr
 80043b0:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b4:	684c      	ldr	r4, [r1, #4]
 80043b6:	f004 0403 	and.w	r4, r4, #3
 80043ba:	fa04 f40e 	lsl.w	r4, r4, lr
 80043be:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80043c2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043c4:	684c      	ldr	r4, [r1, #4]
 80043c6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80043ca:	d0c1      	beq.n	8004350 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 80043cc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80043d0:	f10c 0502 	add.w	r5, ip, #2
 80043d4:	4c0e      	ldr	r4, [pc, #56]	; (8004410 <HAL_GPIO_Init+0x198>)
 80043d6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80043da:	f003 0403 	and.w	r4, r3, #3
 80043de:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80043e2:	2407      	movs	r4, #7
 80043e4:	fa04 f40e 	lsl.w	r4, r4, lr
 80043e8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043ec:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80043f0:	f43f af71 	beq.w	80042d6 <HAL_GPIO_Init+0x5e>
 80043f4:	4c08      	ldr	r4, [pc, #32]	; (8004418 <HAL_GPIO_Init+0x1a0>)
 80043f6:	42a0      	cmp	r0, r4
 80043f8:	d006      	beq.n	8004408 <HAL_GPIO_Init+0x190>
 80043fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80043fe:	42a0      	cmp	r0, r4
 8004400:	f43f af67 	beq.w	80042d2 <HAL_GPIO_Init+0x5a>
 8004404:	2407      	movs	r4, #7
 8004406:	e767      	b.n	80042d8 <HAL_GPIO_Init+0x60>
 8004408:	2401      	movs	r4, #1
 800440a:	e765      	b.n	80042d8 <HAL_GPIO_Init+0x60>
  }
}
 800440c:	bd70      	pop	{r4, r5, r6, pc}
 800440e:	bf00      	nop
 8004410:	40010000 	.word	0x40010000
 8004414:	58000800 	.word	0x58000800
 8004418:	48000400 	.word	0x48000400

0800441c <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 800441c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800441e:	fa31 f203 	lsrs.w	r2, r1, r3
 8004422:	d071      	beq.n	8004508 <HAL_GPIO_DeInit+0xec>
{
 8004424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004426:	e02e      	b.n	8004486 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004428:	2502      	movs	r5, #2
 800442a:	e000      	b.n	800442e <HAL_GPIO_DeInit+0x12>
 800442c:	2500      	movs	r5, #0
 800442e:	fa05 fc0c 	lsl.w	ip, r5, ip
 8004432:	45a4      	cmp	ip, r4
 8004434:	d049      	beq.n	80044ca <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004436:	6804      	ldr	r4, [r0, #0]
 8004438:	005d      	lsls	r5, r3, #1
 800443a:	f04f 0c03 	mov.w	ip, #3
 800443e:	fa0c fc05 	lsl.w	ip, ip, r5
 8004442:	ea44 040c 	orr.w	r4, r4, ip
 8004446:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004448:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800444c:	f10e 0e08 	add.w	lr, lr, #8
 8004450:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004454:	f003 0507 	and.w	r5, r3, #7
 8004458:	00ae      	lsls	r6, r5, #2
 800445a:	250f      	movs	r5, #15
 800445c:	40b5      	lsls	r5, r6
 800445e:	ea24 0405 	bic.w	r4, r4, r5
 8004462:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004466:	6884      	ldr	r4, [r0, #8]
 8004468:	ea24 040c 	bic.w	r4, r4, ip
 800446c:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800446e:	6844      	ldr	r4, [r0, #4]
 8004470:	ea24 0202 	bic.w	r2, r4, r2
 8004474:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004476:	68c2      	ldr	r2, [r0, #12]
 8004478:	ea22 020c 	bic.w	r2, r2, ip
 800447c:	60c2      	str	r2, [r0, #12]
    }

    position++;
 800447e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004480:	fa31 f203 	lsrs.w	r2, r1, r3
 8004484:	d03f      	beq.n	8004506 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004486:	2201      	movs	r2, #1
 8004488:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800448a:	ea12 0701 	ands.w	r7, r2, r1
 800448e:	d0f6      	beq.n	800447e <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004490:	089e      	lsrs	r6, r3, #2
 8004492:	1cb5      	adds	r5, r6, #2
 8004494:	4c1d      	ldr	r4, [pc, #116]	; (800450c <HAL_GPIO_DeInit+0xf0>)
 8004496:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800449a:	f003 0c03 	and.w	ip, r3, #3
 800449e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80044a2:	f04f 0e07 	mov.w	lr, #7
 80044a6:	fa0e fe0c 	lsl.w	lr, lr, ip
 80044aa:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80044ae:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80044b2:	d0bb      	beq.n	800442c <HAL_GPIO_DeInit+0x10>
 80044b4:	4d16      	ldr	r5, [pc, #88]	; (8004510 <HAL_GPIO_DeInit+0xf4>)
 80044b6:	42a8      	cmp	r0, r5
 80044b8:	d005      	beq.n	80044c6 <HAL_GPIO_DeInit+0xaa>
 80044ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80044be:	42a8      	cmp	r0, r5
 80044c0:	d0b2      	beq.n	8004428 <HAL_GPIO_DeInit+0xc>
 80044c2:	2507      	movs	r5, #7
 80044c4:	e7b3      	b.n	800442e <HAL_GPIO_DeInit+0x12>
 80044c6:	2501      	movs	r5, #1
 80044c8:	e7b1      	b.n	800442e <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 80044ca:	4c12      	ldr	r4, [pc, #72]	; (8004514 <HAL_GPIO_DeInit+0xf8>)
 80044cc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80044d0:	ea25 0507 	bic.w	r5, r5, r7
 80044d4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80044d8:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80044dc:	ea25 0507 	bic.w	r5, r5, r7
 80044e0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 80044e4:	6825      	ldr	r5, [r4, #0]
 80044e6:	ea25 0507 	bic.w	r5, r5, r7
 80044ea:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80044ec:	6865      	ldr	r5, [r4, #4]
 80044ee:	ea25 0707 	bic.w	r7, r5, r7
 80044f2:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80044f4:	4d05      	ldr	r5, [pc, #20]	; (800450c <HAL_GPIO_DeInit+0xf0>)
 80044f6:	3602      	adds	r6, #2
 80044f8:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80044fc:	ea24 040e 	bic.w	r4, r4, lr
 8004500:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004504:	e797      	b.n	8004436 <HAL_GPIO_DeInit+0x1a>
  }
}
 8004506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40010000 	.word	0x40010000
 8004510:	48000400 	.word	0x48000400
 8004514:	58000800 	.word	0x58000800

08004518 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004518:	b10a      	cbz	r2, 800451e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800451a:	6181      	str	r1, [r0, #24]
 800451c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800451e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004520:	4770      	bx	lr

08004522 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004522:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004524:	ea01 0203 	and.w	r2, r1, r3
 8004528:	ea21 0103 	bic.w	r1, r1, r3
 800452c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004530:	6181      	str	r1, [r0, #24]
}
 8004532:	4770      	bx	lr

08004534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004534:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	4203      	tst	r3, r0
 800453c:	d100      	bne.n	8004540 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800453e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004540:	4b02      	ldr	r3, [pc, #8]	; (800454c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004542:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004544:	f7fe fbee 	bl	8002d24 <HAL_GPIO_EXTI_Callback>
}
 8004548:	e7f9      	b.n	800453e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800454a:	bf00      	nop
 800454c:	58000800 	.word	0x58000800

08004550 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004550:	2800      	cmp	r0, #0
 8004552:	d059      	beq.n	8004608 <HAL_I2C_Init+0xb8>
{
 8004554:	b510      	push	{r4, lr}
 8004556:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004558:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800455c:	2b00      	cmp	r3, #0
 800455e:	d043      	beq.n	80045e8 <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004560:	2324      	movs	r3, #36	; 0x24
 8004562:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	6813      	ldr	r3, [r2, #0]
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004578:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	6893      	ldr	r3, [r2, #8]
 800457e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004582:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004584:	68e3      	ldr	r3, [r4, #12]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d033      	beq.n	80045f2 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800458a:	68a3      	ldr	r3, [r4, #8]
 800458c:	6822      	ldr	r2, [r4, #0]
 800458e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004592:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004594:	68e3      	ldr	r3, [r4, #12]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d031      	beq.n	80045fe <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800459a:	6822      	ldr	r2, [r4, #0]
 800459c:	6853      	ldr	r3, [r2, #4]
 800459e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045a8:	6822      	ldr	r2, [r4, #0]
 80045aa:	68d3      	ldr	r3, [r2, #12]
 80045ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045b0:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	6962      	ldr	r2, [r4, #20]
 80045b6:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045b8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80045c0:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045c2:	69e3      	ldr	r3, [r4, #28]
 80045c4:	6a21      	ldr	r1, [r4, #32]
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	6813      	ldr	r3, [r2, #0]
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d6:	2000      	movs	r0, #0
 80045d8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045da:	2320      	movs	r3, #32
 80045dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045e0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 80045e6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80045e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80045ec:	f7fc ffec 	bl	80015c8 <HAL_I2C_MspInit>
 80045f0:	e7b6      	b.n	8004560 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045f2:	68a3      	ldr	r3, [r4, #8]
 80045f4:	6822      	ldr	r2, [r4, #0]
 80045f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fa:	6093      	str	r3, [r2, #8]
 80045fc:	e7ca      	b.n	8004594 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	e7c8      	b.n	800459a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004608:	2001      	movs	r0, #1
}
 800460a:	4770      	bx	lr

0800460c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b20      	cmp	r3, #32
 8004614:	d124      	bne.n	8004660 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004616:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800461a:	2b01      	cmp	r3, #1
 800461c:	d022      	beq.n	8004664 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800461e:	2301      	movs	r3, #1
 8004620:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004624:	2324      	movs	r3, #36	; 0x24
 8004626:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800462a:	6802      	ldr	r2, [r0, #0]
 800462c:	6813      	ldr	r3, [r2, #0]
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004634:	6802      	ldr	r2, [r0, #0]
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800463c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800463e:	6802      	ldr	r2, [r0, #0]
 8004640:	6813      	ldr	r3, [r2, #0]
 8004642:	4319      	orrs	r1, r3
 8004644:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004646:	6802      	ldr	r2, [r0, #0]
 8004648:	6813      	ldr	r3, [r2, #0]
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004650:	2320      	movs	r3, #32
 8004652:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004656:	2300      	movs	r3, #0
 8004658:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800465c:	4618      	mov	r0, r3
 800465e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004660:	2002      	movs	r0, #2
 8004662:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004664:	2002      	movs	r0, #2
  }
}
 8004666:	4770      	bx	lr

08004668 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004668:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b20      	cmp	r3, #32
 8004670:	d122      	bne.n	80046b8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004672:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004676:	2b01      	cmp	r3, #1
 8004678:	d020      	beq.n	80046bc <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800467a:	2301      	movs	r3, #1
 800467c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004680:	2324      	movs	r3, #36	; 0x24
 8004682:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004686:	6802      	ldr	r2, [r0, #0]
 8004688:	6813      	ldr	r3, [r2, #0]
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004690:	6802      	ldr	r2, [r0, #0]
 8004692:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004694:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004698:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800469c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800469e:	6802      	ldr	r2, [r0, #0]
 80046a0:	6813      	ldr	r3, [r2, #0]
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a8:	2320      	movs	r3, #32
 80046aa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ae:	2300      	movs	r3, #0
 80046b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80046b4:	4618      	mov	r0, r3
 80046b6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2002      	movs	r0, #2
 80046ba:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80046bc:	2002      	movs	r0, #2
  }
}
 80046be:	4770      	bx	lr

080046c0 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046c0:	4a02      	ldr	r2, [pc, #8]	; (80046cc <HAL_PWR_EnableBkUpAccess+0xc>)
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c8:	6013      	str	r3, [r2, #0]
}
 80046ca:	4770      	bx	lr
 80046cc:	58000400 	.word	0x58000400

080046d0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80046d0:	b510      	push	{r4, lr}
 80046d2:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80046d4:	b9a0      	cbnz	r0, 8004700 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80046d6:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <HAL_PWR_EnterSLEEPMode+0x44>)
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f413 7f00 	tst.w	r3, #512	; 0x200
 80046de:	d10a      	bne.n	80046f6 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80046e0:	4a0d      	ldr	r2, [pc, #52]	; (8004718 <HAL_PWR_EnterSLEEPMode+0x48>)
 80046e2:	6913      	ldr	r3, [r2, #16]
 80046e4:	f023 0304 	bic.w	r3, r3, #4
 80046e8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80046ea:	2c01      	cmp	r4, #1
 80046ec:	d010      	beq.n	8004710 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80046ee:	bf40      	sev
    __WFE();
 80046f0:	bf20      	wfe
    __WFE();
 80046f2:	bf20      	wfe
  }
}
 80046f4:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80046f6:	f000 f821 	bl	800473c <HAL_PWREx_DisableLowPowerRunMode>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_PWR_EnterSLEEPMode+0x10>
 80046fe:	e7f9      	b.n	80046f4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004700:	4b04      	ldr	r3, [pc, #16]	; (8004714 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004708:	d1ea      	bne.n	80046e0 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800470a:	f000 f80f 	bl	800472c <HAL_PWREx_EnableLowPowerRunMode>
 800470e:	e7e7      	b.n	80046e0 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004710:	bf30      	wfi
 8004712:	e7ef      	b.n	80046f4 <HAL_PWR_EnterSLEEPMode+0x24>
 8004714:	58000400 	.word	0x58000400
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800471c:	4b02      	ldr	r3, [pc, #8]	; (8004728 <HAL_PWREx_GetVoltageRange+0xc>)
 800471e:	6818      	ldr	r0, [r3, #0]
}
 8004720:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	58000400 	.word	0x58000400

0800472c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800472c:	4a02      	ldr	r2, [pc, #8]	; (8004738 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004734:	6013      	str	r3, [r2, #0]
}
 8004736:	4770      	bx	lr
 8004738:	58000400 	.word	0x58000400

0800473c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800473c:	4a0f      	ldr	r2, [pc, #60]	; (800477c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800473e:	6813      	ldr	r3, [r2, #0]
 8004740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004744:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004746:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2232      	movs	r2, #50	; 0x32
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	4a0c      	ldr	r2, [pc, #48]	; (8004784 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004758:	e000      	b.n	800475c <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 800475a:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800475c:	4a07      	ldr	r2, [pc, #28]	; (800477c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800475e:	6952      	ldr	r2, [r2, #20]
 8004760:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004764:	d001      	beq.n	800476a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f7      	bne.n	800475a <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800476a:	4b04      	ldr	r3, [pc, #16]	; (800477c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004772:	d101      	bne.n	8004778 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8004774:	2000      	movs	r0, #0
 8004776:	4770      	bx	lr
    return HAL_TIMEOUT;
 8004778:	2003      	movs	r0, #3
}
 800477a:	4770      	bx	lr
 800477c:	58000400 	.word	0x58000400
 8004780:	20000070 	.word	0x20000070
 8004784:	431bde83 	.word	0x431bde83

08004788 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004788:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800478a:	6813      	ldr	r3, [r2, #0]
 800478c:	f023 0307 	bic.w	r3, r3, #7
 8004790:	f043 0302 	orr.w	r3, r3, #2
 8004794:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004798:	6913      	ldr	r3, [r2, #16]
 800479a:	f043 0304 	orr.w	r3, r3, #4
 800479e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80047a0:	2801      	cmp	r0, #1
 80047a2:	d008      	beq.n	80047b6 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80047a4:	bf40      	sev
    __WFE();
 80047a6:	bf20      	wfe
    __WFE();
 80047a8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80047aa:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80047ac:	6913      	ldr	r3, [r2, #16]
 80047ae:	f023 0304 	bic.w	r3, r3, #4
 80047b2:	6113      	str	r3, [r2, #16]
}
 80047b4:	4770      	bx	lr
    __WFI();
 80047b6:	bf30      	wfi
 80047b8:	e7f7      	b.n	80047aa <HAL_PWREx_EnterSTOP2Mode+0x22>
 80047ba:	bf00      	nop
 80047bc:	58000400 	.word	0x58000400
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80047c4:	b530      	push	{r4, r5, lr}
 80047c6:	b089      	sub	sp, #36	; 0x24
 80047c8:	4604      	mov	r4, r0
 80047ca:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80047cc:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <RCC_SetFlashLatency+0xb4>)
 80047ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047d2:	9006      	str	r0, [sp, #24]
 80047d4:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80047d8:	f103 0208 	add.w	r2, r3, #8
 80047dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047e0:	9004      	str	r0, [sp, #16]
 80047e2:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80047e6:	ad01      	add	r5, sp, #4
 80047e8:	3310      	adds	r3, #16
 80047ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047f2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80047f6:	d007      	beq.n	8004808 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80047f8:	2300      	movs	r3, #0
 80047fa:	e014      	b.n	8004826 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 80047fc:	aa08      	add	r2, sp, #32
 80047fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004802:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004806:	e01e      	b.n	8004846 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004808:	2300      	movs	r3, #0
 800480a:	2b02      	cmp	r3, #2
 800480c:	d808      	bhi.n	8004820 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800480e:	aa08      	add	r2, sp, #32
 8004810:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004814:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004818:	42a2      	cmp	r2, r4
 800481a:	d2ef      	bcs.n	80047fc <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800481c:	3301      	adds	r3, #1
 800481e:	e7f4      	b.n	800480a <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004820:	2500      	movs	r5, #0
 8004822:	e010      	b.n	8004846 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004824:	3301      	adds	r3, #1
 8004826:	2b02      	cmp	r3, #2
 8004828:	d80c      	bhi.n	8004844 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800482a:	aa08      	add	r2, sp, #32
 800482c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004830:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004834:	42a2      	cmp	r2, r4
 8004836:	d3f5      	bcc.n	8004824 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004838:	aa08      	add	r2, sp, #32
 800483a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800483e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004842:	e000      	b.n	8004846 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004844:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004846:	4a0d      	ldr	r2, [pc, #52]	; (800487c <RCC_SetFlashLatency+0xb8>)
 8004848:	6813      	ldr	r3, [r2, #0]
 800484a:	f023 0307 	bic.w	r3, r3, #7
 800484e:	432b      	orrs	r3, r5
 8004850:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004852:	f7fd f9e9 	bl	8001c28 <HAL_GetTick>
 8004856:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004858:	4b08      	ldr	r3, [pc, #32]	; (800487c <RCC_SetFlashLatency+0xb8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	42ab      	cmp	r3, r5
 8004862:	d006      	beq.n	8004872 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004864:	f7fd f9e0 	bl	8001c28 <HAL_GetTick>
 8004868:	1b00      	subs	r0, r0, r4
 800486a:	2802      	cmp	r0, #2
 800486c:	d9f4      	bls.n	8004858 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800486e:	2003      	movs	r0, #3
 8004870:	e000      	b.n	8004874 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8004872:	2000      	movs	r0, #0
}
 8004874:	b009      	add	sp, #36	; 0x24
 8004876:	bd30      	pop	{r4, r5, pc}
 8004878:	08014e60 	.word	0x08014e60
 800487c:	58004000 	.word	0x58004000

08004880 <RCC_SetFlashLatencyFromMSIRange>:
{
 8004880:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004882:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8004888:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	4a08      	ldr	r2, [pc, #32]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 800489a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800489e:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80048a2:	f7ff ff3b 	bl	800471c <HAL_PWREx_GetVoltageRange>
 80048a6:	4601      	mov	r1, r0
 80048a8:	4805      	ldr	r0, [pc, #20]	; (80048c0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80048aa:	fba0 3004 	umull	r3, r0, r0, r4
 80048ae:	0c80      	lsrs	r0, r0, #18
 80048b0:	f7ff ff88 	bl	80047c4 <RCC_SetFlashLatency>
}
 80048b4:	bd10      	pop	{r4, pc}
 80048b6:	bf00      	nop
 80048b8:	0801551c 	.word	0x0801551c
 80048bc:	080154bc 	.word	0x080154bc
 80048c0:	431bde83 	.word	0x431bde83

080048c4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c8:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80048d0:	f011 010c 	ands.w	r1, r1, #12
 80048d4:	d00a      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x28>
 80048d6:	290c      	cmp	r1, #12
 80048d8:	d006      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048da:	2904      	cmp	r1, #4
 80048dc:	d047      	beq.n	800496e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048de:	2908      	cmp	r1, #8
 80048e0:	d03b      	beq.n	800495a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80048e2:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80048e4:	4610      	mov	r0, r2
 80048e6:	e026      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d1f6      	bne.n	80048da <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80048ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f013 0308 	ands.w	r3, r3, #8
 80048f6:	d00d      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x50>
 80048f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f013 0308 	ands.w	r3, r3, #8
 8004902:	d124      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004904:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004908:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800490c:	4a2e      	ldr	r2, [pc, #184]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800490e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004912:	e00e      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	f012 0f08 	tst.w	r2, #8
 800491e:	d112      	bne.n	8004946 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004928:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800492c:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800492e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004932:	b1d1      	cbz	r1, 800496a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004934:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004940:	2b0c      	cmp	r3, #12
 8004942:	d01a      	beq.n	800497a <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004944:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	e7ee      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x68>
 800494e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004952:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004954:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004958:	e7d8      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800495a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8004964:	d106      	bne.n	8004974 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8004966:	4819      	ldr	r0, [pc, #100]	; (80049cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004968:	e7e5      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800496a:	4610      	mov	r0, r2
 800496c:	e7e3      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800496e:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004970:	4817      	ldr	r0, [pc, #92]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004972:	e7e0      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004974:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8004976:	4816      	ldr	r0, [pc, #88]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004978:	e7dd      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004984:	2b02      	cmp	r3, #2
 8004986:	d009      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0xd8>
 8004988:	2b03      	cmp	r3, #3
 800498a:	d108      	bne.n	800499e <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800498c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004996:	d115      	bne.n	80049c4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004998:	4a0c      	ldr	r2, [pc, #48]	; (80049cc <HAL_RCC_GetSysClockFreq+0x108>)
 800499a:	e000      	b.n	800499e <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 800499c:	4a0c      	ldr	r2, [pc, #48]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	68d8      	ldr	r0, [r3, #12]
 80049a4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80049a8:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80049ac:	68d8      	ldr	r0, [r3, #12]
 80049ae:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80049b2:	3001      	adds	r0, #1
 80049b4:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80049b8:	68d8      	ldr	r0, [r3, #12]
 80049ba:	0f40      	lsrs	r0, r0, #29
 80049bc:	3001      	adds	r0, #1
 80049be:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80049c2:	e7bf      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80049c4:	4a02      	ldr	r2, [pc, #8]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049c6:	e7ea      	b.n	800499e <HAL_RCC_GetSysClockFreq+0xda>
 80049c8:	0801551c 	.word	0x0801551c
 80049cc:	01e84800 	.word	0x01e84800
 80049d0:	00f42400 	.word	0x00f42400

080049d4 <HAL_RCC_GetHCLKFreq>:
{
 80049d4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80049d6:	f7ff ff75 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049e4:	4a02      	ldr	r2, [pc, #8]	; (80049f0 <HAL_RCC_GetHCLKFreq+0x1c>)
 80049e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80049ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80049ee:	bd08      	pop	{r3, pc}
 80049f0:	080154bc 	.word	0x080154bc

080049f4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80049f4:	2800      	cmp	r0, #0
 80049f6:	f000 8319 	beq.w	800502c <HAL_RCC_OscConfig+0x638>
{
 80049fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fc:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a02:	689d      	ldr	r5, [r3, #8]
 8004a04:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a08:	68de      	ldr	r6, [r3, #12]
 8004a0a:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a0e:	6803      	ldr	r3, [r0, #0]
 8004a10:	f013 0f20 	tst.w	r3, #32
 8004a14:	f000 808f 	beq.w	8004b36 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a18:	b1ed      	cbz	r5, 8004a56 <HAL_RCC_OscConfig+0x62>
 8004a1a:	2d0c      	cmp	r5, #12
 8004a1c:	d019      	beq.n	8004a52 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a1e:	6a23      	ldr	r3, [r4, #32]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80bc 	beq.w	8004b9e <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a2a:	6813      	ldr	r3, [r2, #0]
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a32:	f7fd f8f9 	bl	8001c28 <HAL_GetTick>
 8004a36:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f013 0f02 	tst.w	r3, #2
 8004a42:	d165      	bne.n	8004b10 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a44:	f7fd f8f0 	bl	8001c28 <HAL_GetTick>
 8004a48:	1bc0      	subs	r0, r0, r7
 8004a4a:	2802      	cmp	r0, #2
 8004a4c:	d9f4      	bls.n	8004a38 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004a4e:	2003      	movs	r0, #3
 8004a50:	e2f9      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a52:	2e01      	cmp	r6, #1
 8004a54:	d1e3      	bne.n	8004a1e <HAL_RCC_OscConfig+0x2a>
 8004a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f013 0f02 	tst.w	r3, #2
 8004a60:	d003      	beq.n	8004a6a <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a62:	6a23      	ldr	r3, [r4, #32]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 82e3 	beq.w	8005030 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f013 0f08 	tst.w	r3, #8
 8004a76:	d029      	beq.n	8004acc <HAL_RCC_OscConfig+0xd8>
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a82:	4298      	cmp	r0, r3
 8004a84:	d92a      	bls.n	8004adc <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a86:	f7ff fefb 	bl	8004880 <RCC_SetFlashLatencyFromMSIRange>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	f040 82d2 	bne.w	8005034 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	f042 0208 	orr.w	r2, r2, #8
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004aa2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aa8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004ab0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004ab4:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ab6:	f7ff ff8d 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
 8004aba:	4bb0      	ldr	r3, [pc, #704]	; (8004d7c <HAL_RCC_OscConfig+0x388>)
 8004abc:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004abe:	4bb0      	ldr	r3, [pc, #704]	; (8004d80 <HAL_RCC_OscConfig+0x38c>)
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	f7fc ff19 	bl	80018f8 <HAL_InitTick>
        if (status != HAL_OK)
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d035      	beq.n	8004b36 <HAL_RCC_OscConfig+0x142>
 8004aca:	e2bc      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ada:	e7d2      	b.n	8004a82 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	f042 0208 	orr.w	r2, r2, #8
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004aee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004af0:	430a      	orrs	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004af4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004afc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b00:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004b04:	f7ff febc 	bl	8004880 <RCC_SetFlashLatencyFromMSIRange>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d0d4      	beq.n	8004ab6 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	e29a      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	f042 0208 	orr.w	r2, r2, #8
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004b22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b30:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b34:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	f013 0f01 	tst.w	r3, #1
 8004b3c:	d051      	beq.n	8004be2 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b3e:	2d08      	cmp	r5, #8
 8004b40:	d045      	beq.n	8004bce <HAL_RCC_OscConfig+0x1da>
 8004b42:	2d0c      	cmp	r5, #12
 8004b44:	d041      	beq.n	8004bca <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b4a:	6813      	ldr	r3, [r2, #0]
 8004b4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b50:	68a1      	ldr	r1, [r4, #8]
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b56:	6863      	ldr	r3, [r4, #4]
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5c:	d063      	beq.n	8004c26 <HAL_RCC_OscConfig+0x232>
 8004b5e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004b62:	d065      	beq.n	8004c30 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b6e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004b76:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b78:	6863      	ldr	r3, [r4, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d063      	beq.n	8004c46 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8004b7e:	f7fd f853 	bl	8001c28 <HAL_GetTick>
 8004b82:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b8e:	d128      	bne.n	8004be2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b90:	f7fd f84a 	bl	8001c28 <HAL_GetTick>
 8004b94:	1bc0      	subs	r0, r0, r7
 8004b96:	2864      	cmp	r0, #100	; 0x64
 8004b98:	d9f4      	bls.n	8004b84 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8004b9a:	2003      	movs	r0, #3
 8004b9c:	e253      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004baa:	f7fd f83d 	bl	8001c28 <HAL_GetTick>
 8004bae:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f013 0f02 	tst.w	r3, #2
 8004bba:	d0bc      	beq.n	8004b36 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bbc:	f7fd f834 	bl	8001c28 <HAL_GetTick>
 8004bc0:	1bc0      	subs	r0, r0, r7
 8004bc2:	2802      	cmp	r0, #2
 8004bc4:	d9f4      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8004bc6:	2003      	movs	r0, #3
 8004bc8:	e23d      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bca:	2e03      	cmp	r6, #3
 8004bcc:	d1bb      	bne.n	8004b46 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004bd8:	d003      	beq.n	8004be2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bda:	6863      	ldr	r3, [r4, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 822b 	beq.w	8005038 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	f013 0f02 	tst.w	r3, #2
 8004be8:	d052      	beq.n	8004c90 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004bea:	2d04      	cmp	r5, #4
 8004bec:	d03d      	beq.n	8004c6a <HAL_RCC_OscConfig+0x276>
 8004bee:	2d0c      	cmp	r5, #12
 8004bf0:	d039      	beq.n	8004c66 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bf2:	6923      	ldr	r3, [r4, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8091 	beq.w	8004d1c <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c04:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c06:	f7fd f80f 	bl	8001c28 <HAL_GetTick>
 8004c0a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004c16:	d177      	bne.n	8004d08 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c18:	f7fd f806 	bl	8001c28 <HAL_GetTick>
 8004c1c:	1b80      	subs	r0, r0, r6
 8004c1e:	2802      	cmp	r0, #2
 8004c20:	d9f4      	bls.n	8004c0c <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8004c22:	2003      	movs	r0, #3
 8004c24:	e20f      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
}
 8004c2e:	e7a3      	b.n	8004b78 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004c3a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c42:	601a      	str	r2, [r3, #0]
}
 8004c44:	e798      	b.n	8004b78 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8004c46:	f7fc ffef 	bl	8001c28 <HAL_GetTick>
 8004c4a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c56:	d0c4      	beq.n	8004be2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c58:	f7fc ffe6 	bl	8001c28 <HAL_GetTick>
 8004c5c:	1bc0      	subs	r0, r0, r7
 8004c5e:	2864      	cmp	r0, #100	; 0x64
 8004c60:	d9f4      	bls.n	8004c4c <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8004c62:	2003      	movs	r0, #3
 8004c64:	e1ef      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c66:	2e02      	cmp	r6, #2
 8004c68:	d1c3      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004c74:	d003      	beq.n	8004c7e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 81df 	beq.w	800503c <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c84:	6853      	ldr	r3, [r2, #4]
 8004c86:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c8a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c8e:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	f013 0f08 	tst.w	r3, #8
 8004c96:	f000 808e 	beq.w	8004db6 <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c9a:	69a3      	ldr	r3, [r4, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d071      	beq.n	8004d84 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8004ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004ca8:	69e1      	ldr	r1, [r4, #28]
 8004caa:	f003 0210 	and.w	r2, r3, #16
 8004cae:	4291      	cmp	r1, r2
 8004cb0:	d011      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004cb2:	f003 0203 	and.w	r2, r3, #3
 8004cb6:	2a02      	cmp	r2, #2
 8004cb8:	f000 81c2 	beq.w	8005040 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004cbc:	f013 0f01 	tst.w	r3, #1
 8004cc0:	d142      	bne.n	8004d48 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004cca:	f023 0310 	bic.w	r3, r3, #16
 8004cce:	69e1      	ldr	r1, [r4, #28]
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cda:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004ce6:	f7fc ff9f 	bl	8001c28 <HAL_GetTick>
 8004cea:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf4:	f013 0f02 	tst.w	r3, #2
 8004cf8:	d15d      	bne.n	8004db6 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cfa:	f7fc ff95 	bl	8001c28 <HAL_GetTick>
 8004cfe:	1b80      	subs	r0, r0, r6
 8004d00:	2811      	cmp	r0, #17
 8004d02:	d9f3      	bls.n	8004cec <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8004d04:	2003      	movs	r0, #3
 8004d06:	e19e      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d08:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d0e:	6853      	ldr	r3, [r2, #4]
 8004d10:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d14:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004d18:	6053      	str	r3, [r2, #4]
}
 8004d1a:	e7b9      	b.n	8004c90 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d20:	6813      	ldr	r3, [r2, #0]
 8004d22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d28:	f7fc ff7e 	bl	8001c28 <HAL_GetTick>
 8004d2c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d38:	d0aa      	beq.n	8004c90 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3a:	f7fc ff75 	bl	8001c28 <HAL_GetTick>
 8004d3e:	1b80      	subs	r0, r0, r6
 8004d40:	2802      	cmp	r0, #2
 8004d42:	d9f4      	bls.n	8004d2e <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8004d44:	2003      	movs	r0, #3
 8004d46:	e17e      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d4c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004d58:	f7fc ff66 	bl	8001c28 <HAL_GetTick>
 8004d5c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d66:	f013 0f02 	tst.w	r3, #2
 8004d6a:	d0aa      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6c:	f7fc ff5c 	bl	8001c28 <HAL_GetTick>
 8004d70:	1b80      	subs	r0, r0, r6
 8004d72:	2811      	cmp	r0, #17
 8004d74:	d9f3      	bls.n	8004d5e <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8004d76:	2003      	movs	r0, #3
 8004d78:	e165      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
 8004d7a:	bf00      	nop
 8004d7c:	20000070 	.word	0x20000070
 8004d80:	20000078 	.word	0x20000078
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d88:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004d94:	f7fc ff48 	bl	8001c28 <HAL_GetTick>
 8004d98:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da2:	f013 0f02 	tst.w	r3, #2
 8004da6:	d006      	beq.n	8004db6 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da8:	f7fc ff3e 	bl	8001c28 <HAL_GetTick>
 8004dac:	1b80      	subs	r0, r0, r6
 8004dae:	2811      	cmp	r0, #17
 8004db0:	d9f3      	bls.n	8004d9a <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8004db2:	2003      	movs	r0, #3
 8004db4:	e147      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	f013 0f04 	tst.w	r3, #4
 8004dbc:	f000 80b1 	beq.w	8004f22 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004dc0:	4ba8      	ldr	r3, [pc, #672]	; (8005064 <HAL_RCC_OscConfig+0x670>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004dc8:	d110      	bne.n	8004dec <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 8004dca:	f7ff fc79 	bl	80046c0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004dce:	f7fc ff2b 	bl	8001c28 <HAL_GetTick>
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	4ba3      	ldr	r3, [pc, #652]	; (8005064 <HAL_RCC_OscConfig+0x670>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ddc:	d106      	bne.n	8004dec <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dde:	f7fc ff23 	bl	8001c28 <HAL_GetTick>
 8004de2:	1b80      	subs	r0, r0, r6
 8004de4:	2802      	cmp	r0, #2
 8004de6:	d9f5      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8004de8:	2003      	movs	r0, #3
 8004dea:	e12c      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dec:	68e3      	ldr	r3, [r4, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d061      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004df2:	2b85      	cmp	r3, #133	; 0x85
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004df6:	2b05      	cmp	r3, #5
 8004df8:	d107      	bne.n	8004e0a <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dfe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004e0a:	f7fc ff0d 	bl	8001c28 <HAL_GetTick>
 8004e0e:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f013 0f02 	tst.w	r3, #2
 8004e2c:	d108      	bne.n	8004e40 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fc fefb 	bl	8001c28 <HAL_GetTick>
 8004e32:	1b80      	subs	r0, r0, r6
 8004e34:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e38:	4298      	cmp	r0, r3
 8004e3a:	d9f1      	bls.n	8004e20 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 8004e3c:	2003      	movs	r0, #3
 8004e3e:	e102      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004e40:	68e3      	ldr	r3, [r4, #12]
 8004e42:	2b81      	cmp	r3, #129	; 0x81
 8004e44:	d001      	beq.n	8004e4a <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004e46:	2b85      	cmp	r3, #133	; 0x85
 8004e48:	d11a      	bne.n	8004e80 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 8004e4a:	f7fc feed 	bl	8001c28 <HAL_GetTick>
 8004e4e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e54:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004e6c:	d159      	bne.n	8004f22 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6e:	f7fc fedb 	bl	8001c28 <HAL_GetTick>
 8004e72:	1b80      	subs	r0, r0, r6
 8004e74:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e78:	4298      	cmp	r0, r3
 8004e7a:	d9f1      	bls.n	8004e60 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8004e7c:	2003      	movs	r0, #3
 8004e7e:	e0e2      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8004e80:	f7fc fed2 	bl	8001c28 <HAL_GetTick>
 8004e84:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ea2:	d03e      	beq.n	8004f22 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea4:	f7fc fec0 	bl	8001c28 <HAL_GetTick>
 8004ea8:	1b80      	subs	r0, r0, r6
 8004eaa:	f241 3388 	movw	r3, #5000	; 0x1388
 8004eae:	4298      	cmp	r0, r3
 8004eb0:	d9f1      	bls.n	8004e96 <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 8004eb2:	2003      	movs	r0, #3
 8004eb4:	e0c7      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8004eb6:	f7fc feb7 	bl	8001c28 <HAL_GetTick>
 8004eba:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ed8:	d008      	beq.n	8004eec <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7fc fea5 	bl	8001c28 <HAL_GetTick>
 8004ede:	1b80      	subs	r0, r0, r6
 8004ee0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ee4:	4298      	cmp	r0, r3
 8004ee6:	d9f1      	bls.n	8004ecc <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8004ee8:	2003      	movs	r0, #3
 8004eea:	e0ac      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8004eec:	f7fc fe9c 	bl	8001c28 <HAL_GetTick>
 8004ef0:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ef6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	f013 0f02 	tst.w	r3, #2
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f10:	f7fc fe8a 	bl	8001c28 <HAL_GetTick>
 8004f14:	1b80      	subs	r0, r0, r6
 8004f16:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f1a:	4298      	cmp	r0, r3
 8004f1c:	d9f1      	bls.n	8004f02 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 8004f1e:	2003      	movs	r0, #3
 8004f20:	e091      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 808d 	beq.w	8005044 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f2a:	2d0c      	cmp	r5, #12
 8004f2c:	d062      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d01f      	beq.n	8004f72 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004f3c:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	f022 0203 	bic.w	r2, r2, #3
 8004f44:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8004f4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f50:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004f52:	f7fc fe69 	bl	8001c28 <HAL_GetTick>
 8004f56:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004f62:	d073      	beq.n	800504c <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f64:	f7fc fe60 	bl	8001c28 <HAL_GetTick>
 8004f68:	1b00      	subs	r0, r0, r4
 8004f6a:	280a      	cmp	r0, #10
 8004f6c:	d9f4      	bls.n	8004f58 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 8004f6e:	2003      	movs	r0, #3
 8004f70:	e069      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f76:	6813      	ldr	r3, [r2, #0]
 8004f78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f7c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f7e:	f7fc fe53 	bl	8001c28 <HAL_GetTick>
 8004f82:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004f8e:	d12a      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f94:	68d3      	ldr	r3, [r2, #12]
 8004f96:	4934      	ldr	r1, [pc, #208]	; (8005068 <HAL_RCC_OscConfig+0x674>)
 8004f98:	4019      	ands	r1, r3
 8004f9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f9c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004f9e:	4303      	orrs	r3, r0
 8004fa0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004fa2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004fa6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004fa8:	4303      	orrs	r3, r0
 8004faa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004fac:	4303      	orrs	r3, r0
 8004fae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004fb0:	4303      	orrs	r3, r0
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fbc:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fbe:	68d3      	ldr	r3, [r2, #12]
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004fc6:	f7fc fe2f 	bl	8001c28 <HAL_GetTick>
 8004fca:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004fd6:	d137      	bne.n	8005048 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fc fe26 	bl	8001c28 <HAL_GetTick>
 8004fdc:	1b00      	subs	r0, r0, r4
 8004fde:	280a      	cmp	r0, #10
 8004fe0:	d9f4      	bls.n	8004fcc <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 8004fe2:	2003      	movs	r0, #3
 8004fe4:	e02f      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe6:	f7fc fe1f 	bl	8001c28 <HAL_GetTick>
 8004fea:	1b40      	subs	r0, r0, r5
 8004fec:	280a      	cmp	r0, #10
 8004fee:	d9c9      	bls.n	8004f84 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8004ff0:	2003      	movs	r0, #3
 8004ff2:	e028      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d02b      	beq.n	8005050 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 8004ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffc:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004ffe:	f003 0103 	and.w	r1, r3, #3
 8005002:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005004:	4291      	cmp	r1, r2
 8005006:	d125      	bne.n	8005054 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005008:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800500c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800500e:	428a      	cmp	r2, r1
 8005010:	d122      	bne.n	8005058 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005012:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005018:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800501c:	d11e      	bne.n	800505c <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800501e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8005022:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005024:	4293      	cmp	r3, r2
 8005026:	d11b      	bne.n	8005060 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8005028:	2000      	movs	r0, #0
 800502a:	e00c      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 800502c:	2001      	movs	r0, #1
}
 800502e:	4770      	bx	lr
        return HAL_ERROR;
 8005030:	2001      	movs	r0, #1
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8005034:	2001      	movs	r0, #1
 8005036:	e006      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8005038:	2001      	movs	r0, #1
 800503a:	e004      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 800503c:	2001      	movs	r0, #1
 800503e:	e002      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8005040:	2001      	movs	r0, #1
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8005044:	2000      	movs	r0, #0
}
 8005046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005048:	2000      	movs	r0, #0
 800504a:	e7fc      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
 800504c:	2000      	movs	r0, #0
 800504e:	e7fa      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8005050:	2001      	movs	r0, #1
 8005052:	e7f8      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8005054:	2001      	movs	r0, #1
 8005056:	e7f6      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
 8005058:	2001      	movs	r0, #1
 800505a:	e7f4      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
 800505c:	2001      	movs	r0, #1
 800505e:	e7f2      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
 8005060:	2001      	movs	r0, #1
 8005062:	e7f0      	b.n	8005046 <HAL_RCC_OscConfig+0x652>
 8005064:	58000400 	.word	0x58000400
 8005068:	11c1808c 	.word	0x11c1808c

0800506c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800506c:	2800      	cmp	r0, #0
 800506e:	f000 8127 	beq.w	80052c0 <HAL_RCC_ClockConfig+0x254>
{
 8005072:	b570      	push	{r4, r5, r6, lr}
 8005074:	460c      	mov	r4, r1
 8005076:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b93      	ldr	r3, [pc, #588]	; (80052c8 <HAL_RCC_ClockConfig+0x25c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	428b      	cmp	r3, r1
 8005082:	d32d      	bcc.n	80050e0 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	f013 0f02 	tst.w	r3, #2
 800508a:	d13f      	bne.n	800510c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	f013 0f20 	tst.w	r3, #32
 8005092:	d153      	bne.n	800513c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	f013 0f40 	tst.w	r3, #64	; 0x40
 800509a:	d16a      	bne.n	8005172 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	f013 0f04 	tst.w	r3, #4
 80050a2:	f040 8083 	bne.w	80051ac <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a6:	682b      	ldr	r3, [r5, #0]
 80050a8:	f013 0f08 	tst.w	r3, #8
 80050ac:	f040 8097 	bne.w	80051de <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	f013 0f01 	tst.w	r3, #1
 80050b6:	f000 80de 	beq.w	8005276 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ba:	686b      	ldr	r3, [r5, #4]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	f000 80a8 	beq.w	8005212 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	f000 80ad 	beq.w	8005222 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f040 80b2 	bne.w	8005232 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80050ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	f012 0f02 	tst.w	r2, #2
 80050d8:	f040 80b1 	bne.w	800523e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80050dc:	2001      	movs	r0, #1
 80050de:	e0ee      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e0:	4a79      	ldr	r2, [pc, #484]	; (80052c8 <HAL_RCC_ClockConfig+0x25c>)
 80050e2:	6813      	ldr	r3, [r2, #0]
 80050e4:	f023 0307 	bic.w	r3, r3, #7
 80050e8:	430b      	orrs	r3, r1
 80050ea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80050ec:	f7fc fd9c 	bl	8001c28 <HAL_GetTick>
 80050f0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b75      	ldr	r3, [pc, #468]	; (80052c8 <HAL_RCC_ClockConfig+0x25c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	d0c2      	beq.n	8005084 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050fe:	f7fc fd93 	bl	8001c28 <HAL_GetTick>
 8005102:	1b80      	subs	r0, r0, r6
 8005104:	2802      	cmp	r0, #2
 8005106:	d9f4      	bls.n	80050f2 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8005108:	2003      	movs	r0, #3
 800510a:	e0d8      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800510c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800510e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005112:	688a      	ldr	r2, [r1, #8]
 8005114:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005118:	4313      	orrs	r3, r2
 800511a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800511c:	f7fc fd84 	bl	8001c28 <HAL_GetTick>
 8005120:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800512c:	d1ae      	bne.n	800508c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800512e:	f7fc fd7b 	bl	8001c28 <HAL_GetTick>
 8005132:	1b80      	subs	r0, r0, r6
 8005134:	2802      	cmp	r0, #2
 8005136:	d9f4      	bls.n	8005122 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8005138:	2003      	movs	r0, #3
 800513a:	e0c0      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800513c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800513e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005142:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8005146:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005150:	f7fc fd6a 	bl	8001c28 <HAL_GetTick>
 8005154:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800515e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005162:	d197      	bne.n	8005094 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005164:	f7fc fd60 	bl	8001c28 <HAL_GetTick>
 8005168:	1b80      	subs	r0, r0, r6
 800516a:	2802      	cmp	r0, #2
 800516c:	d9f3      	bls.n	8005156 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800516e:	2003      	movs	r0, #3
 8005170:	e0a5      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005172:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005178:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800517c:	f023 030f 	bic.w	r3, r3, #15
 8005180:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8005184:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005188:	f7fc fd4e 	bl	8001c28 <HAL_GetTick>
 800518c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800518e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005192:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005196:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800519a:	f47f af7f 	bne.w	800509c <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800519e:	f7fc fd43 	bl	8001c28 <HAL_GetTick>
 80051a2:	1b80      	subs	r0, r0, r6
 80051a4:	2802      	cmp	r0, #2
 80051a6:	d9f2      	bls.n	800518e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80051a8:	2003      	movs	r0, #3
 80051aa:	e088      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80051ac:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80051ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b2:	688a      	ldr	r2, [r1, #8]
 80051b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051b8:	4313      	orrs	r3, r2
 80051ba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80051bc:	f7fc fd34 	bl	8001c28 <HAL_GetTick>
 80051c0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80051cc:	f47f af6b 	bne.w	80050a6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051d0:	f7fc fd2a 	bl	8001c28 <HAL_GetTick>
 80051d4:	1b80      	subs	r0, r0, r6
 80051d6:	2802      	cmp	r0, #2
 80051d8:	d9f3      	bls.n	80051c2 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80051da:	2003      	movs	r0, #3
 80051dc:	e06f      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80051de:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80051e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051e4:	6893      	ldr	r3, [r2, #8]
 80051e6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80051ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80051ee:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80051f0:	f7fc fd1a 	bl	8001c28 <HAL_GetTick>
 80051f4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80051f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005200:	f47f af56 	bne.w	80050b0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005204:	f7fc fd10 	bl	8001c28 <HAL_GetTick>
 8005208:	1b80      	subs	r0, r0, r6
 800520a:	2802      	cmp	r0, #2
 800520c:	d9f3      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800520e:	2003      	movs	r0, #3
 8005210:	e055      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800521c:	d10f      	bne.n	800523e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800521e:	2001      	movs	r0, #1
 8005220:	e04d      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800522e:	2001      	movs	r0, #1
 8005230:	e045      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800523c:	d042      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800523e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005242:	688a      	ldr	r2, [r1, #8]
 8005244:	f022 0203 	bic.w	r2, r2, #3
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800524c:	f7fc fcec 	bl	8001c28 <HAL_GetTick>
 8005250:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525c:	686a      	ldr	r2, [r5, #4]
 800525e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005262:	d008      	beq.n	8005276 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005264:	f7fc fce0 	bl	8001c28 <HAL_GetTick>
 8005268:	1b80      	subs	r0, r0, r6
 800526a:	f241 3388 	movw	r3, #5000	; 0x1388
 800526e:	4298      	cmp	r0, r3
 8005270:	d9ef      	bls.n	8005252 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8005272:	2003      	movs	r0, #3
 8005274:	e023      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <HAL_RCC_ClockConfig+0x25c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	42a3      	cmp	r3, r4
 8005280:	d915      	bls.n	80052ae <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4a11      	ldr	r2, [pc, #68]	; (80052c8 <HAL_RCC_ClockConfig+0x25c>)
 8005284:	6813      	ldr	r3, [r2, #0]
 8005286:	f023 0307 	bic.w	r3, r3, #7
 800528a:	4323      	orrs	r3, r4
 800528c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800528e:	f7fc fccb 	bl	8001c28 <HAL_GetTick>
 8005292:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005294:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <HAL_RCC_ClockConfig+0x25c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	42a3      	cmp	r3, r4
 800529e:	d006      	beq.n	80052ae <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052a0:	f7fc fcc2 	bl	8001c28 <HAL_GetTick>
 80052a4:	1b40      	subs	r0, r0, r5
 80052a6:	2802      	cmp	r0, #2
 80052a8:	d9f4      	bls.n	8005294 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80052aa:	2003      	movs	r0, #3
 80052ac:	e007      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80052ae:	f7ff fb91 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_RCC_ClockConfig+0x260>)
 80052b4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <HAL_RCC_ClockConfig+0x264>)
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	f7fc fb1d 	bl	80018f8 <HAL_InitTick>
}
 80052be:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80052c0:	2001      	movs	r0, #1
}
 80052c2:	4770      	bx	lr
        return HAL_ERROR;
 80052c4:	2001      	movs	r0, #1
 80052c6:	e7fa      	b.n	80052be <HAL_RCC_ClockConfig+0x252>
 80052c8:	58004000 	.word	0x58004000
 80052cc:	20000070 	.word	0x20000070
 80052d0:	20000078 	.word	0x20000078

080052d4 <HAL_RCC_GetPCLK1Freq>:
{
 80052d4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80052d6:	f7ff fb7d 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80052da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80052e4:	4a02      	ldr	r2, [pc, #8]	; (80052f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80052e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80052ea:	40d8      	lsrs	r0, r3
 80052ec:	bd08      	pop	{r3, pc}
 80052ee:	bf00      	nop
 80052f0:	080154fc 	.word	0x080154fc

080052f4 <HAL_RCC_GetPCLK2Freq>:
{
 80052f4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80052f6:	f7ff fb6d 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005304:	4a02      	ldr	r2, [pc, #8]	; (8005310 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800530a:	40d8      	lsrs	r0, r3
 800530c:	bd08      	pop	{r3, pc}
 800530e:	bf00      	nop
 8005310:	080154fc 	.word	0x080154fc

08005314 <HAL_RCC_GetClockConfig>:
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8005314:	4603      	mov	r3, r0
 8005316:	b328      	cbz	r0, 8005364 <HAL_RCC_GetClockConfig+0x50>
 8005318:	b321      	cbz	r1, 8005364 <HAL_RCC_GetClockConfig+0x50>
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800531a:	224f      	movs	r2, #79	; 0x4f
 800531c:	6002      	str	r2, [r0, #0]
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 800531e:	226f      	movs	r2, #111	; 0x6f
 8005320:	6002      	str	r2, [r0, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005326:	6890      	ldr	r0, [r2, #8]
 8005328:	f000 000c 	and.w	r0, r0, #12
    RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800532c:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800532e:	6890      	ldr	r0, [r2, #8]
 8005330:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005334:	6098      	str	r0, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005336:	6890      	ldr	r0, [r2, #8]
 8005338:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
    RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800533c:	60d8      	str	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800533e:	6890      	ldr	r0, [r2, #8]
 8005340:	f400 5060 	and.w	r0, r0, #14336	; 0x3800
    RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005344:	6118      	str	r0, [r3, #16]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005346:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
 800534a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800534e:	6158      	str	r0, [r3, #20]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005350:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
 8005354:	0112      	lsls	r2, r2, #4
 8005356:	b2d2      	uxtb	r2, r2
    RCC_ClkInitStruct->AHBCLK3Divider = LL_RCC_GetAHB3Prescaler();
 8005358:	619a      	str	r2, [r3, #24]
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 800535a:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCC_GetClockConfig+0x54>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	600b      	str	r3, [r1, #0]
}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	58004000 	.word	0x58004000

0800536c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005370:	6803      	ldr	r3, [r0, #0]
 8005372:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005376:	f040 80ab 	bne.w	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800537a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	f013 0f01 	tst.w	r3, #1
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005384:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800538a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800538e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005392:	b292      	uxth	r2, r2
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f013 0f02 	tst.w	r3, #2
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053a2:	68a2      	ldr	r2, [r4, #8]
 80053a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80053ac:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80053b0:	b292      	uxth	r2, r2
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	f013 0f20 	tst.w	r3, #32
 80053be:	d009      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053c0:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80053c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80053ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80053da:	d00c      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053dc:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80053de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80053e6:	0c02      	lsrs	r2, r0, #16
 80053e8:	0412      	lsls	r2, r2, #16
 80053ea:	ea23 0302 	bic.w	r3, r3, r2
 80053ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80053f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80053fc:	d00c      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005404:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005408:	0c02      	lsrs	r2, r0, #16
 800540a:	0412      	lsls	r2, r2, #16
 800540c:	ea23 0302 	bic.w	r3, r3, r2
 8005410:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800541e:	d00c      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005420:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005426:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800542a:	0c02      	lsrs	r2, r0, #16
 800542c:	0412      	lsls	r2, r2, #16
 800542e:	ea23 0302 	bic.w	r3, r3, r2
 8005432:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005440:	f040 809e 	bne.w	8005580 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	f013 0f80 	tst.w	r3, #128	; 0x80
 800544a:	f040 80aa 	bne.w	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005454:	f040 80b6 	bne.w	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	f013 0f10 	tst.w	r3, #16
 800545e:	d00e      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005460:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005466:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800546a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005474:	68e3      	ldr	r3, [r4, #12]
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	f000 80b4 	beq.w	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005484:	d00f      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005486:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800548c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005490:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800549a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800549c:	b91b      	cbnz	r3, 80054a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800549e:	68cb      	ldr	r3, [r1, #12]
 80054a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a4:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80054ac:	d00e      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80054b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80054c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c8:	f000 8092 	beq.w	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80054cc:	4628      	mov	r0, r5
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80054d0:	f7ff f8f6 	bl	80046c0 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80054d4:	f7fc fba8 	bl	8001c28 <HAL_GetTick>
 80054d8:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80054da:	4b48      	ldr	r3, [pc, #288]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f413 7f80 	tst.w	r3, #256	; 0x100
 80054e2:	d106      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e4:	f7fc fba0 	bl	8001c28 <HAL_GetTick>
 80054e8:	1b40      	subs	r0, r0, r5
 80054ea:	2802      	cmp	r0, #2
 80054ec:	d9f5      	bls.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 80054ee:	2503      	movs	r5, #3
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80054f2:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80054f4:	2d00      	cmp	r5, #0
 80054f6:	f47f af41 	bne.w	800537c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005506:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005508:	429a      	cmp	r2, r3
 800550a:	d024      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005510:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005514:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005518:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800551c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005520:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005524:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005528:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800552c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005530:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005534:	f012 0f02 	tst.w	r2, #2
 8005538:	d10f      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 800553a:	2d00      	cmp	r5, #0
 800553c:	f47f af1e 	bne.w	800537c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005540:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005546:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800554a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005554:	e712      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8005556:	2200      	movs	r2, #0
 8005558:	e7ec      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 800555a:	f7fc fb65 	bl	8001c28 <HAL_GetTick>
 800555e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005568:	f013 0f02 	tst.w	r3, #2
 800556c:	d1e5      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556e:	f7fc fb5b 	bl	8001c28 <HAL_GetTick>
 8005572:	1b80      	subs	r0, r0, r6
 8005574:	f241 3388 	movw	r3, #5000	; 0x1388
 8005578:	4298      	cmp	r0, r3
 800557a:	d9f1      	bls.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 800557c:	2503      	movs	r5, #3
 800557e:	e7dc      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005580:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005582:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005586:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800558a:	0919      	lsrs	r1, r3, #4
 800558c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005590:	ea22 0201 	bic.w	r2, r2, r1
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80055a0:	e750      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055a2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80055a4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80055a8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80055ac:	0919      	lsrs	r1, r3, #4
 80055ae:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80055b2:	ea22 0201 	bic.w	r2, r2, r1
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80055c2:	e744      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055c4:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80055c6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80055ca:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80055ce:	0919      	lsrs	r1, r3, #4
 80055d0:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80055d4:	ea22 0201 	bic.w	r2, r2, r1
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80055e4:	e738      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80055e6:	68cb      	ldr	r3, [r1, #12]
 80055e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ec:	60cb      	str	r3, [r1, #12]
 80055ee:	e746      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055f0:	68cb      	ldr	r3, [r1, #12]
 80055f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f6:	60cb      	str	r3, [r1, #12]
 80055f8:	e768      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 80055fa:	bf00      	nop
 80055fc:	58000400 	.word	0x58000400

08005600 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005600:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d036      	beq.n	8005676 <HAL_RTC_DeactivateAlarm+0x76>
 8005608:	2301      	movs	r3, #1
 800560a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800560e:	2302      	movs	r3, #2
 8005610:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005614:	4b19      	ldr	r3, [pc, #100]	; (800567c <HAL_RTC_DeactivateAlarm+0x7c>)
 8005616:	22ca      	movs	r2, #202	; 0xca
 8005618:	625a      	str	r2, [r3, #36]	; 0x24
 800561a:	2253      	movs	r2, #83	; 0x53
 800561c:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800561e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005622:	d019      	beq.n	8005658 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005624:	4b15      	ldr	r3, [pc, #84]	; (800567c <HAL_RTC_DeactivateAlarm+0x7c>)
 8005626:	699a      	ldr	r2, [r3, #24]
 8005628:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800562c:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800562e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005630:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005634:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005636:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005638:	f022 0202 	bic.w	r2, r2, #2
 800563c:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800563e:	2202      	movs	r2, #2
 8005640:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005642:	4b0e      	ldr	r3, [pc, #56]	; (800567c <HAL_RTC_DeactivateAlarm+0x7c>)
 8005644:	22ff      	movs	r2, #255	; 0xff
 8005646:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005648:	2301      	movs	r3, #1
 800564a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800564e:	2300      	movs	r3, #0
 8005650:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005654:	4618      	mov	r0, r3
 8005656:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800565e:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005662:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005666:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005668:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005670:	2201      	movs	r2, #1
 8005672:	65da      	str	r2, [r3, #92]	; 0x5c
 8005674:	e7e5      	b.n	8005642 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8005676:	2002      	movs	r0, #2
}
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40002800 	.word	0x40002800

08005680 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005684:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005686:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8005688:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800568a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800568c:	f015 0f01 	tst.w	r5, #1
 8005690:	d106      	bne.n	80056a0 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005692:	f015 0f02 	tst.w	r5, #2
 8005696:	d109      	bne.n	80056ac <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005698:	2301      	movs	r3, #1
 800569a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800569e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <HAL_RTC_AlarmIRQHandler+0x3c>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80056a6:	f7fc fd17 	bl	80020d8 <HAL_RTC_AlarmAEventCallback>
 80056aa:	e7f2      	b.n	8005692 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <HAL_RTC_AlarmIRQHandler+0x3c>)
 80056ae:	2202      	movs	r2, #2
 80056b0:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f9e6 	bl	8005a84 <HAL_RTCEx_AlarmBEventCallback>
 80056b8:	e7ee      	b.n	8005698 <HAL_RTC_AlarmIRQHandler+0x18>
 80056ba:	bf00      	nop
 80056bc:	40002800 	.word	0x40002800

080056c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056c0:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80056c2:	4a0b      	ldr	r2, [pc, #44]	; (80056f0 <HAL_RTC_WaitForSynchro+0x30>)
 80056c4:	68d3      	ldr	r3, [r2, #12]
 80056c6:	f023 0320 	bic.w	r3, r3, #32
 80056ca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80056cc:	f7fc faac 	bl	8001c28 <HAL_GetTick>
 80056d0:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <HAL_RTC_WaitForSynchro+0x30>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f013 0f20 	tst.w	r3, #32
 80056da:	d107      	bne.n	80056ec <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056dc:	f7fc faa4 	bl	8001c28 <HAL_GetTick>
 80056e0:	1b00      	subs	r0, r0, r4
 80056e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80056e6:	d9f4      	bls.n	80056d2 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80056e8:	2003      	movs	r0, #3
 80056ea:	e000      	b.n	80056ee <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80056ec:	2000      	movs	r0, #0
}
 80056ee:	bd10      	pop	{r4, pc}
 80056f0:	40002800 	.word	0x40002800

080056f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <RTC_EnterInitMode+0x48>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80056fe:	d002      	beq.n	8005706 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8005700:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8005702:	4620      	mov	r0, r4
 8005704:	bd70      	pop	{r4, r5, r6, pc}
 8005706:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005708:	4a0c      	ldr	r2, [pc, #48]	; (800573c <RTC_EnterInitMode+0x48>)
 800570a:	68d3      	ldr	r3, [r2, #12]
 800570c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005710:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8005712:	f7fc fa89 	bl	8001c28 <HAL_GetTick>
 8005716:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005718:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800571a:	4b08      	ldr	r3, [pc, #32]	; (800573c <RTC_EnterInitMode+0x48>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005722:	d1ee      	bne.n	8005702 <RTC_EnterInitMode+0xe>
 8005724:	2c03      	cmp	r4, #3
 8005726:	d0ec      	beq.n	8005702 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005728:	f7fc fa7e 	bl	8001c28 <HAL_GetTick>
 800572c:	1b43      	subs	r3, r0, r5
 800572e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005732:	d9f2      	bls.n	800571a <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005734:	2403      	movs	r4, #3
 8005736:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800573a:	e7ee      	b.n	800571a <RTC_EnterInitMode+0x26>
 800573c:	40002800 	.word	0x40002800

08005740 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005740:	b510      	push	{r4, lr}
 8005742:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005744:	4b11      	ldr	r3, [pc, #68]	; (800578c <RTC_ExitInitMode+0x4c>)
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800574c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f013 0f20 	tst.w	r3, #32
 8005754:	d107      	bne.n	8005766 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005756:	f7ff ffb3 	bl	80056c0 <HAL_RTC_WaitForSynchro>
 800575a:	4603      	mov	r3, r0
 800575c:	b1a0      	cbz	r0, 8005788 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005764:	e010      	b.n	8005788 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005766:	4a09      	ldr	r2, [pc, #36]	; (800578c <RTC_ExitInitMode+0x4c>)
 8005768:	6993      	ldr	r3, [r2, #24]
 800576a:	f023 0320 	bic.w	r3, r3, #32
 800576e:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005770:	f7ff ffa6 	bl	80056c0 <HAL_RTC_WaitForSynchro>
 8005774:	4603      	mov	r3, r0
 8005776:	b110      	cbz	r0, 800577e <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800577e:	4903      	ldr	r1, [pc, #12]	; (800578c <RTC_ExitInitMode+0x4c>)
 8005780:	698a      	ldr	r2, [r1, #24]
 8005782:	f042 0220 	orr.w	r2, r2, #32
 8005786:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8005788:	4618      	mov	r0, r3
 800578a:	bd10      	pop	{r4, pc}
 800578c:	40002800 	.word	0x40002800

08005790 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005790:	2800      	cmp	r0, #0
 8005792:	d04a      	beq.n	800582a <HAL_RTC_Init+0x9a>
{
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005798:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800579c:	b19b      	cbz	r3, 80057c6 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800579e:	2302      	movs	r3, #2
 80057a0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057a4:	4b22      	ldr	r3, [pc, #136]	; (8005830 <HAL_RTC_Init+0xa0>)
 80057a6:	22ca      	movs	r2, #202	; 0xca
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24
 80057aa:	2253      	movs	r2, #83	; 0x53
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80057ae:	4620      	mov	r0, r4
 80057b0:	f7ff ffa0 	bl	80056f4 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80057b4:	b160      	cbz	r0, 80057d0 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057b6:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <HAL_RTC_Init+0xa0>)
 80057b8:	22ff      	movs	r2, #255	; 0xff
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80057bc:	b910      	cbnz	r0, 80057c4 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 80057be:	2301      	movs	r3, #1
 80057c0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80057c4:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80057c6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 80057ca:	f7fc f82d 	bl	8001828 <HAL_RTC_MspInit>
 80057ce:	e7e6      	b.n	800579e <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80057d0:	4b17      	ldr	r3, [pc, #92]	; (8005830 <HAL_RTC_Init+0xa0>)
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80057d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057dc:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80057de:	6999      	ldr	r1, [r3, #24]
 80057e0:	6862      	ldr	r2, [r4, #4]
 80057e2:	6920      	ldr	r0, [r4, #16]
 80057e4:	4302      	orrs	r2, r0
 80057e6:	69a0      	ldr	r0, [r4, #24]
 80057e8:	4302      	orrs	r2, r0
 80057ea:	430a      	orrs	r2, r1
 80057ec:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80057ee:	68e2      	ldr	r2, [r4, #12]
 80057f0:	68a1      	ldr	r1, [r4, #8]
 80057f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80057f6:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80057fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005800:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005802:	4301      	orrs	r1, r0
 8005804:	430a      	orrs	r2, r1
 8005806:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8005808:	4620      	mov	r0, r4
 800580a:	f7ff ff99 	bl	8005740 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800580e:	2800      	cmp	r0, #0
 8005810:	d1d1      	bne.n	80057b6 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8005812:	4907      	ldr	r1, [pc, #28]	; (8005830 <HAL_RTC_Init+0xa0>)
 8005814:	698b      	ldr	r3, [r1, #24]
 8005816:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800581a:	6a22      	ldr	r2, [r4, #32]
 800581c:	69e5      	ldr	r5, [r4, #28]
 800581e:	432a      	orrs	r2, r5
 8005820:	6965      	ldr	r5, [r4, #20]
 8005822:	432a      	orrs	r2, r5
 8005824:	4313      	orrs	r3, r2
 8005826:	618b      	str	r3, [r1, #24]
 8005828:	e7c5      	b.n	80057b6 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 800582a:	2001      	movs	r0, #1
}
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40002800 	.word	0x40002800

08005834 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005834:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8005836:	e002      	b.n	800583e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005838:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800583a:	380a      	subs	r0, #10
 800583c:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800583e:	2809      	cmp	r0, #9
 8005840:	d8fa      	bhi.n	8005838 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	b2db      	uxtb	r3, r3
}
 8005846:	4318      	orrs	r0, r3
 8005848:	4770      	bx	lr
	...

0800584c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800584c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005850:	2b01      	cmp	r3, #1
 8005852:	f000 80b0 	beq.w	80059b6 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8005856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585a:	4605      	mov	r5, r0
 800585c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800585e:	2301      	movs	r3, #1
 8005860:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005864:	2302      	movs	r3, #2
 8005866:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800586a:	4b54      	ldr	r3, [pc, #336]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 800586c:	68de      	ldr	r6, [r3, #12]
 800586e:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8005872:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005876:	d043      	beq.n	8005900 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005878:	bb12      	cbnz	r2, 80058c0 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005880:	d101      	bne.n	8005886 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005882:	2300      	movs	r3, #0
 8005884:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005886:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800588a:	7820      	ldrb	r0, [r4, #0]
 800588c:	f7ff ffd2 	bl	8005834 <RTC_ByteToBcd2>
 8005890:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005892:	7860      	ldrb	r0, [r4, #1]
 8005894:	f7ff ffce 	bl	8005834 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005898:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800589c:	78a0      	ldrb	r0, [r4, #2]
 800589e:	f7ff ffc9 	bl	8005834 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058a2:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058a4:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058a6:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058aa:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80058ae:	f7ff ffc1 	bl	8005834 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058b2:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80058b6:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058b8:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058ba:	ea48 0000 	orr.w	r0, r8, r0
 80058be:	e020      	b.n	8005902 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80058c0:	6948      	ldr	r0, [r1, #20]
 80058c2:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 80058c6:	d009      	beq.n	80058dc <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80058c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80058cc:	d006      	beq.n	80058dc <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80058ce:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80058d6:	d101      	bne.n	80058dc <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80058d8:	2300      	movs	r3, #0
 80058da:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058dc:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058de:	7863      	ldrb	r3, [r4, #1]
 80058e0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058e6:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058e8:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058ea:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058ec:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058f0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80058f8:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058fa:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058fc:	4318      	orrs	r0, r3
 80058fe:	e000      	b.n	8005902 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8005900:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005902:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 8005904:	22ca      	movs	r2, #202	; 0xca
 8005906:	625a      	str	r2, [r3, #36]	; 0x24
 8005908:	2253      	movs	r2, #83	; 0x53
 800590a:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800590c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800590e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005912:	d02a      	beq.n	800596a <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005914:	4b29      	ldr	r3, [pc, #164]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800591c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800591e:	2202      	movs	r2, #2
 8005920:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005922:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005926:	d040      	beq.n	80059aa <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005928:	4b24      	ldr	r3, [pc, #144]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 800592a:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800592c:	69a2      	ldr	r2, [r4, #24]
 800592e:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005930:	6862      	ldr	r2, [r4, #4]
 8005932:	4b22      	ldr	r3, [pc, #136]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 8005934:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005936:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005938:	f042 0202 	orr.w	r2, r2, #2
 800593c:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8005944:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005946:	4a1e      	ldr	r2, [pc, #120]	; (80059c0 <HAL_RTC_SetAlarm_IT+0x174>)
 8005948:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800594c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005950:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 8005956:	22ff      	movs	r2, #255	; 0xff
 8005958:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800595a:	2301      	movs	r3, #1
 800595c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8005960:	2000      	movs	r0, #0
 8005962:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8005966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005972:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005974:	2201      	movs	r2, #1
 8005976:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005978:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800597c:	d00f      	beq.n	800599e <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800597e:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 8005980:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005982:	69a2      	ldr	r2, [r4, #24]
 8005984:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005986:	6862      	ldr	r2, [r4, #4]
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 800598a:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800598c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800599a:	619a      	str	r2, [r3, #24]
 800599c:	e7d3      	b.n	8005946 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800599e:	69a3      	ldr	r3, [r4, #24]
 80059a0:	69e2      	ldr	r2, [r4, #28]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	4a05      	ldr	r2, [pc, #20]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 80059a6:	6453      	str	r3, [r2, #68]	; 0x44
 80059a8:	e7ed      	b.n	8005986 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80059aa:	69a3      	ldr	r3, [r4, #24]
 80059ac:	69e2      	ldr	r2, [r4, #28]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	4a02      	ldr	r2, [pc, #8]	; (80059bc <HAL_RTC_SetAlarm_IT+0x170>)
 80059b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059b4:	e7bc      	b.n	8005930 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80059b6:	2002      	movs	r0, #2
}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40002800 	.word	0x40002800
 80059c0:	58000800 	.word	0x58000800

080059c4 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059c4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d017      	beq.n	80059fc <HAL_RTCEx_EnableBypassShadow+0x38>
 80059cc:	2101      	movs	r1, #1
 80059ce:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059d2:	2302      	movs	r3, #2
 80059d4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059d8:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80059da:	22ca      	movs	r2, #202	; 0xca
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24
 80059de:	2253      	movs	r2, #83	; 0x53
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	f042 0220 	orr.w	r2, r2, #32
 80059e8:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ea:	22ff      	movs	r2, #255	; 0xff
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80059ee:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059f2:	2300      	movs	r3, #0
 80059f4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80059f8:	4618      	mov	r0, r3
 80059fa:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80059fc:	2002      	movs	r0, #2
}
 80059fe:	4770      	bx	lr
 8005a00:	40002800 	.word	0x40002800

08005a04 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a04:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d020      	beq.n	8005a4e <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8005a0c:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8005a0e:	2101      	movs	r1, #1
 8005a10:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a14:	2302      	movs	r3, #2
 8005a16:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a1a:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8005a1c:	22ca      	movs	r2, #202	; 0xca
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005a20:	2253      	movs	r2, #83	; 0x53
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a2a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005a2c:	4c0a      	ldr	r4, [pc, #40]	; (8005a58 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8005a2e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005a32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005a36:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a3a:	22ff      	movs	r2, #255	; 0xff
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005a3e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a42:	2300      	movs	r3, #0
 8005a44:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005a48:	4618      	mov	r0, r3
}
 8005a4a:	bc10      	pop	{r4}
 8005a4c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005a4e:	2002      	movs	r0, #2
}
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40002800 	.word	0x40002800
 8005a58:	58000800 	.word	0x58000800

08005a5c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a68:	d103      	bne.n	8005a72 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005a70:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8005a72:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005a74:	2240      	movs	r2, #64	; 0x40
 8005a76:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005a78:	f7fc fb32 	bl	80020e0 <HAL_RTCEx_SSRUEventCallback>
 8005a7c:	e7f5      	b.n	8005a6a <HAL_RTCEx_SSRUIRQHandler+0xe>
 8005a7e:	bf00      	nop
 8005a80:	40002800 	.word	0x40002800

08005a84 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005a84:	4770      	bx	lr

08005a86 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005a86:	0089      	lsls	r1, r1, #2
 8005a88:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005a8c:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005a90:	600a      	str	r2, [r1, #0]
}
 8005a92:	4770      	bx	lr

08005a94 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005a94:	0089      	lsls	r1, r1, #2
 8005a96:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005a9a:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005a9e:	6808      	ldr	r0, [r1, #0]
}
 8005aa0:	4770      	bx	lr
	...

08005aa4 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005aa4:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <SUBGHZSPI_Init+0x20>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aac:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005aae:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8005ab2:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005ab4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac0:	601a      	str	r2, [r3, #0]
}
 8005ac2:	4770      	bx	lr
 8005ac4:	58010000 	.word	0x58010000

08005ac8 <HAL_SUBGHZ_Init>:
{
 8005ac8:	b530      	push	{r4, r5, lr}
 8005aca:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d04e      	beq.n	8005b6e <HAL_SUBGHZ_Init+0xa6>
 8005ad0:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8005ad2:	7983      	ldrb	r3, [r0, #6]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d03b      	beq.n	8005b50 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005ae4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005aec:	4b21      	ldr	r3, [pc, #132]	; (8005b74 <HAL_SUBGHZ_Init+0xac>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005af4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005af8:	2264      	movs	r2, #100	; 0x64
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8005b00:	9b01      	ldr	r3, [sp, #4]
 8005b02:	b34b      	cbz	r3, 8005b58 <HAL_SUBGHZ_Init+0x90>
    count--;
 8005b04:	9b01      	ldr	r3, [sp, #4]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b12:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005b16:	d1f3      	bne.n	8005b00 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 8005b18:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <HAL_SUBGHZ_Init+0xb0>)
 8005b1c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005b28:	4914      	ldr	r1, [pc, #80]	; (8005b7c <HAL_SUBGHZ_Init+0xb4>)
 8005b2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005b2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b3c:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b42:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8005b44:	b15d      	cbz	r5, 8005b5e <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8005b46:	2301      	movs	r3, #1
 8005b48:	71a3      	strb	r3, [r4, #6]
}
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	b003      	add	sp, #12
 8005b4e:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8005b50:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8005b52:	f7fb ff81 	bl	8001a58 <HAL_SUBGHZ_MspInit>
 8005b56:	e7bf      	b.n	8005ad8 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005b58:	2501      	movs	r5, #1
 8005b5a:	60a5      	str	r5, [r4, #8]
      break;
 8005b5c:	e7dd      	b.n	8005b1a <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005b5e:	6820      	ldr	r0, [r4, #0]
 8005b60:	f7ff ffa0 	bl	8005aa4 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005b64:	2301      	movs	r3, #1
 8005b66:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60a3      	str	r3, [r4, #8]
 8005b6c:	e7eb      	b.n	8005b46 <HAL_SUBGHZ_Init+0x7e>
    return status;
 8005b6e:	2501      	movs	r5, #1
 8005b70:	e7eb      	b.n	8005b4a <HAL_SUBGHZ_Init+0x82>
 8005b72:	bf00      	nop
 8005b74:	20000070 	.word	0x20000070
 8005b78:	58000400 	.word	0x58000400
 8005b7c:	58000800 	.word	0x58000800

08005b80 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005b80:	b082      	sub	sp, #8
 8005b82:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <SUBGHZSPI_Transmit+0x70>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005b8c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005b90:	2064      	movs	r0, #100	; 0x64
 8005b92:	fb00 f303 	mul.w	r3, r0, r3
 8005b96:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005b98:	9b01      	ldr	r3, [sp, #4]
 8005b9a:	b14b      	cbz	r3, 8005bb0 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005b9c:	9b01      	ldr	r3, [sp, #4]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005ba2:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <SUBGHZSPI_Transmit+0x74>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f013 0f02 	tst.w	r3, #2
 8005baa:	d0f5      	beq.n	8005b98 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005bac:	2000      	movs	r0, #0
 8005bae:	e001      	b.n	8005bb4 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005bb4:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <SUBGHZSPI_Transmit+0x74>)
 8005bb6:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <SUBGHZSPI_Transmit+0x70>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005bc0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005bc4:	2164      	movs	r1, #100	; 0x64
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005bcc:	9b01      	ldr	r3, [sp, #4]
 8005bce:	b143      	cbz	r3, 8005be2 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005bd6:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <SUBGHZSPI_Transmit+0x74>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f013 0f01 	tst.w	r3, #1
 8005bde:	d0f5      	beq.n	8005bcc <SUBGHZSPI_Transmit+0x4c>
 8005be0:	e001      	b.n	8005be6 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005be2:	2001      	movs	r0, #1
 8005be4:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005be6:	4b03      	ldr	r3, [pc, #12]	; (8005bf4 <SUBGHZSPI_Transmit+0x74>)
 8005be8:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8005bea:	b002      	add	sp, #8
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000070 	.word	0x20000070
 8005bf4:	58010000 	.word	0x58010000

08005bf8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005bfc:	4b1c      	ldr	r3, [pc, #112]	; (8005c70 <SUBGHZSPI_Receive+0x78>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005c04:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005c08:	2064      	movs	r0, #100	; 0x64
 8005c0a:	fb00 f303 	mul.w	r3, r0, r3
 8005c0e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005c10:	9b01      	ldr	r3, [sp, #4]
 8005c12:	b14b      	cbz	r3, 8005c28 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005c14:	9b01      	ldr	r3, [sp, #4]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005c1a:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <SUBGHZSPI_Receive+0x7c>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f013 0f02 	tst.w	r3, #2
 8005c22:	d0f5      	beq.n	8005c10 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005c24:	2000      	movs	r0, #0
 8005c26:	e001      	b.n	8005c2c <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005c28:	2001      	movs	r0, #1
 8005c2a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8005c2c:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <SUBGHZSPI_Receive+0x7c>)
 8005c2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005c32:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005c36:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <SUBGHZSPI_Receive+0x78>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005c3e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005c42:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005c46:	fb0c f303 	mul.w	r3, ip, r3
 8005c4a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005c4c:	9b01      	ldr	r3, [sp, #4]
 8005c4e:	b143      	cbz	r3, 8005c62 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005c50:	9b01      	ldr	r3, [sp, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005c56:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <SUBGHZSPI_Receive+0x7c>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f013 0f01 	tst.w	r3, #1
 8005c5e:	d0f5      	beq.n	8005c4c <SUBGHZSPI_Receive+0x54>
 8005c60:	e001      	b.n	8005c66 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005c62:	2001      	movs	r0, #1
 8005c64:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005c66:	4b03      	ldr	r3, [pc, #12]	; (8005c74 <SUBGHZSPI_Receive+0x7c>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005c6c:	b002      	add	sp, #8
 8005c6e:	4770      	bx	lr
 8005c70:	20000070 	.word	0x20000070
 8005c74:	58010000 	.word	0x58010000

08005c78 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005c78:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005c7a:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <SUBGHZ_WaitOnBusy+0x50>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c82:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005c86:	2264      	movs	r2, #100	; 0x64
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	e006      	b.n	8005c9e <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005c90:	2302      	movs	r3, #2
 8005c92:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005c94:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005c96:	b002      	add	sp, #8
 8005c98:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005c9a:	4213      	tst	r3, r2
 8005c9c:	d012      	beq.n	8005cc4 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005c9e:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <SUBGHZ_WaitOnBusy+0x54>)
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f013 0304 	ands.w	r3, r3, #4
 8005ca6:	d000      	beq.n	8005caa <SUBGHZ_WaitOnBusy+0x32>
 8005ca8:	2301      	movs	r3, #1
    if (count == 0U)
 8005caa:	9a01      	ldr	r2, [sp, #4]
 8005cac:	2a00      	cmp	r2, #0
 8005cae:	d0ef      	beq.n	8005c90 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8005cb0:	9a01      	ldr	r2, [sp, #4]
 8005cb2:	3a01      	subs	r2, #1
 8005cb4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005cb6:	4a05      	ldr	r2, [pc, #20]	; (8005ccc <SUBGHZ_WaitOnBusy+0x54>)
 8005cb8:	6952      	ldr	r2, [r2, #20]
 8005cba:	f012 0202 	ands.w	r2, r2, #2
 8005cbe:	d0ec      	beq.n	8005c9a <SUBGHZ_WaitOnBusy+0x22>
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	e7ea      	b.n	8005c9a <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	e7e6      	b.n	8005c96 <SUBGHZ_WaitOnBusy+0x1e>
 8005cc8:	20000070 	.word	0x20000070
 8005ccc:	58000400 	.word	0x58000400

08005cd0 <SUBGHZ_CheckDeviceReady>:
{
 8005cd0:	b500      	push	{lr}
 8005cd2:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005cd4:	7903      	ldrb	r3, [r0, #4]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d004      	beq.n	8005ce4 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005cda:	f7ff ffcd 	bl	8005c78 <SUBGHZ_WaitOnBusy>
}
 8005cde:	b003      	add	sp, #12
 8005ce0:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <SUBGHZ_CheckDeviceReady+0x4c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005cec:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8005cf0:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005cf2:	4a0b      	ldr	r2, [pc, #44]	; (8005d20 <SUBGHZ_CheckDeviceReady+0x50>)
 8005cf4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005cf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8005d00:	9b01      	ldr	r3, [sp, #4]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8005d06:	9b01      	ldr	r3, [sp, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f9      	bne.n	8005d00 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005d0c:	4a04      	ldr	r2, [pc, #16]	; (8005d20 <SUBGHZ_CheckDeviceReady+0x50>)
 8005d0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d1a:	e7de      	b.n	8005cda <SUBGHZ_CheckDeviceReady+0xa>
 8005d1c:	20000070 	.word	0x20000070
 8005d20:	58000400 	.word	0x58000400

08005d24 <HAL_SUBGHZ_WriteRegisters>:
{
 8005d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d28:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d2a:	7980      	ldrb	r0, [r0, #6]
 8005d2c:	fa5f f880 	uxtb.w	r8, r0
 8005d30:	f1b8 0f01 	cmp.w	r8, #1
 8005d34:	d13e      	bne.n	8005db4 <HAL_SUBGHZ_WriteRegisters+0x90>
 8005d36:	460c      	mov	r4, r1
 8005d38:	4617      	mov	r7, r2
 8005d3a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005d3c:	796b      	ldrb	r3, [r5, #5]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d03b      	beq.n	8005dba <HAL_SUBGHZ_WriteRegisters+0x96>
 8005d42:	2301      	movs	r3, #1
 8005d44:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005d46:	2302      	movs	r3, #2
 8005d48:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f7ff ffc0 	bl	8005cd0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005d50:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005d52:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005d5e:	210d      	movs	r1, #13
 8005d60:	4628      	mov	r0, r5
 8005d62:	f7ff ff0d 	bl	8005b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005d66:	0a21      	lsrs	r1, r4, #8
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f7ff ff09 	bl	8005b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005d6e:	b2e1      	uxtb	r1, r4
 8005d70:	4628      	mov	r0, r5
 8005d72:	f7ff ff05 	bl	8005b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005d76:	2400      	movs	r4, #0
 8005d78:	e005      	b.n	8005d86 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005d7a:	5d39      	ldrb	r1, [r7, r4]
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f7ff feff 	bl	8005b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005d82:	3401      	adds	r4, #1
 8005d84:	b2a4      	uxth	r4, r4
 8005d86:	42b4      	cmp	r4, r6
 8005d88:	d3f7      	bcc.n	8005d7a <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005d8a:	4a0d      	ldr	r2, [pc, #52]	; (8005dc0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005d8c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f7ff ff6d 	bl	8005c78 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d9e:	68ab      	ldr	r3, [r5, #8]
 8005da0:	b90b      	cbnz	r3, 8005da6 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8005da2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005da6:	2301      	movs	r3, #1
 8005da8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005daa:	2300      	movs	r3, #0
 8005dac:	716b      	strb	r3, [r5, #5]
}
 8005dae:	4640      	mov	r0, r8
 8005db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005db4:	f04f 0802 	mov.w	r8, #2
 8005db8:	e7f9      	b.n	8005dae <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005dba:	f04f 0802 	mov.w	r8, #2
 8005dbe:	e7f6      	b.n	8005dae <HAL_SUBGHZ_WriteRegisters+0x8a>
 8005dc0:	58000400 	.word	0x58000400

08005dc4 <HAL_SUBGHZ_ReadRegisters>:
{
 8005dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005dca:	7980      	ldrb	r0, [r0, #6]
 8005dcc:	fa5f f880 	uxtb.w	r8, r0
 8005dd0:	f1b8 0f01 	cmp.w	r8, #1
 8005dd4:	d141      	bne.n	8005e5a <HAL_SUBGHZ_ReadRegisters+0x96>
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	4615      	mov	r5, r2
 8005dda:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005ddc:	7973      	ldrb	r3, [r6, #5]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d03e      	beq.n	8005e60 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8005de2:	2301      	movs	r3, #1
 8005de4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005de6:	4630      	mov	r0, r6
 8005de8:	f7ff ff72 	bl	8005cd0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005dec:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005dee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005df2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005dfa:	211d      	movs	r1, #29
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	f7ff febf 	bl	8005b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005e02:	0a21      	lsrs	r1, r4, #8
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7ff febb 	bl	8005b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005e0a:	b2e1      	uxtb	r1, r4
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7ff feb7 	bl	8005b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005e12:	2100      	movs	r1, #0
 8005e14:	4630      	mov	r0, r6
 8005e16:	f7ff feb3 	bl	8005b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005e1a:	2400      	movs	r4, #0
 8005e1c:	e006      	b.n	8005e2c <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005e1e:	4629      	mov	r1, r5
 8005e20:	4630      	mov	r0, r6
 8005e22:	f7ff fee9 	bl	8005bf8 <SUBGHZSPI_Receive>
      pData++;
 8005e26:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005e28:	3401      	adds	r4, #1
 8005e2a:	b2a4      	uxth	r4, r4
 8005e2c:	42bc      	cmp	r4, r7
 8005e2e:	d3f6      	bcc.n	8005e1e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005e30:	4a0d      	ldr	r2, [pc, #52]	; (8005e68 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005e32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7ff ff1a 	bl	8005c78 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005e44:	68b3      	ldr	r3, [r6, #8]
 8005e46:	b90b      	cbnz	r3, 8005e4c <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005e48:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005e50:	2300      	movs	r3, #0
 8005e52:	7173      	strb	r3, [r6, #5]
}
 8005e54:	4640      	mov	r0, r8
 8005e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005e5a:	f04f 0802 	mov.w	r8, #2
 8005e5e:	e7f9      	b.n	8005e54 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8005e60:	f04f 0802 	mov.w	r8, #2
 8005e64:	e7f6      	b.n	8005e54 <HAL_SUBGHZ_ReadRegisters+0x90>
 8005e66:	bf00      	nop
 8005e68:	58000400 	.word	0x58000400

08005e6c <HAL_SUBGHZ_ExecSetCmd>:
{
 8005e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e70:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e72:	7980      	ldrb	r0, [r0, #6]
 8005e74:	fa5f f980 	uxtb.w	r9, r0
 8005e78:	f1b9 0f01 	cmp.w	r9, #1
 8005e7c:	d143      	bne.n	8005f06 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8005e7e:	4688      	mov	r8, r1
 8005e80:	4617      	mov	r7, r2
 8005e82:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005e84:	796b      	ldrb	r3, [r5, #5]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d040      	beq.n	8005f0c <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f7ff ff1e 	bl	8005cd0 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005e94:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005e98:	d005      	beq.n	8005ea6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005e9a:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8005e9e:	d002      	beq.n	8005ea6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	712b      	strb	r3, [r5, #4]
 8005ea4:	e001      	b.n	8005eaa <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005eac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005eb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005eb8:	4641      	mov	r1, r8
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f7ff fe60 	bl	8005b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005ec0:	2400      	movs	r4, #0
 8005ec2:	e005      	b.n	8005ed0 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005ec4:	5d39      	ldrb	r1, [r7, r4]
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f7ff fe5a 	bl	8005b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005ecc:	3401      	adds	r4, #1
 8005ece:	b2a4      	uxth	r4, r4
 8005ed0:	42b4      	cmp	r4, r6
 8005ed2:	d3f7      	bcc.n	8005ec4 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005ed4:	4a0f      	ldr	r2, [pc, #60]	; (8005f14 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005ed6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8005ee2:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005ee6:	d10a      	bne.n	8005efe <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005ee8:	68ab      	ldr	r3, [r5, #8]
 8005eea:	b90b      	cbnz	r3, 8005ef0 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8005eec:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	716b      	strb	r3, [r5, #5]
}
 8005ef8:	4648      	mov	r0, r9
 8005efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005efe:	4628      	mov	r0, r5
 8005f00:	f7ff feba 	bl	8005c78 <SUBGHZ_WaitOnBusy>
 8005f04:	e7f0      	b.n	8005ee8 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8005f06:	f04f 0902 	mov.w	r9, #2
 8005f0a:	e7f5      	b.n	8005ef8 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8005f0c:	f04f 0902 	mov.w	r9, #2
 8005f10:	e7f2      	b.n	8005ef8 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8005f12:	bf00      	nop
 8005f14:	58000400 	.word	0x58000400

08005f18 <HAL_SUBGHZ_ExecGetCmd>:
{
 8005f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005f1e:	7980      	ldrb	r0, [r0, #6]
 8005f20:	fa5f f880 	uxtb.w	r8, r0
 8005f24:	f1b8 0f01 	cmp.w	r8, #1
 8005f28:	d139      	bne.n	8005f9e <HAL_SUBGHZ_ExecGetCmd+0x86>
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	4615      	mov	r5, r2
 8005f2e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005f30:	7973      	ldrb	r3, [r6, #5]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d036      	beq.n	8005fa4 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8005f36:	2301      	movs	r3, #1
 8005f38:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f7ff fec8 	bl	8005cd0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f40:	4a1a      	ldr	r2, [pc, #104]	; (8005fac <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005f42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005f46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff fe15 	bl	8005b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005f56:	2100      	movs	r1, #0
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7ff fe11 	bl	8005b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005f5e:	2400      	movs	r4, #0
 8005f60:	e006      	b.n	8005f70 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005f62:	4629      	mov	r1, r5
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff fe47 	bl	8005bf8 <SUBGHZSPI_Receive>
      pData++;
 8005f6a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005f6c:	3401      	adds	r4, #1
 8005f6e:	b2a4      	uxth	r4, r4
 8005f70:	42bc      	cmp	r4, r7
 8005f72:	d3f6      	bcc.n	8005f62 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f74:	4a0d      	ldr	r2, [pc, #52]	; (8005fac <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005f76:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7ff fe78 	bl	8005c78 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005f88:	68b3      	ldr	r3, [r6, #8]
 8005f8a:	b90b      	cbnz	r3, 8005f90 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005f8c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005f90:	2301      	movs	r3, #1
 8005f92:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005f94:	2300      	movs	r3, #0
 8005f96:	7173      	strb	r3, [r6, #5]
}
 8005f98:	4640      	mov	r0, r8
 8005f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005f9e:	f04f 0802 	mov.w	r8, #2
 8005fa2:	e7f9      	b.n	8005f98 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005fa4:	f04f 0802 	mov.w	r8, #2
 8005fa8:	e7f6      	b.n	8005f98 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005faa:	bf00      	nop
 8005fac:	58000400 	.word	0x58000400

08005fb0 <HAL_SUBGHZ_IRQHandler>:
{
 8005fb0:	b530      	push	{r4, r5, lr}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	aa01      	add	r2, sp, #4
 8005fc0:	2112      	movs	r1, #18
 8005fc2:	f7ff ffa9 	bl	8005f18 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005fc6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005fca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005fce:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005fd2:	f013 0f01 	tst.w	r3, #1
 8005fd6:	d126      	bne.n	8006026 <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005fd8:	f014 0f02 	tst.w	r4, #2
 8005fdc:	d127      	bne.n	800602e <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005fde:	f014 0f04 	tst.w	r4, #4
 8005fe2:	d128      	bne.n	8006036 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005fe4:	f014 0f08 	tst.w	r4, #8
 8005fe8:	d129      	bne.n	800603e <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005fea:	f014 0f10 	tst.w	r4, #16
 8005fee:	d12a      	bne.n	8006046 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005ff0:	f014 0f20 	tst.w	r4, #32
 8005ff4:	d12b      	bne.n	800604e <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005ff6:	f014 0f40 	tst.w	r4, #64	; 0x40
 8005ffa:	d12c      	bne.n	8006056 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005ffc:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006000:	d006      	beq.n	8006010 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006002:	f414 7f80 	tst.w	r4, #256	; 0x100
 8006006:	d02a      	beq.n	800605e <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006008:	2101      	movs	r1, #1
 800600a:	4628      	mov	r0, r5
 800600c:	f00e f804 	bl	8014018 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006010:	f414 7f00 	tst.w	r4, #512	; 0x200
 8006014:	d128      	bne.n	8006068 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8006016:	2302      	movs	r3, #2
 8006018:	aa01      	add	r2, sp, #4
 800601a:	4619      	mov	r1, r3
 800601c:	4628      	mov	r0, r5
 800601e:	f7ff ff25 	bl	8005e6c <HAL_SUBGHZ_ExecSetCmd>
}
 8006022:	b003      	add	sp, #12
 8006024:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006026:	4628      	mov	r0, r5
 8006028:	f00d ffde 	bl	8013fe8 <HAL_SUBGHZ_TxCpltCallback>
 800602c:	e7d4      	b.n	8005fd8 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800602e:	4628      	mov	r0, r5
 8006030:	f00d ffe2 	bl	8013ff8 <HAL_SUBGHZ_RxCpltCallback>
 8006034:	e7d3      	b.n	8005fde <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006036:	4628      	mov	r0, r5
 8006038:	f00e f812 	bl	8014060 <HAL_SUBGHZ_PreambleDetectedCallback>
 800603c:	e7d2      	b.n	8005fe4 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800603e:	4628      	mov	r0, r5
 8006040:	f00e f816 	bl	8014070 <HAL_SUBGHZ_SyncWordValidCallback>
 8006044:	e7d1      	b.n	8005fea <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006046:	4628      	mov	r0, r5
 8006048:	f00e f81a 	bl	8014080 <HAL_SUBGHZ_HeaderValidCallback>
 800604c:	e7d0      	b.n	8005ff0 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800604e:	4628      	mov	r0, r5
 8006050:	f00d fffe 	bl	8014050 <HAL_SUBGHZ_HeaderErrorCallback>
 8006054:	e7cf      	b.n	8005ff6 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006056:	4628      	mov	r0, r5
 8006058:	f00d ffd6 	bl	8014008 <HAL_SUBGHZ_CRCErrorCallback>
 800605c:	e7ce      	b.n	8005ffc <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800605e:	2100      	movs	r1, #0
 8006060:	4628      	mov	r0, r5
 8006062:	f00d ffd9 	bl	8014018 <HAL_SUBGHZ_CADStatusCallback>
 8006066:	e7d3      	b.n	8006010 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006068:	4628      	mov	r0, r5
 800606a:	f00d ffe7 	bl	801403c <HAL_SUBGHZ_RxTxTimeoutCallback>
 800606e:	e7d2      	b.n	8006016 <HAL_SUBGHZ_IRQHandler+0x66>

08006070 <HAL_SUBGHZ_WriteBuffer>:
{
 8006070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006074:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006076:	7980      	ldrb	r0, [r0, #6]
 8006078:	fa5f f880 	uxtb.w	r8, r0
 800607c:	f1b8 0f01 	cmp.w	r8, #1
 8006080:	d138      	bne.n	80060f4 <HAL_SUBGHZ_WriteBuffer+0x84>
 8006082:	460c      	mov	r4, r1
 8006084:	4617      	mov	r7, r2
 8006086:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006088:	796b      	ldrb	r3, [r5, #5]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d035      	beq.n	80060fa <HAL_SUBGHZ_WriteBuffer+0x8a>
 800608e:	2301      	movs	r3, #1
 8006090:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006092:	4628      	mov	r0, r5
 8006094:	f7ff fe1c 	bl	8005cd0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006098:	4a19      	ldr	r2, [pc, #100]	; (8006100 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800609a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800609e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80060a6:	210e      	movs	r1, #14
 80060a8:	4628      	mov	r0, r5
 80060aa:	f7ff fd69 	bl	8005b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80060ae:	4621      	mov	r1, r4
 80060b0:	4628      	mov	r0, r5
 80060b2:	f7ff fd65 	bl	8005b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80060b6:	2400      	movs	r4, #0
 80060b8:	e005      	b.n	80060c6 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80060ba:	5d39      	ldrb	r1, [r7, r4]
 80060bc:	4628      	mov	r0, r5
 80060be:	f7ff fd5f 	bl	8005b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80060c2:	3401      	adds	r4, #1
 80060c4:	b2a4      	uxth	r4, r4
 80060c6:	42b4      	cmp	r4, r6
 80060c8:	d3f7      	bcc.n	80060ba <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80060ca:	4a0d      	ldr	r2, [pc, #52]	; (8006100 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80060cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80060d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80060d8:	4628      	mov	r0, r5
 80060da:	f7ff fdcd 	bl	8005c78 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80060de:	68ab      	ldr	r3, [r5, #8]
 80060e0:	b90b      	cbnz	r3, 80060e6 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80060e2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80060e6:	2301      	movs	r3, #1
 80060e8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80060ea:	2300      	movs	r3, #0
 80060ec:	716b      	strb	r3, [r5, #5]
}
 80060ee:	4640      	mov	r0, r8
 80060f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80060f4:	f04f 0802 	mov.w	r8, #2
 80060f8:	e7f9      	b.n	80060ee <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80060fa:	f04f 0802 	mov.w	r8, #2
 80060fe:	e7f6      	b.n	80060ee <HAL_SUBGHZ_WriteBuffer+0x7e>
 8006100:	58000400 	.word	0x58000400

08006104 <HAL_SUBGHZ_ReadBuffer>:
{
 8006104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006108:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800610a:	7980      	ldrb	r0, [r0, #6]
 800610c:	fa5f f880 	uxtb.w	r8, r0
 8006110:	f1b8 0f01 	cmp.w	r8, #1
 8006114:	d13d      	bne.n	8006192 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8006116:	460c      	mov	r4, r1
 8006118:	4615      	mov	r5, r2
 800611a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800611c:	7973      	ldrb	r3, [r6, #5]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d03a      	beq.n	8006198 <HAL_SUBGHZ_ReadBuffer+0x94>
 8006122:	2301      	movs	r3, #1
 8006124:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006126:	4630      	mov	r0, r6
 8006128:	f7ff fdd2 	bl	8005cd0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800612c:	4a1c      	ldr	r2, [pc, #112]	; (80061a0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800612e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800613a:	211e      	movs	r1, #30
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff fd1f 	bl	8005b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006142:	4621      	mov	r1, r4
 8006144:	4630      	mov	r0, r6
 8006146:	f7ff fd1b 	bl	8005b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800614a:	2100      	movs	r1, #0
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff fd17 	bl	8005b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006152:	2400      	movs	r4, #0
 8006154:	e006      	b.n	8006164 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006156:	4629      	mov	r1, r5
 8006158:	4630      	mov	r0, r6
 800615a:	f7ff fd4d 	bl	8005bf8 <SUBGHZSPI_Receive>
      pData++;
 800615e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006160:	3401      	adds	r4, #1
 8006162:	b2a4      	uxth	r4, r4
 8006164:	42bc      	cmp	r4, r7
 8006166:	d3f6      	bcc.n	8006156 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006168:	4a0d      	ldr	r2, [pc, #52]	; (80061a0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800616a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800616e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006176:	4630      	mov	r0, r6
 8006178:	f7ff fd7e 	bl	8005c78 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800617c:	68b3      	ldr	r3, [r6, #8]
 800617e:	b90b      	cbnz	r3, 8006184 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8006180:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006184:	2301      	movs	r3, #1
 8006186:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006188:	2300      	movs	r3, #0
 800618a:	7173      	strb	r3, [r6, #5]
}
 800618c:	4640      	mov	r0, r8
 800618e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006192:	f04f 0802 	mov.w	r8, #2
 8006196:	e7f9      	b.n	800618c <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8006198:	f04f 0802 	mov.w	r8, #2
 800619c:	e7f6      	b.n	800618c <HAL_SUBGHZ_ReadBuffer+0x88>
 800619e:	bf00      	nop
 80061a0:	58000400 	.word	0x58000400

080061a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a6:	6a03      	ldr	r3, [r0, #32]
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061b2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061b8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061bc:	680c      	ldr	r4, [r1, #0]
 80061be:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061c0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061c4:	688c      	ldr	r4, [r1, #8]
 80061c6:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061c8:	4c15      	ldr	r4, [pc, #84]	; (8006220 <TIM_OC1_SetConfig+0x7c>)
 80061ca:	42a0      	cmp	r0, r4
 80061cc:	d007      	beq.n	80061de <TIM_OC1_SetConfig+0x3a>
 80061ce:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80061d2:	42a0      	cmp	r0, r4
 80061d4:	d003      	beq.n	80061de <TIM_OC1_SetConfig+0x3a>
 80061d6:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
 80061da:	42a0      	cmp	r0, r4
 80061dc:	d105      	bne.n	80061ea <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061de:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061e2:	68cc      	ldr	r4, [r1, #12]
 80061e4:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061e6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ea:	4c0d      	ldr	r4, [pc, #52]	; (8006220 <TIM_OC1_SetConfig+0x7c>)
 80061ec:	42a0      	cmp	r0, r4
 80061ee:	d007      	beq.n	8006200 <TIM_OC1_SetConfig+0x5c>
 80061f0:	f504 54c0 	add.w	r4, r4, #6144	; 0x1800
 80061f4:	42a0      	cmp	r0, r4
 80061f6:	d003      	beq.n	8006200 <TIM_OC1_SetConfig+0x5c>
 80061f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d107      	bne.n	8006210 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006200:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006204:	694c      	ldr	r4, [r1, #20]
 8006206:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800620a:	698d      	ldr	r5, [r1, #24]
 800620c:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006210:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006212:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006214:	684a      	ldr	r2, [r1, #4]
 8006216:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006218:	6203      	str	r3, [r0, #32]
}
 800621a:	bc30      	pop	{r4, r5}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40012c00 	.word	0x40012c00

08006224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006224:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006226:	6a03      	ldr	r3, [r0, #32]
 8006228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800622c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006232:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006234:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006238:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800623c:	680d      	ldr	r5, [r1, #0]
 800623e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006244:	688d      	ldr	r5, [r1, #8]
 8006246:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800624a:	4d12      	ldr	r5, [pc, #72]	; (8006294 <TIM_OC3_SetConfig+0x70>)
 800624c:	42a8      	cmp	r0, r5
 800624e:	d019      	beq.n	8006284 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006250:	4d10      	ldr	r5, [pc, #64]	; (8006294 <TIM_OC3_SetConfig+0x70>)
 8006252:	42a8      	cmp	r0, r5
 8006254:	d007      	beq.n	8006266 <TIM_OC3_SetConfig+0x42>
 8006256:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 800625a:	42a8      	cmp	r0, r5
 800625c:	d003      	beq.n	8006266 <TIM_OC3_SetConfig+0x42>
 800625e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006262:	42a8      	cmp	r0, r5
 8006264:	d107      	bne.n	8006276 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006266:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800626a:	694d      	ldr	r5, [r1, #20]
 800626c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006270:	698d      	ldr	r5, [r1, #24]
 8006272:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006276:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006278:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800627a:	684a      	ldr	r2, [r1, #4]
 800627c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627e:	6203      	str	r3, [r0, #32]
}
 8006280:	bc30      	pop	{r4, r5}
 8006282:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006288:	68cd      	ldr	r5, [r1, #12]
 800628a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800628e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006292:	e7dd      	b.n	8006250 <TIM_OC3_SetConfig+0x2c>
 8006294:	40012c00 	.word	0x40012c00

08006298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800629a:	6a03      	ldr	r3, [r0, #32]
 800629c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a6:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ac:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b0:	680d      	ldr	r5, [r1, #0]
 80062b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062ba:	688d      	ldr	r5, [r1, #8]
 80062bc:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c0:	4d0b      	ldr	r5, [pc, #44]	; (80062f0 <TIM_OC4_SetConfig+0x58>)
 80062c2:	42a8      	cmp	r0, r5
 80062c4:	d007      	beq.n	80062d6 <TIM_OC4_SetConfig+0x3e>
 80062c6:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80062ca:	42a8      	cmp	r0, r5
 80062cc:	d003      	beq.n	80062d6 <TIM_OC4_SetConfig+0x3e>
 80062ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80062d2:	42a8      	cmp	r0, r5
 80062d4:	d104      	bne.n	80062e0 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062d6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062da:	694d      	ldr	r5, [r1, #20]
 80062dc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062e2:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062e4:	684b      	ldr	r3, [r1, #4]
 80062e6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e8:	6202      	str	r2, [r0, #32]
}
 80062ea:	bc30      	pop	{r4, r5}
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40012c00 	.word	0x40012c00

080062f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062f4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062f6:	6a03      	ldr	r3, [r0, #32]
 80062f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006302:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006304:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006308:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	680d      	ldr	r5, [r1, #0]
 800630e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006310:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006314:	688d      	ldr	r5, [r1, #8]
 8006316:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631a:	4d0b      	ldr	r5, [pc, #44]	; (8006348 <TIM_OC5_SetConfig+0x54>)
 800631c:	42a8      	cmp	r0, r5
 800631e:	d007      	beq.n	8006330 <TIM_OC5_SetConfig+0x3c>
 8006320:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8006324:	42a8      	cmp	r0, r5
 8006326:	d003      	beq.n	8006330 <TIM_OC5_SetConfig+0x3c>
 8006328:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800632c:	42a8      	cmp	r0, r5
 800632e:	d104      	bne.n	800633a <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006330:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006334:	694d      	ldr	r5, [r1, #20]
 8006336:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800633c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800633e:	684a      	ldr	r2, [r1, #4]
 8006340:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006342:	6203      	str	r3, [r0, #32]
}
 8006344:	bc30      	pop	{r4, r5}
 8006346:	4770      	bx	lr
 8006348:	40012c00 	.word	0x40012c00

0800634c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800634e:	6a03      	ldr	r3, [r0, #32]
 8006350:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006354:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006358:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800635a:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800635c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006364:	680d      	ldr	r5, [r1, #0]
 8006366:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800636a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800636e:	688d      	ldr	r5, [r1, #8]
 8006370:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	4d0b      	ldr	r5, [pc, #44]	; (80063a4 <TIM_OC6_SetConfig+0x58>)
 8006376:	42a8      	cmp	r0, r5
 8006378:	d007      	beq.n	800638a <TIM_OC6_SetConfig+0x3e>
 800637a:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 800637e:	42a8      	cmp	r0, r5
 8006380:	d003      	beq.n	800638a <TIM_OC6_SetConfig+0x3e>
 8006382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006386:	42a8      	cmp	r0, r5
 8006388:	d104      	bne.n	8006394 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800638a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800638e:	694d      	ldr	r5, [r1, #20]
 8006390:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006394:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006396:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006398:	684b      	ldr	r3, [r1, #4]
 800639a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639c:	6202      	str	r2, [r0, #32]
}
 800639e:	bc30      	pop	{r4, r5}
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40012c00 	.word	0x40012c00

080063a8 <HAL_TIM_Base_MspInit>:
}
 80063a8:	4770      	bx	lr
	...

080063ac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80063ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d122      	bne.n	80063fc <HAL_TIM_Base_Start_IT+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80063b6:	2302      	movs	r3, #2
 80063b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063bc:	6802      	ldr	r2, [r0, #0]
 80063be:	68d3      	ldr	r3, [r2, #12]
 80063c0:	f043 0301 	orr.w	r3, r3, #1
 80063c4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c6:	6803      	ldr	r3, [r0, #0]
 80063c8:	4a0f      	ldr	r2, [pc, #60]	; (8006408 <HAL_TIM_Base_Start_IT+0x5c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d008      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x34>
 80063ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d2:	d005      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80063dc:	2000      	movs	r0, #0
 80063de:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e0:	6899      	ldr	r1, [r3, #8]
 80063e2:	4a0a      	ldr	r2, [pc, #40]	; (800640c <HAL_TIM_Base_Start_IT+0x60>)
 80063e4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e6:	2a06      	cmp	r2, #6
 80063e8:	d00a      	beq.n	8006400 <HAL_TIM_Base_Start_IT+0x54>
 80063ea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80063ee:	d009      	beq.n	8006404 <HAL_TIM_Base_Start_IT+0x58>
      __HAL_TIM_ENABLE(htim);
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80063f8:	2000      	movs	r0, #0
 80063fa:	4770      	bx	lr
    return HAL_ERROR;
 80063fc:	2001      	movs	r0, #1
 80063fe:	4770      	bx	lr
  return HAL_OK;
 8006400:	2000      	movs	r0, #0
 8006402:	4770      	bx	lr
 8006404:	2000      	movs	r0, #0
}
 8006406:	4770      	bx	lr
 8006408:	40012c00 	.word	0x40012c00
 800640c:	00010007 	.word	0x00010007

08006410 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_IC_CaptureCallback>:
}
 8006412:	4770      	bx	lr

08006414 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006414:	4770      	bx	lr

08006416 <HAL_TIM_TriggerCallback>:
}
 8006416:	4770      	bx	lr

08006418 <HAL_TIM_IRQHandler>:
{
 8006418:	b510      	push	{r4, lr}
 800641a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800641c:	6803      	ldr	r3, [r0, #0]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	f012 0f02 	tst.w	r2, #2
 8006424:	d011      	beq.n	800644a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	f012 0f02 	tst.w	r2, #2
 800642c:	d00d      	beq.n	800644a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800642e:	f06f 0202 	mvn.w	r2, #2
 8006432:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006434:	2301      	movs	r3, #1
 8006436:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006438:	6803      	ldr	r3, [r0, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f013 0f03 	tst.w	r3, #3
 8006440:	d079      	beq.n	8006536 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006442:	f7ff ffe6 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006446:	2300      	movs	r3, #0
 8006448:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	f012 0f04 	tst.w	r2, #4
 8006452:	d012      	beq.n	800647a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	f012 0f04 	tst.w	r2, #4
 800645a:	d00e      	beq.n	800647a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800645c:	f06f 0204 	mvn.w	r2, #4
 8006460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006462:	2302      	movs	r3, #2
 8006464:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800646e:	d068      	beq.n	8006542 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff ffce 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006476:	2300      	movs	r3, #0
 8006478:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	f012 0f08 	tst.w	r2, #8
 8006482:	d012      	beq.n	80064aa <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	f012 0f08 	tst.w	r2, #8
 800648a:	d00e      	beq.n	80064aa <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800648c:	f06f 0208 	mvn.w	r2, #8
 8006490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006492:	2304      	movs	r3, #4
 8006494:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f013 0f03 	tst.w	r3, #3
 800649e:	d057      	beq.n	8006550 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7ff ffb6 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	2300      	movs	r3, #0
 80064a8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	f012 0f10 	tst.w	r2, #16
 80064b2:	d012      	beq.n	80064da <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	f012 0f10 	tst.w	r2, #16
 80064ba:	d00e      	beq.n	80064da <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064bc:	f06f 0210 	mvn.w	r2, #16
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c2:	2308      	movs	r3, #8
 80064c4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f413 7f40 	tst.w	r3, #768	; 0x300
 80064ce:	d046      	beq.n	800655e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80064d0:	4620      	mov	r0, r4
 80064d2:	f7ff ff9e 	bl	8006412 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d6:	2300      	movs	r3, #0
 80064d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	f012 0f01 	tst.w	r2, #1
 80064e2:	d003      	beq.n	80064ec <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	f012 0f01 	tst.w	r2, #1
 80064ea:	d13f      	bne.n	800656c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80064f4:	d003      	beq.n	80064fe <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80064fc:	d13d      	bne.n	800657a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006506:	d003      	beq.n	8006510 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800650e:	d13b      	bne.n	8006588 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006520:	d139      	bne.n	8006596 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	f012 0f20 	tst.w	r2, #32
 800652a:	d003      	beq.n	8006534 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	f012 0f20 	tst.w	r2, #32
 8006532:	d137      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x18c>
}
 8006534:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006536:	f7ff ff6b 	bl	8006410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800653a:	4620      	mov	r0, r4
 800653c:	f7ff ff6a 	bl	8006414 <HAL_TIM_PWM_PulseFinishedCallback>
 8006540:	e781      	b.n	8006446 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006542:	4620      	mov	r0, r4
 8006544:	f7ff ff64 	bl	8006410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006548:	4620      	mov	r0, r4
 800654a:	f7ff ff63 	bl	8006414 <HAL_TIM_PWM_PulseFinishedCallback>
 800654e:	e792      	b.n	8006476 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006550:	4620      	mov	r0, r4
 8006552:	f7ff ff5d 	bl	8006410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006556:	4620      	mov	r0, r4
 8006558:	f7ff ff5c 	bl	8006414 <HAL_TIM_PWM_PulseFinishedCallback>
 800655c:	e7a3      	b.n	80064a6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655e:	4620      	mov	r0, r4
 8006560:	f7ff ff56 	bl	8006410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006564:	4620      	mov	r0, r4
 8006566:	f7ff ff55 	bl	8006414 <HAL_TIM_PWM_PulseFinishedCallback>
 800656a:	e7b4      	b.n	80064d6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800656c:	f06f 0201 	mvn.w	r2, #1
 8006570:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006572:	4620      	mov	r0, r4
 8006574:	f7fb f8a4 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
 8006578:	e7b8      	b.n	80064ec <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800657a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800657e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006580:	4620      	mov	r0, r4
 8006582:	f000 faae 	bl	8006ae2 <HAL_TIMEx_BreakCallback>
 8006586:	e7ba      	b.n	80064fe <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006588:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800658c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800658e:	4620      	mov	r0, r4
 8006590:	f000 faa8 	bl	8006ae4 <HAL_TIMEx_Break2Callback>
 8006594:	e7bc      	b.n	8006510 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800659a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800659c:	4620      	mov	r0, r4
 800659e:	f7ff ff3a 	bl	8006416 <HAL_TIM_TriggerCallback>
 80065a2:	e7be      	b.n	8006522 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065a4:	f06f 0220 	mvn.w	r2, #32
 80065a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 fa98 	bl	8006ae0 <HAL_TIMEx_CommutCallback>
}
 80065b0:	e7c0      	b.n	8006534 <HAL_TIM_IRQHandler+0x11c>
	...

080065b4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80065b4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b6:	4a1a      	ldr	r2, [pc, #104]	; (8006620 <TIM_Base_SetConfig+0x6c>)
 80065b8:	4290      	cmp	r0, r2
 80065ba:	d002      	beq.n	80065c2 <TIM_Base_SetConfig+0xe>
 80065bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80065c0:	d103      	bne.n	80065ca <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80065c6:	684a      	ldr	r2, [r1, #4]
 80065c8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ca:	4a15      	ldr	r2, [pc, #84]	; (8006620 <TIM_Base_SetConfig+0x6c>)
 80065cc:	4290      	cmp	r0, r2
 80065ce:	d00a      	beq.n	80065e6 <TIM_Base_SetConfig+0x32>
 80065d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80065d4:	d007      	beq.n	80065e6 <TIM_Base_SetConfig+0x32>
 80065d6:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80065da:	4290      	cmp	r0, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_Base_SetConfig+0x32>
 80065de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065e2:	4290      	cmp	r0, r2
 80065e4:	d103      	bne.n	80065ee <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80065e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ea:	68ca      	ldr	r2, [r1, #12]
 80065ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f2:	694a      	ldr	r2, [r1, #20]
 80065f4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80065f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f8:	688b      	ldr	r3, [r1, #8]
 80065fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065fc:	680b      	ldr	r3, [r1, #0]
 80065fe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <TIM_Base_SetConfig+0x6c>)
 8006602:	4298      	cmp	r0, r3
 8006604:	d007      	beq.n	8006616 <TIM_Base_SetConfig+0x62>
 8006606:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800660a:	4298      	cmp	r0, r3
 800660c:	d003      	beq.n	8006616 <TIM_Base_SetConfig+0x62>
 800660e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006612:	4298      	cmp	r0, r3
 8006614:	d101      	bne.n	800661a <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8006616:	690b      	ldr	r3, [r1, #16]
 8006618:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800661a:	2301      	movs	r3, #1
 800661c:	6143      	str	r3, [r0, #20]
}
 800661e:	4770      	bx	lr
 8006620:	40012c00 	.word	0x40012c00

08006624 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006624:	b360      	cbz	r0, 8006680 <HAL_TIM_Base_Init+0x5c>
{
 8006626:	b510      	push	{r4, lr}
 8006628:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800662e:	b313      	cbz	r3, 8006676 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006630:	2302      	movs	r3, #2
 8006632:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006636:	4621      	mov	r1, r4
 8006638:	f851 0b04 	ldr.w	r0, [r1], #4
 800663c:	f7ff ffba 	bl	80065b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006640:	2301      	movs	r3, #1
 8006642:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006646:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800664a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800664e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006652:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800665a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800665e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006666:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800666a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800666e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006672:	2000      	movs	r0, #0
}
 8006674:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006676:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800667a:	f7ff fe95 	bl	80063a8 <HAL_TIM_Base_MspInit>
 800667e:	e7d7      	b.n	8006630 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006680:	2001      	movs	r0, #1
}
 8006682:	4770      	bx	lr

08006684 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006684:	b360      	cbz	r0, 80066e0 <HAL_TIM_PWM_Init+0x5c>
{
 8006686:	b510      	push	{r4, lr}
 8006688:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800668a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800668e:	b313      	cbz	r3, 80066d6 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	2302      	movs	r3, #2
 8006692:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006696:	4621      	mov	r1, r4
 8006698:	f851 0b04 	ldr.w	r0, [r1], #4
 800669c:	f7ff ff8a 	bl	80065b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80066aa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80066ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80066b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80066b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80066c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80066ca:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80066ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80066d2:	2000      	movs	r0, #0
}
 80066d4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80066d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80066da:	f7fb fb25 	bl	8001d28 <HAL_TIM_PWM_MspInit>
 80066de:	e7d7      	b.n	8006690 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80066e0:	2001      	movs	r0, #1
}
 80066e2:	4770      	bx	lr

080066e4 <TIM_OC2_SetConfig>:
{
 80066e4:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e6:	6a03      	ldr	r3, [r0, #32]
 80066e8:	f023 0310 	bic.w	r3, r3, #16
 80066ec:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80066ee:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80066f0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80066f2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80066f8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066fc:	680d      	ldr	r5, [r1, #0]
 80066fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006702:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006706:	688d      	ldr	r5, [r1, #8]
 8006708:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800670c:	4d12      	ldr	r5, [pc, #72]	; (8006758 <TIM_OC2_SetConfig+0x74>)
 800670e:	42a8      	cmp	r0, r5
 8006710:	d019      	beq.n	8006746 <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006712:	4d11      	ldr	r5, [pc, #68]	; (8006758 <TIM_OC2_SetConfig+0x74>)
 8006714:	42a8      	cmp	r0, r5
 8006716:	d007      	beq.n	8006728 <TIM_OC2_SetConfig+0x44>
 8006718:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 800671c:	42a8      	cmp	r0, r5
 800671e:	d003      	beq.n	8006728 <TIM_OC2_SetConfig+0x44>
 8006720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006724:	42a8      	cmp	r0, r5
 8006726:	d107      	bne.n	8006738 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006728:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800672c:	694d      	ldr	r5, [r1, #20]
 800672e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006732:	698d      	ldr	r5, [r1, #24]
 8006734:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006738:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800673a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800673c:	684a      	ldr	r2, [r1, #4]
 800673e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006740:	6203      	str	r3, [r0, #32]
}
 8006742:	bc30      	pop	{r4, r5}
 8006744:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800674a:	68cd      	ldr	r5, [r1, #12]
 800674c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006754:	e7dd      	b.n	8006712 <TIM_OC2_SetConfig+0x2e>
 8006756:	bf00      	nop
 8006758:	40012c00 	.word	0x40012c00

0800675c <HAL_TIM_PWM_ConfigChannel>:
{
 800675c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800675e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006762:	2b01      	cmp	r3, #1
 8006764:	f000 8095 	beq.w	8006892 <HAL_TIM_PWM_ConfigChannel+0x136>
 8006768:	4604      	mov	r4, r0
 800676a:	460d      	mov	r5, r1
 800676c:	2301      	movs	r3, #1
 800676e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006772:	2a14      	cmp	r2, #20
 8006774:	f200 8088 	bhi.w	8006888 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006778:	e8df f002 	tbb	[pc, r2]
 800677c:	8686860b 	.word	0x8686860b
 8006780:	8686861f 	.word	0x8686861f
 8006784:	86868634 	.word	0x86868634
 8006788:	86868648 	.word	0x86868648
 800678c:	8686865d 	.word	0x8686865d
 8006790:	71          	.byte	0x71
 8006791:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006792:	6800      	ldr	r0, [r0, #0]
 8006794:	f7ff fd06 	bl	80061a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006798:	6822      	ldr	r2, [r4, #0]
 800679a:	6993      	ldr	r3, [r2, #24]
 800679c:	f043 0308 	orr.w	r3, r3, #8
 80067a0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	6993      	ldr	r3, [r2, #24]
 80067a6:	f023 0304 	bic.w	r3, r3, #4
 80067aa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	6993      	ldr	r3, [r2, #24]
 80067b0:	6929      	ldr	r1, [r5, #16]
 80067b2:	430b      	orrs	r3, r1
 80067b4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80067b6:	2000      	movs	r0, #0
      break;
 80067b8:	e067      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	f7ff ff92 	bl	80066e4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	6993      	ldr	r3, [r2, #24]
 80067c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067c8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067ca:	6822      	ldr	r2, [r4, #0]
 80067cc:	6993      	ldr	r3, [r2, #24]
 80067ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	6993      	ldr	r3, [r2, #24]
 80067d8:	6929      	ldr	r1, [r5, #16]
 80067da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80067de:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80067e0:	2000      	movs	r0, #0
      break;
 80067e2:	e052      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067e4:	6800      	ldr	r0, [r0, #0]
 80067e6:	f7ff fd1d 	bl	8006224 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	69d3      	ldr	r3, [r2, #28]
 80067ee:	f043 0308 	orr.w	r3, r3, #8
 80067f2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	69d3      	ldr	r3, [r2, #28]
 80067f8:	f023 0304 	bic.w	r3, r3, #4
 80067fc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067fe:	6822      	ldr	r2, [r4, #0]
 8006800:	69d3      	ldr	r3, [r2, #28]
 8006802:	6929      	ldr	r1, [r5, #16]
 8006804:	430b      	orrs	r3, r1
 8006806:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006808:	2000      	movs	r0, #0
      break;
 800680a:	e03e      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800680c:	6800      	ldr	r0, [r0, #0]
 800680e:	f7ff fd43 	bl	8006298 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	69d3      	ldr	r3, [r2, #28]
 8006816:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800681a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	69d3      	ldr	r3, [r2, #28]
 8006820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006824:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	69d3      	ldr	r3, [r2, #28]
 800682a:	6929      	ldr	r1, [r5, #16]
 800682c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006830:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006832:	2000      	movs	r0, #0
      break;
 8006834:	e029      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006836:	6800      	ldr	r0, [r0, #0]
 8006838:	f7ff fd5c 	bl	80062f4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800683c:	6822      	ldr	r2, [r4, #0]
 800683e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006840:	f043 0308 	orr.w	r3, r3, #8
 8006844:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800684a:	f023 0304 	bic.w	r3, r3, #4
 800684e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006854:	6929      	ldr	r1, [r5, #16]
 8006856:	430b      	orrs	r3, r1
 8006858:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800685a:	2000      	movs	r0, #0
      break;
 800685c:	e015      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800685e:	6800      	ldr	r0, [r0, #0]
 8006860:	f7ff fd74 	bl	800634c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006864:	6822      	ldr	r2, [r4, #0]
 8006866:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800686c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006876:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006878:	6822      	ldr	r2, [r4, #0]
 800687a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800687c:	6929      	ldr	r1, [r5, #16]
 800687e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006882:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8006884:	2000      	movs	r0, #0
      break;
 8006886:	e000      	b.n	800688a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8006888:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800688a:	2300      	movs	r3, #0
 800688c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006890:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8006892:	2002      	movs	r0, #2
 8006894:	e7fc      	b.n	8006890 <HAL_TIM_PWM_ConfigChannel+0x134>

08006896 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006896:	f001 011f 	and.w	r1, r1, #31
 800689a:	2301      	movs	r3, #1
 800689c:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068a0:	6a03      	ldr	r3, [r0, #32]
 80068a2:	ea23 030c 	bic.w	r3, r3, ip
 80068a6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068a8:	6a03      	ldr	r3, [r0, #32]
 80068aa:	fa02 f101 	lsl.w	r1, r2, r1
 80068ae:	430b      	orrs	r3, r1
 80068b0:	6203      	str	r3, [r0, #32]
}
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIM_PWM_Start>:
{
 80068b4:	b510      	push	{r4, lr}
 80068b6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068b8:	4608      	mov	r0, r1
 80068ba:	bb71      	cbnz	r1, 800691a <HAL_TIM_PWM_Start+0x66>
 80068bc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	bf18      	it	ne
 80068c6:	2301      	movne	r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d17b      	bne.n	80069c4 <HAL_TIM_PWM_Start+0x110>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d14f      	bne.n	8006970 <HAL_TIM_PWM_Start+0xbc>
 80068d0:	2302      	movs	r3, #2
 80068d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068d6:	2201      	movs	r2, #1
 80068d8:	4601      	mov	r1, r0
 80068da:	6820      	ldr	r0, [r4, #0]
 80068dc:	f7ff ffdb 	bl	8006896 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	4a3b      	ldr	r2, [pc, #236]	; (80069d0 <HAL_TIM_PWM_Start+0x11c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d007      	beq.n	80068f8 <HAL_TIM_PWM_Start+0x44>
 80068e8:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <HAL_TIM_PWM_Start+0x44>
 80068f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d103      	bne.n	8006900 <HAL_TIM_PWM_Start+0x4c>
    __HAL_TIM_MOE_ENABLE(htim);
 80068f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068fe:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	4a33      	ldr	r2, [pc, #204]	; (80069d0 <HAL_TIM_PWM_Start+0x11c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d04f      	beq.n	80069a8 <HAL_TIM_PWM_Start+0xf4>
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690c:	d04c      	beq.n	80069a8 <HAL_TIM_PWM_Start+0xf4>
    __HAL_TIM_ENABLE(htim);
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	f042 0201 	orr.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006916:	2000      	movs	r0, #0
 8006918:	e055      	b.n	80069c6 <HAL_TIM_PWM_Start+0x112>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800691a:	2904      	cmp	r1, #4
 800691c:	d00c      	beq.n	8006938 <HAL_TIM_PWM_Start+0x84>
 800691e:	2908      	cmp	r1, #8
 8006920:	d011      	beq.n	8006946 <HAL_TIM_PWM_Start+0x92>
 8006922:	290c      	cmp	r1, #12
 8006924:	d016      	beq.n	8006954 <HAL_TIM_PWM_Start+0xa0>
 8006926:	2910      	cmp	r1, #16
 8006928:	d01b      	beq.n	8006962 <HAL_TIM_PWM_Start+0xae>
 800692a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800692e:	b2db      	uxtb	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	bf18      	it	ne
 8006934:	2301      	movne	r3, #1
 8006936:	e7c7      	b.n	80068c8 <HAL_TIM_PWM_Start+0x14>
 8006938:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800693c:	b2db      	uxtb	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	bf18      	it	ne
 8006942:	2301      	movne	r3, #1
 8006944:	e7c0      	b.n	80068c8 <HAL_TIM_PWM_Start+0x14>
 8006946:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800694a:	b2db      	uxtb	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	bf18      	it	ne
 8006950:	2301      	movne	r3, #1
 8006952:	e7b9      	b.n	80068c8 <HAL_TIM_PWM_Start+0x14>
 8006954:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006958:	b2db      	uxtb	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	bf18      	it	ne
 800695e:	2301      	movne	r3, #1
 8006960:	e7b2      	b.n	80068c8 <HAL_TIM_PWM_Start+0x14>
 8006962:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006966:	b2db      	uxtb	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	bf18      	it	ne
 800696c:	2301      	movne	r3, #1
 800696e:	e7ab      	b.n	80068c8 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006970:	2804      	cmp	r0, #4
 8006972:	d009      	beq.n	8006988 <HAL_TIM_PWM_Start+0xd4>
 8006974:	2808      	cmp	r0, #8
 8006976:	d00b      	beq.n	8006990 <HAL_TIM_PWM_Start+0xdc>
 8006978:	280c      	cmp	r0, #12
 800697a:	d00d      	beq.n	8006998 <HAL_TIM_PWM_Start+0xe4>
 800697c:	2810      	cmp	r0, #16
 800697e:	d00f      	beq.n	80069a0 <HAL_TIM_PWM_Start+0xec>
 8006980:	2302      	movs	r3, #2
 8006982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006986:	e7a6      	b.n	80068d6 <HAL_TIM_PWM_Start+0x22>
 8006988:	2302      	movs	r3, #2
 800698a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800698e:	e7a2      	b.n	80068d6 <HAL_TIM_PWM_Start+0x22>
 8006990:	2302      	movs	r3, #2
 8006992:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006996:	e79e      	b.n	80068d6 <HAL_TIM_PWM_Start+0x22>
 8006998:	2302      	movs	r3, #2
 800699a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800699e:	e79a      	b.n	80068d6 <HAL_TIM_PWM_Start+0x22>
 80069a0:	2302      	movs	r3, #2
 80069a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a6:	e796      	b.n	80068d6 <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a8:	6899      	ldr	r1, [r3, #8]
 80069aa:	4a0a      	ldr	r2, [pc, #40]	; (80069d4 <HAL_TIM_PWM_Start+0x120>)
 80069ac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ae:	2a06      	cmp	r2, #6
 80069b0:	d00a      	beq.n	80069c8 <HAL_TIM_PWM_Start+0x114>
 80069b2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80069b6:	d009      	beq.n	80069cc <HAL_TIM_PWM_Start+0x118>
      __HAL_TIM_ENABLE(htim);
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80069c0:	2000      	movs	r0, #0
 80069c2:	e000      	b.n	80069c6 <HAL_TIM_PWM_Start+0x112>
    return HAL_ERROR;
 80069c4:	2001      	movs	r0, #1
}
 80069c6:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80069c8:	2000      	movs	r0, #0
 80069ca:	e7fc      	b.n	80069c6 <HAL_TIM_PWM_Start+0x112>
 80069cc:	2000      	movs	r0, #0
 80069ce:	e7fa      	b.n	80069c6 <HAL_TIM_PWM_Start+0x112>
 80069d0:	40012c00 	.word	0x40012c00
 80069d4:	00010007 	.word	0x00010007

080069d8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d02b      	beq.n	8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80069e0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80069e2:	2301      	movs	r3, #1
 80069e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	2302      	movs	r3, #2
 80069ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069ee:	6802      	ldr	r2, [r0, #0]
 80069f0:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f2:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069f4:	4d11      	ldr	r5, [pc, #68]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80069f6:	42aa      	cmp	r2, r5
 80069f8:	d019      	beq.n	8006a2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069fe:	680d      	ldr	r5, [r1, #0]
 8006a00:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a02:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a04:	6803      	ldr	r3, [r0, #0]
 8006a06:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d002      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a10:	d104      	bne.n	8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a12:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a16:	688a      	ldr	r2, [r1, #8]
 8006a18:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a1a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a22:	2300      	movs	r3, #0
 8006a24:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006a28:	4618      	mov	r0, r3
}
 8006a2a:	bc30      	pop	{r4, r5}
 8006a2c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a32:	684d      	ldr	r5, [r1, #4]
 8006a34:	432b      	orrs	r3, r5
 8006a36:	e7e0      	b.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8006a38:	2002      	movs	r0, #2
}
 8006a3a:	4770      	bx	lr
 8006a3c:	40012c00 	.word	0x40012c00

08006a40 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d046      	beq.n	8006ad6 <HAL_TIMEx_ConfigBreakDeadTime+0x96>
{
 8006a48:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a50:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a56:	688a      	ldr	r2, [r1, #8]
 8006a58:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a5e:	684a      	ldr	r2, [r1, #4]
 8006a60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a66:	680a      	ldr	r2, [r1, #0]
 8006a68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a6e:	690a      	ldr	r2, [r1, #16]
 8006a70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a76:	694a      	ldr	r2, [r1, #20]
 8006a78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a7e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8006a80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a82:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006a86:	698a      	ldr	r2, [r1, #24]
 8006a88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006a8c:	6802      	ldr	r2, [r0, #0]
 8006a8e:	4c13      	ldr	r4, [pc, #76]	; (8006adc <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8006a90:	42a2      	cmp	r2, r4
 8006a92:	d009      	beq.n	8006aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a94:	4c11      	ldr	r4, [pc, #68]	; (8006adc <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8006a96:	42a2      	cmp	r2, r4
 8006a98:	d00b      	beq.n	8006ab2 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a9a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006aa2:	4618      	mov	r0, r3
}
 8006aa4:	bc10      	pop	{r4}
 8006aa6:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aac:	69cc      	ldr	r4, [r1, #28]
 8006aae:	4323      	orrs	r3, r4
 8006ab0:	e7f0      	b.n	8006a94 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ab2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ab6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006ab8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ac0:	6a0c      	ldr	r4, [r1, #32]
 8006ac2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ac4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006ac8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006aca:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006acc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ad0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	e7e1      	b.n	8006a9a <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 8006ad6:	2002      	movs	r0, #2
}
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40012c00 	.word	0x40012c00

08006ae0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ae4:	4770      	bx	lr

08006ae6 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006ae6:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	e852 3f00 	ldrex	r3, [r2]
 8006aec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	e842 3100 	strex	r1, r3, [r2]
 8006af4:	2900      	cmp	r1, #0
 8006af6:	d1f6      	bne.n	8006ae6 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006af8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	f102 0308 	add.w	r3, r2, #8
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	3208      	adds	r2, #8
 8006b08:	e842 3100 	strex	r1, r3, [r2]
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d1f3      	bne.n	8006af8 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b10:	2320      	movs	r3, #32
 8006b12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8006b16:	4770      	bx	lr

08006b18 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b18:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	e852 3f00 	ldrex	r3, [r2]
 8006b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	e842 3100 	strex	r1, r3, [r2]
 8006b26:	2900      	cmp	r1, #0
 8006b28:	d1f6      	bne.n	8006b18 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	f102 0308 	add.w	r3, r2, #8
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b38:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	3208      	adds	r2, #8
 8006b3e:	e842 3100 	strex	r1, r3, [r2]
 8006b42:	2900      	cmp	r1, #0
 8006b44:	d1f1      	bne.n	8006b2a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b46:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d006      	beq.n	8006b5a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	2300      	movs	r3, #0
 8006b54:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b56:	6703      	str	r3, [r0, #112]	; 0x70
}
 8006b58:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b5a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	e852 3f00 	ldrex	r3, [r2]
 8006b60:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	e842 3100 	strex	r1, r3, [r2]
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	d1f6      	bne.n	8006b5a <UART_EndRxTransfer+0x42>
 8006b6c:	e7ee      	b.n	8006b4c <UART_EndRxTransfer+0x34>
	...

08006b70 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8006b70:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	d14c      	bne.n	8006c12 <HAL_UART_Transmit_DMA+0xa2>
{
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8006b7c:	2900      	cmp	r1, #0
 8006b7e:	d04a      	beq.n	8006c16 <HAL_UART_Transmit_DMA+0xa6>
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	d04a      	beq.n	8006c1a <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8006b84:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d048      	beq.n	8006c1e <HAL_UART_Transmit_DMA+0xae>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8006b92:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006b94:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b98:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ba2:	2321      	movs	r3, #33	; 0x21
 8006ba4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8006ba8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006baa:	b1f3      	cbz	r3, 8006bea <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006bac:	491d      	ldr	r1, [pc, #116]	; (8006c24 <HAL_UART_Transmit_DMA+0xb4>)
 8006bae:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006bb0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006bb2:	491d      	ldr	r1, [pc, #116]	; (8006c28 <HAL_UART_Transmit_DMA+0xb8>)
 8006bb4:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006bb6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006bb8:	491c      	ldr	r1, [pc, #112]	; (8006c2c <HAL_UART_Transmit_DMA+0xbc>)
 8006bba:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006bbc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006bc2:	6801      	ldr	r1, [r0, #0]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8006bca:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006bcc:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8006bce:	f7fd f889 	bl	8003ce4 <HAL_DMA_Start_IT>
 8006bd2:	b150      	cbz	r0, 8006bea <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006bd4:	2310      	movs	r3, #16
 8006bd6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8006be0:	2320      	movs	r3, #32
 8006be2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8006be6:	2001      	movs	r0, #1
 8006be8:	e012      	b.n	8006c10 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	2240      	movs	r2, #64	; 0x40
 8006bee:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bf6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	f102 0308 	add.w	r3, r2, #8
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	3208      	adds	r2, #8
 8006c06:	e842 3100 	strex	r1, r3, [r2]
 8006c0a:	2900      	cmp	r1, #0
 8006c0c:	d1f3      	bne.n	8006bf6 <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8006c0e:	2000      	movs	r0, #0
}
 8006c10:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006c12:	2002      	movs	r0, #2
}
 8006c14:	4770      	bx	lr
      return HAL_ERROR;
 8006c16:	2001      	movs	r0, #1
 8006c18:	e7fa      	b.n	8006c10 <HAL_UART_Transmit_DMA+0xa0>
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	e7f8      	b.n	8006c10 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8006c1e:	2002      	movs	r0, #2
 8006c20:	e7f6      	b.n	8006c10 <HAL_UART_Transmit_DMA+0xa0>
 8006c22:	bf00      	nop
 8006c24:	08006c31 	.word	0x08006c31
 8006c28:	08006c9f 	.word	0x08006c9f
 8006c2c:	08006cab 	.word	0x08006cab

08006c30 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c30:	b508      	push	{r3, lr}
 8006c32:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c34:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f013 0f20 	tst.w	r3, #32
 8006c3e:	d118      	bne.n	8006c72 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c46:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	f102 0308 	add.w	r3, r2, #8
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	3208      	adds	r2, #8
 8006c56:	e842 3100 	strex	r1, r3, [r2]
 8006c5a:	2900      	cmp	r1, #0
 8006c5c:	d1f3      	bne.n	8006c46 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	e852 3f00 	ldrex	r3, [r2]
 8006c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	e842 3100 	strex	r1, r3, [r2]
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	d1f6      	bne.n	8006c5e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c70:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006c72:	f7fb fb75 	bl	8002360 <HAL_UART_TxCpltCallback>
}
 8006c76:	e7fb      	b.n	8006c70 <UART_DMATransmitCplt+0x40>

08006c78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c78:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	e852 3f00 	ldrex	r3, [r2]
 8006c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	e842 3100 	strex	r1, r3, [r2]
 8006c88:	2900      	cmp	r1, #0
 8006c8a:	d1f6      	bne.n	8006c7a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	2320      	movs	r3, #32
 8006c8e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c96:	f7fb fb63 	bl	8002360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c9a:	bd08      	pop	{r3, pc}

08006c9c <HAL_UART_TxHalfCpltCallback>:
}
 8006c9c:	4770      	bx	lr

08006c9e <UART_DMATxHalfCplt>:
{
 8006c9e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006ca0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006ca2:	f7ff fffb 	bl	8006c9c <HAL_UART_TxHalfCpltCallback>
}
 8006ca6:	bd08      	pop	{r3, pc}

08006ca8 <HAL_UART_ErrorCallback>:
}
 8006ca8:	4770      	bx	lr

08006caa <UART_DMAError>:
{
 8006caa:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cac:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006cae:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006cb2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cbe:	d001      	beq.n	8006cc4 <UART_DMAError+0x1a>
 8006cc0:	2a21      	cmp	r2, #33	; 0x21
 8006cc2:	d010      	beq.n	8006ce6 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ccc:	d001      	beq.n	8006cd2 <UART_DMAError+0x28>
 8006cce:	2d22      	cmp	r5, #34	; 0x22
 8006cd0:	d010      	beq.n	8006cf4 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cd2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006cd6:	f043 0310 	orr.w	r3, r3, #16
 8006cda:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff ffe2 	bl	8006ca8 <HAL_UART_ErrorCallback>
}
 8006ce4:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006cec:	4620      	mov	r0, r4
 8006cee:	f7ff fefa 	bl	8006ae6 <UART_EndTxTransfer>
 8006cf2:	e7e7      	b.n	8006cc4 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f7ff ff0c 	bl	8006b18 <UART_EndRxTransfer>
 8006d00:	e7e7      	b.n	8006cd2 <UART_DMAError+0x28>

08006d02 <UART_DMAAbortOnError>:
{
 8006d02:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d04:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006d0c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006d10:	f7ff ffca 	bl	8006ca8 <HAL_UART_ErrorCallback>
}
 8006d14:	bd08      	pop	{r3, pc}

08006d16 <HAL_UARTEx_RxEventCallback>:
}
 8006d16:	4770      	bx	lr

08006d18 <HAL_UART_IRQHandler>:
{
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d1c:	6801      	ldr	r1, [r0, #0]
 8006d1e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d20:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d22:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d24:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8006d28:	401a      	ands	r2, r3
 8006d2a:	d108      	bne.n	8006d3e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d2c:	f013 0f20 	tst.w	r3, #32
 8006d30:	d005      	beq.n	8006d3e <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d32:	f010 0f20 	tst.w	r0, #32
 8006d36:	d134      	bne.n	8006da2 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d38:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006d3c:	d131      	bne.n	8006da2 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8006d3e:	b12a      	cbz	r2, 8006d4c <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d40:	4a95      	ldr	r2, [pc, #596]	; (8006f98 <HAL_UART_IRQHandler+0x280>)
 8006d42:	402a      	ands	r2, r5
 8006d44:	d133      	bne.n	8006dae <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d46:	4e95      	ldr	r6, [pc, #596]	; (8006f9c <HAL_UART_IRQHandler+0x284>)
 8006d48:	4230      	tst	r0, r6
 8006d4a:	d130      	bne.n	8006dae <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006d4e:	2a01      	cmp	r2, #1
 8006d50:	f000 80c3 	beq.w	8006eda <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006d58:	d003      	beq.n	8006d62 <HAL_UART_IRQHandler+0x4a>
 8006d5a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006d5e:	f040 815b 	bne.w	8007018 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d66:	d007      	beq.n	8006d78 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d68:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006d6c:	f040 815b 	bne.w	8007026 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d70:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8006d74:	f040 8157 	bne.w	8007026 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d7c:	d003      	beq.n	8006d86 <HAL_UART_IRQHandler+0x6e>
 8006d7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d82:	f040 8157 	bne.w	8007034 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d86:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006d8a:	d003      	beq.n	8006d94 <HAL_UART_IRQHandler+0x7c>
 8006d8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d90:	f040 8154 	bne.w	800703c <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006d98:	d002      	beq.n	8006da0 <HAL_UART_IRQHandler+0x88>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	f2c0 8152 	blt.w	8007044 <HAL_UART_IRQHandler+0x32c>
}
 8006da0:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8006da2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0fb      	beq.n	8006da0 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8006da8:	4620      	mov	r0, r4
 8006daa:	4798      	blx	r3
      return;
 8006dac:	e7f8      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dae:	f013 0f01 	tst.w	r3, #1
 8006db2:	d009      	beq.n	8006dc8 <HAL_UART_IRQHandler+0xb0>
 8006db4:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006db8:	d006      	beq.n	8006dc8 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006dba:	2601      	movs	r6, #1
 8006dbc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dbe:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006dc2:	4331      	orrs	r1, r6
 8006dc4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dc8:	f013 0f02 	tst.w	r3, #2
 8006dcc:	d00b      	beq.n	8006de6 <HAL_UART_IRQHandler+0xce>
 8006dce:	f015 0f01 	tst.w	r5, #1
 8006dd2:	d008      	beq.n	8006de6 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dd4:	6821      	ldr	r1, [r4, #0]
 8006dd6:	2602      	movs	r6, #2
 8006dd8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dda:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006dde:	f041 0104 	orr.w	r1, r1, #4
 8006de2:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006de6:	f013 0f04 	tst.w	r3, #4
 8006dea:	d00b      	beq.n	8006e04 <HAL_UART_IRQHandler+0xec>
 8006dec:	f015 0f01 	tst.w	r5, #1
 8006df0:	d008      	beq.n	8006e04 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006df2:	6821      	ldr	r1, [r4, #0]
 8006df4:	2604      	movs	r6, #4
 8006df6:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006df8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006dfc:	f041 0102 	orr.w	r1, r1, #2
 8006e00:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e04:	f013 0f08 	tst.w	r3, #8
 8006e08:	d00b      	beq.n	8006e22 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e0a:	f010 0f20 	tst.w	r0, #32
 8006e0e:	d100      	bne.n	8006e12 <HAL_UART_IRQHandler+0xfa>
 8006e10:	b13a      	cbz	r2, 8006e22 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e12:	6822      	ldr	r2, [r4, #0]
 8006e14:	2108      	movs	r1, #8
 8006e16:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e18:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e22:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006e26:	d00c      	beq.n	8006e42 <HAL_UART_IRQHandler+0x12a>
 8006e28:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8006e2c:	d009      	beq.n	8006e42 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e34:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e36:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006e3a:	f042 0220 	orr.w	r2, r2, #32
 8006e3e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e42:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006e46:	2a00      	cmp	r2, #0
 8006e48:	d0aa      	beq.n	8006da0 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e4a:	f013 0f20 	tst.w	r3, #32
 8006e4e:	d009      	beq.n	8006e64 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e50:	f010 0f20 	tst.w	r0, #32
 8006e54:	d102      	bne.n	8006e5c <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e56:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006e5a:	d003      	beq.n	8006e64 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8006e5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006e5e:	b10b      	cbz	r3, 8006e64 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8006e60:	4620      	mov	r0, r4
 8006e62:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006e64:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e70:	d102      	bne.n	8006e78 <HAL_UART_IRQHandler+0x160>
 8006e72:	f012 0f28 	tst.w	r2, #40	; 0x28
 8006e76:	d029      	beq.n	8006ecc <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7ff fe4d 	bl	8006b18 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e86:	d01d      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e88:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	f102 0308 	add.w	r3, r2, #8
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	3208      	adds	r2, #8
 8006e98:	e842 3100 	strex	r1, r3, [r2]
 8006e9c:	2900      	cmp	r1, #0
 8006e9e:	d1f3      	bne.n	8006e88 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8006ea0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006ea2:	b15b      	cbz	r3, 8006ebc <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ea4:	4a3e      	ldr	r2, [pc, #248]	; (8006fa0 <HAL_UART_IRQHandler+0x288>)
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ea8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006eaa:	f7fc ffa1 	bl	8003df0 <HAL_DMA_Abort_IT>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f43f af76 	beq.w	8006da0 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eb4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006eb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006eb8:	4798      	blx	r3
 8006eba:	e771      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f7ff fef3 	bl	8006ca8 <HAL_UART_ErrorCallback>
 8006ec2:	e76d      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f7ff feef 	bl	8006ca8 <HAL_UART_ErrorCallback>
 8006eca:	e769      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f7ff feeb 	bl	8006ca8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8006ed8:	e762      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006eda:	f013 0f10 	tst.w	r3, #16
 8006ede:	f43f af39 	beq.w	8006d54 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006ee2:	f010 0f10 	tst.w	r0, #16
 8006ee6:	f43f af35 	beq.w	8006d54 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eea:	2310      	movs	r3, #16
 8006eec:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ef6:	d055      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ef8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006efa:	6813      	ldr	r3, [r2, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f43f af4d 	beq.w	8006da0 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006f06:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006f0a:	4299      	cmp	r1, r3
 8006f0c:	f67f af48 	bls.w	8006da0 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8006f10:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f14:	6813      	ldr	r3, [r2, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f013 0f20 	tst.w	r3, #32
 8006f1c:	d131      	bne.n	8006f82 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f1e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	e852 3f00 	ldrex	r3, [r2]
 8006f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	e842 3100 	strex	r1, r3, [r2]
 8006f2c:	2900      	cmp	r1, #0
 8006f2e:	d1f6      	bne.n	8006f1e <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f30:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	f102 0308 	add.w	r3, r2, #8
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	3208      	adds	r2, #8
 8006f40:	e842 3100 	strex	r1, r3, [r2]
 8006f44:	2900      	cmp	r1, #0
 8006f46:	d1f3      	bne.n	8006f30 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f48:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	f102 0308 	add.w	r3, r2, #8
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	3208      	adds	r2, #8
 8006f58:	e842 3100 	strex	r1, r3, [r2]
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	d1f3      	bne.n	8006f48 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8006f60:	2320      	movs	r3, #32
 8006f62:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f66:	2300      	movs	r3, #0
 8006f68:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	e852 3f00 	ldrex	r3, [r2]
 8006f70:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	e842 3100 	strex	r1, r3, [r2]
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	d1f6      	bne.n	8006f6a <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f7c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006f7e:	f7fc fefd 	bl	8003d7c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f82:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006f86:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	1ac9      	subs	r1, r1, r3
 8006f8e:	b289      	uxth	r1, r1
 8006f90:	4620      	mov	r0, r4
 8006f92:	f7ff fec0 	bl	8006d16 <HAL_UARTEx_RxEventCallback>
      return;
 8006f96:	e703      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
 8006f98:	10000001 	.word	0x10000001
 8006f9c:	04000120 	.word	0x04000120
 8006fa0:	08006d03 	.word	0x08006d03
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fa4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006fa8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	1ac9      	subs	r1, r1, r3
 8006fb0:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8006fb2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f43f aef1 	beq.w	8006da0 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8006fbe:	2900      	cmp	r1, #0
 8006fc0:	f43f aeee 	beq.w	8006da0 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fc4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	e852 3f00 	ldrex	r3, [r2]
 8006fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fce:	e842 3000 	strex	r0, r3, [r2]
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d1f6      	bne.n	8006fc4 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fd6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	f102 0308 	add.w	r3, r2, #8
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	3208      	adds	r2, #8
 8006fea:	e842 3000 	strex	r0, r3, [r2]
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d1f1      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	2320      	movs	r3, #32
 8006ff4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8006ffc:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ffe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	e852 3f00 	ldrex	r3, [r2]
 8007004:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	e842 3000 	strex	r0, r3, [r2]
 800700c:	2800      	cmp	r0, #0
 800700e:	d1f6      	bne.n	8006ffe <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007010:	4620      	mov	r0, r4
 8007012:	f7ff fe80 	bl	8006d16 <HAL_UARTEx_RxEventCallback>
      return;
 8007016:	e6c3      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007018:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800701c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800701e:	4620      	mov	r0, r4
 8007020:	f000 fe1c 	bl	8007c5c <HAL_UARTEx_WakeupCallback>
    return;
 8007024:	e6bc      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8007026:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007028:	2b00      	cmp	r3, #0
 800702a:	f43f aeb9 	beq.w	8006da0 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800702e:	4620      	mov	r0, r4
 8007030:	4798      	blx	r3
    return;
 8007032:	e6b5      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8007034:	4620      	mov	r0, r4
 8007036:	f7ff fe1f 	bl	8006c78 <UART_EndTransmit_IT>
    return;
 800703a:	e6b1      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fe0f 	bl	8007c60 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007042:	e6ad      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007044:	4620      	mov	r0, r4
 8007046:	f000 fe0a 	bl	8007c5e <HAL_UARTEx_RxFifoFullCallback>
    return;
 800704a:	e6a9      	b.n	8006da0 <HAL_UART_IRQHandler+0x88>

0800704c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800704c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800704e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007052:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007056:	2a22      	cmp	r2, #34	; 0x22
 8007058:	d005      	beq.n	8007066 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800705a:	6802      	ldr	r2, [r0, #0]
 800705c:	6993      	ldr	r3, [r2, #24]
 800705e:	f043 0308 	orr.w	r3, r3, #8
 8007062:	6193      	str	r3, [r2, #24]
  }
}
 8007064:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007066:	6802      	ldr	r2, [r0, #0]
 8007068:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800706a:	b2db      	uxtb	r3, r3
 800706c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800706e:	400b      	ands	r3, r1
 8007070:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007072:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007074:	3301      	adds	r3, #1
 8007076:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007078:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29b      	uxth	r3, r3
 8007082:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007086:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e9      	bne.n	8007064 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007090:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	e852 3f00 	ldrex	r3, [r2]
 8007096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	e842 3100 	strex	r1, r3, [r2]
 800709e:	2900      	cmp	r1, #0
 80070a0:	d1f6      	bne.n	8007090 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	f102 0308 	add.w	r3, r2, #8
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	3208      	adds	r2, #8
 80070b2:	e842 3100 	strex	r1, r3, [r2]
 80070b6:	2900      	cmp	r1, #0
 80070b8:	d1f3      	bne.n	80070a2 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 80070ba:	2320      	movs	r3, #32
 80070bc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d116      	bne.n	80070f8 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ca:	2300      	movs	r3, #0
 80070cc:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	e852 3f00 	ldrex	r3, [r2]
 80070d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	e842 3100 	strex	r1, r3, [r2]
 80070dc:	2900      	cmp	r1, #0
 80070de:	d1f6      	bne.n	80070ce <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070e0:	6803      	ldr	r3, [r0, #0]
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	f012 0f10 	tst.w	r2, #16
 80070e8:	d001      	beq.n	80070ee <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070ea:	2210      	movs	r2, #16
 80070ec:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ee:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80070f2:	f7ff fe10 	bl	8006d16 <HAL_UARTEx_RxEventCallback>
 80070f6:	e7b5      	b.n	8007064 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80070f8:	f7fb f942 	bl	8002380 <HAL_UART_RxCpltCallback>
 80070fc:	e7b2      	b.n	8007064 <UART_RxISR_8BIT+0x18>

080070fe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070fe:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007100:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007104:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007108:	2b22      	cmp	r3, #34	; 0x22
 800710a:	d005      	beq.n	8007118 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800710c:	6802      	ldr	r2, [r0, #0]
 800710e:	6993      	ldr	r3, [r2, #24]
 8007110:	f043 0308 	orr.w	r3, r3, #8
 8007114:	6193      	str	r3, [r2, #24]
  }
}
 8007116:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007118:	6803      	ldr	r3, [r0, #0]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800711c:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800711e:	4013      	ands	r3, r2
 8007120:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8007122:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007124:	3302      	adds	r3, #2
 8007126:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007128:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29b      	uxth	r3, r3
 8007132:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007136:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1ea      	bne.n	8007116 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007140:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	e852 3f00 	ldrex	r3, [r2]
 8007146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	e842 3100 	strex	r1, r3, [r2]
 800714e:	2900      	cmp	r1, #0
 8007150:	d1f6      	bne.n	8007140 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007152:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	f102 0308 	add.w	r3, r2, #8
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	3208      	adds	r2, #8
 8007162:	e842 3100 	strex	r1, r3, [r2]
 8007166:	2900      	cmp	r1, #0
 8007168:	d1f3      	bne.n	8007152 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800716a:	2320      	movs	r3, #32
 800716c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8007170:	2300      	movs	r3, #0
 8007172:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007174:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007176:	2b01      	cmp	r3, #1
 8007178:	d116      	bne.n	80071a8 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717a:	2300      	movs	r3, #0
 800717c:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	e852 3f00 	ldrex	r3, [r2]
 8007184:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	e842 3100 	strex	r1, r3, [r2]
 800718c:	2900      	cmp	r1, #0
 800718e:	d1f6      	bne.n	800717e <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007190:	6803      	ldr	r3, [r0, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	f012 0f10 	tst.w	r2, #16
 8007198:	d001      	beq.n	800719e <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800719a:	2210      	movs	r2, #16
 800719c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800719e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80071a2:	f7ff fdb8 	bl	8006d16 <HAL_UARTEx_RxEventCallback>
 80071a6:	e7b6      	b.n	8007116 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80071a8:	f7fb f8ea 	bl	8002380 <HAL_UART_RxCpltCallback>
 80071ac:	e7b3      	b.n	8007116 <UART_RxISR_16BIT+0x18>
	...

080071b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80071b4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071b8:	6803      	ldr	r3, [r0, #0]
 80071ba:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071bc:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071c0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071c4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80071c8:	2a22      	cmp	r2, #34	; 0x22
 80071ca:	d005      	beq.n	80071d8 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	f042 0208 	orr.w	r2, r2, #8
 80071d2:	619a      	str	r2, [r3, #24]
  }
}
 80071d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80071da:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071de:	e008      	b.n	80071f2 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071e0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d14c      	bne.n	8007282 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80071e8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d04e      	beq.n	8007290 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071f2:	2f00      	cmp	r7, #0
 80071f4:	f000 8087 	beq.w	8007306 <UART_RxISR_8BIT_FIFOEN+0x156>
 80071f8:	f015 0f20 	tst.w	r5, #32
 80071fc:	f000 8083 	beq.w	8007306 <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007204:	b2f3      	uxtb	r3, r6
 8007206:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007208:	400b      	ands	r3, r1
 800720a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800720c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800720e:	3301      	adds	r3, #1
 8007210:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007212:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29b      	uxth	r3, r3
 800721c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007224:	f015 0f07 	tst.w	r5, #7
 8007228:	d0de      	beq.n	80071e8 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800722a:	f015 0f01 	tst.w	r5, #1
 800722e:	d009      	beq.n	8007244 <UART_RxISR_8BIT_FIFOEN+0x94>
 8007230:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007234:	d006      	beq.n	8007244 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007236:	2201      	movs	r2, #1
 8007238:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800723a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007244:	f015 0f02 	tst.w	r5, #2
 8007248:	d00b      	beq.n	8007262 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800724a:	f018 0f01 	tst.w	r8, #1
 800724e:	d008      	beq.n	8007262 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	2202      	movs	r2, #2
 8007254:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007256:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800725a:	f043 0304 	orr.w	r3, r3, #4
 800725e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007262:	f015 0f04 	tst.w	r5, #4
 8007266:	d0bb      	beq.n	80071e0 <UART_RxISR_8BIT_FIFOEN+0x30>
 8007268:	f018 0f01 	tst.w	r8, #1
 800726c:	d0b8      	beq.n	80071e0 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	2204      	movs	r2, #4
 8007272:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007274:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007278:	f043 0302 	orr.w	r3, r3, #2
 800727c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007280:	e7ae      	b.n	80071e0 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007282:	4620      	mov	r0, r4
 8007284:	f7ff fd10 	bl	8006ca8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007288:	2300      	movs	r3, #0
 800728a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800728e:	e7ab      	b.n	80071e8 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007290:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	e852 3f00 	ldrex	r3, [r2]
 8007296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	e842 3100 	strex	r1, r3, [r2]
 800729e:	2900      	cmp	r1, #0
 80072a0:	d1f6      	bne.n	8007290 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	f102 0308 	add.w	r3, r2, #8
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072b0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	3208      	adds	r2, #8
 80072b6:	e842 3100 	strex	r1, r3, [r2]
 80072ba:	2900      	cmp	r1, #0
 80072bc:	d1f1      	bne.n	80072a2 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80072be:	2320      	movs	r3, #32
 80072c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80072c4:	2300      	movs	r3, #0
 80072c6:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d003      	beq.n	80072d6 <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 80072ce:	4620      	mov	r0, r4
 80072d0:	f7fb f856 	bl	8002380 <HAL_UART_RxCpltCallback>
 80072d4:	e78d      	b.n	80071f2 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	2300      	movs	r3, #0
 80072d8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	e852 3f00 	ldrex	r3, [r2]
 80072e0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	e842 3100 	strex	r1, r3, [r2]
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d1f6      	bne.n	80072da <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	f012 0f10 	tst.w	r2, #16
 80072f4:	d001      	beq.n	80072fa <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072f6:	2210      	movs	r2, #16
 80072f8:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072fa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80072fe:	4620      	mov	r0, r4
 8007300:	f7ff fd09 	bl	8006d16 <HAL_UARTEx_RxEventCallback>
 8007304:	e775      	b.n	80071f2 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007306:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800730a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800730c:	2b00      	cmp	r3, #0
 800730e:	f43f af61 	beq.w	80071d4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007312:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007316:	429a      	cmp	r2, r3
 8007318:	f67f af5c 	bls.w	80071d4 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800731c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	f102 0308 	add.w	r3, r2, #8
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	3208      	adds	r2, #8
 800732c:	e842 3100 	strex	r1, r3, [r2]
 8007330:	2900      	cmp	r1, #0
 8007332:	d1f3      	bne.n	800731c <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8007336:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007338:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	e852 3f00 	ldrex	r3, [r2]
 800733e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	e842 3100 	strex	r1, r3, [r2]
 8007346:	2900      	cmp	r1, #0
 8007348:	d1f6      	bne.n	8007338 <UART_RxISR_8BIT_FIFOEN+0x188>
 800734a:	e743      	b.n	80071d4 <UART_RxISR_8BIT_FIFOEN+0x24>
 800734c:	0800704d 	.word	0x0800704d

08007350 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007354:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007358:	6803      	ldr	r3, [r0, #0]
 800735a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800735c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007360:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007364:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007368:	2a22      	cmp	r2, #34	; 0x22
 800736a:	d005      	beq.n	8007378 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	f042 0208 	orr.w	r2, r2, #8
 8007372:	619a      	str	r2, [r3, #24]
  }
}
 8007374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007378:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800737a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800737e:	e008      	b.n	8007392 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007380:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d14b      	bne.n	8007420 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8007388:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800738c:	b29b      	uxth	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d04d      	beq.n	800742e <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007392:	2f00      	cmp	r7, #0
 8007394:	f000 8086 	beq.w	80074a4 <UART_RxISR_16BIT_FIFOEN+0x154>
 8007398:	f015 0f20 	tst.w	r5, #32
 800739c:	f000 8082 	beq.w	80074a4 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80073a6:	4033      	ands	r3, r6
 80073a8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80073aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073ac:	3302      	adds	r3, #2
 80073ae:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80073b0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80073c2:	f015 0f07 	tst.w	r5, #7
 80073c6:	d0df      	beq.n	8007388 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073c8:	f015 0f01 	tst.w	r5, #1
 80073cc:	d009      	beq.n	80073e2 <UART_RxISR_16BIT_FIFOEN+0x92>
 80073ce:	f419 7f80 	tst.w	r9, #256	; 0x100
 80073d2:	d006      	beq.n	80073e2 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073d4:	2201      	movs	r2, #1
 80073d6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073e2:	f015 0f02 	tst.w	r5, #2
 80073e6:	d00b      	beq.n	8007400 <UART_RxISR_16BIT_FIFOEN+0xb0>
 80073e8:	f018 0f01 	tst.w	r8, #1
 80073ec:	d008      	beq.n	8007400 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	2202      	movs	r2, #2
 80073f2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80073f8:	f043 0304 	orr.w	r3, r3, #4
 80073fc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007400:	f015 0f04 	tst.w	r5, #4
 8007404:	d0bc      	beq.n	8007380 <UART_RxISR_16BIT_FIFOEN+0x30>
 8007406:	f018 0f01 	tst.w	r8, #1
 800740a:	d0b9      	beq.n	8007380 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	2204      	movs	r2, #4
 8007410:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007412:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007416:	f043 0302 	orr.w	r3, r3, #2
 800741a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800741e:	e7af      	b.n	8007380 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007420:	4620      	mov	r0, r4
 8007422:	f7ff fc41 	bl	8006ca8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007426:	2300      	movs	r3, #0
 8007428:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800742c:	e7ac      	b.n	8007388 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800742e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	e852 3f00 	ldrex	r3, [r2]
 8007434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	e842 3100 	strex	r1, r3, [r2]
 800743c:	2900      	cmp	r1, #0
 800743e:	d1f6      	bne.n	800742e <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007440:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	f102 0308 	add.w	r3, r2, #8
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800744e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	3208      	adds	r2, #8
 8007454:	e842 3100 	strex	r1, r3, [r2]
 8007458:	2900      	cmp	r1, #0
 800745a:	d1f1      	bne.n	8007440 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 800745c:	2320      	movs	r3, #32
 800745e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007466:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d003      	beq.n	8007474 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 800746c:	4620      	mov	r0, r4
 800746e:	f7fa ff87 	bl	8002380 <HAL_UART_RxCpltCallback>
 8007472:	e78e      	b.n	8007392 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007474:	2300      	movs	r3, #0
 8007476:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007478:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	e852 3f00 	ldrex	r3, [r2]
 800747e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	e842 3100 	strex	r1, r3, [r2]
 8007486:	2900      	cmp	r1, #0
 8007488:	d1f6      	bne.n	8007478 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	69da      	ldr	r2, [r3, #28]
 800748e:	f012 0f10 	tst.w	r2, #16
 8007492:	d001      	beq.n	8007498 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007494:	2210      	movs	r2, #16
 8007496:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007498:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800749c:	4620      	mov	r0, r4
 800749e:	f7ff fc3a 	bl	8006d16 <HAL_UARTEx_RxEventCallback>
 80074a2:	e776      	b.n	8007392 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80074a4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80074a8:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f43f af62 	beq.w	8007374 <UART_RxISR_16BIT_FIFOEN+0x24>
 80074b0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80074b4:	429a      	cmp	r2, r3
 80074b6:	f67f af5d 	bls.w	8007374 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	f102 0308 	add.w	r3, r2, #8
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	3208      	adds	r2, #8
 80074ca:	e842 3100 	strex	r1, r3, [r2]
 80074ce:	2900      	cmp	r1, #0
 80074d0:	d1f3      	bne.n	80074ba <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 80074d2:	4b06      	ldr	r3, [pc, #24]	; (80074ec <UART_RxISR_16BIT_FIFOEN+0x19c>)
 80074d4:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	e852 3f00 	ldrex	r3, [r2]
 80074dc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	e842 3100 	strex	r1, r3, [r2]
 80074e4:	2900      	cmp	r1, #0
 80074e6:	d1f6      	bne.n	80074d6 <UART_RxISR_16BIT_FIFOEN+0x186>
 80074e8:	e744      	b.n	8007374 <UART_RxISR_16BIT_FIFOEN+0x24>
 80074ea:	bf00      	nop
 80074ec:	080070ff 	.word	0x080070ff

080074f0 <UART_SetConfig>:
{
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80074f4:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074f6:	6883      	ldr	r3, [r0, #8]
 80074f8:	6902      	ldr	r2, [r0, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	6942      	ldr	r2, [r0, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	69c2      	ldr	r2, [r0, #28]
 8007502:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007504:	6808      	ldr	r0, [r1, #0]
 8007506:	4a9d      	ldr	r2, [pc, #628]	; (800777c <UART_SetConfig+0x28c>)
 8007508:	4002      	ands	r2, r0
 800750a:	4313      	orrs	r3, r2
 800750c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	6853      	ldr	r3, [r2, #4]
 8007512:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007516:	68e1      	ldr	r1, [r4, #12]
 8007518:	430b      	orrs	r3, r1
 800751a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800751c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800751e:	6822      	ldr	r2, [r4, #0]
 8007520:	4b97      	ldr	r3, [pc, #604]	; (8007780 <UART_SetConfig+0x290>)
 8007522:	429a      	cmp	r2, r3
 8007524:	d001      	beq.n	800752a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007526:	6a23      	ldr	r3, [r4, #32]
 8007528:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800752a:	6893      	ldr	r3, [r2, #8]
 800752c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007530:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007534:	430b      	orrs	r3, r1
 8007536:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007538:	6822      	ldr	r2, [r4, #0]
 800753a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800753c:	f023 030f 	bic.w	r3, r3, #15
 8007540:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007542:	430b      	orrs	r3, r1
 8007544:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	4a8e      	ldr	r2, [pc, #568]	; (8007784 <UART_SetConfig+0x294>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d01c      	beq.n	8007588 <UART_SetConfig+0x98>
 800754e:	4a8e      	ldr	r2, [pc, #568]	; (8007788 <UART_SetConfig+0x298>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d031      	beq.n	80075b8 <UART_SetConfig+0xc8>
 8007554:	4a8a      	ldr	r2, [pc, #552]	; (8007780 <UART_SetConfig+0x290>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d04b      	beq.n	80075f2 <UART_SetConfig+0x102>
 800755a:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 800755c:	4988      	ldr	r1, [pc, #544]	; (8007780 <UART_SetConfig+0x290>)
 800755e:	428b      	cmp	r3, r1
 8007560:	d068      	beq.n	8007634 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007562:	69e0      	ldr	r0, [r4, #28]
 8007564:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007568:	f000 80a5 	beq.w	80076b6 <UART_SetConfig+0x1c6>
    switch (clocksource)
 800756c:	2a08      	cmp	r2, #8
 800756e:	f200 811f 	bhi.w	80077b0 <UART_SetConfig+0x2c0>
 8007572:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007576:	00d3      	.short	0x00d3
 8007578:	00d100f5 	.word	0x00d100f5
 800757c:	00f8011d 	.word	0x00f8011d
 8007580:	011d011d 	.word	0x011d011d
 8007584:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800758c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007590:	f002 0203 	and.w	r2, r2, #3
 8007594:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007598:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 800759c:	2a03      	cmp	r2, #3
 800759e:	d809      	bhi.n	80075b4 <UART_SetConfig+0xc4>
 80075a0:	e8df f002 	tbb	[pc, r2]
 80075a4:	063c0402 	.word	0x063c0402
 80075a8:	2201      	movs	r2, #1
 80075aa:	e7d7      	b.n	800755c <UART_SetConfig+0x6c>
 80075ac:	2204      	movs	r2, #4
 80075ae:	e7d5      	b.n	800755c <UART_SetConfig+0x6c>
 80075b0:	2208      	movs	r2, #8
 80075b2:	e7d3      	b.n	800755c <UART_SetConfig+0x6c>
 80075b4:	2210      	movs	r2, #16
 80075b6:	e7d1      	b.n	800755c <UART_SetConfig+0x6c>
 80075b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075bc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80075c0:	f002 020c 	and.w	r2, r2, #12
 80075c4:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80075c8:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 80075cc:	2a0c      	cmp	r2, #12
 80075ce:	d80e      	bhi.n	80075ee <UART_SetConfig+0xfe>
 80075d0:	e8df f002 	tbb	[pc, r2]
 80075d4:	0d0d0d07 	.word	0x0d0d0d07
 80075d8:	0d0d0d09 	.word	0x0d0d0d09
 80075dc:	0d0d0d26 	.word	0x0d0d0d26
 80075e0:	0b          	.byte	0x0b
 80075e1:	00          	.byte	0x00
 80075e2:	2200      	movs	r2, #0
 80075e4:	e7ba      	b.n	800755c <UART_SetConfig+0x6c>
 80075e6:	2204      	movs	r2, #4
 80075e8:	e7b8      	b.n	800755c <UART_SetConfig+0x6c>
 80075ea:	2208      	movs	r2, #8
 80075ec:	e7b6      	b.n	800755c <UART_SetConfig+0x6c>
 80075ee:	2210      	movs	r2, #16
 80075f0:	e7b4      	b.n	800755c <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80075f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075f6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80075fa:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80075fe:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007602:	d00f      	beq.n	8007624 <UART_SetConfig+0x134>
 8007604:	d805      	bhi.n	8007612 <UART_SetConfig+0x122>
 8007606:	b17a      	cbz	r2, 8007628 <UART_SetConfig+0x138>
 8007608:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800760c:	d10e      	bne.n	800762c <UART_SetConfig+0x13c>
 800760e:	2204      	movs	r2, #4
 8007610:	e7a4      	b.n	800755c <UART_SetConfig+0x6c>
 8007612:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007616:	d10b      	bne.n	8007630 <UART_SetConfig+0x140>
 8007618:	2208      	movs	r2, #8
 800761a:	e79f      	b.n	800755c <UART_SetConfig+0x6c>
 800761c:	2202      	movs	r2, #2
 800761e:	e79d      	b.n	800755c <UART_SetConfig+0x6c>
 8007620:	2202      	movs	r2, #2
 8007622:	e79b      	b.n	800755c <UART_SetConfig+0x6c>
 8007624:	2202      	movs	r2, #2
 8007626:	e799      	b.n	800755c <UART_SetConfig+0x6c>
 8007628:	2200      	movs	r2, #0
 800762a:	e797      	b.n	800755c <UART_SetConfig+0x6c>
 800762c:	2210      	movs	r2, #16
 800762e:	e795      	b.n	800755c <UART_SetConfig+0x6c>
 8007630:	2210      	movs	r2, #16
 8007632:	e793      	b.n	800755c <UART_SetConfig+0x6c>
    switch (clocksource)
 8007634:	2a08      	cmp	r2, #8
 8007636:	f200 809c 	bhi.w	8007772 <UART_SetConfig+0x282>
 800763a:	e8df f002 	tbb	[pc, r2]
 800763e:	9a08      	.short	0x9a08
 8007640:	9a379a3a 	.word	0x9a379a3a
 8007644:	9a9a      	.short	0x9a9a
 8007646:	05          	.byte	0x05
 8007647:	00          	.byte	0x00
 8007648:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800764c:	e004      	b.n	8007658 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800764e:	f7fd fe41 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007652:	2800      	cmp	r0, #0
 8007654:	f000 808f 	beq.w	8007776 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007658:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800765a:	4b4c      	ldr	r3, [pc, #304]	; (800778c <UART_SetConfig+0x29c>)
 800765c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007660:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007664:	6865      	ldr	r5, [r4, #4]
 8007666:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800766a:	4299      	cmp	r1, r3
 800766c:	f200 8094 	bhi.w	8007798 <UART_SetConfig+0x2a8>
 8007670:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007674:	f200 8092 	bhi.w	800779c <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007678:	2600      	movs	r6, #0
 800767a:	4633      	mov	r3, r6
 800767c:	4631      	mov	r1, r6
 800767e:	f7f9 fa97 	bl	8000bb0 <__aeabi_uldivmod>
 8007682:	0209      	lsls	r1, r1, #8
 8007684:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007688:	0200      	lsls	r0, r0, #8
 800768a:	086b      	lsrs	r3, r5, #1
 800768c:	18c0      	adds	r0, r0, r3
 800768e:	462a      	mov	r2, r5
 8007690:	4633      	mov	r3, r6
 8007692:	f141 0100 	adc.w	r1, r1, #0
 8007696:	f7f9 fa8b 	bl	8000bb0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800769a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800769e:	4b3c      	ldr	r3, [pc, #240]	; (8007790 <UART_SetConfig+0x2a0>)
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d87d      	bhi.n	80077a0 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	60d8      	str	r0, [r3, #12]
 80076a8:	4630      	mov	r0, r6
 80076aa:	e050      	b.n	800774e <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 80076ac:	f7fd f90a 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
        break;
 80076b0:	e7cf      	b.n	8007652 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 80076b2:	4838      	ldr	r0, [pc, #224]	; (8007794 <UART_SetConfig+0x2a4>)
 80076b4:	e7d0      	b.n	8007658 <UART_SetConfig+0x168>
    switch (clocksource)
 80076b6:	2a08      	cmp	r2, #8
 80076b8:	d874      	bhi.n	80077a4 <UART_SetConfig+0x2b4>
 80076ba:	e8df f002 	tbb	[pc, r2]
 80076be:	2707      	.short	0x2707
 80076c0:	732a7305 	.word	0x732a7305
 80076c4:	7373      	.short	0x7373
 80076c6:	0b          	.byte	0x0b
 80076c7:	00          	.byte	0x00
 80076c8:	4832      	ldr	r0, [pc, #200]	; (8007794 <UART_SetConfig+0x2a4>)
 80076ca:	e003      	b.n	80076d4 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80076cc:	f7fd fe02 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d069      	beq.n	80077a8 <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80076d6:	4b2d      	ldr	r3, [pc, #180]	; (800778c <UART_SetConfig+0x29c>)
 80076d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80076dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80076e0:	6862      	ldr	r2, [r4, #4]
 80076e2:	0853      	lsrs	r3, r2, #1
 80076e4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80076e8:	fbb0 f0f2 	udiv	r0, r0, r2
 80076ec:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ee:	f1a0 0210 	sub.w	r2, r0, #16
 80076f2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d858      	bhi.n	80077ac <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076fa:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076fe:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8007702:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	60d8      	str	r0, [r3, #12]
 8007708:	2000      	movs	r0, #0
 800770a:	e020      	b.n	800774e <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800770c:	f7fd fdf2 	bl	80052f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8007710:	e7de      	b.n	80076d0 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8007712:	f7fd f8d7 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
        break;
 8007716:	e7db      	b.n	80076d0 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8007718:	481e      	ldr	r0, [pc, #120]	; (8007794 <UART_SetConfig+0x2a4>)
 800771a:	e003      	b.n	8007724 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 800771c:	f7fd fdda 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007720:	2800      	cmp	r0, #0
 8007722:	d047      	beq.n	80077b4 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007724:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007726:	4b19      	ldr	r3, [pc, #100]	; (800778c <UART_SetConfig+0x29c>)
 8007728:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800772c:	fbb0 f0f3 	udiv	r0, r0, r3
 8007730:	6863      	ldr	r3, [r4, #4]
 8007732:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007736:	fbb0 f0f3 	udiv	r0, r0, r3
 800773a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800773c:	f1a0 0210 	sub.w	r2, r0, #16
 8007740:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007744:	429a      	cmp	r2, r3
 8007746:	d837      	bhi.n	80077b8 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	60d8      	str	r0, [r3, #12]
 800774c:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800774e:	2301      	movs	r3, #1
 8007750:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007754:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800775c:	6763      	str	r3, [r4, #116]	; 0x74
}
 800775e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007760:	f7fd fdc8 	bl	80052f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8007764:	e7dc      	b.n	8007720 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8007766:	f7fd f8ad 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
        break;
 800776a:	e7d9      	b.n	8007720 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 800776c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007770:	e7d8      	b.n	8007724 <UART_SetConfig+0x234>
    switch (clocksource)
 8007772:	2001      	movs	r0, #1
 8007774:	e7eb      	b.n	800774e <UART_SetConfig+0x25e>
 8007776:	2000      	movs	r0, #0
 8007778:	e7e9      	b.n	800774e <UART_SetConfig+0x25e>
 800777a:	bf00      	nop
 800777c:	cfff69f3 	.word	0xcfff69f3
 8007780:	40008000 	.word	0x40008000
 8007784:	40013800 	.word	0x40013800
 8007788:	40004400 	.word	0x40004400
 800778c:	0801555c 	.word	0x0801555c
 8007790:	000ffcff 	.word	0x000ffcff
 8007794:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8007798:	2001      	movs	r0, #1
 800779a:	e7d8      	b.n	800774e <UART_SetConfig+0x25e>
 800779c:	2001      	movs	r0, #1
 800779e:	e7d6      	b.n	800774e <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 80077a0:	2001      	movs	r0, #1
 80077a2:	e7d4      	b.n	800774e <UART_SetConfig+0x25e>
    switch (clocksource)
 80077a4:	2001      	movs	r0, #1
 80077a6:	e7d2      	b.n	800774e <UART_SetConfig+0x25e>
 80077a8:	2000      	movs	r0, #0
 80077aa:	e7d0      	b.n	800774e <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80077ac:	2001      	movs	r0, #1
 80077ae:	e7ce      	b.n	800774e <UART_SetConfig+0x25e>
    switch (clocksource)
 80077b0:	2001      	movs	r0, #1
 80077b2:	e7cc      	b.n	800774e <UART_SetConfig+0x25e>
 80077b4:	2000      	movs	r0, #0
 80077b6:	e7ca      	b.n	800774e <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80077b8:	2001      	movs	r0, #1
 80077ba:	e7c8      	b.n	800774e <UART_SetConfig+0x25e>

080077bc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80077be:	f013 0f01 	tst.w	r3, #1
 80077c2:	d006      	beq.n	80077d2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077c4:	6802      	ldr	r2, [r0, #0]
 80077c6:	6853      	ldr	r3, [r2, #4]
 80077c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80077cc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80077ce:	430b      	orrs	r3, r1
 80077d0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80077d4:	f013 0f02 	tst.w	r3, #2
 80077d8:	d006      	beq.n	80077e8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077da:	6802      	ldr	r2, [r0, #0]
 80077dc:	6853      	ldr	r3, [r2, #4]
 80077de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80077e4:	430b      	orrs	r3, r1
 80077e6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80077ea:	f013 0f04 	tst.w	r3, #4
 80077ee:	d006      	beq.n	80077fe <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077f0:	6802      	ldr	r2, [r0, #0]
 80077f2:	6853      	ldr	r3, [r2, #4]
 80077f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077f8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80077fa:	430b      	orrs	r3, r1
 80077fc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007800:	f013 0f08 	tst.w	r3, #8
 8007804:	d006      	beq.n	8007814 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007806:	6802      	ldr	r2, [r0, #0]
 8007808:	6853      	ldr	r3, [r2, #4]
 800780a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800780e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007810:	430b      	orrs	r3, r1
 8007812:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007814:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007816:	f013 0f10 	tst.w	r3, #16
 800781a:	d006      	beq.n	800782a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800781c:	6802      	ldr	r2, [r0, #0]
 800781e:	6893      	ldr	r3, [r2, #8]
 8007820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007824:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007826:	430b      	orrs	r3, r1
 8007828:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800782a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800782c:	f013 0f20 	tst.w	r3, #32
 8007830:	d006      	beq.n	8007840 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007832:	6802      	ldr	r2, [r0, #0]
 8007834:	6893      	ldr	r3, [r2, #8]
 8007836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800783a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800783c:	430b      	orrs	r3, r1
 800783e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007840:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007842:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007846:	d00a      	beq.n	800785e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007848:	6802      	ldr	r2, [r0, #0]
 800784a:	6853      	ldr	r3, [r2, #4]
 800784c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007850:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007852:	430b      	orrs	r3, r1
 8007854:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007856:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800785c:	d00b      	beq.n	8007876 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800785e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007860:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007864:	d006      	beq.n	8007874 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007866:	6802      	ldr	r2, [r0, #0]
 8007868:	6853      	ldr	r3, [r2, #4]
 800786a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800786e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007870:	430b      	orrs	r3, r1
 8007872:	6053      	str	r3, [r2, #4]
}
 8007874:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007876:	6802      	ldr	r2, [r0, #0]
 8007878:	6853      	ldr	r3, [r2, #4]
 800787a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800787e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007880:	430b      	orrs	r3, r1
 8007882:	6053      	str	r3, [r2, #4]
 8007884:	e7eb      	b.n	800785e <UART_AdvFeatureConfig+0xa2>

08007886 <UART_WaitOnFlagUntilTimeout>:
{
 8007886:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800788a:	4605      	mov	r5, r0
 800788c:	460f      	mov	r7, r1
 800788e:	4616      	mov	r6, r2
 8007890:	4699      	mov	r9, r3
 8007892:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007896:	682c      	ldr	r4, [r5, #0]
 8007898:	69e4      	ldr	r4, [r4, #28]
 800789a:	ea37 0304 	bics.w	r3, r7, r4
 800789e:	bf0c      	ite	eq
 80078a0:	f04f 0c01 	moveq.w	ip, #1
 80078a4:	f04f 0c00 	movne.w	ip, #0
 80078a8:	45b4      	cmp	ip, r6
 80078aa:	d157      	bne.n	800795c <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 80078ac:	f1b8 3fff 	cmp.w	r8, #4294967295
 80078b0:	d0f1      	beq.n	8007896 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b2:	f7fa f9b9 	bl	8001c28 <HAL_GetTick>
 80078b6:	eba0 0009 	sub.w	r0, r0, r9
 80078ba:	4540      	cmp	r0, r8
 80078bc:	d82f      	bhi.n	800791e <UART_WaitOnFlagUntilTimeout+0x98>
 80078be:	f1b8 0f00 	cmp.w	r8, #0
 80078c2:	d02c      	beq.n	800791e <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	f012 0f04 	tst.w	r2, #4
 80078cc:	d0e3      	beq.n	8007896 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80078d4:	d0df      	beq.n	8007896 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078da:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078dc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	e852 3f00 	ldrex	r3, [r2]
 80078e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	e842 3100 	strex	r1, r3, [r2]
 80078ea:	2900      	cmp	r1, #0
 80078ec:	d1f6      	bne.n	80078dc <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ee:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	f102 0308 	add.w	r3, r2, #8
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	3208      	adds	r2, #8
 80078fe:	e842 3100 	strex	r1, r3, [r2]
 8007902:	2900      	cmp	r1, #0
 8007904:	d1f3      	bne.n	80078ee <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8007906:	2320      	movs	r3, #32
 8007908:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800790c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007910:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8007914:	2300      	movs	r3, #0
 8007916:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800791a:	2003      	movs	r0, #3
 800791c:	e01f      	b.n	800795e <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800791e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	e852 3f00 	ldrex	r3, [r2]
 8007924:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	e842 3100 	strex	r1, r3, [r2]
 800792c:	2900      	cmp	r1, #0
 800792e:	d1f6      	bne.n	800791e <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007930:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	f102 0308 	add.w	r3, r2, #8
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	3208      	adds	r2, #8
 8007940:	e842 3100 	strex	r1, r3, [r2]
 8007944:	2900      	cmp	r1, #0
 8007946:	d1f3      	bne.n	8007930 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8007948:	2320      	movs	r3, #32
 800794a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800794e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8007952:	2300      	movs	r3, #0
 8007954:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8007958:	2003      	movs	r0, #3
 800795a:	e000      	b.n	800795e <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 800795c:	2000      	movs	r0, #0
}
 800795e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007962 <UART_CheckIdleState>:
{
 8007962:	b530      	push	{r4, r5, lr}
 8007964:	b083      	sub	sp, #12
 8007966:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	2300      	movs	r3, #0
 800796a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800796e:	f7fa f95b 	bl	8001c28 <HAL_GetTick>
 8007972:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007974:	6822      	ldr	r2, [r4, #0]
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	f012 0f08 	tst.w	r2, #8
 800797c:	d10f      	bne.n	800799e <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f013 0f04 	tst.w	r3, #4
 8007986:	d118      	bne.n	80079ba <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8007988:	2320      	movs	r3, #32
 800798a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800798e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007992:	2000      	movs	r0, #0
 8007994:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8007996:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800799a:	b003      	add	sp, #12
 800799c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800799e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	4603      	mov	r3, r0
 80079a6:	2200      	movs	r2, #0
 80079a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7ff ff6a 	bl	8007886 <UART_WaitOnFlagUntilTimeout>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0e3      	beq.n	800797e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80079b6:	2003      	movs	r0, #3
 80079b8:	e7ef      	b.n	800799a <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	462b      	mov	r3, r5
 80079c2:	2200      	movs	r2, #0
 80079c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079c8:	4620      	mov	r0, r4
 80079ca:	f7ff ff5c 	bl	8007886 <UART_WaitOnFlagUntilTimeout>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d0da      	beq.n	8007988 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80079d2:	2003      	movs	r0, #3
 80079d4:	e7e1      	b.n	800799a <UART_CheckIdleState+0x38>

080079d6 <HAL_UART_Init>:
  if (huart == NULL)
 80079d6:	b378      	cbz	r0, 8007a38 <HAL_UART_Init+0x62>
{
 80079d8:	b510      	push	{r4, lr}
 80079da:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80079dc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80079e0:	b30b      	cbz	r3, 8007a26 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80079e2:	2324      	movs	r3, #36	; 0x24
 80079e4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80079e8:	6822      	ldr	r2, [r4, #0]
 80079ea:	6813      	ldr	r3, [r2, #0]
 80079ec:	f023 0301 	bic.w	r3, r3, #1
 80079f0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079f2:	4620      	mov	r0, r4
 80079f4:	f7ff fd7c 	bl	80074f0 <UART_SetConfig>
 80079f8:	2801      	cmp	r0, #1
 80079fa:	d013      	beq.n	8007a24 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80079fe:	b9bb      	cbnz	r3, 8007a30 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	6853      	ldr	r3, [r2, #4]
 8007a04:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007a08:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a0a:	6822      	ldr	r2, [r4, #0]
 8007a0c:	6893      	ldr	r3, [r2, #8]
 8007a0e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007a12:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	6813      	ldr	r3, [r2, #0]
 8007a18:	f043 0301 	orr.w	r3, r3, #1
 8007a1c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f7ff ff9f 	bl	8007962 <UART_CheckIdleState>
}
 8007a24:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007a26:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007a2a:	f7fa fb95 	bl	8002158 <HAL_UART_MspInit>
 8007a2e:	e7d8      	b.n	80079e2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007a30:	4620      	mov	r0, r4
 8007a32:	f7ff fec3 	bl	80077bc <UART_AdvFeatureConfig>
 8007a36:	e7e3      	b.n	8007a00 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8007a38:	2001      	movs	r0, #1
}
 8007a3a:	4770      	bx	lr

08007a3c <UART_Start_Receive_IT>:
{
 8007a3c:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8007a3e:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007a40:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007a44:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8007a4c:	6883      	ldr	r3, [r0, #8]
 8007a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a52:	d006      	beq.n	8007a62 <UART_Start_Receive_IT+0x26>
 8007a54:	b9a3      	cbnz	r3, 8007a80 <UART_Start_Receive_IT+0x44>
 8007a56:	6903      	ldr	r3, [r0, #16]
 8007a58:	b973      	cbnz	r3, 8007a78 <UART_Start_Receive_IT+0x3c>
 8007a5a:	23ff      	movs	r3, #255	; 0xff
 8007a5c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007a60:	e014      	b.n	8007a8c <UART_Start_Receive_IT+0x50>
 8007a62:	6903      	ldr	r3, [r0, #16]
 8007a64:	b923      	cbnz	r3, 8007a70 <UART_Start_Receive_IT+0x34>
 8007a66:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007a6a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007a6e:	e00d      	b.n	8007a8c <UART_Start_Receive_IT+0x50>
 8007a70:	23ff      	movs	r3, #255	; 0xff
 8007a72:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007a76:	e009      	b.n	8007a8c <UART_Start_Receive_IT+0x50>
 8007a78:	237f      	movs	r3, #127	; 0x7f
 8007a7a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007a7e:	e005      	b.n	8007a8c <UART_Start_Receive_IT+0x50>
 8007a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a84:	d030      	beq.n	8007ae8 <UART_Start_Receive_IT+0xac>
 8007a86:	2300      	movs	r3, #0
 8007a88:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a92:	2322      	movs	r3, #34	; 0x22
 8007a94:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a98:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	f101 0308 	add.w	r3, r1, #8
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	3108      	adds	r1, #8
 8007aa8:	e841 3400 	strex	r4, r3, [r1]
 8007aac:	2c00      	cmp	r4, #0
 8007aae:	d1f3      	bne.n	8007a98 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ab0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ab6:	d021      	beq.n	8007afc <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ab8:	6883      	ldr	r3, [r0, #8]
 8007aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007abe:	d048      	beq.n	8007b52 <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 8007ac0:	4b2c      	ldr	r3, [pc, #176]	; (8007b74 <UART_Start_Receive_IT+0x138>)
 8007ac2:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007aca:	6903      	ldr	r3, [r0, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d046      	beq.n	8007b5e <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ad0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	e852 3f00 	ldrex	r3, [r2]
 8007ad6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	e842 3100 	strex	r1, r3, [r2]
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	d1f6      	bne.n	8007ad0 <UART_Start_Receive_IT+0x94>
}
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	bc10      	pop	{r4}
 8007ae6:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8007ae8:	6903      	ldr	r3, [r0, #16]
 8007aea:	b91b      	cbnz	r3, 8007af4 <UART_Start_Receive_IT+0xb8>
 8007aec:	237f      	movs	r3, #127	; 0x7f
 8007aee:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007af2:	e7cb      	b.n	8007a8c <UART_Start_Receive_IT+0x50>
 8007af4:	233f      	movs	r3, #63	; 0x3f
 8007af6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007afa:	e7c7      	b.n	8007a8c <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007afc:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d8d9      	bhi.n	8007ab8 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b04:	6883      	ldr	r3, [r0, #8]
 8007b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0a:	d01c      	beq.n	8007b46 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <UART_Start_Receive_IT+0x13c>)
 8007b0e:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8007b10:	2300      	movs	r3, #0
 8007b12:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b16:	6903      	ldr	r3, [r0, #16]
 8007b18:	b143      	cbz	r3, 8007b2c <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b1a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	e852 3f00 	ldrex	r3, [r2]
 8007b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	e842 3100 	strex	r1, r3, [r2]
 8007b28:	2900      	cmp	r1, #0
 8007b2a:	d1f6      	bne.n	8007b1a <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b2c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	f102 0308 	add.w	r3, r2, #8
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	3208      	adds	r2, #8
 8007b3c:	e842 3100 	strex	r1, r3, [r2]
 8007b40:	2900      	cmp	r1, #0
 8007b42:	d1f3      	bne.n	8007b2c <UART_Start_Receive_IT+0xf0>
 8007b44:	e7cd      	b.n	8007ae2 <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b46:	6903      	ldr	r3, [r0, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1df      	bne.n	8007b0c <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b4c:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <UART_Start_Receive_IT+0x140>)
 8007b4e:	6703      	str	r3, [r0, #112]	; 0x70
 8007b50:	e7de      	b.n	8007b10 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b52:	6903      	ldr	r3, [r0, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1b3      	bne.n	8007ac0 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8007b58:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <UART_Start_Receive_IT+0x144>)
 8007b5a:	6703      	str	r3, [r0, #112]	; 0x70
 8007b5c:	e7b2      	b.n	8007ac4 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	e852 3f00 	ldrex	r3, [r2]
 8007b64:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	e842 3100 	strex	r1, r3, [r2]
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d1f6      	bne.n	8007b5e <UART_Start_Receive_IT+0x122>
 8007b70:	e7b7      	b.n	8007ae2 <UART_Start_Receive_IT+0xa6>
 8007b72:	bf00      	nop
 8007b74:	0800704d 	.word	0x0800704d
 8007b78:	080071b1 	.word	0x080071b1
 8007b7c:	08007351 	.word	0x08007351
 8007b80:	080070ff 	.word	0x080070ff

08007b84 <HAL_UART_Receive_IT>:
{
 8007b84:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b86:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d11e      	bne.n	8007bcc <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8007b8e:	b1f9      	cbz	r1, 8007bd0 <HAL_UART_Receive_IT+0x4c>
 8007b90:	b302      	cbz	r2, 8007bd4 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8007b92:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d01e      	beq.n	8007bd8 <HAL_UART_Receive_IT+0x54>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ba4:	6803      	ldr	r3, [r0, #0]
 8007ba6:	4c0d      	ldr	r4, [pc, #52]	; (8007bdc <HAL_UART_Receive_IT+0x58>)
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d00c      	beq.n	8007bc6 <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007bb2:	d008      	beq.n	8007bc6 <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bb4:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	e854 3f00 	ldrex	r3, [r4]
 8007bba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	e844 3500 	strex	r5, r3, [r4]
 8007bc2:	2d00      	cmp	r5, #0
 8007bc4:	d1f6      	bne.n	8007bb4 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8007bc6:	f7ff ff39 	bl	8007a3c <UART_Start_Receive_IT>
 8007bca:	e000      	b.n	8007bce <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8007bcc:	2002      	movs	r0, #2
}
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	e7fc      	b.n	8007bce <HAL_UART_Receive_IT+0x4a>
 8007bd4:	2001      	movs	r0, #1
 8007bd6:	e7fa      	b.n	8007bce <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8007bd8:	2002      	movs	r0, #2
 8007bda:	e7f8      	b.n	8007bce <HAL_UART_Receive_IT+0x4a>
 8007bdc:	40008000 	.word	0x40008000

08007be0 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007be0:	b082      	sub	sp, #8
 8007be2:	ab02      	add	r3, sp, #8
 8007be4:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007be8:	6802      	ldr	r2, [r0, #0]
 8007bea:	6853      	ldr	r3, [r2, #4]
 8007bec:	f023 0310 	bic.w	r3, r3, #16
 8007bf0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007bf8:	6802      	ldr	r2, [r0, #0]
 8007bfa:	6853      	ldr	r3, [r2, #4]
 8007bfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c00:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007c04:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007c08:	6053      	str	r3, [r2, #4]
}
 8007c0a:	b002      	add	sp, #8
 8007c0c:	4770      	bx	lr
	...

08007c10 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c10:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007c12:	b92b      	cbnz	r3, 8007c20 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007c14:	2301      	movs	r3, #1
 8007c16:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c1a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8007c1e:	4770      	bx	lr
{
 8007c20:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c22:	6803      	ldr	r3, [r0, #0]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c2a:	6899      	ldr	r1, [r3, #8]
 8007c2c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c2e:	4d09      	ldr	r5, [pc, #36]	; (8007c54 <UARTEx_SetNbDataToProcess+0x44>)
 8007c30:	5c6b      	ldrb	r3, [r5, r1]
 8007c32:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c34:	4c08      	ldr	r4, [pc, #32]	; (8007c58 <UARTEx_SetNbDataToProcess+0x48>)
 8007c36:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c38:	fb93 f3f1 	sdiv	r3, r3, r1
 8007c3c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c40:	5cab      	ldrb	r3, [r5, r2]
 8007c42:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c44:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c4a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8007c4e:	bc30      	pop	{r4, r5}
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	0801557c 	.word	0x0801557c
 8007c58:	08015574 	.word	0x08015574

08007c5c <HAL_UARTEx_WakeupCallback>:
}
 8007c5c:	4770      	bx	lr

08007c5e <HAL_UARTEx_RxFifoFullCallback>:
}
 8007c5e:	4770      	bx	lr

08007c60 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8007c60:	4770      	bx	lr

08007c62 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8007c62:	b510      	push	{r4, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	ab04      	add	r3, sp, #16
 8007c68:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8007c6c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d035      	beq.n	8007ce0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8007c74:	4604      	mov	r4, r0
 8007c76:	2301      	movs	r3, #1
 8007c78:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007c7c:	2324      	movs	r3, #36	; 0x24
 8007c7e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007c82:	6802      	ldr	r2, [r0, #0]
 8007c84:	6813      	ldr	r3, [r2, #0]
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007c8c:	6801      	ldr	r1, [r0, #0]
 8007c8e:	688b      	ldr	r3, [r1, #8]
 8007c90:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007c94:	9a02      	ldr	r2, [sp, #8]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007c9a:	b1aa      	cbz	r2, 8007cc8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8007c9c:	6822      	ldr	r2, [r4, #0]
 8007c9e:	6813      	ldr	r3, [r2, #0]
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8007ca6:	f7f9 ffbf 	bl	8001c28 <HAL_GetTick>
 8007caa:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cac:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8007cb0:	9200      	str	r2, [sp, #0]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f7ff fde4 	bl	8007886 <UART_WaitOnFlagUntilTimeout>
 8007cbe:	b948      	cbnz	r0, 8007cd4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8007cc0:	2320      	movs	r3, #32
 8007cc2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007cc6:	e006      	b.n	8007cd6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007cc8:	ab04      	add	r3, sp, #16
 8007cca:	e913 0006 	ldmdb	r3, {r1, r2}
 8007cce:	f7ff ff87 	bl	8007be0 <UARTEx_Wakeup_AddressConfig>
 8007cd2:	e7e3      	b.n	8007c9c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8007cd4:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8007cdc:	b004      	add	sp, #16
 8007cde:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007ce0:	2002      	movs	r0, #2
 8007ce2:	e7fb      	b.n	8007cdc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08007ce4 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8007ce4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d010      	beq.n	8007d0e <HAL_UARTEx_EnableStopMode+0x2a>
 8007cec:	2301      	movs	r3, #1
 8007cee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007cf2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	e852 3f00 	ldrex	r3, [r2]
 8007cf8:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	e842 3100 	strex	r1, r3, [r2]
 8007d00:	2900      	cmp	r1, #0
 8007d02:	d1f6      	bne.n	8007cf2 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8007d04:	2300      	movs	r3, #0
 8007d06:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007d0e:	2002      	movs	r0, #2
}
 8007d10:	4770      	bx	lr

08007d12 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8007d12:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d01d      	beq.n	8007d56 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8007d1a:	b510      	push	{r4, lr}
 8007d1c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007d24:	2324      	movs	r3, #36	; 0x24
 8007d26:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d2a:	6802      	ldr	r2, [r0, #0]
 8007d2c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007d2e:	6811      	ldr	r1, [r2, #0]
 8007d30:	f021 0101 	bic.w	r1, r1, #1
 8007d34:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007d3a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007d3e:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d40:	6802      	ldr	r2, [r0, #0]
 8007d42:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8007d44:	f7ff ff64 	bl	8007c10 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8007d48:	2320      	movs	r3, #32
 8007d4a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007d54:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007d56:	2002      	movs	r0, #2
}
 8007d58:	4770      	bx	lr

08007d5a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007d5a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007d5c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d01d      	beq.n	8007da0 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007d64:	4604      	mov	r4, r0
 8007d66:	2301      	movs	r3, #1
 8007d68:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007d6c:	2324      	movs	r3, #36	; 0x24
 8007d6e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d72:	6803      	ldr	r3, [r0, #0]
 8007d74:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	f022 0201 	bic.w	r2, r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d7e:	6802      	ldr	r2, [r0, #0]
 8007d80:	6893      	ldr	r3, [r2, #8]
 8007d82:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007d86:	4319      	orrs	r1, r3
 8007d88:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007d8a:	f7ff ff41 	bl	8007c10 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007d92:	2320      	movs	r3, #32
 8007d94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007d98:	2000      	movs	r0, #0
 8007d9a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007da0:	2002      	movs	r0, #2
 8007da2:	e7fc      	b.n	8007d9e <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007da4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007da4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007da6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d01d      	beq.n	8007dea <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007dae:	4604      	mov	r4, r0
 8007db0:	2301      	movs	r3, #1
 8007db2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007db6:	2324      	movs	r3, #36	; 0x24
 8007db8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dbc:	6803      	ldr	r3, [r0, #0]
 8007dbe:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	f022 0201 	bic.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007dc8:	6802      	ldr	r2, [r0, #0]
 8007dca:	6893      	ldr	r3, [r2, #8]
 8007dcc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8007dd0:	4319      	orrs	r1, r3
 8007dd2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007dd4:	f7ff ff1c 	bl	8007c10 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007ddc:	2320      	movs	r3, #32
 8007dde:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007de2:	2000      	movs	r0, #0
 8007de4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007de8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007dea:	2002      	movs	r0, #2
 8007dec:	e7fc      	b.n	8007de8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08007df0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007df0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007df4:	b97b      	cbnz	r3, 8007e16 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007df6:	f3ef 8310 	mrs	r3, PRIMASK
 8007dfa:	b913      	cbnz	r3, 8007e02 <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007dfc:	f3ef 8311 	mrs	r3, BASEPRI
 8007e00:	b11b      	cbz	r3, 8007e0a <osKernelInitialize+0x1a>
 8007e02:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <osKernelInitialize+0x38>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d008      	beq.n	8007e1c <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e0a:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <osKernelInitialize+0x38>)
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	b940      	cbnz	r0, 8007e22 <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007e10:	2201      	movs	r2, #1
 8007e12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e14:	4770      	bx	lr
    stat = osErrorISR;
 8007e16:	f06f 0005 	mvn.w	r0, #5
 8007e1a:	4770      	bx	lr
 8007e1c:	f06f 0005 	mvn.w	r0, #5
 8007e20:	4770      	bx	lr
    } else {
      stat = osError;
 8007e22:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8007e26:	4770      	bx	lr
 8007e28:	2000083c 	.word	0x2000083c

08007e2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e2c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e2e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e32:	b9a3      	cbnz	r3, 8007e5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e34:	f3ef 8310 	mrs	r3, PRIMASK
 8007e38:	b913      	cbnz	r3, 8007e40 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e3e:	b11b      	cbz	r3, 8007e48 <osKernelStart+0x1c>
 8007e40:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <osKernelStart+0x44>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d00d      	beq.n	8007e64 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8007e48:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <osKernelStart+0x44>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d10c      	bne.n	8007e6a <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e50:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <osKernelStart+0x44>)
 8007e52:	2202      	movs	r2, #2
 8007e54:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e56:	f001 fa09 	bl	800926c <vTaskStartScheduler>
      stat = osOK;
 8007e5a:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8007e5c:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8007e5e:	f06f 0005 	mvn.w	r0, #5
 8007e62:	e7fb      	b.n	8007e5c <osKernelStart+0x30>
 8007e64:	f06f 0005 	mvn.w	r0, #5
 8007e68:	e7f8      	b.n	8007e5c <osKernelStart+0x30>
      stat = osError;
 8007e6a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8007e6e:	e7f5      	b.n	8007e5c <osKernelStart+0x30>
 8007e70:	2000083c 	.word	0x2000083c

08007e74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e76:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e78:	2400      	movs	r4, #0
 8007e7a:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e7c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8007e80:	2c00      	cmp	r4, #0
 8007e82:	d138      	bne.n	8007ef6 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e84:	f3ef 8310 	mrs	r3, PRIMASK
 8007e88:	b913      	cbnz	r3, 8007e90 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e8e:	b11b      	cbz	r3, 8007e98 <osThreadNew+0x24>
 8007e90:	4b2d      	ldr	r3, [pc, #180]	; (8007f48 <osThreadNew+0xd4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d02e      	beq.n	8007ef6 <osThreadNew+0x82>
 8007e98:	b368      	cbz	r0, 8007ef6 <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8007e9a:	b322      	cbz	r2, 8007ee6 <osThreadNew+0x72>
      if (attr->name != NULL) {
 8007e9c:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007e9e:	6993      	ldr	r3, [r2, #24]
 8007ea0:	b903      	cbnz	r3, 8007ea4 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 8007ea2:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ea4:	1e5c      	subs	r4, r3, #1
 8007ea6:	2c37      	cmp	r4, #55	; 0x37
 8007ea8:	d849      	bhi.n	8007f3e <osThreadNew+0xca>
 8007eaa:	6854      	ldr	r4, [r2, #4]
 8007eac:	f014 0f01 	tst.w	r4, #1
 8007eb0:	d147      	bne.n	8007f42 <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007eb2:	6956      	ldr	r6, [r2, #20]
 8007eb4:	b16e      	cbz	r6, 8007ed2 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007eb6:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007eba:	6894      	ldr	r4, [r2, #8]
 8007ebc:	b12c      	cbz	r4, 8007eca <osThreadNew+0x56>
 8007ebe:	68d7      	ldr	r7, [r2, #12]
 8007ec0:	2f5b      	cmp	r7, #91	; 0x5b
 8007ec2:	d902      	bls.n	8007eca <osThreadNew+0x56>
 8007ec4:	6917      	ldr	r7, [r2, #16]
 8007ec6:	b107      	cbz	r7, 8007eca <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ec8:	b9c6      	cbnz	r6, 8007efc <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007eca:	b12c      	cbz	r4, 8007ed8 <osThreadNew+0x64>
    mem  = -1;
 8007ecc:	f04f 34ff 	mov.w	r4, #4294967295
 8007ed0:	e00e      	b.n	8007ef0 <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 8007ed2:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8007ed6:	e7f0      	b.n	8007eba <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ed8:	68d4      	ldr	r4, [r2, #12]
 8007eda:	b98c      	cbnz	r4, 8007f00 <osThreadNew+0x8c>
 8007edc:	6914      	ldr	r4, [r2, #16]
 8007ede:	b194      	cbz	r4, 8007f06 <osThreadNew+0x92>
    mem  = -1;
 8007ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8007ee4:	e004      	b.n	8007ef0 <osThreadNew+0x7c>
    name = NULL;
 8007ee6:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8007ee8:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8007eea:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8007eec:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8007ef0:	2c01      	cmp	r4, #1
 8007ef2:	d00a      	beq.n	8007f0a <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8007ef4:	b1ac      	cbz	r4, 8007f22 <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ef6:	9805      	ldr	r0, [sp, #20]
}
 8007ef8:	b007      	add	sp, #28
 8007efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8007efc:	2401      	movs	r4, #1
 8007efe:	e7f7      	b.n	8007ef0 <osThreadNew+0x7c>
    mem  = -1;
 8007f00:	f04f 34ff 	mov.w	r4, #4294967295
 8007f04:	e7f4      	b.n	8007ef0 <osThreadNew+0x7c>
          mem = 0;
 8007f06:	2400      	movs	r4, #0
 8007f08:	e7f2      	b.n	8007ef0 <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f0a:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007f0c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f0e:	9202      	str	r2, [sp, #8]
 8007f10:	9401      	str	r4, [sp, #4]
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	460b      	mov	r3, r1
 8007f16:	4662      	mov	r2, ip
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f001 f937 	bl	800918c <xTaskCreateStatic>
 8007f1e:	9005      	str	r0, [sp, #20]
 8007f20:	e7e9      	b.n	8007ef6 <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f22:	aa05      	add	r2, sp, #20
 8007f24:	9201      	str	r2, [sp, #4]
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	fa1f f28c 	uxth.w	r2, ip
 8007f2e:	4629      	mov	r1, r5
 8007f30:	f001 f967 	bl	8009202 <xTaskCreate>
 8007f34:	2801      	cmp	r0, #1
 8007f36:	d0de      	beq.n	8007ef6 <osThreadNew+0x82>
          hTask = NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9305      	str	r3, [sp, #20]
 8007f3c:	e7db      	b.n	8007ef6 <osThreadNew+0x82>
        return (NULL);
 8007f3e:	2000      	movs	r0, #0
 8007f40:	e7da      	b.n	8007ef8 <osThreadNew+0x84>
 8007f42:	2000      	movs	r0, #0
 8007f44:	e7d8      	b.n	8007ef8 <osThreadNew+0x84>
 8007f46:	bf00      	nop
 8007f48:	2000083c 	.word	0x2000083c

08007f4c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007f4c:	b530      	push	{r4, r5, lr}
 8007f4e:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007f50:	b1f0      	cbz	r0, 8007f90 <osThreadFlagsSet+0x44>
 8007f52:	4604      	mov	r4, r0
 8007f54:	2900      	cmp	r1, #0
 8007f56:	db1b      	blt.n	8007f90 <osThreadFlagsSet+0x44>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 8007f58:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5c:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f5e:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 8007f62:	b9db      	cbnz	r3, 8007f9c <osThreadFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f64:	f3ef 8310 	mrs	r3, PRIMASK
 8007f68:	b913      	cbnz	r3, 8007f70 <osThreadFlagsSet+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f6a:	f3ef 8311 	mrs	r3, BASEPRI
 8007f6e:	b11b      	cbz	r3, 8007f78 <osThreadFlagsSet+0x2c>
 8007f70:	4b19      	ldr	r3, [pc, #100]	; (8007fd8 <osThreadFlagsSet+0x8c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d011      	beq.n	8007f9c <osThreadFlagsSet+0x50>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);

      portYIELD_FROM_ISR (yield);
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007f78:	2300      	movs	r3, #0
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f001 fd07 	bl	8009990 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8007f82:	ab03      	add	r3, sp, #12
 8007f84:	2200      	movs	r2, #0
 8007f86:	4611      	mov	r1, r2
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f001 fd01 	bl	8009990 <xTaskGenericNotify>
 8007f8e:	e002      	b.n	8007f96 <osThreadFlagsSet+0x4a>
    rflags = (uint32_t)osErrorParameter;
 8007f90:	f06f 0303 	mvn.w	r3, #3
 8007f94:	9303      	str	r3, [sp, #12]
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 8007f96:	9803      	ldr	r0, [sp, #12]
 8007f98:	b005      	add	sp, #20
 8007f9a:	bd30      	pop	{r4, r5, pc}
      yield = pdFALSE;
 8007f9c:	2500      	movs	r5, #0
 8007f9e:	9502      	str	r5, [sp, #8]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007fa0:	ab02      	add	r3, sp, #8
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 fd73 	bl	8009a94 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8007fae:	9500      	str	r5, [sp, #0]
 8007fb0:	ab03      	add	r3, sp, #12
 8007fb2:	462a      	mov	r2, r5
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f001 fd6c 	bl	8009a94 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 8007fbc:	9b02      	ldr	r3, [sp, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0e9      	beq.n	8007f96 <osThreadFlagsSet+0x4a>
 8007fc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	e7de      	b.n	8007f96 <osThreadFlagsSet+0x4a>
 8007fd8:	2000083c 	.word	0x2000083c

08007fdc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fe2:	f3ef 8305 	mrs	r3, IPSR
 8007fe6:	9301      	str	r3, [sp, #4]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d14c      	bne.n	8008086 <osThreadFlagsWait+0xaa>
 8007fec:	4681      	mov	r9, r0
 8007fee:	468a      	mov	sl, r1
 8007ff0:	4617      	mov	r7, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff6:	b913      	cbnz	r3, 8007ffe <osThreadFlagsWait+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ff8:	f3ef 8311 	mrs	r3, BASEPRI
 8007ffc:	b11b      	cbz	r3, 8008006 <osThreadFlagsWait+0x2a>
 8007ffe:	4b29      	ldr	r3, [pc, #164]	; (80080a4 <osThreadFlagsWait+0xc8>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d045      	beq.n	8008092 <osThreadFlagsWait+0xb6>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008006:	f1b9 0f00 	cmp.w	r9, #0
 800800a:	db45      	blt.n	8008098 <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800800c:	f01a 0f02 	tst.w	sl, #2
 8008010:	d007      	beq.n	8008022 <osThreadFlagsWait+0x46>
      clear = 0U;
 8008012:	f8dd 8004 	ldr.w	r8, [sp, #4]
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8008016:	f001 f97f 	bl	8009318 <xTaskGetTickCount>
 800801a:	4683      	mov	fp, r0
    tout   = timeout;
 800801c:	463e      	mov	r6, r7
    rflags = 0U;
 800801e:	9d01      	ldr	r5, [sp, #4]
 8008020:	e023      	b.n	800806a <osThreadFlagsWait+0x8e>
      clear = flags;
 8008022:	46c8      	mov	r8, r9
 8008024:	e7f7      	b.n	8008016 <osThreadFlagsWait+0x3a>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 8008026:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 800802a:	9b03      	ldr	r3, [sp, #12]
 800802c:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800802e:	f01a 0f01 	tst.w	sl, #1
 8008032:	d00d      	beq.n	8008050 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8008034:	ea39 0305 	bics.w	r3, r9, r5
 8008038:	d027      	beq.n	800808a <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 800803a:	b387      	cbz	r7, 800809e <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800803c:	f001 f96c 	bl	8009318 <xTaskGetTickCount>
 8008040:	eba0 030b 	sub.w	r3, r0, fp

        if (td > tout) {
 8008044:	429e      	cmp	r6, r3
 8008046:	d30b      	bcc.n	8008060 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8008048:	ebab 0000 	sub.w	r0, fp, r0
 800804c:	4406      	add	r6, r0
 800804e:	e00b      	b.n	8008068 <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8008050:	ea19 0f05 	tst.w	r9, r5
 8008054:	d119      	bne.n	800808a <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 8008056:	2f00      	cmp	r7, #0
 8008058:	d1f0      	bne.n	800803c <osThreadFlagsWait+0x60>
              rflags = (uint32_t)osErrorResource;
 800805a:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 800805e:	e014      	b.n	800808a <osThreadFlagsWait+0xae>
          tout  = 0;
 8008060:	9e01      	ldr	r6, [sp, #4]
 8008062:	e001      	b.n	8008068 <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8008064:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 8008068:	b17c      	cbz	r4, 800808a <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800806a:	4633      	mov	r3, r6
 800806c:	aa03      	add	r2, sp, #12
 800806e:	4641      	mov	r1, r8
 8008070:	2000      	movs	r0, #0
 8008072:	f001 fc41 	bl	80098f8 <xTaskNotifyWait>
 8008076:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 8008078:	2801      	cmp	r0, #1
 800807a:	d0d4      	beq.n	8008026 <osThreadFlagsWait+0x4a>
        if (timeout == 0) {
 800807c:	2f00      	cmp	r7, #0
 800807e:	d1f1      	bne.n	8008064 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 8008080:	f06f 0502 	mvn.w	r5, #2
 8008084:	e7f0      	b.n	8008068 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 8008086:	f06f 0505 	mvn.w	r5, #5
}
 800808a:	4628      	mov	r0, r5
 800808c:	b005      	add	sp, #20
 800808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 8008092:	f06f 0505 	mvn.w	r5, #5
 8008096:	e7f8      	b.n	800808a <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 8008098:	f06f 0503 	mvn.w	r5, #3
 800809c:	e7f5      	b.n	800808a <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 800809e:	f06f 0502 	mvn.w	r5, #2
 80080a2:	e7f2      	b.n	800808a <osThreadFlagsWait+0xae>
 80080a4:	2000083c 	.word	0x2000083c

080080a8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080a8:	4b03      	ldr	r3, [pc, #12]	; (80080b8 <vApplicationGetIdleTaskMemory+0x10>)
 80080aa:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080ac:	4b03      	ldr	r3, [pc, #12]	; (80080bc <vApplicationGetIdleTaskMemory+0x14>)
 80080ae:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80080b0:	2380      	movs	r3, #128	; 0x80
 80080b2:	6013      	str	r3, [r2, #0]
}
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	200007e0 	.word	0x200007e0
 80080bc:	200005e0 	.word	0x200005e0

080080c0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80080c0:	4b03      	ldr	r3, [pc, #12]	; (80080d0 <vApplicationGetTimerTaskMemory+0x10>)
 80080c2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80080c4:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <vApplicationGetTimerTaskMemory+0x14>)
 80080c6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080cc:	6013      	str	r3, [r2, #0]
}
 80080ce:	4770      	bx	lr
 80080d0:	20000c40 	.word	0x20000c40
 80080d4:	20000840 	.word	0x20000840

080080d8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080d8:	4a12      	ldr	r2, [pc, #72]	; (8008124 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080da:	f012 0f07 	tst.w	r2, #7
 80080de:	d01e      	beq.n	800811e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080e0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080e2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080e6:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 80080ea:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080ec:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080ee:	480e      	ldr	r0, [pc, #56]	; (8008128 <prvHeapInit+0x50>)
 80080f0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080f2:	2100      	movs	r1, #0
 80080f4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080f6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80080f8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080fa:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80080fe:	480b      	ldr	r0, [pc, #44]	; (800812c <prvHeapInit+0x54>)
 8008100:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8008102:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008104:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008106:	1a99      	subs	r1, r3, r2
 8008108:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800810a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800810c:	4b08      	ldr	r3, [pc, #32]	; (8008130 <prvHeapInit+0x58>)
 800810e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008110:	4b08      	ldr	r3, [pc, #32]	; (8008134 <prvHeapInit+0x5c>)
 8008112:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008114:	4b08      	ldr	r3, [pc, #32]	; (8008138 <prvHeapInit+0x60>)
 8008116:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800811a:	601a      	str	r2, [r3, #0]
}
 800811c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800811e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008122:	e7e4      	b.n	80080ee <prvHeapInit+0x16>
 8008124:	20000ca0 	.word	0x20000ca0
 8008128:	20002cac 	.word	0x20002cac
 800812c:	20000c9c 	.word	0x20000c9c
 8008130:	20002ca8 	.word	0x20002ca8
 8008134:	20002ca4 	.word	0x20002ca4
 8008138:	20002ca0 	.word	0x20002ca0

0800813c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800813c:	4b15      	ldr	r3, [pc, #84]	; (8008194 <prvInsertBlockIntoFreeList+0x58>)
 800813e:	461a      	mov	r2, r3
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4283      	cmp	r3, r0
 8008144:	d3fb      	bcc.n	800813e <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008146:	6851      	ldr	r1, [r2, #4]
 8008148:	eb02 0c01 	add.w	ip, r2, r1
 800814c:	4584      	cmp	ip, r0
 800814e:	d009      	beq.n	8008164 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008150:	6841      	ldr	r1, [r0, #4]
 8008152:	eb00 0c01 	add.w	ip, r0, r1
 8008156:	4563      	cmp	r3, ip
 8008158:	d009      	beq.n	800816e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800815a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800815c:	4290      	cmp	r0, r2
 800815e:	d018      	beq.n	8008192 <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008160:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8008162:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008164:	6840      	ldr	r0, [r0, #4]
 8008166:	4401      	add	r1, r0
 8008168:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800816a:	4610      	mov	r0, r2
 800816c:	e7f0      	b.n	8008150 <prvInsertBlockIntoFreeList+0x14>
{
 800816e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008170:	4c09      	ldr	r4, [pc, #36]	; (8008198 <prvInsertBlockIntoFreeList+0x5c>)
 8008172:	6824      	ldr	r4, [r4, #0]
 8008174:	42a3      	cmp	r3, r4
 8008176:	d00a      	beq.n	800818e <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	4419      	add	r1, r3
 800817c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800817e:	6813      	ldr	r3, [r2, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8008184:	4290      	cmp	r0, r2
 8008186:	d000      	beq.n	800818a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008188:	6010      	str	r0, [r2, #0]
	}
}
 800818a:	bc10      	pop	{r4}
 800818c:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800818e:	6004      	str	r4, [r0, #0]
 8008190:	e7f8      	b.n	8008184 <prvInsertBlockIntoFreeList+0x48>
 8008192:	4770      	bx	lr
 8008194:	20002cac 	.word	0x20002cac
 8008198:	20000c9c 	.word	0x20000c9c

0800819c <pvPortMalloc>:
{
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80081a0:	f001 f8b2 	bl	8009308 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80081a4:	4b34      	ldr	r3, [pc, #208]	; (8008278 <pvPortMalloc+0xdc>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	b1a3      	cbz	r3, 80081d4 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081aa:	4b34      	ldr	r3, [pc, #208]	; (800827c <pvPortMalloc+0xe0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	421d      	tst	r5, r3
 80081b0:	d14a      	bne.n	8008248 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 80081b2:	b135      	cbz	r5, 80081c2 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80081b4:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081b6:	f015 0f07 	tst.w	r5, #7
 80081ba:	d002      	beq.n	80081c2 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081bc:	f025 0507 	bic.w	r5, r5, #7
 80081c0:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081c2:	2d00      	cmp	r5, #0
 80081c4:	d042      	beq.n	800824c <pvPortMalloc+0xb0>
 80081c6:	4b2e      	ldr	r3, [pc, #184]	; (8008280 <pvPortMalloc+0xe4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	42ab      	cmp	r3, r5
 80081cc:	d34d      	bcc.n	800826a <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 80081ce:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <pvPortMalloc+0xe8>)
 80081d0:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081d2:	e004      	b.n	80081de <pvPortMalloc+0x42>
			prvHeapInit();
 80081d4:	f7ff ff80 	bl	80080d8 <prvHeapInit>
 80081d8:	e7e7      	b.n	80081aa <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80081da:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80081dc:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081de:	6863      	ldr	r3, [r4, #4]
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	d202      	bcs.n	80081ea <pvPortMalloc+0x4e>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1f7      	bne.n	80081da <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80081ea:	4b23      	ldr	r3, [pc, #140]	; (8008278 <pvPortMalloc+0xdc>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	42a3      	cmp	r3, r4
 80081f0:	d03d      	beq.n	800826e <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081f2:	6816      	ldr	r6, [r2, #0]
 80081f4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081fa:	6863      	ldr	r3, [r4, #4]
 80081fc:	1b5b      	subs	r3, r3, r5
 80081fe:	2b10      	cmp	r3, #16
 8008200:	d910      	bls.n	8008224 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008202:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008204:	f010 0f07 	tst.w	r0, #7
 8008208:	d008      	beq.n	800821c <pvPortMalloc+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	e7fe      	b.n	800821a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800821c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800821e:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008220:	f7ff ff8c 	bl	800813c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008224:	6862      	ldr	r2, [r4, #4]
 8008226:	4916      	ldr	r1, [pc, #88]	; (8008280 <pvPortMalloc+0xe4>)
 8008228:	680b      	ldr	r3, [r1, #0]
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800822e:	4916      	ldr	r1, [pc, #88]	; (8008288 <pvPortMalloc+0xec>)
 8008230:	6809      	ldr	r1, [r1, #0]
 8008232:	428b      	cmp	r3, r1
 8008234:	d201      	bcs.n	800823a <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008236:	4914      	ldr	r1, [pc, #80]	; (8008288 <pvPortMalloc+0xec>)
 8008238:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800823a:	4b10      	ldr	r3, [pc, #64]	; (800827c <pvPortMalloc+0xe0>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4313      	orrs	r3, r2
 8008240:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008242:	2300      	movs	r3, #0
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	e002      	b.n	800824e <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8008248:	2600      	movs	r6, #0
 800824a:	e000      	b.n	800824e <pvPortMalloc+0xb2>
 800824c:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800824e:	f001 f90f 	bl	8009470 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008252:	f016 0f07 	tst.w	r6, #7
 8008256:	d00c      	beq.n	8008272 <pvPortMalloc+0xd6>
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	e7fe      	b.n	8008268 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 800826a:	2600      	movs	r6, #0
 800826c:	e7ef      	b.n	800824e <pvPortMalloc+0xb2>
 800826e:	2600      	movs	r6, #0
 8008270:	e7ed      	b.n	800824e <pvPortMalloc+0xb2>
}
 8008272:	4630      	mov	r0, r6
 8008274:	bd70      	pop	{r4, r5, r6, pc}
 8008276:	bf00      	nop
 8008278:	20000c9c 	.word	0x20000c9c
 800827c:	20002ca0 	.word	0x20002ca0
 8008280:	20002ca4 	.word	0x20002ca4
 8008284:	20002cac 	.word	0x20002cac
 8008288:	20002ca8 	.word	0x20002ca8

0800828c <vPortFree>:
	if( pv != NULL )
 800828c:	b380      	cbz	r0, 80082f0 <vPortFree+0x64>
{
 800828e:	b538      	push	{r3, r4, r5, lr}
 8008290:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8008292:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008296:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800829a:	4a16      	ldr	r2, [pc, #88]	; (80082f4 <vPortFree+0x68>)
 800829c:	6812      	ldr	r2, [r2, #0]
 800829e:	4213      	tst	r3, r2
 80082a0:	d108      	bne.n	80082b4 <vPortFree+0x28>
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	e7fe      	b.n	80082b2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082b4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80082b8:	b141      	cbz	r1, 80082cc <vPortFree+0x40>
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	e7fe      	b.n	80082ca <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082cc:	ea23 0302 	bic.w	r3, r3, r2
 80082d0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80082d4:	f001 f818 	bl	8009308 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082d8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80082dc:	4a06      	ldr	r2, [pc, #24]	; (80082f8 <vPortFree+0x6c>)
 80082de:	6813      	ldr	r3, [r2, #0]
 80082e0:	440b      	add	r3, r1
 80082e2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082e4:	4628      	mov	r0, r5
 80082e6:	f7ff ff29 	bl	800813c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80082ea:	f001 f8c1 	bl	8009470 <xTaskResumeAll>
}
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20002ca0 	.word	0x20002ca0
 80082f8:	20002ca4 	.word	0x20002ca4

080082fc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082fc:	f100 0308 	add.w	r3, r0, #8
 8008300:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008302:	f04f 32ff 	mov.w	r2, #4294967295
 8008306:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008308:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800830a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008310:	4770      	bx	lr

08008312 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008316:	4770      	bx	lr

08008318 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008318:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800831a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800831c:	689a      	ldr	r2, [r3, #8]
 800831e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008320:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008322:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008324:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008326:	6803      	ldr	r3, [r0, #0]
 8008328:	3301      	adds	r3, #1
 800832a:	6003      	str	r3, [r0, #0]
}
 800832c:	4770      	bx	lr

0800832e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800832e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008330:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008332:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008336:	d011      	beq.n	800835c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008338:	f100 0308 	add.w	r3, r0, #8
 800833c:	461c      	mov	r4, r3
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	42aa      	cmp	r2, r5
 8008344:	d9fa      	bls.n	800833c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008346:	6863      	ldr	r3, [r4, #4]
 8008348:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800834a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800834c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800834e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008350:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008352:	6803      	ldr	r3, [r0, #0]
 8008354:	3301      	adds	r3, #1
 8008356:	6003      	str	r3, [r0, #0]
}
 8008358:	bc30      	pop	{r4, r5}
 800835a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800835c:	6904      	ldr	r4, [r0, #16]
 800835e:	e7f2      	b.n	8008346 <vListInsert+0x18>

08008360 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008360:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008362:	6841      	ldr	r1, [r0, #4]
 8008364:	6882      	ldr	r2, [r0, #8]
 8008366:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008368:	6841      	ldr	r1, [r0, #4]
 800836a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	4282      	cmp	r2, r0
 8008370:	d006      	beq.n	8008380 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008372:	2200      	movs	r2, #0
 8008374:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	3a01      	subs	r2, #1
 800837a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800837c:	6818      	ldr	r0, [r3, #0]
}
 800837e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008380:	6882      	ldr	r2, [r0, #8]
 8008382:	605a      	str	r2, [r3, #4]
 8008384:	e7f5      	b.n	8008372 <uxListRemove+0x12>
	...

08008388 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008388:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800838a:	2300      	movs	r3, #0
 800838c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800838e:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <prvTaskExitError+0x3c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008396:	d008      	beq.n	80083aa <prvTaskExitError+0x22>
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	e7fe      	b.n	80083a8 <prvTaskExitError+0x20>
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083ba:	9b01      	ldr	r3, [sp, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0fc      	beq.n	80083ba <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083c0:	b002      	add	sp, #8
 80083c2:	4770      	bx	lr
 80083c4:	2000007c 	.word	0x2000007c

080083c8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80083c8:	4806      	ldr	r0, [pc, #24]	; (80083e4 <prvPortStartFirstTask+0x1c>)
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	6800      	ldr	r0, [r0, #0]
 80083ce:	f380 8808 	msr	MSP, r0
 80083d2:	b662      	cpsie	i
 80083d4:	b661      	cpsie	f
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	df00      	svc	0
 80083e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083e2:	0000      	.short	0x0000
 80083e4:	e000ed08 	.word	0xe000ed08

080083e8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083ec:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083f0:	f021 0101 	bic.w	r1, r1, #1
 80083f4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083f8:	4b03      	ldr	r3, [pc, #12]	; (8008408 <pxPortInitialiseStack+0x20>)
 80083fa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083fe:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008402:	3840      	subs	r0, #64	; 0x40
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	08008389 	.word	0x08008389
 800840c:	00000000 	.word	0x00000000

08008410 <SVC_Handler>:
	__asm volatile (
 8008410:	4b07      	ldr	r3, [pc, #28]	; (8008430 <pxCurrentTCBConst2>)
 8008412:	6819      	ldr	r1, [r3, #0]
 8008414:	6808      	ldr	r0, [r1, #0]
 8008416:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800841a:	f380 8809 	msr	PSP, r0
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f04f 0000 	mov.w	r0, #0
 8008426:	f380 8811 	msr	BASEPRI, r0
 800842a:	f04e 0e0d 	orr.w	lr, lr, #13
 800842e:	4770      	bx	lr

08008430 <pxCurrentTCBConst2>:
 8008430:	20002d08 	.word	0x20002d08

08008434 <vPortEnterCritical>:
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008444:	4a0b      	ldr	r2, [pc, #44]	; (8008474 <vPortEnterCritical+0x40>)
 8008446:	6813      	ldr	r3, [r2, #0]
 8008448:	3301      	adds	r3, #1
 800844a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800844c:	2b01      	cmp	r3, #1
 800844e:	d000      	beq.n	8008452 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8008450:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008452:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008456:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800845a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800845e:	d0f7      	beq.n	8008450 <vPortEnterCritical+0x1c>
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	e7fe      	b.n	8008470 <vPortEnterCritical+0x3c>
 8008472:	bf00      	nop
 8008474:	2000007c 	.word	0x2000007c

08008478 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8008478:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <vPortExitCritical+0x28>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	b943      	cbnz	r3, 8008490 <vPortExitCritical+0x18>
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	e7fe      	b.n	800848e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008490:	3b01      	subs	r3, #1
 8008492:	4a03      	ldr	r2, [pc, #12]	; (80084a0 <vPortExitCritical+0x28>)
 8008494:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008496:	b90b      	cbnz	r3, 800849c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008498:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	2000007c 	.word	0x2000007c
	...

080084b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084b0:	f3ef 8009 	mrs	r0, PSP
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <pxCurrentTCBConst>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084c0:	6010      	str	r0, [r2, #0]
 80084c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80084c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084ca:	f380 8811 	msr	BASEPRI, r0
 80084ce:	f001 f883 	bl	80095d8 <vTaskSwitchContext>
 80084d2:	f04f 0000 	mov.w	r0, #0
 80084d6:	f380 8811 	msr	BASEPRI, r0
 80084da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80084de:	6819      	ldr	r1, [r3, #0]
 80084e0:	6808      	ldr	r0, [r1, #0]
 80084e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084e6:	f380 8809 	msr	PSP, r0
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	4770      	bx	lr

080084f0 <pxCurrentTCBConst>:
 80084f0:	20002d08 	.word	0x20002d08

080084f4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084f4:	b508      	push	{r3, lr}
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008506:	f000 ff27 	bl	8009358 <xTaskIncrementTick>
 800850a:	b128      	cbz	r0, 8008518 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800850c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008514:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008518:	2300      	movs	r3, #0
 800851a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800851e:	bd08      	pop	{r3, pc}

08008520 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8008520:	b510      	push	{r4, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	9001      	str	r0, [sp, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8008526:	4b46      	ldr	r3, [pc, #280]	; (8008640 <vPortSuppressTicksAndSleep+0x120>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4298      	cmp	r0, r3
 800852c:	d900      	bls.n	8008530 <vPortSuppressTicksAndSleep+0x10>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800852e:	9301      	str	r3, [sp, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8008530:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008534:	691a      	ldr	r2, [r3, #16]
 8008536:	f022 0201 	bic.w	r2, r2, #1
 800853a:	611a      	str	r2, [r3, #16]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800853c:	699c      	ldr	r4, [r3, #24]
 800853e:	9b01      	ldr	r3, [sp, #4]
 8008540:	3b01      	subs	r3, #1
 8008542:	4a40      	ldr	r2, [pc, #256]	; (8008644 <vPortSuppressTicksAndSleep+0x124>)
 8008544:	6812      	ldr	r2, [r2, #0]
 8008546:	fb02 4403 	mla	r4, r2, r3, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 800854a:	4b3f      	ldr	r3, [pc, #252]	; (8008648 <vPortSuppressTicksAndSleep+0x128>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	42a3      	cmp	r3, r4
 8008550:	d200      	bcs.n	8008554 <vPortSuppressTicksAndSleep+0x34>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8008552:	1ae4      	subs	r4, r4, r3
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8008554:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8008556:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800855a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800855e:	f001 f955 	bl	800980c <eTaskConfirmSleepModeStatus>
 8008562:	b970      	cbnz	r0, 8008582 <vPortSuppressTicksAndSleep+0x62>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8008564:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	615a      	str	r2, [r3, #20]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800856c:	691a      	ldr	r2, [r3, #16]
 800856e:	f042 0201 	orr.w	r2, r2, #1
 8008572:	611a      	str	r2, [r3, #16]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008574:	4a33      	ldr	r2, [pc, #204]	; (8008644 <vPortSuppressTicksAndSleep+0x124>)
 8008576:	6812      	ldr	r2, [r2, #0]
 8008578:	3a01      	subs	r2, #1
 800857a:	615a      	str	r2, [r3, #20]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800857c:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800857e:	b004      	add	sp, #16
 8008580:	bd10      	pop	{r4, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8008582:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008586:	615c      	str	r4, [r3, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008588:	2200      	movs	r2, #0
 800858a:	619a      	str	r2, [r3, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800858c:	691a      	ldr	r2, [r3, #16]
 800858e:	f042 0201 	orr.w	r2, r2, #1
 8008592:	611a      	str	r2, [r3, #16]
			xModifiableIdleTime = xExpectedIdleTime;
 8008594:	9b01      	ldr	r3, [sp, #4]
 8008596:	9303      	str	r3, [sp, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8008598:	a803      	add	r0, sp, #12
 800859a:	f7f8 fdaf 	bl	80010fc <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	b123      	cbz	r3, 80085ac <vPortSuppressTicksAndSleep+0x8c>
				__asm volatile( "dsb" ::: "memory" );
 80085a2:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 80085a6:	bf30      	wfi
				__asm volatile( "isb" );
 80085a8:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 80085ac:	a801      	add	r0, sp, #4
 80085ae:	f7f8 fdc7 	bl	8001140 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 80085b2:	b662      	cpsie	i
			__asm volatile( "dsb" );
 80085b4:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 80085b8:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 80085bc:	b672      	cpsid	i
			__asm volatile( "dsb" );
 80085be:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 80085c2:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 80085c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80085ca:	2206      	movs	r2, #6
 80085cc:	611a      	str	r2, [r3, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80085d4:	d023      	beq.n	800861e <vPortSuppressTicksAndSleep+0xfe>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 80085d6:	4b1b      	ldr	r3, [pc, #108]	; (8008644 <vPortSuppressTicksAndSleep+0x124>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	1b1c      	subs	r4, r3, r4
 80085e2:	4414      	add	r4, r2
 80085e4:	3c01      	subs	r4, #1
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 80085e6:	4b18      	ldr	r3, [pc, #96]	; (8008648 <vPortSuppressTicksAndSleep+0x128>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	42a3      	cmp	r3, r4
 80085ec:	d801      	bhi.n	80085f2 <vPortSuppressTicksAndSleep+0xd2>
 80085ee:	42a2      	cmp	r2, r4
 80085f0:	d200      	bcs.n	80085f4 <vPortSuppressTicksAndSleep+0xd4>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 80085f2:	1e54      	subs	r4, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 80085f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80085f8:	615c      	str	r4, [r3, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 80085fa:	9801      	ldr	r0, [sp, #4]
 80085fc:	3801      	subs	r0, #1
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085fe:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8008602:	2300      	movs	r3, #0
 8008604:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008606:	6923      	ldr	r3, [r4, #16]
 8008608:	f043 0301 	orr.w	r3, r3, #1
 800860c:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 800860e:	f000 fe89 	bl	8009324 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008612:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <vPortSuppressTicksAndSleep+0x124>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3b01      	subs	r3, #1
 8008618:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 800861a:	b662      	cpsie	i
	}
 800861c:	e7af      	b.n	800857e <vPortSuppressTicksAndSleep+0x5e>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800861e:	4b09      	ldr	r3, [pc, #36]	; (8008644 <vPortSuppressTicksAndSleep+0x124>)
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	9b01      	ldr	r3, [sp, #4]
 8008624:	fb03 f102 	mul.w	r1, r3, r2
 8008628:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800862c:	69a3      	ldr	r3, [r4, #24]
 800862e:	1ac8      	subs	r0, r1, r3
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8008630:	fbb0 f0f2 	udiv	r0, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8008634:	fb00 2202 	mla	r2, r0, r2, r2
 8008638:	1a5b      	subs	r3, r3, r1
 800863a:	4413      	add	r3, r2
 800863c:	6163      	str	r3, [r4, #20]
 800863e:	e7de      	b.n	80085fe <vPortSuppressTicksAndSleep+0xde>
 8008640:	20002cc4 	.word	0x20002cc4
 8008644:	20002cc0 	.word	0x20002cc0
 8008648:	20002cbc 	.word	0x20002cbc

0800864c <vPortSetupTimerInterrupt>:
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800864c:	4b0f      	ldr	r3, [pc, #60]	; (800868c <vPortSetupTimerInterrupt+0x40>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	480f      	ldr	r0, [pc, #60]	; (8008690 <vPortSetupTimerInterrupt+0x44>)
 8008652:	fba0 1202 	umull	r1, r2, r0, r2
 8008656:	0992      	lsrs	r2, r2, #6
 8008658:	490e      	ldr	r1, [pc, #56]	; (8008694 <vPortSetupTimerInterrupt+0x48>)
 800865a:	600a      	str	r2, [r1, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800865c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008660:	fbb1 f2f2 	udiv	r2, r1, r2
 8008664:	490c      	ldr	r1, [pc, #48]	; (8008698 <vPortSetupTimerInterrupt+0x4c>)
 8008666:	600a      	str	r2, [r1, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8008668:	4a0c      	ldr	r2, [pc, #48]	; (800869c <vPortSetupTimerInterrupt+0x50>)
 800866a:	212d      	movs	r1, #45	; 0x2d
 800866c:	6011      	str	r1, [r2, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800866e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008672:	2100      	movs	r1, #0
 8008674:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008676:	6191      	str	r1, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	fba0 1303 	umull	r1, r3, r0, r3
 800867e:	099b      	lsrs	r3, r3, #6
 8008680:	3b01      	subs	r3, #1
 8008682:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008684:	2307      	movs	r3, #7
 8008686:	6113      	str	r3, [r2, #16]
}
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20000070 	.word	0x20000070
 8008690:	10624dd3 	.word	0x10624dd3
 8008694:	20002cc0 	.word	0x20002cc0
 8008698:	20002cc4 	.word	0x20002cc4
 800869c:	20002cbc 	.word	0x20002cbc

080086a0 <xPortStartScheduler>:
{
 80086a0:	b510      	push	{r4, lr}
 80086a2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086a4:	4b2a      	ldr	r3, [pc, #168]	; (8008750 <xPortStartScheduler+0xb0>)
 80086a6:	781a      	ldrb	r2, [r3, #0]
 80086a8:	b2d2      	uxtb	r2, r2
 80086aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086ac:	22ff      	movs	r2, #255	; 0xff
 80086ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80086bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086c0:	4a24      	ldr	r2, [pc, #144]	; (8008754 <xPortStartScheduler+0xb4>)
 80086c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086c4:	4b24      	ldr	r3, [pc, #144]	; (8008758 <xPortStartScheduler+0xb8>)
 80086c6:	2207      	movs	r2, #7
 80086c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086ca:	e009      	b.n	80086e0 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80086cc:	4a22      	ldr	r2, [pc, #136]	; (8008758 <xPortStartScheduler+0xb8>)
 80086ce:	6813      	ldr	r3, [r2, #0]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80086e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80086e8:	d1f0      	bne.n	80086cc <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086ea:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <xPortStartScheduler+0xb8>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d008      	beq.n	8008704 <xPortStartScheduler+0x64>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	e7fe      	b.n	8008702 <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	4a14      	ldr	r2, [pc, #80]	; (8008758 <xPortStartScheduler+0xb8>)
 8008708:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800870a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800870e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008710:	9b01      	ldr	r3, [sp, #4]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	4a0e      	ldr	r2, [pc, #56]	; (8008750 <xPortStartScheduler+0xb0>)
 8008716:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008718:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800871c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8008720:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008724:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008728:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800872c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008730:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008734:	f7ff ff8a 	bl	800864c <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008738:	2400      	movs	r4, #0
 800873a:	4b08      	ldr	r3, [pc, #32]	; (800875c <xPortStartScheduler+0xbc>)
 800873c:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800873e:	f7ff fe43 	bl	80083c8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008742:	f000 ff49 	bl	80095d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008746:	f7ff fe1f 	bl	8008388 <prvTaskExitError>
}
 800874a:	4620      	mov	r0, r4
 800874c:	b002      	add	sp, #8
 800874e:	bd10      	pop	{r4, pc}
 8008750:	e000e400 	.word	0xe000e400
 8008754:	20002cb4 	.word	0x20002cb4
 8008758:	20002cb8 	.word	0x20002cb8
 800875c:	2000007c 	.word	0x2000007c

08008760 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008760:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008764:	2b0f      	cmp	r3, #15
 8008766:	d90f      	bls.n	8008788 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008768:	4a11      	ldr	r2, [pc, #68]	; (80087b0 <vPortValidateInterruptPriority+0x50>)
 800876a:	5c9b      	ldrb	r3, [r3, r2]
 800876c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800876e:	4a11      	ldr	r2, [pc, #68]	; (80087b4 <vPortValidateInterruptPriority+0x54>)
 8008770:	7812      	ldrb	r2, [r2, #0]
 8008772:	429a      	cmp	r2, r3
 8008774:	d908      	bls.n	8008788 <vPortValidateInterruptPriority+0x28>
 8008776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	e7fe      	b.n	8008786 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008788:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800878c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008794:	4a08      	ldr	r2, [pc, #32]	; (80087b8 <vPortValidateInterruptPriority+0x58>)
 8008796:	6812      	ldr	r2, [r2, #0]
 8008798:	4293      	cmp	r3, r2
 800879a:	d908      	bls.n	80087ae <vPortValidateInterruptPriority+0x4e>
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	e7fe      	b.n	80087ac <vPortValidateInterruptPriority+0x4c>
	}
 80087ae:	4770      	bx	lr
 80087b0:	e000e3f0 	.word	0xe000e3f0
 80087b4:	20002cb4 	.word	0x20002cb4
 80087b8:	20002cb8 	.word	0x20002cb8

080087bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087bc:	b510      	push	{r4, lr}
 80087be:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087c0:	f7ff fe38 	bl	8008434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d004      	beq.n	80087d6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80087cc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80087ce:	f7ff fe53 	bl	8008478 <vPortExitCritical>

	return xReturn;
}
 80087d2:	4620      	mov	r0, r4
 80087d4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80087d6:	2401      	movs	r4, #1
 80087d8:	e7f9      	b.n	80087ce <prvIsQueueFull+0x12>

080087da <prvIsQueueEmpty>:
{
 80087da:	b510      	push	{r4, lr}
 80087dc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80087de:	f7ff fe29 	bl	8008434 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80087e4:	b923      	cbnz	r3, 80087f0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80087e6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80087e8:	f7ff fe46 	bl	8008478 <vPortExitCritical>
}
 80087ec:	4620      	mov	r0, r4
 80087ee:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80087f0:	2400      	movs	r4, #0
 80087f2:	e7f9      	b.n	80087e8 <prvIsQueueEmpty+0xe>

080087f4 <prvCopyDataToQueue>:
{
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	4604      	mov	r4, r0
 80087f8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087fa:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80087fe:	b95a      	cbnz	r2, 8008818 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008800:	6803      	ldr	r3, [r0, #0]
 8008802:	b11b      	cbz	r3, 800880c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008804:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008806:	3601      	adds	r6, #1
 8008808:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800880a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800880c:	6880      	ldr	r0, [r0, #8]
 800880e:	f001 f82b 	bl	8009868 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	60a3      	str	r3, [r4, #8]
 8008816:	e7f6      	b.n	8008806 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008818:	b96d      	cbnz	r5, 8008836 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800881a:	6840      	ldr	r0, [r0, #4]
 800881c:	f00c fa7e 	bl	8014d1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008820:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008822:	6863      	ldr	r3, [r4, #4]
 8008824:	4413      	add	r3, r2
 8008826:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008828:	68a2      	ldr	r2, [r4, #8]
 800882a:	4293      	cmp	r3, r2
 800882c:	d319      	bcc.n	8008862 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008832:	4628      	mov	r0, r5
 8008834:	e7e7      	b.n	8008806 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008836:	68c0      	ldr	r0, [r0, #12]
 8008838:	f00c fa70 	bl	8014d1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800883c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800883e:	4251      	negs	r1, r2
 8008840:	68e3      	ldr	r3, [r4, #12]
 8008842:	1a9b      	subs	r3, r3, r2
 8008844:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008846:	6822      	ldr	r2, [r4, #0]
 8008848:	4293      	cmp	r3, r2
 800884a:	d202      	bcs.n	8008852 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800884c:	68a3      	ldr	r3, [r4, #8]
 800884e:	440b      	add	r3, r1
 8008850:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008852:	2d02      	cmp	r5, #2
 8008854:	d001      	beq.n	800885a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008856:	2000      	movs	r0, #0
 8008858:	e7d5      	b.n	8008806 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800885a:	b126      	cbz	r6, 8008866 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800885c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800885e:	2000      	movs	r0, #0
 8008860:	e7d1      	b.n	8008806 <prvCopyDataToQueue+0x12>
 8008862:	4628      	mov	r0, r5
 8008864:	e7cf      	b.n	8008806 <prvCopyDataToQueue+0x12>
 8008866:	2000      	movs	r0, #0
 8008868:	e7cd      	b.n	8008806 <prvCopyDataToQueue+0x12>

0800886a <prvCopyDataFromQueue>:
{
 800886a:	b508      	push	{r3, lr}
 800886c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800886e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008870:	b162      	cbz	r2, 800888c <prvCopyDataFromQueue+0x22>
 8008872:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008874:	68d9      	ldr	r1, [r3, #12]
 8008876:	4411      	add	r1, r2
 8008878:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800887a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800887e:	4561      	cmp	r1, ip
 8008880:	d301      	bcc.n	8008886 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008882:	6819      	ldr	r1, [r3, #0]
 8008884:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008886:	68d9      	ldr	r1, [r3, #12]
 8008888:	f00c fa48 	bl	8014d1c <memcpy>
}
 800888c:	bd08      	pop	{r3, pc}

0800888e <prvUnlockQueue>:
{
 800888e:	b538      	push	{r3, r4, r5, lr}
 8008890:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008892:	f7ff fdcf 	bl	8008434 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008896:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800889a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800889c:	e001      	b.n	80088a2 <prvUnlockQueue+0x14>
			--cTxLock;
 800889e:	3c01      	subs	r4, #1
 80088a0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088a2:	2c00      	cmp	r4, #0
 80088a4:	dd0a      	ble.n	80088bc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088a8:	b143      	cbz	r3, 80088bc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088aa:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80088ae:	f000 ff11 	bl	80096d4 <xTaskRemoveFromEventList>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d0f3      	beq.n	800889e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80088b6:	f000 ffa3 	bl	8009800 <vTaskMissedYield>
 80088ba:	e7f0      	b.n	800889e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80088bc:	23ff      	movs	r3, #255	; 0xff
 80088be:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80088c2:	f7ff fdd9 	bl	8008478 <vPortExitCritical>
	taskENTER_CRITICAL();
 80088c6:	f7ff fdb5 	bl	8008434 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80088ca:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80088ce:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088d0:	e001      	b.n	80088d6 <prvUnlockQueue+0x48>
				--cRxLock;
 80088d2:	3c01      	subs	r4, #1
 80088d4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088d6:	2c00      	cmp	r4, #0
 80088d8:	dd0a      	ble.n	80088f0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088da:	692b      	ldr	r3, [r5, #16]
 80088dc:	b143      	cbz	r3, 80088f0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088de:	f105 0010 	add.w	r0, r5, #16
 80088e2:	f000 fef7 	bl	80096d4 <xTaskRemoveFromEventList>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d0f3      	beq.n	80088d2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80088ea:	f000 ff89 	bl	8009800 <vTaskMissedYield>
 80088ee:	e7f0      	b.n	80088d2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80088f0:	23ff      	movs	r3, #255	; 0xff
 80088f2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80088f6:	f7ff fdbf 	bl	8008478 <vPortExitCritical>
}
 80088fa:	bd38      	pop	{r3, r4, r5, pc}

080088fc <xQueueGenericReset>:
{
 80088fc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80088fe:	b1e0      	cbz	r0, 800893a <xQueueGenericReset+0x3e>
 8008900:	460d      	mov	r5, r1
 8008902:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008904:	f7ff fd96 	bl	8008434 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800890c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800890e:	fb01 3002 	mla	r0, r1, r2, r3
 8008912:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008914:	2000      	movs	r0, #0
 8008916:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008918:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800891a:	3a01      	subs	r2, #1
 800891c:	fb02 3301 	mla	r3, r2, r1, r3
 8008920:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008922:	23ff      	movs	r3, #255	; 0xff
 8008924:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800892c:	b9fd      	cbnz	r5, 800896e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800892e:	6923      	ldr	r3, [r4, #16]
 8008930:	b963      	cbnz	r3, 800894c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008932:	f7ff fda1 	bl	8008478 <vPortExitCritical>
}
 8008936:	2001      	movs	r0, #1
 8008938:	bd38      	pop	{r3, r4, r5, pc}
 800893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800894a:	e7fe      	b.n	800894a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800894c:	f104 0010 	add.w	r0, r4, #16
 8008950:	f000 fec0 	bl	80096d4 <xTaskRemoveFromEventList>
 8008954:	2800      	cmp	r0, #0
 8008956:	d0ec      	beq.n	8008932 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8008958:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800895c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008960:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	e7e1      	b.n	8008932 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800896e:	f104 0010 	add.w	r0, r4, #16
 8008972:	f7ff fcc3 	bl	80082fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008976:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800897a:	f7ff fcbf 	bl	80082fc <vListInitialise>
 800897e:	e7d8      	b.n	8008932 <xQueueGenericReset+0x36>

08008980 <prvInitialiseNewQueue>:
{
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	461d      	mov	r5, r3
 8008984:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008986:	460b      	mov	r3, r1
 8008988:	b949      	cbnz	r1, 800899e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800898a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800898c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800898e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008990:	2101      	movs	r1, #1
 8008992:	4620      	mov	r0, r4
 8008994:	f7ff ffb2 	bl	80088fc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008998:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800899c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	e7f4      	b.n	800898c <prvInitialiseNewQueue+0xc>

080089a2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089a2:	b940      	cbnz	r0, 80089b6 <xQueueGenericCreateStatic+0x14>
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	e7fe      	b.n	80089b4 <xQueueGenericCreateStatic+0x12>
	{
 80089b6:	b510      	push	{r4, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	461c      	mov	r4, r3
 80089bc:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80089be:	b153      	cbz	r3, 80089d6 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089c0:	b192      	cbz	r2, 80089e8 <xQueueGenericCreateStatic+0x46>
 80089c2:	b989      	cbnz	r1, 80089e8 <xQueueGenericCreateStatic+0x46>
 80089c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	e7fe      	b.n	80089d4 <xQueueGenericCreateStatic+0x32>
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80089e6:	e7fe      	b.n	80089e6 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80089e8:	b16a      	cbz	r2, 8008a06 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80089ea:	2350      	movs	r3, #80	; 0x50
 80089ec:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	2b50      	cmp	r3, #80	; 0x50
 80089f2:	d013      	beq.n	8008a1c <xQueueGenericCreateStatic+0x7a>
 80089f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	e7fe      	b.n	8008a04 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a06:	2900      	cmp	r1, #0
 8008a08:	d0ef      	beq.n	80089ea <xQueueGenericCreateStatic+0x48>
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	e7fe      	b.n	8008a1a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a1c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a24:	9400      	str	r4, [sp, #0]
 8008a26:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008a2a:	4660      	mov	r0, ip
 8008a2c:	f7ff ffa8 	bl	8008980 <prvInitialiseNewQueue>
	}
 8008a30:	4620      	mov	r0, r4
 8008a32:	b004      	add	sp, #16
 8008a34:	bd10      	pop	{r4, pc}

08008a36 <xQueueGenericSend>:
{
 8008a36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a38:	b085      	sub	sp, #20
 8008a3a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008a3c:	b188      	cbz	r0, 8008a62 <xQueueGenericSend+0x2c>
 8008a3e:	460f      	mov	r7, r1
 8008a40:	461d      	mov	r5, r3
 8008a42:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a44:	b1b1      	cbz	r1, 8008a74 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a46:	2d02      	cmp	r5, #2
 8008a48:	d120      	bne.n	8008a8c <xQueueGenericSend+0x56>
 8008a4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d01d      	beq.n	8008a8c <xQueueGenericSend+0x56>
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	e7fe      	b.n	8008a60 <xQueueGenericSend+0x2a>
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008a72:	e7fe      	b.n	8008a72 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a74:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d0e5      	beq.n	8008a46 <xQueueGenericSend+0x10>
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	e7fe      	b.n	8008a8a <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a8c:	f000 fedc 	bl	8009848 <xTaskGetSchedulerState>
 8008a90:	4606      	mov	r6, r0
 8008a92:	b958      	cbnz	r0, 8008aac <xQueueGenericSend+0x76>
 8008a94:	9b01      	ldr	r3, [sp, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d048      	beq.n	8008b2c <xQueueGenericSend+0xf6>
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	e7fe      	b.n	8008aaa <xQueueGenericSend+0x74>
 8008aac:	2600      	movs	r6, #0
 8008aae:	e03d      	b.n	8008b2c <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7ff fe9d 	bl	80087f4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008abc:	b97b      	cbnz	r3, 8008ade <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8008abe:	b148      	cbz	r0, 8008ad4 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8008ac0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008ad4:	f7ff fcd0 	bl	8008478 <vPortExitCritical>
				return pdPASS;
 8008ad8:	2001      	movs	r0, #1
}
 8008ada:	b005      	add	sp, #20
 8008adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ade:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ae2:	f000 fdf7 	bl	80096d4 <xTaskRemoveFromEventList>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d0f4      	beq.n	8008ad4 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8008aea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	e7e9      	b.n	8008ad4 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8008b00:	f7ff fcba 	bl	8008478 <vPortExitCritical>
					return errQUEUE_FULL;
 8008b04:	2000      	movs	r0, #0
 8008b06:	e7e8      	b.n	8008ada <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b08:	a802      	add	r0, sp, #8
 8008b0a:	f000 fe2b 	bl	8009764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b0e:	2601      	movs	r6, #1
 8008b10:	e019      	b.n	8008b46 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8008b12:	2300      	movs	r3, #0
 8008b14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b18:	e021      	b.n	8008b5e <xQueueGenericSend+0x128>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b20:	e023      	b.n	8008b6a <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8008b22:	4620      	mov	r0, r4
 8008b24:	f7ff feb3 	bl	800888e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b28:	f000 fca2 	bl	8009470 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008b2c:	f7ff fc82 	bl	8008434 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008b32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d3bb      	bcc.n	8008ab0 <xQueueGenericSend+0x7a>
 8008b38:	2d02      	cmp	r5, #2
 8008b3a:	d0b9      	beq.n	8008ab0 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b3c:	9b01      	ldr	r3, [sp, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0de      	beq.n	8008b00 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8008b42:	2e00      	cmp	r6, #0
 8008b44:	d0e0      	beq.n	8008b08 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8008b46:	f7ff fc97 	bl	8008478 <vPortExitCritical>
		vTaskSuspendAll();
 8008b4a:	f000 fbdd 	bl	8009308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b4e:	f7ff fc71 	bl	8008434 <vPortEnterCritical>
 8008b52:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8008b56:	b252      	sxtb	r2, r2
 8008b58:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b5c:	d0d9      	beq.n	8008b12 <xQueueGenericSend+0xdc>
 8008b5e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8008b62:	b252      	sxtb	r2, r2
 8008b64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b68:	d0d7      	beq.n	8008b1a <xQueueGenericSend+0xe4>
 8008b6a:	f7ff fc85 	bl	8008478 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b6e:	a901      	add	r1, sp, #4
 8008b70:	a802      	add	r0, sp, #8
 8008b72:	f000 fe03 	bl	800977c <xTaskCheckForTimeOut>
 8008b76:	b9d8      	cbnz	r0, 8008bb0 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7ff fe1f 	bl	80087bc <prvIsQueueFull>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d0cf      	beq.n	8008b22 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b82:	9901      	ldr	r1, [sp, #4]
 8008b84:	f104 0010 	add.w	r0, r4, #16
 8008b88:	f000 fd70 	bl	800966c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f7ff fe7e 	bl	800888e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b92:	f000 fc6d 	bl	8009470 <xTaskResumeAll>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d1c8      	bne.n	8008b2c <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8008b9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	e7bd      	b.n	8008b2c <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f7ff fe6c 	bl	800888e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bb6:	f000 fc5b 	bl	8009470 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008bba:	2000      	movs	r0, #0
 8008bbc:	e78d      	b.n	8008ada <xQueueGenericSend+0xa4>

08008bbe <xQueueGenericSendFromISR>:
{
 8008bbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008bc2:	b190      	cbz	r0, 8008bea <xQueueGenericSendFromISR+0x2c>
 8008bc4:	460f      	mov	r7, r1
 8008bc6:	4616      	mov	r6, r2
 8008bc8:	461c      	mov	r4, r3
 8008bca:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bcc:	b1b1      	cbz	r1, 8008bfc <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bce:	2c02      	cmp	r4, #2
 8008bd0:	d120      	bne.n	8008c14 <xQueueGenericSendFromISR+0x56>
 8008bd2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d01d      	beq.n	8008c14 <xQueueGenericSendFromISR+0x56>
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	e7fe      	b.n	8008be8 <xQueueGenericSendFromISR+0x2a>
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008bfa:	e7fe      	b.n	8008bfa <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bfc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0e5      	beq.n	8008bce <xQueueGenericSendFromISR+0x10>
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	e7fe      	b.n	8008c12 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c14:	f7ff fda4 	bl	8008760 <vPortValidateInterruptPriority>
	__asm volatile
 8008c18:	f3ef 8911 	mrs	r9, BASEPRI
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c2c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008c2e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d306      	bcc.n	8008c42 <xQueueGenericSendFromISR+0x84>
 8008c34:	2c02      	cmp	r4, #2
 8008c36:	d004      	beq.n	8008c42 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8008c38:	2000      	movs	r0, #0
	__asm volatile
 8008c3a:	f389 8811 	msr	BASEPRI, r9
}
 8008c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c42:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8008c46:	fa4f f888 	sxtb.w	r8, r8
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f7ff fdd0 	bl	80087f4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008c54:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008c58:	d006      	beq.n	8008c68 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c5a:	f108 0301 	add.w	r3, r8, #1
 8008c5e:	b25b      	sxtb	r3, r3
 8008c60:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8008c64:	2001      	movs	r0, #1
 8008c66:	e7e8      	b.n	8008c3a <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c6a:	b90b      	cbnz	r3, 8008c70 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	e7e4      	b.n	8008c3a <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c70:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008c74:	f000 fd2e 	bl	80096d4 <xTaskRemoveFromEventList>
 8008c78:	b118      	cbz	r0, 8008c82 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8008c7a:	b126      	cbz	r6, 8008c86 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	6030      	str	r0, [r6, #0]
 8008c80:	e7db      	b.n	8008c3a <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8008c82:	2001      	movs	r0, #1
 8008c84:	e7d9      	b.n	8008c3a <xQueueGenericSendFromISR+0x7c>
 8008c86:	2001      	movs	r0, #1
 8008c88:	e7d7      	b.n	8008c3a <xQueueGenericSendFromISR+0x7c>

08008c8a <xQueueReceive>:
{
 8008c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008c90:	b190      	cbz	r0, 8008cb8 <xQueueReceive+0x2e>
 8008c92:	460f      	mov	r7, r1
 8008c94:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c96:	b1c1      	cbz	r1, 8008cca <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c98:	f000 fdd6 	bl	8009848 <xTaskGetSchedulerState>
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	bb00      	cbnz	r0, 8008ce2 <xQueueReceive+0x58>
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d05e      	beq.n	8008d64 <xQueueReceive+0xda>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	e7fe      	b.n	8008cb6 <xQueueReceive+0x2c>
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8008cc8:	e7fe      	b.n	8008cc8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0e3      	beq.n	8008c98 <xQueueReceive+0xe>
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	e7fe      	b.n	8008ce0 <xQueueReceive+0x56>
 8008ce2:	2600      	movs	r6, #0
 8008ce4:	e03e      	b.n	8008d64 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f7ff fdbe 	bl	800886a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cee:	3d01      	subs	r5, #1
 8008cf0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	b923      	cbnz	r3, 8008d00 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8008cf6:	f7ff fbbf 	bl	8008478 <vPortExitCritical>
				return pdPASS;
 8008cfa:	2001      	movs	r0, #1
}
 8008cfc:	b005      	add	sp, #20
 8008cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d00:	f104 0010 	add.w	r0, r4, #16
 8008d04:	f000 fce6 	bl	80096d4 <xTaskRemoveFromEventList>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d0f4      	beq.n	8008cf6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8008d0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d14:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	e7e9      	b.n	8008cf6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8008d22:	f7ff fba9 	bl	8008478 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008d26:	2000      	movs	r0, #0
 8008d28:	e7e8      	b.n	8008cfc <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d2a:	a802      	add	r0, sp, #8
 8008d2c:	f000 fd1a 	bl	8009764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d30:	2601      	movs	r6, #1
 8008d32:	e021      	b.n	8008d78 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8008d34:	2300      	movs	r3, #0
 8008d36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008d3a:	e029      	b.n	8008d90 <xQueueReceive+0x106>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d42:	e02b      	b.n	8008d9c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8008d44:	4620      	mov	r0, r4
 8008d46:	f7ff fda2 	bl	800888e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d4a:	f000 fb91 	bl	8009470 <xTaskResumeAll>
 8008d4e:	e009      	b.n	8008d64 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8008d50:	4620      	mov	r0, r4
 8008d52:	f7ff fd9c 	bl	800888e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d56:	f000 fb8b 	bl	8009470 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f7ff fd3d 	bl	80087da <prvIsQueueEmpty>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d13f      	bne.n	8008de4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8008d64:	f7ff fb66 	bl	8008434 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d68:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d6a:	2d00      	cmp	r5, #0
 8008d6c:	d1bb      	bne.n	8008ce6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d6e:	9b01      	ldr	r3, [sp, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0d6      	beq.n	8008d22 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	d0d8      	beq.n	8008d2a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8008d78:	f7ff fb7e 	bl	8008478 <vPortExitCritical>
		vTaskSuspendAll();
 8008d7c:	f000 fac4 	bl	8009308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d80:	f7ff fb58 	bl	8008434 <vPortEnterCritical>
 8008d84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008d88:	b25b      	sxtb	r3, r3
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d0d1      	beq.n	8008d34 <xQueueReceive+0xaa>
 8008d90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008d94:	b25b      	sxtb	r3, r3
 8008d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9a:	d0cf      	beq.n	8008d3c <xQueueReceive+0xb2>
 8008d9c:	f7ff fb6c 	bl	8008478 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008da0:	a901      	add	r1, sp, #4
 8008da2:	a802      	add	r0, sp, #8
 8008da4:	f000 fcea 	bl	800977c <xTaskCheckForTimeOut>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d1d1      	bne.n	8008d50 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dac:	4620      	mov	r0, r4
 8008dae:	f7ff fd14 	bl	80087da <prvIsQueueEmpty>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d0c6      	beq.n	8008d44 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008db6:	9901      	ldr	r1, [sp, #4]
 8008db8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008dbc:	f000 fc56 	bl	800966c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f7ff fd64 	bl	800888e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dc6:	f000 fb53 	bl	8009470 <xTaskResumeAll>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d1ca      	bne.n	8008d64 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8008dce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	e7bf      	b.n	8008d64 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8008de4:	2000      	movs	r0, #0
 8008de6:	e789      	b.n	8008cfc <xQueueReceive+0x72>

08008de8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008de8:	2300      	movs	r3, #0
 8008dea:	2b07      	cmp	r3, #7
 8008dec:	d80c      	bhi.n	8008e08 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008dee:	4a07      	ldr	r2, [pc, #28]	; (8008e0c <vQueueAddToRegistry+0x24>)
 8008df0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008df4:	b10a      	cbz	r2, 8008dfa <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008df6:	3301      	adds	r3, #1
 8008df8:	e7f7      	b.n	8008dea <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008dfa:	4a04      	ldr	r2, [pc, #16]	; (8008e0c <vQueueAddToRegistry+0x24>)
 8008dfc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e04:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e06:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	20002cc8 	.word	0x20002cc8

08008e10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	4604      	mov	r4, r0
 8008e14:	460d      	mov	r5, r1
 8008e16:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e18:	f7ff fb0c 	bl	8008434 <vPortEnterCritical>
 8008e1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008e20:	b25b      	sxtb	r3, r3
 8008e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e26:	d00d      	beq.n	8008e44 <vQueueWaitForMessageRestricted+0x34>
 8008e28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008e2c:	b25b      	sxtb	r3, r3
 8008e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e32:	d00b      	beq.n	8008e4c <vQueueWaitForMessageRestricted+0x3c>
 8008e34:	f7ff fb20 	bl	8008478 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e3a:	b15b      	cbz	r3, 8008e54 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f7ff fd26 	bl	800888e <prvUnlockQueue>
	}
 8008e42:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008e44:	2300      	movs	r3, #0
 8008e46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008e4a:	e7ed      	b.n	8008e28 <vQueueWaitForMessageRestricted+0x18>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e52:	e7ef      	b.n	8008e34 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e54:	4632      	mov	r2, r6
 8008e56:	4629      	mov	r1, r5
 8008e58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e5c:	f000 fc1e 	bl	800969c <vTaskPlaceOnEventListRestricted>
 8008e60:	e7ec      	b.n	8008e3c <vQueueWaitForMessageRestricted+0x2c>
	...

08008e64 <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008e64:	4b0a      	ldr	r3, [pc, #40]	; (8008e90 <prvGetExpectedIdleTime+0x2c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	b103      	cbz	r3, 8008e6c <prvGetExpectedIdleTime+0x8>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8008e6a:	2301      	movs	r3, #1
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008e6c:	4a09      	ldr	r2, [pc, #36]	; (8008e94 <prvGetExpectedIdleTime+0x30>)
 8008e6e:	6812      	ldr	r2, [r2, #0]
 8008e70:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8008e72:	b950      	cbnz	r0, 8008e8a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008e74:	4a08      	ldr	r2, [pc, #32]	; (8008e98 <prvGetExpectedIdleTime+0x34>)
 8008e76:	6812      	ldr	r2, [r2, #0]
 8008e78:	2a01      	cmp	r2, #1
 8008e7a:	d807      	bhi.n	8008e8c <prvGetExpectedIdleTime+0x28>
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008e7c:	b933      	cbnz	r3, 8008e8c <prvGetExpectedIdleTime+0x28>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008e7e:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <prvGetExpectedIdleTime+0x38>)
 8008e80:	6818      	ldr	r0, [r3, #0]
 8008e82:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <prvGetExpectedIdleTime+0x3c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	1ac0      	subs	r0, r0, r3
 8008e88:	4770      	bx	lr
			xReturn = 0;
 8008e8a:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	20003188 	.word	0x20003188
 8008e94:	20002d08 	.word	0x20002d08
 8008e98:	20002d14 	.word	0x20002d14
 8008e9c:	200031b8 	.word	0x200031b8
 8008ea0:	20003200 	.word	0x20003200

08008ea4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ea4:	4b08      	ldr	r3, [pc, #32]	; (8008ec8 <prvResetNextTaskUnblockTime+0x24>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	b923      	cbnz	r3, 8008eb6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008eac:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <prvResetNextTaskUnblockTime+0x28>)
 8008eae:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb6:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <prvResetNextTaskUnblockTime+0x24>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <prvResetNextTaskUnblockTime+0x28>)
 8008ec2:	601a      	str	r2, [r3, #0]
	}
}
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	20002d0c 	.word	0x20002d0c
 8008ecc:	200031b8 	.word	0x200031b8

08008ed0 <prvInitialiseNewTask>:
{
 8008ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	460d      	mov	r5, r1
 8008ed8:	4617      	mov	r7, r2
 8008eda:	4699      	mov	r9, r3
 8008edc:	9e08      	ldr	r6, [sp, #32]
 8008ede:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008ee2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ee4:	0092      	lsls	r2, r2, #2
 8008ee6:	21a5      	movs	r1, #165	; 0xa5
 8008ee8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008eea:	f00b ff25 	bl	8014d38 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008eee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ef0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008ef4:	3a01      	subs	r2, #1
 8008ef6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008efa:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8008efe:	b3b5      	cbz	r5, 8008f6e <prvInitialiseNewTask+0x9e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f00:	f04f 0c00 	mov.w	ip, #0
 8008f04:	f1bc 0f0f 	cmp.w	ip, #15
 8008f08:	d80b      	bhi.n	8008f22 <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f0a:	f815 200c 	ldrb.w	r2, [r5, ip]
 8008f0e:	eb04 030c 	add.w	r3, r4, ip
 8008f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8008f16:	f815 300c 	ldrb.w	r3, [r5, ip]
 8008f1a:	b113      	cbz	r3, 8008f22 <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f1c:	f10c 0c01 	add.w	ip, ip, #1
 8008f20:	e7f0      	b.n	8008f04 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f22:	2300      	movs	r3, #0
 8008f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f28:	2e37      	cmp	r6, #55	; 0x37
 8008f2a:	d900      	bls.n	8008f2e <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f2c:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008f2e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008f30:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f32:	2500      	movs	r5, #0
 8008f34:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f36:	1d20      	adds	r0, r4, #4
 8008f38:	f7ff f9eb 	bl	8008312 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f3c:	f104 0018 	add.w	r0, r4, #24
 8008f40:	f7ff f9e7 	bl	8008312 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f44:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f46:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8008f4a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f4c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8008f4e:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f50:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f54:	464a      	mov	r2, r9
 8008f56:	4641      	mov	r1, r8
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f7ff fa45 	bl	80083e8 <pxPortInitialiseStack>
 8008f5e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008f60:	f1ba 0f00 	cmp.w	sl, #0
 8008f64:	d001      	beq.n	8008f6a <prvInitialiseNewTask+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f66:	f8ca 4000 	str.w	r4, [sl]
}
 8008f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008f74:	e7d8      	b.n	8008f28 <prvInitialiseNewTask+0x58>
	...

08008f78 <prvInitialiseTaskLists>:
{
 8008f78:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f7a:	2400      	movs	r4, #0
 8008f7c:	e007      	b.n	8008f8e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f7e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008f82:	0093      	lsls	r3, r2, #2
 8008f84:	480e      	ldr	r0, [pc, #56]	; (8008fc0 <prvInitialiseTaskLists+0x48>)
 8008f86:	4418      	add	r0, r3
 8008f88:	f7ff f9b8 	bl	80082fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f8c:	3401      	adds	r4, #1
 8008f8e:	2c37      	cmp	r4, #55	; 0x37
 8008f90:	d9f5      	bls.n	8008f7e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8008f92:	4d0c      	ldr	r5, [pc, #48]	; (8008fc4 <prvInitialiseTaskLists+0x4c>)
 8008f94:	4628      	mov	r0, r5
 8008f96:	f7ff f9b1 	bl	80082fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f9a:	4c0b      	ldr	r4, [pc, #44]	; (8008fc8 <prvInitialiseTaskLists+0x50>)
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f7ff f9ad 	bl	80082fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fa2:	480a      	ldr	r0, [pc, #40]	; (8008fcc <prvInitialiseTaskLists+0x54>)
 8008fa4:	f7ff f9aa 	bl	80082fc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008fa8:	4809      	ldr	r0, [pc, #36]	; (8008fd0 <prvInitialiseTaskLists+0x58>)
 8008faa:	f7ff f9a7 	bl	80082fc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008fae:	4809      	ldr	r0, [pc, #36]	; (8008fd4 <prvInitialiseTaskLists+0x5c>)
 8008fb0:	f7ff f9a4 	bl	80082fc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fb4:	4b08      	ldr	r3, [pc, #32]	; (8008fd8 <prvInitialiseTaskLists+0x60>)
 8008fb6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fb8:	4b08      	ldr	r3, [pc, #32]	; (8008fdc <prvInitialiseTaskLists+0x64>)
 8008fba:	601c      	str	r4, [r3, #0]
}
 8008fbc:	bd38      	pop	{r3, r4, r5, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20002d14 	.word	0x20002d14
 8008fc4:	2000318c 	.word	0x2000318c
 8008fc8:	200031a0 	.word	0x200031a0
 8008fcc:	200031c0 	.word	0x200031c0
 8008fd0:	200031ec 	.word	0x200031ec
 8008fd4:	200031d8 	.word	0x200031d8
 8008fd8:	20002d0c 	.word	0x20002d0c
 8008fdc:	20002d10 	.word	0x20002d10

08008fe0 <prvAddNewTaskToReadyList>:
{
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008fe4:	f7ff fa26 	bl	8008434 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008fe8:	4a22      	ldr	r2, [pc, #136]	; (8009074 <prvAddNewTaskToReadyList+0x94>)
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	3301      	adds	r3, #1
 8008fee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ff0:	4b21      	ldr	r3, [pc, #132]	; (8009078 <prvAddNewTaskToReadyList+0x98>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	b15b      	cbz	r3, 800900e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8008ff6:	4b21      	ldr	r3, [pc, #132]	; (800907c <prvAddNewTaskToReadyList+0x9c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	b96b      	cbnz	r3, 8009018 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ffc:	4b1e      	ldr	r3, [pc, #120]	; (8009078 <prvAddNewTaskToReadyList+0x98>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009002:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009004:	429a      	cmp	r2, r3
 8009006:	d807      	bhi.n	8009018 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009008:	4b1b      	ldr	r3, [pc, #108]	; (8009078 <prvAddNewTaskToReadyList+0x98>)
 800900a:	601c      	str	r4, [r3, #0]
 800900c:	e004      	b.n	8009018 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800900e:	4b1a      	ldr	r3, [pc, #104]	; (8009078 <prvAddNewTaskToReadyList+0x98>)
 8009010:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d029      	beq.n	800906c <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8009018:	4a19      	ldr	r2, [pc, #100]	; (8009080 <prvAddNewTaskToReadyList+0xa0>)
 800901a:	6813      	ldr	r3, [r2, #0]
 800901c:	3301      	adds	r3, #1
 800901e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009020:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009022:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009024:	4b17      	ldr	r3, [pc, #92]	; (8009084 <prvAddNewTaskToReadyList+0xa4>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4298      	cmp	r0, r3
 800902a:	d901      	bls.n	8009030 <prvAddNewTaskToReadyList+0x50>
 800902c:	4b15      	ldr	r3, [pc, #84]	; (8009084 <prvAddNewTaskToReadyList+0xa4>)
 800902e:	6018      	str	r0, [r3, #0]
 8009030:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009034:	1d21      	adds	r1, r4, #4
 8009036:	4b14      	ldr	r3, [pc, #80]	; (8009088 <prvAddNewTaskToReadyList+0xa8>)
 8009038:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800903c:	f7ff f96c 	bl	8008318 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009040:	f7ff fa1a 	bl	8008478 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009044:	4b0d      	ldr	r3, [pc, #52]	; (800907c <prvAddNewTaskToReadyList+0x9c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	b17b      	cbz	r3, 800906a <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <prvAddNewTaskToReadyList+0x98>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009052:	429a      	cmp	r2, r3
 8009054:	d209      	bcs.n	800906a <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8009056:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800905a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800905e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	f3bf 8f6f 	isb	sy
}
 800906a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800906c:	f7ff ff84 	bl	8008f78 <prvInitialiseTaskLists>
 8009070:	e7d2      	b.n	8009018 <prvAddNewTaskToReadyList+0x38>
 8009072:	bf00      	nop
 8009074:	20003174 	.word	0x20003174
 8009078:	20002d08 	.word	0x20002d08
 800907c:	200031d4 	.word	0x200031d4
 8009080:	20003184 	.word	0x20003184
 8009084:	20003188 	.word	0x20003188
 8009088:	20002d14 	.word	0x20002d14

0800908c <prvDeleteTCB>:
	{
 800908c:	b510      	push	{r4, lr}
 800908e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009090:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8009094:	b163      	cbz	r3, 80090b0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009096:	2b01      	cmp	r3, #1
 8009098:	d011      	beq.n	80090be <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800909a:	2b02      	cmp	r3, #2
 800909c:	d00e      	beq.n	80090bc <prvDeleteTCB+0x30>
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	e7fe      	b.n	80090ae <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80090b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80090b2:	f7ff f8eb 	bl	800828c <vPortFree>
				vPortFree( pxTCB );
 80090b6:	4620      	mov	r0, r4
 80090b8:	f7ff f8e8 	bl	800828c <vPortFree>
	}
 80090bc:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80090be:	f7ff f8e5 	bl	800828c <vPortFree>
 80090c2:	e7fb      	b.n	80090bc <prvDeleteTCB+0x30>

080090c4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090c4:	4b0f      	ldr	r3, [pc, #60]	; (8009104 <prvCheckTasksWaitingTermination+0x40>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	b1d3      	cbz	r3, 8009100 <prvCheckTasksWaitingTermination+0x3c>
{
 80090ca:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80090cc:	f7ff f9b2 	bl	8008434 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d0:	4b0d      	ldr	r3, [pc, #52]	; (8009108 <prvCheckTasksWaitingTermination+0x44>)
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090d6:	1d20      	adds	r0, r4, #4
 80090d8:	f7ff f942 	bl	8008360 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090dc:	4a0b      	ldr	r2, [pc, #44]	; (800910c <prvCheckTasksWaitingTermination+0x48>)
 80090de:	6813      	ldr	r3, [r2, #0]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090e4:	4a07      	ldr	r2, [pc, #28]	; (8009104 <prvCheckTasksWaitingTermination+0x40>)
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80090ec:	f7ff f9c4 	bl	8008478 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7ff ffcb 	bl	800908c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090f6:	4b03      	ldr	r3, [pc, #12]	; (8009104 <prvCheckTasksWaitingTermination+0x40>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e6      	bne.n	80090cc <prvCheckTasksWaitingTermination+0x8>
}
 80090fe:	bd10      	pop	{r4, pc}
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20003178 	.word	0x20003178
 8009108:	200031ec 	.word	0x200031ec
 800910c:	20003174 	.word	0x20003174

08009110 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	4604      	mov	r4, r0
 8009114:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009116:	4b17      	ldr	r3, [pc, #92]	; (8009174 <prvAddCurrentTaskToDelayedList+0x64>)
 8009118:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800911a:	4b17      	ldr	r3, [pc, #92]	; (8009178 <prvAddCurrentTaskToDelayedList+0x68>)
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	3004      	adds	r0, #4
 8009120:	f7ff f91e 	bl	8008360 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009124:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009128:	d00d      	beq.n	8009146 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800912a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800912c:	4b12      	ldr	r3, [pc, #72]	; (8009178 <prvAddCurrentTaskToDelayedList+0x68>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009132:	42a6      	cmp	r6, r4
 8009134:	d910      	bls.n	8009158 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009136:	4b11      	ldr	r3, [pc, #68]	; (800917c <prvAddCurrentTaskToDelayedList+0x6c>)
 8009138:	6818      	ldr	r0, [r3, #0]
 800913a:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <prvAddCurrentTaskToDelayedList+0x68>)
 800913c:	6819      	ldr	r1, [r3, #0]
 800913e:	3104      	adds	r1, #4
 8009140:	f7ff f8f5 	bl	800832e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009144:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009146:	2d00      	cmp	r5, #0
 8009148:	d0ef      	beq.n	800912a <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <prvAddCurrentTaskToDelayedList+0x68>)
 800914c:	6819      	ldr	r1, [r3, #0]
 800914e:	3104      	adds	r1, #4
 8009150:	480b      	ldr	r0, [pc, #44]	; (8009180 <prvAddCurrentTaskToDelayedList+0x70>)
 8009152:	f7ff f8e1 	bl	8008318 <vListInsertEnd>
 8009156:	e7f5      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009158:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <prvAddCurrentTaskToDelayedList+0x74>)
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <prvAddCurrentTaskToDelayedList+0x68>)
 800915e:	6819      	ldr	r1, [r3, #0]
 8009160:	3104      	adds	r1, #4
 8009162:	f7ff f8e4 	bl	800832e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009166:	4b08      	ldr	r3, [pc, #32]	; (8009188 <prvAddCurrentTaskToDelayedList+0x78>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	42a3      	cmp	r3, r4
 800916c:	d9ea      	bls.n	8009144 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800916e:	4b06      	ldr	r3, [pc, #24]	; (8009188 <prvAddCurrentTaskToDelayedList+0x78>)
 8009170:	601c      	str	r4, [r3, #0]
}
 8009172:	e7e7      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x34>
 8009174:	20003200 	.word	0x20003200
 8009178:	20002d08 	.word	0x20002d08
 800917c:	20002d10 	.word	0x20002d10
 8009180:	200031d8 	.word	0x200031d8
 8009184:	20002d0c 	.word	0x20002d0c
 8009188:	200031b8 	.word	0x200031b8

0800918c <xTaskCreateStatic>:
	{
 800918c:	b530      	push	{r4, r5, lr}
 800918e:	b087      	sub	sp, #28
 8009190:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009192:	b17c      	cbz	r4, 80091b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009194:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009196:	b1b5      	cbz	r5, 80091c6 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009198:	255c      	movs	r5, #92	; 0x5c
 800919a:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800919c:	9d04      	ldr	r5, [sp, #16]
 800919e:	2d5c      	cmp	r5, #92	; 0x5c
 80091a0:	d01a      	beq.n	80091d8 <xTaskCreateStatic+0x4c>
 80091a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	e7fe      	b.n	80091b2 <xTaskCreateStatic+0x26>
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80091c4:	e7fe      	b.n	80091c4 <xTaskCreateStatic+0x38>
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80091d6:	e7fe      	b.n	80091d6 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091d8:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091dc:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091de:	2402      	movs	r4, #2
 80091e0:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091e4:	2400      	movs	r4, #0
 80091e6:	9403      	str	r4, [sp, #12]
 80091e8:	9502      	str	r5, [sp, #8]
 80091ea:	ac05      	add	r4, sp, #20
 80091ec:	9401      	str	r4, [sp, #4]
 80091ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80091f0:	9400      	str	r4, [sp, #0]
 80091f2:	f7ff fe6d 	bl	8008ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80091f8:	f7ff fef2 	bl	8008fe0 <prvAddNewTaskToReadyList>
	}
 80091fc:	9805      	ldr	r0, [sp, #20]
 80091fe:	b007      	add	sp, #28
 8009200:	bd30      	pop	{r4, r5, pc}

08009202 <xTaskCreate>:
	{
 8009202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009206:	b085      	sub	sp, #20
 8009208:	4607      	mov	r7, r0
 800920a:	4688      	mov	r8, r1
 800920c:	4614      	mov	r4, r2
 800920e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009210:	0090      	lsls	r0, r2, #2
 8009212:	f7fe ffc3 	bl	800819c <pvPortMalloc>
			if( pxStack != NULL )
 8009216:	b300      	cbz	r0, 800925a <xTaskCreate+0x58>
 8009218:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800921a:	205c      	movs	r0, #92	; 0x5c
 800921c:	f7fe ffbe 	bl	800819c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009220:	4605      	mov	r5, r0
 8009222:	b1b0      	cbz	r0, 8009252 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8009224:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009228:	b1e5      	cbz	r5, 8009264 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800922a:	2300      	movs	r3, #0
 800922c:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009230:	9303      	str	r3, [sp, #12]
 8009232:	9502      	str	r5, [sp, #8]
 8009234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	4633      	mov	r3, r6
 800923e:	4622      	mov	r2, r4
 8009240:	4641      	mov	r1, r8
 8009242:	4638      	mov	r0, r7
 8009244:	f7ff fe44 	bl	8008ed0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009248:	4628      	mov	r0, r5
 800924a:	f7ff fec9 	bl	8008fe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800924e:	2001      	movs	r0, #1
 8009250:	e005      	b.n	800925e <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8009252:	4648      	mov	r0, r9
 8009254:	f7ff f81a 	bl	800828c <vPortFree>
 8009258:	e7e6      	b.n	8009228 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800925a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800925e:	b005      	add	sp, #20
 8009260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009268:	e7f9      	b.n	800925e <xTaskCreate+0x5c>
	...

0800926c <vTaskStartScheduler>:
{
 800926c:	b510      	push	{r4, lr}
 800926e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009270:	2400      	movs	r4, #0
 8009272:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009274:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009276:	aa07      	add	r2, sp, #28
 8009278:	a906      	add	r1, sp, #24
 800927a:	a805      	add	r0, sp, #20
 800927c:	f7fe ff14 	bl	80080a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009280:	9b05      	ldr	r3, [sp, #20]
 8009282:	9302      	str	r3, [sp, #8]
 8009284:	9b06      	ldr	r3, [sp, #24]
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	9400      	str	r4, [sp, #0]
 800928a:	4623      	mov	r3, r4
 800928c:	9a07      	ldr	r2, [sp, #28]
 800928e:	4918      	ldr	r1, [pc, #96]	; (80092f0 <vTaskStartScheduler+0x84>)
 8009290:	4818      	ldr	r0, [pc, #96]	; (80092f4 <vTaskStartScheduler+0x88>)
 8009292:	f7ff ff7b 	bl	800918c <xTaskCreateStatic>
 8009296:	4b18      	ldr	r3, [pc, #96]	; (80092f8 <vTaskStartScheduler+0x8c>)
 8009298:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800929a:	b140      	cbz	r0, 80092ae <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800929c:	f000 fd00 	bl	8009ca0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80092a0:	2801      	cmp	r0, #1
 80092a2:	d006      	beq.n	80092b2 <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80092a8:	d018      	beq.n	80092dc <vTaskStartScheduler+0x70>
}
 80092aa:	b008      	add	sp, #32
 80092ac:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80092ae:	2000      	movs	r0, #0
 80092b0:	e7f6      	b.n	80092a0 <vTaskStartScheduler+0x34>
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80092c2:	4b0e      	ldr	r3, [pc, #56]	; (80092fc <vTaskStartScheduler+0x90>)
 80092c4:	f04f 32ff 	mov.w	r2, #4294967295
 80092c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092ca:	4b0d      	ldr	r3, [pc, #52]	; (8009300 <vTaskStartScheduler+0x94>)
 80092cc:	2201      	movs	r2, #1
 80092ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092d0:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <vTaskStartScheduler+0x98>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80092d6:	f7ff f9e3 	bl	80086a0 <xPortStartScheduler>
 80092da:	e7e6      	b.n	80092aa <vTaskStartScheduler+0x3e>
 80092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092ec:	e7fe      	b.n	80092ec <vTaskStartScheduler+0x80>
 80092ee:	bf00      	nop
 80092f0:	08015584 	.word	0x08015584
 80092f4:	08009569 	.word	0x08009569
 80092f8:	200031b4 	.word	0x200031b4
 80092fc:	200031b8 	.word	0x200031b8
 8009300:	200031d4 	.word	0x200031d4
 8009304:	20003200 	.word	0x20003200

08009308 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009308:	4a02      	ldr	r2, [pc, #8]	; (8009314 <vTaskSuspendAll+0xc>)
 800930a:	6813      	ldr	r3, [r2, #0]
 800930c:	3301      	adds	r3, #1
 800930e:	6013      	str	r3, [r2, #0]
}
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	20003180 	.word	0x20003180

08009318 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009318:	4b01      	ldr	r3, [pc, #4]	; (8009320 <xTaskGetTickCount+0x8>)
 800931a:	6818      	ldr	r0, [r3, #0]
}
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20003200 	.word	0x20003200

08009324 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8009324:	4b0a      	ldr	r3, [pc, #40]	; (8009350 <vTaskStepTick+0x2c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4403      	add	r3, r0
 800932a:	4a0a      	ldr	r2, [pc, #40]	; (8009354 <vTaskStepTick+0x30>)
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	4293      	cmp	r3, r2
 8009330:	d908      	bls.n	8009344 <vTaskStepTick+0x20>
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	e7fe      	b.n	8009342 <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 8009344:	4a02      	ldr	r2, [pc, #8]	; (8009350 <vTaskStepTick+0x2c>)
 8009346:	6813      	ldr	r3, [r2, #0]
 8009348:	4418      	add	r0, r3
 800934a:	6010      	str	r0, [r2, #0]
	}
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20003200 	.word	0x20003200
 8009354:	200031b8 	.word	0x200031b8

08009358 <xTaskIncrementTick>:
{
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800935a:	4b3a      	ldr	r3, [pc, #232]	; (8009444 <xTaskIncrementTick+0xec>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d164      	bne.n	800942c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009362:	4b39      	ldr	r3, [pc, #228]	; (8009448 <xTaskIncrementTick+0xf0>)
 8009364:	681d      	ldr	r5, [r3, #0]
 8009366:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009368:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800936a:	b9c5      	cbnz	r5, 800939e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800936c:	4b37      	ldr	r3, [pc, #220]	; (800944c <xTaskIncrementTick+0xf4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	b143      	cbz	r3, 8009386 <xTaskIncrementTick+0x2e>
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	e7fe      	b.n	8009384 <xTaskIncrementTick+0x2c>
 8009386:	4a31      	ldr	r2, [pc, #196]	; (800944c <xTaskIncrementTick+0xf4>)
 8009388:	6811      	ldr	r1, [r2, #0]
 800938a:	4b31      	ldr	r3, [pc, #196]	; (8009450 <xTaskIncrementTick+0xf8>)
 800938c:	6818      	ldr	r0, [r3, #0]
 800938e:	6010      	str	r0, [r2, #0]
 8009390:	6019      	str	r1, [r3, #0]
 8009392:	4a30      	ldr	r2, [pc, #192]	; (8009454 <xTaskIncrementTick+0xfc>)
 8009394:	6813      	ldr	r3, [r2, #0]
 8009396:	3301      	adds	r3, #1
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	f7ff fd83 	bl	8008ea4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800939e:	4b2e      	ldr	r3, [pc, #184]	; (8009458 <xTaskIncrementTick+0x100>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	42ab      	cmp	r3, r5
 80093a4:	d938      	bls.n	8009418 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80093a6:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093a8:	4b2c      	ldr	r3, [pc, #176]	; (800945c <xTaskIncrementTick+0x104>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80093b2:	009a      	lsls	r2, r3, #2
 80093b4:	4b2a      	ldr	r3, [pc, #168]	; (8009460 <xTaskIncrementTick+0x108>)
 80093b6:	589b      	ldr	r3, [r3, r2]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d93c      	bls.n	8009436 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80093bc:	2701      	movs	r7, #1
 80093be:	e03a      	b.n	8009436 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 80093c0:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093c2:	4b22      	ldr	r3, [pc, #136]	; (800944c <xTaskIncrementTick+0xf4>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	b343      	cbz	r3, 800941c <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ca:	4b20      	ldr	r3, [pc, #128]	; (800944c <xTaskIncrementTick+0xf4>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093d2:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80093d4:	429d      	cmp	r5, r3
 80093d6:	d326      	bcc.n	8009426 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093d8:	1d26      	adds	r6, r4, #4
 80093da:	4630      	mov	r0, r6
 80093dc:	f7fe ffc0 	bl	8008360 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80093e2:	b11b      	cbz	r3, 80093ec <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093e4:	f104 0018 	add.w	r0, r4, #24
 80093e8:	f7fe ffba 	bl	8008360 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093ee:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <xTaskIncrementTick+0x10c>)
 80093f0:	6812      	ldr	r2, [r2, #0]
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d901      	bls.n	80093fa <xTaskIncrementTick+0xa2>
 80093f6:	4a1b      	ldr	r2, [pc, #108]	; (8009464 <xTaskIncrementTick+0x10c>)
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80093fe:	009a      	lsls	r2, r3, #2
 8009400:	4631      	mov	r1, r6
 8009402:	4817      	ldr	r0, [pc, #92]	; (8009460 <xTaskIncrementTick+0x108>)
 8009404:	4410      	add	r0, r2
 8009406:	f7fe ff87 	bl	8008318 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800940a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800940c:	4b13      	ldr	r3, [pc, #76]	; (800945c <xTaskIncrementTick+0x104>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	429a      	cmp	r2, r3
 8009414:	d2d4      	bcs.n	80093c0 <xTaskIncrementTick+0x68>
 8009416:	e7d4      	b.n	80093c2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009418:	2700      	movs	r7, #0
 800941a:	e7d2      	b.n	80093c2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800941c:	4b0e      	ldr	r3, [pc, #56]	; (8009458 <xTaskIncrementTick+0x100>)
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	601a      	str	r2, [r3, #0]
					break;
 8009424:	e7c0      	b.n	80093a8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009426:	4a0c      	ldr	r2, [pc, #48]	; (8009458 <xTaskIncrementTick+0x100>)
 8009428:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800942a:	e7bd      	b.n	80093a8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800942c:	4a0e      	ldr	r2, [pc, #56]	; (8009468 <xTaskIncrementTick+0x110>)
 800942e:	6813      	ldr	r3, [r2, #0]
 8009430:	3301      	adds	r3, #1
 8009432:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009434:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 8009436:	4b0d      	ldr	r3, [pc, #52]	; (800946c <xTaskIncrementTick+0x114>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	b103      	cbz	r3, 800943e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800943c:	2701      	movs	r7, #1
}
 800943e:	4638      	mov	r0, r7
 8009440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009442:	bf00      	nop
 8009444:	20003180 	.word	0x20003180
 8009448:	20003200 	.word	0x20003200
 800944c:	20002d0c 	.word	0x20002d0c
 8009450:	20002d10 	.word	0x20002d10
 8009454:	200031bc 	.word	0x200031bc
 8009458:	200031b8 	.word	0x200031b8
 800945c:	20002d08 	.word	0x20002d08
 8009460:	20002d14 	.word	0x20002d14
 8009464:	20003188 	.word	0x20003188
 8009468:	2000317c 	.word	0x2000317c
 800946c:	20003204 	.word	0x20003204

08009470 <xTaskResumeAll>:
{
 8009470:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009472:	4b35      	ldr	r3, [pc, #212]	; (8009548 <xTaskResumeAll+0xd8>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	b943      	cbnz	r3, 800948a <xTaskResumeAll+0x1a>
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	e7fe      	b.n	8009488 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800948a:	f7fe ffd3 	bl	8008434 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800948e:	4b2e      	ldr	r3, [pc, #184]	; (8009548 <xTaskResumeAll+0xd8>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	3a01      	subs	r2, #1
 8009494:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d14f      	bne.n	800953c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800949c:	4b2b      	ldr	r3, [pc, #172]	; (800954c <xTaskResumeAll+0xdc>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	b90b      	cbnz	r3, 80094a6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80094a2:	2400      	movs	r4, #0
 80094a4:	e04b      	b.n	800953e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80094a6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094a8:	4b29      	ldr	r3, [pc, #164]	; (8009550 <xTaskResumeAll+0xe0>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	b31b      	cbz	r3, 80094f6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ae:	4b28      	ldr	r3, [pc, #160]	; (8009550 <xTaskResumeAll+0xe0>)
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094b4:	f104 0018 	add.w	r0, r4, #24
 80094b8:	f7fe ff52 	bl	8008360 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094bc:	1d25      	adds	r5, r4, #4
 80094be:	4628      	mov	r0, r5
 80094c0:	f7fe ff4e 	bl	8008360 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80094c6:	4b23      	ldr	r3, [pc, #140]	; (8009554 <xTaskResumeAll+0xe4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4298      	cmp	r0, r3
 80094cc:	d901      	bls.n	80094d2 <xTaskResumeAll+0x62>
 80094ce:	4b21      	ldr	r3, [pc, #132]	; (8009554 <xTaskResumeAll+0xe4>)
 80094d0:	6018      	str	r0, [r3, #0]
 80094d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80094d6:	4629      	mov	r1, r5
 80094d8:	4b1f      	ldr	r3, [pc, #124]	; (8009558 <xTaskResumeAll+0xe8>)
 80094da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80094de:	f7fe ff1b 	bl	8008318 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80094e4:	4b1d      	ldr	r3, [pc, #116]	; (800955c <xTaskResumeAll+0xec>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d3dc      	bcc.n	80094a8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80094ee:	4b1c      	ldr	r3, [pc, #112]	; (8009560 <xTaskResumeAll+0xf0>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	e7d8      	b.n	80094a8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80094f6:	b10c      	cbz	r4, 80094fc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80094f8:	f7ff fcd4 	bl	8008ea4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80094fc:	4b19      	ldr	r3, [pc, #100]	; (8009564 <xTaskResumeAll+0xf4>)
 80094fe:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009500:	b984      	cbnz	r4, 8009524 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8009502:	4b17      	ldr	r3, [pc, #92]	; (8009560 <xTaskResumeAll+0xf0>)
 8009504:	681c      	ldr	r4, [r3, #0]
 8009506:	b1d4      	cbz	r4, 800953e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8009508:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800950c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009510:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800951c:	2401      	movs	r4, #1
 800951e:	e00e      	b.n	800953e <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009520:	3c01      	subs	r4, #1
 8009522:	d007      	beq.n	8009534 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8009524:	f7ff ff18 	bl	8009358 <xTaskIncrementTick>
 8009528:	2800      	cmp	r0, #0
 800952a:	d0f9      	beq.n	8009520 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800952c:	4b0c      	ldr	r3, [pc, #48]	; (8009560 <xTaskResumeAll+0xf0>)
 800952e:	2201      	movs	r2, #1
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	e7f5      	b.n	8009520 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8009534:	4b0b      	ldr	r3, [pc, #44]	; (8009564 <xTaskResumeAll+0xf4>)
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	e7e2      	b.n	8009502 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800953c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800953e:	f7fe ff9b 	bl	8008478 <vPortExitCritical>
}
 8009542:	4620      	mov	r0, r4
 8009544:	bd38      	pop	{r3, r4, r5, pc}
 8009546:	bf00      	nop
 8009548:	20003180 	.word	0x20003180
 800954c:	20003174 	.word	0x20003174
 8009550:	200031c0 	.word	0x200031c0
 8009554:	20003188 	.word	0x20003188
 8009558:	20002d14 	.word	0x20002d14
 800955c:	20002d08 	.word	0x20002d08
 8009560:	20003204 	.word	0x20003204
 8009564:	2000317c 	.word	0x2000317c

08009568 <prvIdleTask>:
{
 8009568:	b508      	push	{r3, lr}
 800956a:	e003      	b.n	8009574 <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800956c:	f7ff fc7a 	bl	8008e64 <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009570:	2801      	cmp	r0, #1
 8009572:	d810      	bhi.n	8009596 <prvIdleTask+0x2e>
		prvCheckTasksWaitingTermination();
 8009574:	f7ff fda6 	bl	80090c4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009578:	4b14      	ldr	r3, [pc, #80]	; (80095cc <prvIdleTask+0x64>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d9f5      	bls.n	800956c <prvIdleTask+0x4>
				taskYIELD();
 8009580:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009588:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	e7ea      	b.n	800956c <prvIdleTask+0x4>
				vTaskSuspendAll();
 8009596:	f7ff feb7 	bl	8009308 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800959a:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <prvIdleTask+0x68>)
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <prvIdleTask+0x6c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d306      	bcc.n	80095b4 <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80095a6:	f7ff fc5d 	bl	8008e64 <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80095aa:	2801      	cmp	r0, #1
 80095ac:	d80b      	bhi.n	80095c6 <prvIdleTask+0x5e>
				( void ) xTaskResumeAll();
 80095ae:	f7ff ff5f 	bl	8009470 <xTaskResumeAll>
 80095b2:	e7df      	b.n	8009574 <prvIdleTask+0xc>
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80095c4:	e7fe      	b.n	80095c4 <prvIdleTask+0x5c>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80095c6:	f7fe ffab 	bl	8008520 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 80095ca:	e7f0      	b.n	80095ae <prvIdleTask+0x46>
 80095cc:	20002d14 	.word	0x20002d14
 80095d0:	200031b8 	.word	0x200031b8
 80095d4:	20003200 	.word	0x20003200

080095d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095d8:	4b1f      	ldr	r3, [pc, #124]	; (8009658 <vTaskSwitchContext+0x80>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	b11b      	cbz	r3, 80095e6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80095de:	4b1f      	ldr	r3, [pc, #124]	; (800965c <vTaskSwitchContext+0x84>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80095e6:	4b1d      	ldr	r3, [pc, #116]	; (800965c <vTaskSwitchContext+0x84>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ec:	4b1c      	ldr	r3, [pc, #112]	; (8009660 <vTaskSwitchContext+0x88>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80095f4:	008a      	lsls	r2, r1, #2
 80095f6:	491b      	ldr	r1, [pc, #108]	; (8009664 <vTaskSwitchContext+0x8c>)
 80095f8:	588a      	ldr	r2, [r1, r2]
 80095fa:	b95a      	cbnz	r2, 8009614 <vTaskSwitchContext+0x3c>
 80095fc:	b10b      	cbz	r3, 8009602 <vTaskSwitchContext+0x2a>
 80095fe:	3b01      	subs	r3, #1
 8009600:	e7f6      	b.n	80095f0 <vTaskSwitchContext+0x18>
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	e7fe      	b.n	8009612 <vTaskSwitchContext+0x3a>
 8009614:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009618:	0082      	lsls	r2, r0, #2
 800961a:	440a      	add	r2, r1
 800961c:	6850      	ldr	r0, [r2, #4]
 800961e:	6840      	ldr	r0, [r0, #4]
 8009620:	6050      	str	r0, [r2, #4]
 8009622:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8009626:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800962a:	3208      	adds	r2, #8
 800962c:	4411      	add	r1, r2
 800962e:	4288      	cmp	r0, r1
 8009630:	d00b      	beq.n	800964a <vTaskSwitchContext+0x72>
 8009632:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009636:	0091      	lsls	r1, r2, #2
 8009638:	4a0a      	ldr	r2, [pc, #40]	; (8009664 <vTaskSwitchContext+0x8c>)
 800963a:	440a      	add	r2, r1
 800963c:	6852      	ldr	r2, [r2, #4]
 800963e:	68d1      	ldr	r1, [r2, #12]
 8009640:	4a09      	ldr	r2, [pc, #36]	; (8009668 <vTaskSwitchContext+0x90>)
 8009642:	6011      	str	r1, [r2, #0]
 8009644:	4a06      	ldr	r2, [pc, #24]	; (8009660 <vTaskSwitchContext+0x88>)
 8009646:	6013      	str	r3, [r2, #0]
}
 8009648:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800964a:	6840      	ldr	r0, [r0, #4]
 800964c:	4662      	mov	r2, ip
 800964e:	0091      	lsls	r1, r2, #2
 8009650:	4a04      	ldr	r2, [pc, #16]	; (8009664 <vTaskSwitchContext+0x8c>)
 8009652:	440a      	add	r2, r1
 8009654:	6050      	str	r0, [r2, #4]
 8009656:	e7ec      	b.n	8009632 <vTaskSwitchContext+0x5a>
 8009658:	20003180 	.word	0x20003180
 800965c:	20003204 	.word	0x20003204
 8009660:	20003188 	.word	0x20003188
 8009664:	20002d14 	.word	0x20002d14
 8009668:	20002d08 	.word	0x20002d08

0800966c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800966c:	b158      	cbz	r0, 8009686 <vTaskPlaceOnEventList+0x1a>
{
 800966e:	b510      	push	{r4, lr}
 8009670:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009672:	4a09      	ldr	r2, [pc, #36]	; (8009698 <vTaskPlaceOnEventList+0x2c>)
 8009674:	6811      	ldr	r1, [r2, #0]
 8009676:	3118      	adds	r1, #24
 8009678:	f7fe fe59 	bl	800832e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800967c:	2101      	movs	r1, #1
 800967e:	4620      	mov	r0, r4
 8009680:	f7ff fd46 	bl	8009110 <prvAddCurrentTaskToDelayedList>
}
 8009684:	bd10      	pop	{r4, pc}
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009696:	e7fe      	b.n	8009696 <vTaskPlaceOnEventList+0x2a>
 8009698:	20002d08 	.word	0x20002d08

0800969c <vTaskPlaceOnEventListRestricted>:
	{
 800969c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800969e:	b170      	cbz	r0, 80096be <vTaskPlaceOnEventListRestricted+0x22>
 80096a0:	460d      	mov	r5, r1
 80096a2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096a4:	4a0a      	ldr	r2, [pc, #40]	; (80096d0 <vTaskPlaceOnEventListRestricted+0x34>)
 80096a6:	6811      	ldr	r1, [r2, #0]
 80096a8:	3118      	adds	r1, #24
 80096aa:	f7fe fe35 	bl	8008318 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80096ae:	b10c      	cbz	r4, 80096b4 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80096b0:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096b4:	4621      	mov	r1, r4
 80096b6:	4628      	mov	r0, r5
 80096b8:	f7ff fd2a 	bl	8009110 <prvAddCurrentTaskToDelayedList>
	}
 80096bc:	bd38      	pop	{r3, r4, r5, pc}
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80096ce:	e7fe      	b.n	80096ce <vTaskPlaceOnEventListRestricted+0x32>
 80096d0:	20002d08 	.word	0x20002d08

080096d4 <xTaskRemoveFromEventList>:
{
 80096d4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096d6:	68c3      	ldr	r3, [r0, #12]
 80096d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80096da:	b334      	cbz	r4, 800972a <xTaskRemoveFromEventList+0x56>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096dc:	f104 0518 	add.w	r5, r4, #24
 80096e0:	4628      	mov	r0, r5
 80096e2:	f7fe fe3d 	bl	8008360 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e6:	4b19      	ldr	r3, [pc, #100]	; (800974c <xTaskRemoveFromEventList+0x78>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	bb3b      	cbnz	r3, 800973c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096ec:	1d25      	adds	r5, r4, #4
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7fe fe36 	bl	8008360 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80096f6:	4b16      	ldr	r3, [pc, #88]	; (8009750 <xTaskRemoveFromEventList+0x7c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4298      	cmp	r0, r3
 80096fc:	d901      	bls.n	8009702 <xTaskRemoveFromEventList+0x2e>
 80096fe:	4b14      	ldr	r3, [pc, #80]	; (8009750 <xTaskRemoveFromEventList+0x7c>)
 8009700:	6018      	str	r0, [r3, #0]
 8009702:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009706:	4629      	mov	r1, r5
 8009708:	4b12      	ldr	r3, [pc, #72]	; (8009754 <xTaskRemoveFromEventList+0x80>)
 800970a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800970e:	f7fe fe03 	bl	8008318 <vListInsertEnd>
			prvResetNextTaskUnblockTime();
 8009712:	f7ff fbc7 	bl	8008ea4 <prvResetNextTaskUnblockTime>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009716:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <xTaskRemoveFromEventList+0x84>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971e:	429a      	cmp	r2, r3
 8009720:	d911      	bls.n	8009746 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8009722:	2001      	movs	r0, #1
 8009724:	4b0d      	ldr	r3, [pc, #52]	; (800975c <xTaskRemoveFromEventList+0x88>)
 8009726:	6018      	str	r0, [r3, #0]
}
 8009728:	bd38      	pop	{r3, r4, r5, pc}
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800973a:	e7fe      	b.n	800973a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800973c:	4629      	mov	r1, r5
 800973e:	4808      	ldr	r0, [pc, #32]	; (8009760 <xTaskRemoveFromEventList+0x8c>)
 8009740:	f7fe fdea 	bl	8008318 <vListInsertEnd>
 8009744:	e7e7      	b.n	8009716 <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 8009746:	2000      	movs	r0, #0
	return xReturn;
 8009748:	e7ee      	b.n	8009728 <xTaskRemoveFromEventList+0x54>
 800974a:	bf00      	nop
 800974c:	20003180 	.word	0x20003180
 8009750:	20003188 	.word	0x20003188
 8009754:	20002d14 	.word	0x20002d14
 8009758:	20002d08 	.word	0x20002d08
 800975c:	20003204 	.word	0x20003204
 8009760:	200031c0 	.word	0x200031c0

08009764 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009764:	4b03      	ldr	r3, [pc, #12]	; (8009774 <vTaskInternalSetTimeOutState+0x10>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800976a:	4b03      	ldr	r3, [pc, #12]	; (8009778 <vTaskInternalSetTimeOutState+0x14>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6043      	str	r3, [r0, #4]
}
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	200031bc 	.word	0x200031bc
 8009778:	20003200 	.word	0x20003200

0800977c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800977c:	b1d8      	cbz	r0, 80097b6 <xTaskCheckForTimeOut+0x3a>
{
 800977e:	b570      	push	{r4, r5, r6, lr}
 8009780:	460c      	mov	r4, r1
 8009782:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009784:	b301      	cbz	r1, 80097c8 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8009786:	f7fe fe55 	bl	8008434 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800978a:	4b1b      	ldr	r3, [pc, #108]	; (80097f8 <xTaskCheckForTimeOut+0x7c>)
 800978c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800978e:	686b      	ldr	r3, [r5, #4]
 8009790:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009798:	d027      	beq.n	80097ea <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800979a:	4e18      	ldr	r6, [pc, #96]	; (80097fc <xTaskCheckForTimeOut+0x80>)
 800979c:	6836      	ldr	r6, [r6, #0]
 800979e:	f8d5 c000 	ldr.w	ip, [r5]
 80097a2:	45b4      	cmp	ip, r6
 80097a4:	d001      	beq.n	80097aa <xTaskCheckForTimeOut+0x2e>
 80097a6:	428b      	cmp	r3, r1
 80097a8:	d924      	bls.n	80097f4 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097aa:	4282      	cmp	r2, r0
 80097ac:	d815      	bhi.n	80097da <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80097b2:	2401      	movs	r4, #1
 80097b4:	e01a      	b.n	80097ec <xTaskCheckForTimeOut+0x70>
 80097b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80097c6:	e7fe      	b.n	80097c6 <xTaskCheckForTimeOut+0x4a>
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80097d8:	e7fe      	b.n	80097d8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 80097da:	1a5b      	subs	r3, r3, r1
 80097dc:	4413      	add	r3, r2
 80097de:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097e0:	4628      	mov	r0, r5
 80097e2:	f7ff ffbf 	bl	8009764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097e6:	2400      	movs	r4, #0
 80097e8:	e000      	b.n	80097ec <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 80097ea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80097ec:	f7fe fe44 	bl	8008478 <vPortExitCritical>
}
 80097f0:	4620      	mov	r0, r4
 80097f2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 80097f4:	2401      	movs	r4, #1
 80097f6:	e7f9      	b.n	80097ec <xTaskCheckForTimeOut+0x70>
 80097f8:	20003200 	.word	0x20003200
 80097fc:	200031bc 	.word	0x200031bc

08009800 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009800:	4b01      	ldr	r3, [pc, #4]	; (8009808 <vTaskMissedYield+0x8>)
 8009802:	2201      	movs	r2, #1
 8009804:	601a      	str	r2, [r3, #0]
}
 8009806:	4770      	bx	lr
 8009808:	20003204 	.word	0x20003204

0800980c <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800980c:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <eTaskConfirmSleepModeStatus+0x2c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	b95b      	cbnz	r3, 800982a <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 8009812:	4b0a      	ldr	r3, [pc, #40]	; (800983c <eTaskConfirmSleepModeStatus+0x30>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	b953      	cbnz	r3, 800982e <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009818:	4b09      	ldr	r3, [pc, #36]	; (8009840 <eTaskConfirmSleepModeStatus+0x34>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	4b09      	ldr	r3, [pc, #36]	; (8009844 <eTaskConfirmSleepModeStatus+0x38>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3b01      	subs	r3, #1
 8009822:	429a      	cmp	r2, r3
 8009824:	d005      	beq.n	8009832 <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 8009826:	2001      	movs	r0, #1
 8009828:	4770      	bx	lr
			eReturn = eAbortSleep;
 800982a:	2000      	movs	r0, #0
 800982c:	4770      	bx	lr
			eReturn = eAbortSleep;
 800982e:	2000      	movs	r0, #0
 8009830:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 8009832:	2002      	movs	r0, #2
	}
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	200031c0 	.word	0x200031c0
 800983c:	20003204 	.word	0x20003204
 8009840:	200031d8 	.word	0x200031d8
 8009844:	20003174 	.word	0x20003174

08009848 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <xTaskGetSchedulerState+0x18>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	b133      	cbz	r3, 800985c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <xTaskGetSchedulerState+0x1c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	b10b      	cbz	r3, 8009858 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009854:	2000      	movs	r0, #0
	}
 8009856:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8009858:	2002      	movs	r0, #2
 800985a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800985c:	2001      	movs	r0, #1
 800985e:	4770      	bx	lr
 8009860:	200031d4 	.word	0x200031d4
 8009864:	20003180 	.word	0x20003180

08009868 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009868:	2800      	cmp	r0, #0
 800986a:	d03b      	beq.n	80098e4 <xTaskPriorityDisinherit+0x7c>
	{
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009870:	4b1e      	ldr	r3, [pc, #120]	; (80098ec <xTaskPriorityDisinherit+0x84>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4283      	cmp	r3, r0
 8009876:	d008      	beq.n	800988a <xTaskPriorityDisinherit+0x22>
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	e7fe      	b.n	8009888 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800988a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800988c:	b943      	cbnz	r3, 80098a0 <xTaskPriorityDisinherit+0x38>
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	e7fe      	b.n	800989e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80098a0:	3b01      	subs	r3, #1
 80098a2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098a4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80098a6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80098a8:	4291      	cmp	r1, r2
 80098aa:	d01d      	beq.n	80098e8 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098ac:	b10b      	cbz	r3, 80098b2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80098ae:	2000      	movs	r0, #0
	}
 80098b0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098b2:	1d05      	adds	r5, r0, #4
 80098b4:	4628      	mov	r0, r5
 80098b6:	f7fe fd53 	bl	8008360 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098ba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80098bc:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098be:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 80098c2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80098c4:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <xTaskPriorityDisinherit+0x88>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4298      	cmp	r0, r3
 80098ca:	d901      	bls.n	80098d0 <xTaskPriorityDisinherit+0x68>
 80098cc:	4b08      	ldr	r3, [pc, #32]	; (80098f0 <xTaskPriorityDisinherit+0x88>)
 80098ce:	6018      	str	r0, [r3, #0]
 80098d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80098d4:	4629      	mov	r1, r5
 80098d6:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <xTaskPriorityDisinherit+0x8c>)
 80098d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80098dc:	f7fe fd1c 	bl	8008318 <vListInsertEnd>
					xReturn = pdTRUE;
 80098e0:	2001      	movs	r0, #1
 80098e2:	e7e5      	b.n	80098b0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80098e4:	2000      	movs	r0, #0
	}
 80098e6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80098e8:	2000      	movs	r0, #0
 80098ea:	e7e1      	b.n	80098b0 <xTaskPriorityDisinherit+0x48>
 80098ec:	20002d08 	.word	0x20002d08
 80098f0:	20003188 	.word	0x20003188
 80098f4:	20002d14 	.word	0x20002d14

080098f8 <xTaskNotifyWait>:
	{
 80098f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fa:	4606      	mov	r6, r0
 80098fc:	460f      	mov	r7, r1
 80098fe:	4614      	mov	r4, r2
 8009900:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 8009902:	f7fe fd97 	bl	8008434 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009906:	4b21      	ldr	r3, [pc, #132]	; (800998c <xTaskNotifyWait+0x94>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800990e:	b2d2      	uxtb	r2, r2
 8009910:	2a02      	cmp	r2, #2
 8009912:	d00a      	beq.n	800992a <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009914:	4b1d      	ldr	r3, [pc, #116]	; (800998c <xTaskNotifyWait+0x94>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800991a:	ea20 0606 	bic.w	r6, r0, r6
 800991e:	6556      	str	r6, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 8009928:	b9cd      	cbnz	r5, 800995e <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800992a:	f7fe fda5 	bl	8008478 <vPortExitCritical>
		taskENTER_CRITICAL();
 800992e:	f7fe fd81 	bl	8008434 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8009932:	b11c      	cbz	r4, 800993c <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009934:	4b15      	ldr	r3, [pc, #84]	; (800998c <xTaskNotifyWait+0x94>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993a:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800993c:	4b13      	ldr	r3, [pc, #76]	; (800998c <xTaskNotifyWait+0x94>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b02      	cmp	r3, #2
 8009948:	d018      	beq.n	800997c <xTaskNotifyWait+0x84>
				xReturn = pdFALSE;
 800994a:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800994c:	4b0f      	ldr	r3, [pc, #60]	; (800998c <xTaskNotifyWait+0x94>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 8009956:	f7fe fd8f 	bl	8008478 <vPortExitCritical>
	}
 800995a:	4620      	mov	r0, r4
 800995c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800995e:	4611      	mov	r1, r2
 8009960:	4628      	mov	r0, r5
 8009962:	f7ff fbd5 	bl	8009110 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8009966:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800996a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800996e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	e7d6      	b.n	800992a <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800997c:	4b03      	ldr	r3, [pc, #12]	; (800998c <xTaskNotifyWait+0x94>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009982:	ea21 0707 	bic.w	r7, r1, r7
 8009986:	655f      	str	r7, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8009988:	2401      	movs	r4, #1
 800998a:	e7df      	b.n	800994c <xTaskNotifyWait+0x54>
 800998c:	20002d08 	.word	0x20002d08

08009990 <xTaskGenericNotify>:
	{
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8009992:	b1a8      	cbz	r0, 80099c0 <xTaskGenericNotify+0x30>
 8009994:	460f      	mov	r7, r1
 8009996:	4614      	mov	r4, r2
 8009998:	461d      	mov	r5, r3
 800999a:	4606      	mov	r6, r0
		taskENTER_CRITICAL();
 800999c:	f7fe fd4a 	bl	8008434 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80099a0:	b10d      	cbz	r5, 80099a6 <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80099a2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80099a4:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80099a6:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 80099aa:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80099ac:	2202      	movs	r2, #2
 80099ae:	f886 2058 	strb.w	r2, [r6, #88]	; 0x58
			switch( eAction )
 80099b2:	2c04      	cmp	r4, #4
 80099b4:	d81f      	bhi.n	80099f6 <xTaskGenericNotify+0x66>
 80099b6:	e8df f004 	tbb	[pc, r4]
 80099ba:	0c2b      	.short	0x0c2b
 80099bc:	1611      	.short	0x1611
 80099be:	19          	.byte	0x19
 80099bf:	00          	.byte	0x00
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 80099d0:	e7fe      	b.n	80099d0 <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 80099d2:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80099d4:	4317      	orrs	r7, r2
 80099d6:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80099d8:	2401      	movs	r4, #1
					break;
 80099da:	e01a      	b.n	8009a12 <xTaskGenericNotify+0x82>
					( pxTCB->ulNotifiedValue )++;
 80099dc:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80099de:	3201      	adds	r2, #1
 80099e0:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80099e2:	2401      	movs	r4, #1
					break;
 80099e4:	e015      	b.n	8009a12 <xTaskGenericNotify+0x82>
					pxTCB->ulNotifiedValue = ulValue;
 80099e6:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80099e8:	2401      	movs	r4, #1
					break;
 80099ea:	e012      	b.n	8009a12 <xTaskGenericNotify+0x82>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d016      	beq.n	8009a1e <xTaskGenericNotify+0x8e>
						pxTCB->ulNotifiedValue = ulValue;
 80099f0:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 80099f2:	2401      	movs	r4, #1
 80099f4:	e00d      	b.n	8009a12 <xTaskGenericNotify+0x82>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80099f6:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80099f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80099fc:	d011      	beq.n	8009a22 <xTaskGenericNotify+0x92>
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	e7fe      	b.n	8009a0e <xTaskGenericNotify+0x7e>
			switch( eAction )
 8009a10:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d007      	beq.n	8009a26 <xTaskGenericNotify+0x96>
		taskEXIT_CRITICAL();
 8009a16:	f7fe fd2f 	bl	8008478 <vPortExitCritical>
	}
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 8009a1e:	2400      	movs	r4, #0
 8009a20:	e7f7      	b.n	8009a12 <xTaskGenericNotify+0x82>
	BaseType_t xReturn = pdPASS;
 8009a22:	2401      	movs	r4, #1
 8009a24:	e7f5      	b.n	8009a12 <xTaskGenericNotify+0x82>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a26:	1d35      	adds	r5, r6, #4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f7fe fc99 	bl	8008360 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009a2e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8009a30:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <xTaskGenericNotify+0xf8>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4298      	cmp	r0, r3
 8009a36:	d901      	bls.n	8009a3c <xTaskGenericNotify+0xac>
 8009a38:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <xTaskGenericNotify+0xf8>)
 8009a3a:	6018      	str	r0, [r3, #0]
 8009a3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009a40:	4629      	mov	r1, r5
 8009a42:	4b12      	ldr	r3, [pc, #72]	; (8009a8c <xTaskGenericNotify+0xfc>)
 8009a44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a48:	f7fe fc66 	bl	8008318 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009a4c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009a4e:	b143      	cbz	r3, 8009a62 <xTaskGenericNotify+0xd2>
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	e7fe      	b.n	8009a60 <xTaskGenericNotify+0xd0>
					prvResetNextTaskUnblockTime();
 8009a62:	f7ff fa1f 	bl	8008ea4 <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a66:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8009a68:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <xTaskGenericNotify+0x100>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d9d1      	bls.n	8009a16 <xTaskGenericNotify+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 8009a72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	e7c6      	b.n	8009a16 <xTaskGenericNotify+0x86>
 8009a88:	20003188 	.word	0x20003188
 8009a8c:	20002d14 	.word	0x20002d14
 8009a90:	20002d08 	.word	0x20002d08

08009a94 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 8009a94:	b308      	cbz	r0, 8009ada <xTaskGenericNotifyFromISR+0x46>
	{
 8009a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9a:	460e      	mov	r6, r1
 8009a9c:	4614      	mov	r4, r2
 8009a9e:	461d      	mov	r5, r3
 8009aa0:	4607      	mov	r7, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009aa2:	f7fe fe5d 	bl	8008760 <vPortValidateInterruptPriority>
	__asm volatile
 8009aa6:	f3ef 8811 	mrs	r8, BASEPRI
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8009aba:	b10d      	cbz	r5, 8009ac0 <xTaskGenericNotifyFromISR+0x2c>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009abe:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ac0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009ac4:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
			switch( eAction )
 8009acc:	2c04      	cmp	r4, #4
 8009ace:	d81f      	bhi.n	8009b10 <xTaskGenericNotifyFromISR+0x7c>
 8009ad0:	e8df f004 	tbb	[pc, r4]
 8009ad4:	16110c2b 	.word	0x16110c2b
 8009ad8:	19          	.byte	0x19
 8009ad9:	00          	.byte	0x00
	__asm volatile
 8009ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 8009aea:	e7fe      	b.n	8009aea <xTaskGenericNotifyFromISR+0x56>
					pxTCB->ulNotifiedValue |= ulValue;
 8009aec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009aee:	4316      	orrs	r6, r2
 8009af0:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009af2:	2401      	movs	r4, #1
					break;
 8009af4:	e01a      	b.n	8009b2c <xTaskGenericNotifyFromISR+0x98>
					( pxTCB->ulNotifiedValue )++;
 8009af6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009af8:	3201      	adds	r2, #1
 8009afa:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009afc:	2401      	movs	r4, #1
					break;
 8009afe:	e015      	b.n	8009b2c <xTaskGenericNotifyFromISR+0x98>
					pxTCB->ulNotifiedValue = ulValue;
 8009b00:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009b02:	2401      	movs	r4, #1
					break;
 8009b04:	e012      	b.n	8009b2c <xTaskGenericNotifyFromISR+0x98>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d017      	beq.n	8009b3a <xTaskGenericNotifyFromISR+0xa6>
						pxTCB->ulNotifiedValue = ulValue;
 8009b0a:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009b0c:	2401      	movs	r4, #1
 8009b0e:	e00d      	b.n	8009b2c <xTaskGenericNotifyFromISR+0x98>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009b10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b12:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b16:	d012      	beq.n	8009b3e <xTaskGenericNotifyFromISR+0xaa>
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	e7fe      	b.n	8009b28 <xTaskGenericNotifyFromISR+0x94>
			switch( eAction )
 8009b2a:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d008      	beq.n	8009b42 <xTaskGenericNotifyFromISR+0xae>
	__asm volatile
 8009b30:	f388 8811 	msr	BASEPRI, r8
	}
 8009b34:	4620      	mov	r0, r4
 8009b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						xReturn = pdFAIL;
 8009b3a:	2400      	movs	r4, #0
 8009b3c:	e7f6      	b.n	8009b2c <xTaskGenericNotifyFromISR+0x98>
	BaseType_t xReturn = pdPASS;
 8009b3e:	2401      	movs	r4, #1
 8009b40:	e7f4      	b.n	8009b2c <xTaskGenericNotifyFromISR+0x98>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b44:	b143      	cbz	r3, 8009b58 <xTaskGenericNotifyFromISR+0xc4>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	e7fe      	b.n	8009b56 <xTaskGenericNotifyFromISR+0xc2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b58:	4b15      	ldr	r3, [pc, #84]	; (8009bb0 <xTaskGenericNotifyFromISR+0x11c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	bb0b      	cbnz	r3, 8009ba2 <xTaskGenericNotifyFromISR+0x10e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b5e:	1d3d      	adds	r5, r7, #4
 8009b60:	4628      	mov	r0, r5
 8009b62:	f7fe fbfd 	bl	8008360 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b68:	4b12      	ldr	r3, [pc, #72]	; (8009bb4 <xTaskGenericNotifyFromISR+0x120>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4298      	cmp	r0, r3
 8009b6e:	d901      	bls.n	8009b74 <xTaskGenericNotifyFromISR+0xe0>
 8009b70:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <xTaskGenericNotifyFromISR+0x120>)
 8009b72:	6018      	str	r0, [r3, #0]
 8009b74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4b0f      	ldr	r3, [pc, #60]	; (8009bb8 <xTaskGenericNotifyFromISR+0x124>)
 8009b7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b80:	f7fe fbca 	bl	8008318 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b86:	4b0d      	ldr	r3, [pc, #52]	; (8009bbc <xTaskGenericNotifyFromISR+0x128>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d9cf      	bls.n	8009b30 <xTaskGenericNotifyFromISR+0x9c>
					if( pxHigherPriorityTaskWoken != NULL )
 8009b90:	9b06      	ldr	r3, [sp, #24]
 8009b92:	b113      	cbz	r3, 8009b9a <xTaskGenericNotifyFromISR+0x106>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009b94:	2301      	movs	r3, #1
 8009b96:	9a06      	ldr	r2, [sp, #24]
 8009b98:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <xTaskGenericNotifyFromISR+0x12c>)
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	e7c6      	b.n	8009b30 <xTaskGenericNotifyFromISR+0x9c>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009ba2:	f107 0118 	add.w	r1, r7, #24
 8009ba6:	4807      	ldr	r0, [pc, #28]	; (8009bc4 <xTaskGenericNotifyFromISR+0x130>)
 8009ba8:	f7fe fbb6 	bl	8008318 <vListInsertEnd>
 8009bac:	e7ea      	b.n	8009b84 <xTaskGenericNotifyFromISR+0xf0>
 8009bae:	bf00      	nop
 8009bb0:	20003180 	.word	0x20003180
 8009bb4:	20003188 	.word	0x20003188
 8009bb8:	20002d14 	.word	0x20002d14
 8009bbc:	20002d08 	.word	0x20002d08
 8009bc0:	20003204 	.word	0x20003204
 8009bc4:	200031c0 	.word	0x200031c0

08009bc8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bc8:	4b06      	ldr	r3, [pc, #24]	; (8009be4 <prvGetNextExpireTime+0x1c>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	6813      	ldr	r3, [r2, #0]
 8009bce:	b92b      	cbnz	r3, 8009bdc <prvGetNextExpireTime+0x14>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bd4:	b923      	cbnz	r3, 8009be0 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bd6:	68d3      	ldr	r3, [r2, #12]
 8009bd8:	6818      	ldr	r0, [r3, #0]
 8009bda:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e7f8      	b.n	8009bd2 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009be0:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8009be2:	4770      	bx	lr
 8009be4:	20003208 	.word	0x20003208

08009be8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009be8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009bea:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bec:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009bee:	4291      	cmp	r1, r2
 8009bf0:	d80c      	bhi.n	8009c0c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bf2:	1ad2      	subs	r2, r2, r3
 8009bf4:	6983      	ldr	r3, [r0, #24]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d301      	bcc.n	8009bfe <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bfa:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8009bfc:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bfe:	1d01      	adds	r1, r0, #4
 8009c00:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <prvInsertTimerInActiveList+0x40>)
 8009c02:	6818      	ldr	r0, [r3, #0]
 8009c04:	f7fe fb93 	bl	800832e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009c08:	2000      	movs	r0, #0
 8009c0a:	e7f7      	b.n	8009bfc <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d201      	bcs.n	8009c14 <prvInsertTimerInActiveList+0x2c>
 8009c10:	4299      	cmp	r1, r3
 8009c12:	d206      	bcs.n	8009c22 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c14:	1d01      	adds	r1, r0, #4
 8009c16:	4b05      	ldr	r3, [pc, #20]	; (8009c2c <prvInsertTimerInActiveList+0x44>)
 8009c18:	6818      	ldr	r0, [r3, #0]
 8009c1a:	f7fe fb88 	bl	800832e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009c1e:	2000      	movs	r0, #0
 8009c20:	e7ec      	b.n	8009bfc <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8009c22:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009c24:	e7ea      	b.n	8009bfc <prvInsertTimerInActiveList+0x14>
 8009c26:	bf00      	nop
 8009c28:	2000320c 	.word	0x2000320c
 8009c2c:	20003208 	.word	0x20003208

08009c30 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c30:	b530      	push	{r4, r5, lr}
 8009c32:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c34:	f7fe fbfe 	bl	8008434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c38:	4b11      	ldr	r3, [pc, #68]	; (8009c80 <prvCheckForValidListAndQueue+0x50>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	b11b      	cbz	r3, 8009c46 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c3e:	f7fe fc1b 	bl	8008478 <vPortExitCritical>
}
 8009c42:	b003      	add	sp, #12
 8009c44:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8009c46:	4d0f      	ldr	r5, [pc, #60]	; (8009c84 <prvCheckForValidListAndQueue+0x54>)
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f7fe fb57 	bl	80082fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c4e:	4c0e      	ldr	r4, [pc, #56]	; (8009c88 <prvCheckForValidListAndQueue+0x58>)
 8009c50:	4620      	mov	r0, r4
 8009c52:	f7fe fb53 	bl	80082fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c56:	4b0d      	ldr	r3, [pc, #52]	; (8009c8c <prvCheckForValidListAndQueue+0x5c>)
 8009c58:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c5a:	4b0d      	ldr	r3, [pc, #52]	; (8009c90 <prvCheckForValidListAndQueue+0x60>)
 8009c5c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c5e:	2300      	movs	r3, #0
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	4b0c      	ldr	r3, [pc, #48]	; (8009c94 <prvCheckForValidListAndQueue+0x64>)
 8009c64:	4a0c      	ldr	r2, [pc, #48]	; (8009c98 <prvCheckForValidListAndQueue+0x68>)
 8009c66:	2110      	movs	r1, #16
 8009c68:	200a      	movs	r0, #10
 8009c6a:	f7fe fe9a 	bl	80089a2 <xQueueGenericCreateStatic>
 8009c6e:	4b04      	ldr	r3, [pc, #16]	; (8009c80 <prvCheckForValidListAndQueue+0x50>)
 8009c70:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d0e3      	beq.n	8009c3e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c76:	4909      	ldr	r1, [pc, #36]	; (8009c9c <prvCheckForValidListAndQueue+0x6c>)
 8009c78:	f7ff f8b6 	bl	8008de8 <vQueueAddToRegistry>
 8009c7c:	e7df      	b.n	8009c3e <prvCheckForValidListAndQueue+0xe>
 8009c7e:	bf00      	nop
 8009c80:	2000332c 	.word	0x2000332c
 8009c84:	200032b0 	.word	0x200032b0
 8009c88:	200032c4 	.word	0x200032c4
 8009c8c:	20003208 	.word	0x20003208
 8009c90:	2000320c 	.word	0x2000320c
 8009c94:	200032dc 	.word	0x200032dc
 8009c98:	20003210 	.word	0x20003210
 8009c9c:	0801558c 	.word	0x0801558c

08009ca0 <xTimerCreateTimerTask>:
{
 8009ca0:	b510      	push	{r4, lr}
 8009ca2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009ca4:	f7ff ffc4 	bl	8009c30 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009ca8:	4b12      	ldr	r3, [pc, #72]	; (8009cf4 <xTimerCreateTimerTask+0x54>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	b1cb      	cbz	r3, 8009ce2 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009cae:	2400      	movs	r4, #0
 8009cb0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009cb2:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009cb4:	aa07      	add	r2, sp, #28
 8009cb6:	a906      	add	r1, sp, #24
 8009cb8:	a805      	add	r0, sp, #20
 8009cba:	f7fe fa01 	bl	80080c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009cbe:	9b05      	ldr	r3, [sp, #20]
 8009cc0:	9302      	str	r3, [sp, #8]
 8009cc2:	9b06      	ldr	r3, [sp, #24]
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	4623      	mov	r3, r4
 8009ccc:	9a07      	ldr	r2, [sp, #28]
 8009cce:	490a      	ldr	r1, [pc, #40]	; (8009cf8 <xTimerCreateTimerTask+0x58>)
 8009cd0:	480a      	ldr	r0, [pc, #40]	; (8009cfc <xTimerCreateTimerTask+0x5c>)
 8009cd2:	f7ff fa5b 	bl	800918c <xTaskCreateStatic>
 8009cd6:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <xTimerCreateTimerTask+0x60>)
 8009cd8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009cda:	b110      	cbz	r0, 8009ce2 <xTimerCreateTimerTask+0x42>
}
 8009cdc:	2001      	movs	r0, #1
 8009cde:	b008      	add	sp, #32
 8009ce0:	bd10      	pop	{r4, pc}
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009cf2:	e7fe      	b.n	8009cf2 <xTimerCreateTimerTask+0x52>
 8009cf4:	2000332c 	.word	0x2000332c
 8009cf8:	08015594 	.word	0x08015594
 8009cfc:	0800a005 	.word	0x0800a005
 8009d00:	20003330 	.word	0x20003330

08009d04 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009d04:	b1b8      	cbz	r0, 8009d36 <xTimerGenericCommand+0x32>
 8009d06:	469c      	mov	ip, r3
 8009d08:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8009d0a:	4818      	ldr	r0, [pc, #96]	; (8009d6c <xTimerGenericCommand+0x68>)
 8009d0c:	6800      	ldr	r0, [r0, #0]
 8009d0e:	b358      	cbz	r0, 8009d68 <xTimerGenericCommand+0x64>
{
 8009d10:	b500      	push	{lr}
 8009d12:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8009d14:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d16:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d18:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d1a:	2905      	cmp	r1, #5
 8009d1c:	dc1c      	bgt.n	8009d58 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d1e:	f7ff fd93 	bl	8009848 <xTaskGetSchedulerState>
 8009d22:	2802      	cmp	r0, #2
 8009d24:	d010      	beq.n	8009d48 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d26:	2300      	movs	r3, #0
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4669      	mov	r1, sp
 8009d2c:	480f      	ldr	r0, [pc, #60]	; (8009d6c <xTimerGenericCommand+0x68>)
 8009d2e:	6800      	ldr	r0, [r0, #0]
 8009d30:	f7fe fe81 	bl	8008a36 <xQueueGenericSend>
 8009d34:	e015      	b.n	8009d62 <xTimerGenericCommand+0x5e>
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8009d46:	e7fe      	b.n	8009d46 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9a06      	ldr	r2, [sp, #24]
 8009d4c:	4669      	mov	r1, sp
 8009d4e:	4807      	ldr	r0, [pc, #28]	; (8009d6c <xTimerGenericCommand+0x68>)
 8009d50:	6800      	ldr	r0, [r0, #0]
 8009d52:	f7fe fe70 	bl	8008a36 <xQueueGenericSend>
 8009d56:	e004      	b.n	8009d62 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4662      	mov	r2, ip
 8009d5c:	4669      	mov	r1, sp
 8009d5e:	f7fe ff2e 	bl	8008bbe <xQueueGenericSendFromISR>
}
 8009d62:	b005      	add	sp, #20
 8009d64:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8009d68:	2000      	movs	r0, #0
}
 8009d6a:	4770      	bx	lr
 8009d6c:	2000332c 	.word	0x2000332c

08009d70 <prvSwitchTimerLists>:
{
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d74:	4b1b      	ldr	r3, [pc, #108]	; (8009de4 <prvSwitchTimerLists+0x74>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	b362      	cbz	r2, 8009dd6 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d80:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d82:	1d25      	adds	r5, r4, #4
 8009d84:	4628      	mov	r0, r5
 8009d86:	f7fe faeb 	bl	8008360 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d8a:	6a23      	ldr	r3, [r4, #32]
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d90:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009d94:	f013 0f04 	tst.w	r3, #4
 8009d98:	d0ec      	beq.n	8009d74 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d9a:	69a3      	ldr	r3, [r4, #24]
 8009d9c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009d9e:	429e      	cmp	r6, r3
 8009da0:	d207      	bcs.n	8009db2 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009da2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009da4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009da6:	4629      	mov	r1, r5
 8009da8:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <prvSwitchTimerLists+0x74>)
 8009daa:	6818      	ldr	r0, [r3, #0]
 8009dac:	f7fe fabf 	bl	800832e <vListInsert>
 8009db0:	e7e0      	b.n	8009d74 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009db2:	2100      	movs	r1, #0
 8009db4:	9100      	str	r1, [sp, #0]
 8009db6:	460b      	mov	r3, r1
 8009db8:	4632      	mov	r2, r6
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7ff ffa2 	bl	8009d04 <xTimerGenericCommand>
				configASSERT( xResult );
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d1d7      	bne.n	8009d74 <prvSwitchTimerLists+0x4>
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	e7fe      	b.n	8009dd4 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8009dd6:	4a04      	ldr	r2, [pc, #16]	; (8009de8 <prvSwitchTimerLists+0x78>)
 8009dd8:	6810      	ldr	r0, [r2, #0]
 8009dda:	4902      	ldr	r1, [pc, #8]	; (8009de4 <prvSwitchTimerLists+0x74>)
 8009ddc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8009dde:	6013      	str	r3, [r2, #0]
}
 8009de0:	b002      	add	sp, #8
 8009de2:	bd70      	pop	{r4, r5, r6, pc}
 8009de4:	20003208 	.word	0x20003208
 8009de8:	2000320c 	.word	0x2000320c

08009dec <prvSampleTimeNow>:
{
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8009df0:	f7ff fa92 	bl	8009318 <xTaskGetTickCount>
 8009df4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8009df6:	4b07      	ldr	r3, [pc, #28]	; (8009e14 <prvSampleTimeNow+0x28>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4283      	cmp	r3, r0
 8009dfc:	d805      	bhi.n	8009e0a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8009e02:	4b04      	ldr	r3, [pc, #16]	; (8009e14 <prvSampleTimeNow+0x28>)
 8009e04:	601c      	str	r4, [r3, #0]
}
 8009e06:	4620      	mov	r0, r4
 8009e08:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8009e0a:	f7ff ffb1 	bl	8009d70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	602b      	str	r3, [r5, #0]
 8009e12:	e7f6      	b.n	8009e02 <prvSampleTimeNow+0x16>
 8009e14:	200032d8 	.word	0x200032d8

08009e18 <prvProcessExpiredTimer>:
{
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e20:	4917      	ldr	r1, [pc, #92]	; (8009e80 <prvProcessExpiredTimer+0x68>)
 8009e22:	6809      	ldr	r1, [r1, #0]
 8009e24:	68c9      	ldr	r1, [r1, #12]
 8009e26:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e28:	1d20      	adds	r0, r4, #4
 8009e2a:	f7fe fa99 	bl	8008360 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e2e:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8009e32:	f01c 0f04 	tst.w	ip, #4
 8009e36:	d108      	bne.n	8009e4a <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e38:	f02c 0c01 	bic.w	ip, ip, #1
 8009e3c:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e40:	6a23      	ldr	r3, [r4, #32]
 8009e42:	4620      	mov	r0, r4
 8009e44:	4798      	blx	r3
}
 8009e46:	b002      	add	sp, #8
 8009e48:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e4a:	69a1      	ldr	r1, [r4, #24]
 8009e4c:	4633      	mov	r3, r6
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4431      	add	r1, r6
 8009e52:	4620      	mov	r0, r4
 8009e54:	f7ff fec8 	bl	8009be8 <prvInsertTimerInActiveList>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d0f1      	beq.n	8009e40 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	9100      	str	r1, [sp, #0]
 8009e60:	460b      	mov	r3, r1
 8009e62:	4632      	mov	r2, r6
 8009e64:	4620      	mov	r0, r4
 8009e66:	f7ff ff4d 	bl	8009d04 <xTimerGenericCommand>
			configASSERT( xResult );
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d1e8      	bne.n	8009e40 <prvProcessExpiredTimer+0x28>
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	e7fe      	b.n	8009e7e <prvProcessExpiredTimer+0x66>
 8009e80:	20003208 	.word	0x20003208

08009e84 <prvProcessTimerOrBlockTask>:
{
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	4606      	mov	r6, r0
 8009e8a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009e8c:	f7ff fa3c 	bl	8009308 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e90:	a801      	add	r0, sp, #4
 8009e92:	f7ff ffab 	bl	8009dec <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009e96:	9b01      	ldr	r3, [sp, #4]
 8009e98:	bb33      	cbnz	r3, 8009ee8 <prvProcessTimerOrBlockTask+0x64>
 8009e9a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e9c:	b90c      	cbnz	r4, 8009ea2 <prvProcessTimerOrBlockTask+0x1e>
 8009e9e:	42b0      	cmp	r0, r6
 8009ea0:	d219      	bcs.n	8009ed6 <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 8009ea2:	b124      	cbz	r4, 8009eae <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ea4:	4a12      	ldr	r2, [pc, #72]	; (8009ef0 <prvProcessTimerOrBlockTask+0x6c>)
 8009ea6:	6812      	ldr	r2, [r2, #0]
 8009ea8:	6812      	ldr	r2, [r2, #0]
 8009eaa:	b9da      	cbnz	r2, 8009ee4 <prvProcessTimerOrBlockTask+0x60>
 8009eac:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009eae:	4622      	mov	r2, r4
 8009eb0:	1b71      	subs	r1, r6, r5
 8009eb2:	4b10      	ldr	r3, [pc, #64]	; (8009ef4 <prvProcessTimerOrBlockTask+0x70>)
 8009eb4:	6818      	ldr	r0, [r3, #0]
 8009eb6:	f7fe ffab 	bl	8008e10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009eba:	f7ff fad9 	bl	8009470 <xTaskResumeAll>
 8009ebe:	b9a8      	cbnz	r0, 8009eec <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8009ec0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	e00a      	b.n	8009eec <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8009ed6:	f7ff facb 	bl	8009470 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009eda:	4629      	mov	r1, r5
 8009edc:	4630      	mov	r0, r6
 8009ede:	f7ff ff9b 	bl	8009e18 <prvProcessExpiredTimer>
 8009ee2:	e003      	b.n	8009eec <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ee4:	461c      	mov	r4, r3
 8009ee6:	e7e2      	b.n	8009eae <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 8009ee8:	f7ff fac2 	bl	8009470 <xTaskResumeAll>
}
 8009eec:	b002      	add	sp, #8
 8009eee:	bd70      	pop	{r4, r5, r6, pc}
 8009ef0:	2000320c 	.word	0x2000320c
 8009ef4:	2000332c 	.word	0x2000332c

08009ef8 <prvProcessReceivedCommands>:
{
 8009ef8:	b510      	push	{r4, lr}
 8009efa:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009efc:	e002      	b.n	8009f04 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009efe:	9b04      	ldr	r3, [sp, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da0f      	bge.n	8009f24 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f04:	2200      	movs	r2, #0
 8009f06:	a904      	add	r1, sp, #16
 8009f08:	4b3d      	ldr	r3, [pc, #244]	; (800a000 <prvProcessReceivedCommands+0x108>)
 8009f0a:	6818      	ldr	r0, [r3, #0]
 8009f0c:	f7fe febd 	bl	8008c8a <xQueueReceive>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d073      	beq.n	8009ffc <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f14:	9b04      	ldr	r3, [sp, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	daf1      	bge.n	8009efe <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f1a:	9907      	ldr	r1, [sp, #28]
 8009f1c:	9806      	ldr	r0, [sp, #24]
 8009f1e:	9b05      	ldr	r3, [sp, #20]
 8009f20:	4798      	blx	r3
 8009f22:	e7ec      	b.n	8009efe <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f24:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f26:	6963      	ldr	r3, [r4, #20]
 8009f28:	b113      	cbz	r3, 8009f30 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f2a:	1d20      	adds	r0, r4, #4
 8009f2c:	f7fe fa18 	bl	8008360 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f30:	a803      	add	r0, sp, #12
 8009f32:	f7ff ff5b 	bl	8009dec <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009f36:	9b04      	ldr	r3, [sp, #16]
 8009f38:	2b09      	cmp	r3, #9
 8009f3a:	d8e3      	bhi.n	8009f04 <prvProcessReceivedCommands+0xc>
 8009f3c:	e8df f003 	tbb	[pc, r3]
 8009f40:	30050505 	.word	0x30050505
 8009f44:	05055037 	.word	0x05055037
 8009f48:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f4a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009f4e:	f043 0301 	orr.w	r3, r3, #1
 8009f52:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f56:	9b05      	ldr	r3, [sp, #20]
 8009f58:	69a1      	ldr	r1, [r4, #24]
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	4419      	add	r1, r3
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f7ff fe42 	bl	8009be8 <prvInsertTimerInActiveList>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d0cd      	beq.n	8009f04 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f68:	6a23      	ldr	r3, [r4, #32]
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f6e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009f72:	f013 0f04 	tst.w	r3, #4
 8009f76:	d0c5      	beq.n	8009f04 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f78:	69a2      	ldr	r2, [r4, #24]
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	9100      	str	r1, [sp, #0]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	9805      	ldr	r0, [sp, #20]
 8009f82:	4402      	add	r2, r0
 8009f84:	4620      	mov	r0, r4
 8009f86:	f7ff febd 	bl	8009d04 <xTimerGenericCommand>
							configASSERT( xResult );
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d1ba      	bne.n	8009f04 <prvProcessReceivedCommands+0xc>
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	e7fe      	b.n	8009f9e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fa0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009fa4:	f023 0301 	bic.w	r3, r3, #1
 8009fa8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8009fac:	e7aa      	b.n	8009f04 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009fb2:	f043 0301 	orr.w	r3, r3, #1
 8009fb6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fba:	9905      	ldr	r1, [sp, #20]
 8009fbc:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fbe:	b131      	cbz	r1, 8009fce <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	4401      	add	r1, r0
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f7ff fe0e 	bl	8009be8 <prvInsertTimerInActiveList>
					break;
 8009fcc:	e79a      	b.n	8009f04 <prvProcessReceivedCommands+0xc>
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fde:	e7fe      	b.n	8009fde <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009fe0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009fe4:	f013 0f02 	tst.w	r3, #2
 8009fe8:	d004      	beq.n	8009ff4 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fea:	f023 0301 	bic.w	r3, r3, #1
 8009fee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009ff2:	e787      	b.n	8009f04 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f7fe f949 	bl	800828c <vPortFree>
 8009ffa:	e783      	b.n	8009f04 <prvProcessReceivedCommands+0xc>
}
 8009ffc:	b008      	add	sp, #32
 8009ffe:	bd10      	pop	{r4, pc}
 800a000:	2000332c 	.word	0x2000332c

0800a004 <prvTimerTask>:
{
 800a004:	b500      	push	{lr}
 800a006:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a008:	a801      	add	r0, sp, #4
 800a00a:	f7ff fddd 	bl	8009bc8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a00e:	9901      	ldr	r1, [sp, #4]
 800a010:	f7ff ff38 	bl	8009e84 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800a014:	f7ff ff70 	bl	8009ef8 <prvProcessReceivedCommands>
	for( ;; )
 800a018:	e7f6      	b.n	800a008 <prvTimerTask+0x4>
	...

0800a01c <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800a01c:	2804      	cmp	r0, #4
 800a01e:	d807      	bhi.n	800a030 <LmHandlerPackageIsInitialized+0x14>
{
 800a020:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800a022:	4b05      	ldr	r3, [pc, #20]	; (800a038 <LmHandlerPackageIsInitialized+0x1c>)
 800a024:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	b11b      	cbz	r3, 800a034 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800a02c:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800a02e:	bd08      	pop	{r3, pc}
        return false;
 800a030:	2000      	movs	r0, #0
}
 800a032:	4770      	bx	lr
        return false;
 800a034:	2000      	movs	r0, #0
 800a036:	e7fa      	b.n	800a02e <LmHandlerPackageIsInitialized+0x12>
 800a038:	20003434 	.word	0x20003434

0800a03c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	4605      	mov	r5, r0
 800a040:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a042:	2400      	movs	r4, #0
 800a044:	e005      	b.n	800a052 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	b10b      	cbz	r3, 800a04e <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800a04a:	4630      	mov	r0, r6
 800a04c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a04e:	3401      	adds	r4, #1
 800a050:	b264      	sxtb	r4, r4
 800a052:	2c04      	cmp	r4, #4
 800a054:	dc24      	bgt.n	800a0a0 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 800a056:	4b13      	ldr	r3, [pc, #76]	; (800a0a4 <LmHandlerPackagesNotify+0x68>)
 800a058:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d0f6      	beq.n	800a04e <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 800a060:	2d03      	cmp	r5, #3
 800a062:	d8f4      	bhi.n	800a04e <LmHandlerPackagesNotify+0x12>
 800a064:	a201      	add	r2, pc, #4	; (adr r2, 800a06c <LmHandlerPackagesNotify+0x30>)
 800a066:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800a06a:	bf00      	nop
 800a06c:	0800a047 	.word	0x0800a047
 800a070:	0800a07d 	.word	0x0800a07d
 800a074:	0800a089 	.word	0x0800a089
 800a078:	0800a095 	.word	0x0800a095
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0e5      	beq.n	800a04e <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800a082:	4630      	mov	r0, r6
 800a084:	4798      	blx	r3
 800a086:	e7e2      	b.n	800a04e <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0df      	beq.n	800a04e <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800a08e:	4630      	mov	r0, r6
 800a090:	4798      	blx	r3
 800a092:	e7dc      	b.n	800a04e <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	2b00      	cmp	r3, #0
 800a098:	d0d9      	beq.n	800a04e <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800a09a:	4630      	mov	r0, r6
 800a09c:	4798      	blx	r3
 800a09e:	e7d6      	b.n	800a04e <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 800a0a0:	bd70      	pop	{r4, r5, r6, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20003434 	.word	0x20003434

0800a0a8 <MlmeIndication>:
{
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800a0ac:	4b14      	ldr	r3, [pc, #80]	; (800a100 <MlmeIndication+0x58>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800a0b2:	7842      	ldrb	r2, [r0, #1]
 800a0b4:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800a0b6:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800a0ba:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a0bc:	f9b1 2000 	ldrsh.w	r2, [r1]
 800a0c0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800a0c2:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800a0c6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a0c8:	78ca      	ldrb	r2, [r1, #3]
 800a0ca:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800a0cc:	6842      	ldr	r2, [r0, #4]
 800a0ce:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800a0d0:	7803      	ldrb	r3, [r0, #0]
 800a0d2:	2b0a      	cmp	r3, #10
 800a0d4:	d007      	beq.n	800a0e6 <MlmeIndication+0x3e>
 800a0d6:	2b0e      	cmp	r3, #14
 800a0d8:	d005      	beq.n	800a0e6 <MlmeIndication+0x3e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800a0da:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <MlmeIndication+0x5c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	4907      	ldr	r1, [pc, #28]	; (800a100 <MlmeIndication+0x58>)
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	2003      	movs	r0, #3
 800a0ea:	f7ff ffa7 	bl	800a03c <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 800a0ee:	7823      	ldrb	r3, [r4, #0]
 800a0f0:	2b06      	cmp	r3, #6
 800a0f2:	d000      	beq.n	800a0f6 <MlmeIndication+0x4e>
}
 800a0f4:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 800a0f6:	4b04      	ldr	r3, [pc, #16]	; (800a108 <MlmeIndication+0x60>)
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	701a      	strb	r2, [r3, #0]
}
 800a0fc:	e7fa      	b.n	800a0f4 <MlmeIndication+0x4c>
 800a0fe:	bf00      	nop
 800a100:	200000a0 	.word	0x200000a0
 800a104:	20003430 	.word	0x20003430
 800a108:	2000342c 	.word	0x2000342c

0800a10c <McpsConfirm>:
{
 800a10c:	b510      	push	{r4, lr}
 800a10e:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 800a110:	480c      	ldr	r0, [pc, #48]	; (800a144 <McpsConfirm+0x38>)
 800a112:	2301      	movs	r3, #1
 800a114:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 800a116:	7863      	ldrb	r3, [r4, #1]
 800a118:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800a11a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800a11e:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800a120:	68e3      	ldr	r3, [r4, #12]
 800a122:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800a124:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800a128:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800a12e:	7923      	ldrb	r3, [r4, #4]
 800a130:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800a132:	4b05      	ldr	r3, [pc, #20]	; (800a148 <McpsConfirm+0x3c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a138:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800a13a:	4621      	mov	r1, r4
 800a13c:	2000      	movs	r0, #0
 800a13e:	f7ff ff7d 	bl	800a03c <LmHandlerPackagesNotify>
}
 800a142:	bd10      	pop	{r4, pc}
 800a144:	200000b4 	.word	0x200000b4
 800a148:	20003430 	.word	0x20003430

0800a14c <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800a14c:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a14e:	2400      	movs	r4, #0
 800a150:	e001      	b.n	800a156 <LmHandlerPackageIsTxPending+0xa>
 800a152:	3401      	adds	r4, #1
 800a154:	b264      	sxtb	r4, r4
 800a156:	2c04      	cmp	r4, #4
 800a158:	dc0a      	bgt.n	800a170 <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 800a15a:	4b07      	ldr	r3, [pc, #28]	; (800a178 <LmHandlerPackageIsTxPending+0x2c>)
 800a15c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0f6      	beq.n	800a152 <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	4798      	blx	r3
 800a168:	4603      	mov	r3, r0
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d0f1      	beq.n	800a152 <LmHandlerPackageIsTxPending+0x6>
 800a16e:	e000      	b.n	800a172 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	bd10      	pop	{r4, pc}
 800a176:	bf00      	nop
 800a178:	20003434 	.word	0x20003434

0800a17c <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800a17c:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a17e:	2400      	movs	r4, #0
 800a180:	e001      	b.n	800a186 <LmHandlerPackagesProcess+0xa>
 800a182:	3401      	adds	r4, #1
 800a184:	b264      	sxtb	r4, r4
 800a186:	2c04      	cmp	r4, #4
 800a188:	dc12      	bgt.n	800a1b0 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800a18a:	4b0a      	ldr	r3, [pc, #40]	; (800a1b4 <LmHandlerPackagesProcess+0x38>)
 800a18c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0f6      	beq.n	800a182 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800a194:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0f3      	beq.n	800a182 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800a19a:	b2e0      	uxtb	r0, r4
 800a19c:	f7ff ff3e 	bl	800a01c <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d0ee      	beq.n	800a182 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800a1a4:	4b03      	ldr	r3, [pc, #12]	; (800a1b4 <LmHandlerPackagesProcess+0x38>)
 800a1a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	4798      	blx	r3
 800a1ae:	e7e8      	b.n	800a182 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800a1b0:	bd38      	pop	{r3, r4, r5, pc}
 800a1b2:	bf00      	nop
 800a1b4:	20003434 	.word	0x20003434

0800a1b8 <LmHandlerJoin>:
{
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	b08e      	sub	sp, #56	; 0x38
 800a1bc:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800a1c4:	4b26      	ldr	r3, [pc, #152]	; (800a260 <LmHandlerJoin+0xa8>)
 800a1c6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800a1ca:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 800a1ce:	2802      	cmp	r0, #2
 800a1d0:	d021      	beq.n	800a216 <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800a1d2:	2101      	movs	r1, #1
 800a1d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800a1d8:	4b22      	ldr	r3, [pc, #136]	; (800a264 <LmHandlerJoin+0xac>)
 800a1da:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800a1dc:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800a1de:	2100      	movs	r1, #0
 800a1e0:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800a1e2:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 800a1e4:	4b20      	ldr	r3, [pc, #128]	; (800a268 <LmHandlerJoin+0xb0>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	b1f3      	cbz	r3, 800a228 <LmHandlerJoin+0x70>
        LoRaMacStart();
 800a1ea:	f003 fa4d 	bl	800d688 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800a1f4:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a1f8:	4668      	mov	r0, sp
 800a1fa:	f003 fc4d 	bl	800da98 <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800a1fe:	4b1a      	ldr	r3, [pc, #104]	; (800a268 <LmHandlerJoin+0xb0>)
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	b103      	cbz	r3, 800a206 <LmHandlerJoin+0x4e>
 800a204:	b114      	cbz	r4, 800a20c <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 800a206:	a809      	add	r0, sp, #36	; 0x24
 800a208:	f003 fecc 	bl	800dfa4 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800a20c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a20e:	4b17      	ldr	r3, [pc, #92]	; (800a26c <LmHandlerJoin+0xb4>)
 800a210:	601a      	str	r2, [r3, #0]
}
 800a212:	b00e      	add	sp, #56	; 0x38
 800a214:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a216:	2202      	movs	r2, #2
 800a218:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800a21c:	4b11      	ldr	r3, [pc, #68]	; (800a264 <LmHandlerJoin+0xac>)
 800a21e:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800a220:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 800a222:	f003 fa31 	bl	800d688 <LoRaMacStart>
 800a226:	e7ea      	b.n	800a1fe <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800a228:	231f      	movs	r3, #31
 800a22a:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800a22e:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a232:	4668      	mov	r0, sp
 800a234:	f003 fc30 	bl	800da98 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800a238:	2320      	movs	r3, #32
 800a23a:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800a23e:	4b08      	ldr	r3, [pc, #32]	; (800a260 <LmHandlerJoin+0xa8>)
 800a240:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a244:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a248:	4668      	mov	r0, sp
 800a24a:	f003 fc25 	bl	800da98 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800a24e:	2329      	movs	r3, #41	; 0x29
 800a250:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800a254:	4b06      	ldr	r3, [pc, #24]	; (800a270 <LmHandlerJoin+0xb8>)
 800a256:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800a258:	4668      	mov	r0, sp
 800a25a:	f003 fc1d 	bl	800da98 <LoRaMacMibSetRequestConfirm>
 800a25e:	e7c4      	b.n	800a1ea <LmHandlerJoin+0x32>
 800a260:	20003448 	.word	0x20003448
 800a264:	20000098 	.word	0x20000098
 800a268:	20003426 	.word	0x20003426
 800a26c:	20003428 	.word	0x20003428
 800a270:	01000400 	.word	0x01000400

0800a274 <LmHandlerDeviceTimeReq>:
{
 800a274:	b500      	push	{lr}
 800a276:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800a278:	2309      	movs	r3, #9
 800a27a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800a27e:	a801      	add	r0, sp, #4
 800a280:	f003 fe90 	bl	800dfa4 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800a284:	9a05      	ldr	r2, [sp, #20]
 800a286:	4b04      	ldr	r3, [pc, #16]	; (800a298 <LmHandlerDeviceTimeReq+0x24>)
 800a288:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800a28a:	b910      	cbnz	r0, 800a292 <LmHandlerDeviceTimeReq+0x1e>
}
 800a28c:	b007      	add	sp, #28
 800a28e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800a292:	f04f 30ff 	mov.w	r0, #4294967295
 800a296:	e7f9      	b.n	800a28c <LmHandlerDeviceTimeReq+0x18>
 800a298:	20003428 	.word	0x20003428

0800a29c <LmHandlerGetDutyCycleWaitTime>:
}
 800a29c:	4b01      	ldr	r3, [pc, #4]	; (800a2a4 <LmHandlerGetDutyCycleWaitTime+0x8>)
 800a29e:	6818      	ldr	r0, [r3, #0]
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20003428 	.word	0x20003428

0800a2a8 <LmHandlerJoinStatus>:
{
 800a2a8:	b500      	push	{lr}
 800a2aa:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800a2b2:	a801      	add	r0, sp, #4
 800a2b4:	f003 faa2 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800a2b8:	b920      	cbnz	r0, 800a2c4 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a2ba:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800a2be:	b110      	cbz	r0, 800a2c6 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	e000      	b.n	800a2c6 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800a2c4:	2000      	movs	r0, #0
}
 800a2c6:	b00b      	add	sp, #44	; 0x2c
 800a2c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800a2cc <LmHandlerSend>:
{
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 800a2d6:	f002 ff91 	bl	800d1fc <LoRaMacIsBusy>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d164      	bne.n	800a3a8 <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800a2de:	f7ff ffe3 	bl	800a2a8 <LmHandlerJoinStatus>
 800a2e2:	2801      	cmp	r0, #1
 800a2e4:	d137      	bne.n	800a356 <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 800a2e6:	4b33      	ldr	r3, [pc, #204]	; (800a3b4 <LmHandlerSend+0xe8>)
 800a2e8:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800a2ea:	3d00      	subs	r5, #0
 800a2ec:	bf18      	it	ne
 800a2ee:	2501      	movne	r5, #1
 800a2f0:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800a2f4:	4b30      	ldr	r3, [pc, #192]	; (800a3b8 <LmHandlerSend+0xec>)
 800a2f6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a2fa:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800a2fe:	4669      	mov	r1, sp
 800a300:	7860      	ldrb	r0, [r4, #1]
 800a302:	f003 fa0f 	bl	800d724 <LoRaMacQueryTxPossible>
 800a306:	b370      	cbz	r0, 800a366 <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800a308:	2300      	movs	r3, #0
 800a30a:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800a30e:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800a310:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800a314:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800a318:	4b26      	ldr	r3, [pc, #152]	; (800a3b4 <LmHandlerSend+0xe8>)
 800a31a:	f103 0c10 	add.w	ip, r3, #16
 800a31e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a322:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800a326:	4a24      	ldr	r2, [pc, #144]	; (800a3b8 <LmHandlerSend+0xec>)
 800a328:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a32c:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800a32e:	4631      	mov	r1, r6
 800a330:	a801      	add	r0, sp, #4
 800a332:	f003 ff31 	bl	800e198 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800a336:	9a05      	ldr	r2, [sp, #20]
 800a338:	4b20      	ldr	r3, [pc, #128]	; (800a3bc <LmHandlerSend+0xf0>)
 800a33a:	601a      	str	r2, [r3, #0]
    switch (status)
 800a33c:	2811      	cmp	r0, #17
 800a33e:	d830      	bhi.n	800a3a2 <LmHandlerSend+0xd6>
 800a340:	e8df f000 	tbb	[pc, r0]
 800a344:	2f2f1c21 	.word	0x2f2f1c21
 800a348:	352f2f2f 	.word	0x352f2f2f
 800a34c:	2c2f2f2f 	.word	0x2c2f2f2f
 800a350:	1c1c2f2f 	.word	0x1c1c2f2f
 800a354:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800a356:	4b1a      	ldr	r3, [pc, #104]	; (800a3c0 <LmHandlerSend+0xf4>)
 800a358:	79d9      	ldrb	r1, [r3, #7]
 800a35a:	7998      	ldrb	r0, [r3, #6]
 800a35c:	f7ff ff2c 	bl	800a1b8 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a360:	f06f 0502 	mvn.w	r5, #2
 800a364:	e00c      	b.n	800a380 <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800a366:	7823      	ldrb	r3, [r4, #0]
 800a368:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800a36c:	7863      	ldrb	r3, [r4, #1]
 800a36e:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800a372:	6863      	ldr	r3, [r4, #4]
 800a374:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800a376:	f04f 35ff 	mov.w	r5, #4294967295
 800a37a:	e7cd      	b.n	800a318 <LmHandlerSend+0x4c>
    switch (status)
 800a37c:	f06f 0501 	mvn.w	r5, #1
}
 800a380:	4628      	mov	r0, r5
 800a382:	b006      	add	sp, #24
 800a384:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 800a386:	4b0f      	ldr	r3, [pc, #60]	; (800a3c4 <LmHandlerSend+0xf8>)
 800a388:	2200      	movs	r2, #0
 800a38a:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800a38c:	f115 0f07 	cmn.w	r5, #7
 800a390:	d0f6      	beq.n	800a380 <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800a392:	2500      	movs	r5, #0
 800a394:	e7f4      	b.n	800a380 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800a396:	f06f 0504 	mvn.w	r5, #4
            break;
 800a39a:	e7f1      	b.n	800a380 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800a39c:	f06f 0505 	mvn.w	r5, #5
            break;
 800a3a0:	e7ee      	b.n	800a380 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800a3a2:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800a3a6:	e7eb      	b.n	800a380 <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a3a8:	f06f 0501 	mvn.w	r5, #1
 800a3ac:	e7e8      	b.n	800a380 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a3ae:	f06f 0502 	mvn.w	r5, #2
 800a3b2:	e7e5      	b.n	800a380 <LmHandlerSend+0xb4>
 800a3b4:	200000b4 	.word	0x200000b4
 800a3b8:	20003448 	.word	0x20003448
 800a3bc:	20003428 	.word	0x20003428
 800a3c0:	20000098 	.word	0x20000098
 800a3c4:	2000342c 	.word	0x2000342c

0800a3c8 <LmHandlerProcess>:
{
 800a3c8:	b500      	push	{lr}
 800a3ca:	b083      	sub	sp, #12
    LoRaMacProcess( );
 800a3cc:	f002 ff30 	bl	800d230 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800a3d0:	f7ff fed4 	bl	800a17c <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800a3d4:	f7ff feba 	bl	800a14c <LmHandlerPackageIsTxPending>
 800a3d8:	b910      	cbnz	r0, 800a3e0 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 800a3da:	4b0b      	ldr	r3, [pc, #44]	; (800a408 <LmHandlerProcess+0x40>)
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	b913      	cbnz	r3, 800a3e6 <LmHandlerProcess+0x1e>
}
 800a3e0:	b003      	add	sp, #12
 800a3e2:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f88d 2000 	strb.w	r2, [sp]
 800a3ec:	f88d 2001 	strb.w	r2, [sp, #1]
 800a3f0:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800a3f2:	4b06      	ldr	r3, [pc, #24]	; (800a40c <LmHandlerProcess+0x44>)
 800a3f4:	78d9      	ldrb	r1, [r3, #3]
 800a3f6:	4668      	mov	r0, sp
 800a3f8:	f7ff ff68 	bl	800a2cc <LmHandlerSend>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d1ef      	bne.n	800a3e0 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800a400:	4b01      	ldr	r3, [pc, #4]	; (800a408 <LmHandlerProcess+0x40>)
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
 800a406:	e7eb      	b.n	800a3e0 <LmHandlerProcess+0x18>
 800a408:	2000342c 	.word	0x2000342c
 800a40c:	20003448 	.word	0x20003448

0800a410 <LmHandlerRequestClass>:
{
 800a410:	b510      	push	{r4, lr}
 800a412:	b08a      	sub	sp, #40	; 0x28
 800a414:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800a416:	f002 fef1 	bl	800d1fc <LoRaMacIsBusy>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d136      	bne.n	800a48c <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800a41e:	f7ff ff43 	bl	800a2a8 <LmHandlerJoinStatus>
 800a422:	2801      	cmp	r0, #1
 800a424:	d135      	bne.n	800a492 <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 800a426:	2300      	movs	r3, #0
 800a428:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a42c:	a801      	add	r0, sp, #4
 800a42e:	f003 f9e5 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
 800a432:	bb88      	cbnz	r0, 800a498 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 800a434:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 800a438:	42a3      	cmp	r3, r4
 800a43a:	d030      	beq.n	800a49e <LmHandlerRequestClass+0x8e>
        switch( newClass )
 800a43c:	2c01      	cmp	r4, #1
 800a43e:	d030      	beq.n	800a4a2 <LmHandlerRequestClass+0x92>
 800a440:	2c02      	cmp	r4, #2
 800a442:	d014      	beq.n	800a46e <LmHandlerRequestClass+0x5e>
 800a444:	b114      	cbz	r4, 800a44c <LmHandlerRequestClass+0x3c>
 800a446:	2000      	movs	r0, #0
}
 800a448:	b00a      	add	sp, #40	; 0x28
 800a44a:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 800a44c:	b90b      	cbnz	r3, 800a452 <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a44e:	2000      	movs	r0, #0
 800a450:	e7fa      	b.n	800a448 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 800a452:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800a456:	a801      	add	r0, sp, #4
 800a458:	f003 fb1e 	bl	800da98 <LoRaMacMibSetRequestConfirm>
 800a45c:	bb20      	cbnz	r0, 800a4a8 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800a45e:	4b19      	ldr	r3, [pc, #100]	; (800a4c4 <LmHandlerRequestClass+0xb4>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a464:	b31b      	cbz	r3, 800a4ae <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800a466:	4620      	mov	r0, r4
 800a468:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a46a:	2000      	movs	r0, #0
 800a46c:	e7ec      	b.n	800a448 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 800a46e:	bb03      	cbnz	r3, 800a4b2 <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 800a470:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800a474:	a801      	add	r0, sp, #4
 800a476:	f003 fb0f 	bl	800da98 <LoRaMacMibSetRequestConfirm>
 800a47a:	b9e8      	cbnz	r0, 800a4b8 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800a47c:	4b11      	ldr	r3, [pc, #68]	; (800a4c4 <LmHandlerRequestClass+0xb4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	b1e3      	cbz	r3, 800a4be <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800a484:	4620      	mov	r0, r4
 800a486:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a488:	2000      	movs	r0, #0
 800a48a:	e7dd      	b.n	800a448 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a48c:	f06f 0001 	mvn.w	r0, #1
 800a490:	e7da      	b.n	800a448 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a492:	f06f 0002 	mvn.w	r0, #2
 800a496:	e7d7      	b.n	800a448 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 800a498:	f04f 30ff 	mov.w	r0, #4294967295
 800a49c:	e7d4      	b.n	800a448 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a49e:	2000      	movs	r0, #0
 800a4a0:	e7d2      	b.n	800a448 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800a4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a6:	e7cf      	b.n	800a448 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	e7cc      	b.n	800a448 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	e7ca      	b.n	800a448 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800a4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b6:	e7c7      	b.n	800a448 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800a4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4bc:	e7c4      	b.n	800a448 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a4be:	2000      	movs	r0, #0
 800a4c0:	e7c2      	b.n	800a448 <LmHandlerRequestClass+0x38>
 800a4c2:	bf00      	nop
 800a4c4:	20003430 	.word	0x20003430

0800a4c8 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 800a4c8:	b170      	cbz	r0, 800a4e8 <LmHandlerGetCurrentClass+0x20>
{
 800a4ca:	b510      	push	{r4, lr}
 800a4cc:	b08a      	sub	sp, #40	; 0x28
 800a4ce:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800a4d6:	a801      	add	r0, sp, #4
 800a4d8:	f003 f990 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
 800a4dc:	b938      	cbnz	r0, 800a4ee <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800a4de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a4e2:	7023      	strb	r3, [r4, #0]
}
 800a4e4:	b00a      	add	sp, #40	; 0x28
 800a4e6:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800a4e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a4ec:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f2:	e7f7      	b.n	800a4e4 <LmHandlerGetCurrentClass+0x1c>

0800a4f4 <McpsIndication>:
{
 800a4f4:	b530      	push	{r4, r5, lr}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800a500:	491d      	ldr	r1, [pc, #116]	; (800a578 <McpsIndication+0x84>)
 800a502:	2201      	movs	r2, #1
 800a504:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 800a506:	7842      	ldrb	r2, [r0, #1]
 800a508:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800a50a:	bb5a      	cbnz	r2, 800a564 <McpsIndication+0x70>
 800a50c:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800a50e:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800a512:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a514:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a518:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 800a51a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800a51e:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a520:	78db      	ldrb	r3, [r3, #3]
 800a522:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800a524:	6903      	ldr	r3, [r0, #16]
 800a526:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 800a528:	78c3      	ldrb	r3, [r0, #3]
 800a52a:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800a52e:	7b03      	ldrb	r3, [r0, #12]
 800a530:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800a534:	6883      	ldr	r3, [r0, #8]
 800a536:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800a538:	4d10      	ldr	r5, [pc, #64]	; (800a57c <McpsIndication+0x88>)
 800a53a:	682b      	ldr	r3, [r5, #0]
 800a53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53e:	a802      	add	r0, sp, #8
 800a540:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800a542:	682b      	ldr	r3, [r5, #0]
 800a544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a546:	b113      	cbz	r3, 800a54e <McpsIndication+0x5a>
 800a548:	7e22      	ldrb	r2, [r4, #24]
 800a54a:	b102      	cbz	r2, 800a54e <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800a54c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800a54e:	4621      	mov	r1, r4
 800a550:	2001      	movs	r0, #1
 800a552:	f7ff fd73 	bl	800a03c <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800a556:	f10d 0007 	add.w	r0, sp, #7
 800a55a:	f7ff ffb5 	bl	800a4c8 <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800a55e:	7963      	ldrb	r3, [r4, #5]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d001      	beq.n	800a568 <McpsIndication+0x74>
}
 800a564:	b005      	add	sp, #20
 800a566:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800a568:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1f9      	bne.n	800a564 <McpsIndication+0x70>
        IsUplinkTxPending = true;
 800a570:	4b03      	ldr	r3, [pc, #12]	; (800a580 <McpsIndication+0x8c>)
 800a572:	2201      	movs	r2, #1
 800a574:	701a      	strb	r2, [r3, #0]
 800a576:	e7f5      	b.n	800a564 <McpsIndication+0x70>
 800a578:	200000a0 	.word	0x200000a0
 800a57c:	20003430 	.word	0x20003430
 800a580:	2000342c 	.word	0x2000342c

0800a584 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 800a584:	b180      	cbz	r0, 800a5a8 <LmHandlerGetTxDatarate+0x24>
{
 800a586:	b510      	push	{r4, lr}
 800a588:	b08a      	sub	sp, #40	; 0x28
 800a58a:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800a58c:	2320      	movs	r3, #32
 800a58e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800a592:	a801      	add	r0, sp, #4
 800a594:	f003 f932 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
 800a598:	b948      	cbnz	r0, 800a5ae <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800a59a:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 800a59e:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800a5a0:	4a04      	ldr	r2, [pc, #16]	; (800a5b4 <LmHandlerGetTxDatarate+0x30>)
 800a5a2:	7113      	strb	r3, [r2, #4]
}
 800a5a4:	b00a      	add	sp, #40	; 0x28
 800a5a6:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800a5a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a5ac:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b2:	e7f7      	b.n	800a5a4 <LmHandlerGetTxDatarate+0x20>
 800a5b4:	20003448 	.word	0x20003448

0800a5b8 <MlmeConfirm>:
{
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	b08a      	sub	sp, #40	; 0x28
 800a5bc:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800a5be:	4824      	ldr	r0, [pc, #144]	; (800a650 <MlmeConfirm+0x98>)
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 800a5c4:	7863      	ldrb	r3, [r4, #1]
 800a5c6:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800a5c8:	4b22      	ldr	r3, [pc, #136]	; (800a654 <MlmeConfirm+0x9c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ce:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	2002      	movs	r0, #2
 800a5d4:	f7ff fd32 	bl	800a03c <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 800a5d8:	7823      	ldrb	r3, [r4, #0]
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	d029      	beq.n	800a632 <MlmeConfirm+0x7a>
 800a5de:	2b0b      	cmp	r3, #11
 800a5e0:	d02f      	beq.n	800a642 <MlmeConfirm+0x8a>
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d001      	beq.n	800a5ea <MlmeConfirm+0x32>
}
 800a5e6:	b00a      	add	sp, #40	; 0x28
 800a5e8:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 800a5ea:	2306      	movs	r3, #6
 800a5ec:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800a5f0:	a801      	add	r0, sp, #4
 800a5f2:	f003 f903 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a5f6:	9a02      	ldr	r2, [sp, #8]
 800a5f8:	4b17      	ldr	r3, [pc, #92]	; (800a658 <MlmeConfirm+0xa0>)
 800a5fa:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800a5fc:	4817      	ldr	r0, [pc, #92]	; (800a65c <MlmeConfirm+0xa4>)
 800a5fe:	f7ff ffc1 	bl	800a584 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a602:	7863      	ldrb	r3, [r4, #1]
 800a604:	b16b      	cbz	r3, 800a622 <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800a606:	4b16      	ldr	r3, [pc, #88]	; (800a660 <MlmeConfirm+0xa8>)
 800a608:	22ff      	movs	r2, #255	; 0xff
 800a60a:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800a60c:	4b11      	ldr	r3, [pc, #68]	; (800a654 <MlmeConfirm+0x9c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	4813      	ldr	r0, [pc, #76]	; (800a660 <MlmeConfirm+0xa8>)
 800a614:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a616:	7863      	ldrb	r3, [r4, #1]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e4      	bne.n	800a5e6 <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 800a61c:	f007 fe72 	bl	8012304 <SecureElementPrintSessionKeys>
        break;
 800a620:	e7e1      	b.n	800a5e6 <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800a622:	4b0f      	ldr	r3, [pc, #60]	; (800a660 <MlmeConfirm+0xa8>)
 800a624:	2200      	movs	r2, #0
 800a626:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800a628:	4b0e      	ldr	r3, [pc, #56]	; (800a664 <MlmeConfirm+0xac>)
 800a62a:	7858      	ldrb	r0, [r3, #1]
 800a62c:	f7ff fef0 	bl	800a410 <LmHandlerRequestClass>
 800a630:	e7ec      	b.n	800a60c <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <MlmeConfirm+0xb0>)
 800a634:	2201      	movs	r2, #1
 800a636:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800a638:	7a22      	ldrb	r2, [r4, #8]
 800a63a:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800a63c:	7a62      	ldrb	r2, [r4, #9]
 800a63e:	74da      	strb	r2, [r3, #19]
        break;
 800a640:	e7d1      	b.n	800a5e6 <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a642:	7863      	ldrb	r3, [r4, #1]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0ce      	beq.n	800a5e6 <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 800a648:	f7ff fe14 	bl	800a274 <LmHandlerDeviceTimeReq>
}
 800a64c:	e7cb      	b.n	800a5e6 <MlmeConfirm+0x2e>
 800a64e:	bf00      	nop
 800a650:	200000b4 	.word	0x200000b4
 800a654:	20003430 	.word	0x20003430
 800a658:	20000080 	.word	0x20000080
 800a65c:	2000009c 	.word	0x2000009c
 800a660:	20000098 	.word	0x20000098
 800a664:	20003448 	.word	0x20003448
 800a668:	200000a0 	.word	0x200000a0

0800a66c <LmHandlerSetSystemMaxRxError>:
{
 800a66c:	b500      	push	{lr}
 800a66e:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800a670:	2323      	movs	r3, #35	; 0x23
 800a672:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800a676:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a678:	a801      	add	r0, sp, #4
 800a67a:	f003 fa0d 	bl	800da98 <LoRaMacMibSetRequestConfirm>
 800a67e:	b910      	cbnz	r0, 800a686 <LmHandlerSetSystemMaxRxError+0x1a>
}
 800a680:	b00b      	add	sp, #44	; 0x2c
 800a682:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800a686:	f04f 30ff 	mov.w	r0, #4294967295
 800a68a:	e7f9      	b.n	800a680 <LmHandlerSetSystemMaxRxError+0x14>

0800a68c <LmHandlerConfigure>:
{
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	b090      	sub	sp, #64	; 0x40
 800a690:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800a692:	4c78      	ldr	r4, [pc, #480]	; (800a874 <LmHandlerConfigure+0x1e8>)
 800a694:	2214      	movs	r2, #20
 800a696:	4620      	mov	r0, r4
 800a698:	f009 ff5a 	bl	8014550 <UTIL_MEM_cpy_8>
    IsUplinkTxPending = false;
 800a69c:	4b76      	ldr	r3, [pc, #472]	; (800a878 <LmHandlerConfigure+0x1ec>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 800a6a2:	f7f8 fb65 	bl	8002d70 <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800a6a6:	7822      	ldrb	r2, [r4, #0]
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	4093      	lsls	r3, r2
 800a6ac:	6841      	ldr	r1, [r0, #4]
 800a6ae:	420b      	tst	r3, r1
 800a6b0:	d106      	bne.n	800a6c0 <LmHandlerConfigure+0x34>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800a6b2:	4b72      	ldr	r3, [pc, #456]	; (800a87c <LmHandlerConfigure+0x1f0>)
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	4608      	mov	r0, r1
 800a6ba:	f009 fe33 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800a6be:	e7fe      	b.n	800a6be <LmHandlerConfigure+0x32>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800a6c0:	496f      	ldr	r1, [pc, #444]	; (800a880 <LmHandlerConfigure+0x1f4>)
 800a6c2:	4870      	ldr	r0, [pc, #448]	; (800a884 <LmHandlerConfigure+0x1f8>)
 800a6c4:	f002 fdfe 	bl	800d2c4 <LoRaMacInitialization>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	f040 80cf 	bne.w	800a86c <LmHandlerConfigure+0x1e0>
    mibReq.Type = MIB_NVM_CTXS;
 800a6ce:	2327      	movs	r3, #39	; 0x27
 800a6d0:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800a6d4:	a807      	add	r0, sp, #28
 800a6d6:	f003 f9df 	bl	800da98 <LoRaMacMibSetRequestConfirm>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	f040 8087 	bne.w	800a7ee <LmHandlerConfigure+0x162>
        CtxRestoreDone = true;
 800a6e0:	4b69      	ldr	r3, [pc, #420]	; (800a888 <LmHandlerConfigure+0x1fc>)
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 800a6e6:	4b68      	ldr	r3, [pc, #416]	; (800a888 <LmHandlerConfigure+0x1fc>)
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 80a8 	beq.w	800a840 <LmHandlerConfigure+0x1b4>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800a6f0:	4b66      	ldr	r3, [pc, #408]	; (800a88c <LmHandlerConfigure+0x200>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	69db      	ldr	r3, [r3, #28]
 800a6f6:	b10b      	cbz	r3, 800a6fc <LmHandlerConfigure+0x70>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 800a6fc:	2306      	movs	r3, #6
 800a6fe:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800a702:	a807      	add	r0, sp, #28
 800a704:	f003 f87a 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a708:	9a08      	ldr	r2, [sp, #32]
 800a70a:	4b61      	ldr	r3, [pc, #388]	; (800a890 <LmHandlerConfigure+0x204>)
 800a70c:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 800a70e:	2327      	movs	r3, #39	; 0x27
 800a710:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800a714:	a807      	add	r0, sp, #28
 800a716:	f003 f871 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800a71a:	9a08      	ldr	r2, [sp, #32]
 800a71c:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 800a720:	4b54      	ldr	r3, [pc, #336]	; (800a874 <LmHandlerConfigure+0x1e8>)
 800a722:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800a724:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 800a728:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800a72a:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 800a72e:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 800a730:	2502      	movs	r5, #2
 800a732:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a736:	a807      	add	r0, sp, #28
 800a738:	f003 f860 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800a73c:	4c54      	ldr	r4, [pc, #336]	; (800a890 <LmHandlerConfigure+0x204>)
 800a73e:	2208      	movs	r2, #8
 800a740:	9908      	ldr	r1, [sp, #32]
 800a742:	4620      	mov	r0, r4
 800a744:	f007 ff45 	bl	80125d2 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 800a748:	2303      	movs	r3, #3
 800a74a:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a74e:	a807      	add	r0, sp, #28
 800a750:	f003 f854 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800a754:	2208      	movs	r2, #8
 800a756:	9908      	ldr	r1, [sp, #32]
 800a758:	18a0      	adds	r0, r4, r2
 800a75a:	f007 ff3a 	bl	80125d2 <memcpy1>
    SecureElementPrintKeys();
 800a75e:	f007 fd71 	bl	8012244 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800a762:	7de3      	ldrb	r3, [r4, #23]
 800a764:	7da2      	ldrb	r2, [r4, #22]
 800a766:	7d61      	ldrb	r1, [r4, #21]
 800a768:	7d20      	ldrb	r0, [r4, #20]
 800a76a:	9003      	str	r0, [sp, #12]
 800a76c:	9102      	str	r1, [sp, #8]
 800a76e:	9201      	str	r2, [sp, #4]
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	4b48      	ldr	r3, [pc, #288]	; (800a894 <LmHandlerConfigure+0x208>)
 800a774:	2200      	movs	r2, #0
 800a776:	4611      	mov	r1, r2
 800a778:	4628      	mov	r0, r5
 800a77a:	f009 fdd3 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800a77e:	260f      	movs	r6, #15
 800a780:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800a784:	2301      	movs	r3, #1
 800a786:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800a78a:	a807      	add	r0, sp, #28
 800a78c:	f003 f984 	bl	800da98 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800a790:	2310      	movs	r3, #16
 800a792:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800a796:	2500      	movs	r5, #0
 800a798:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a79c:	a807      	add	r0, sp, #28
 800a79e:	f003 f97b 	bl	800da98 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800a7a2:	2304      	movs	r3, #4
 800a7a4:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800a7a8:	4c32      	ldr	r4, [pc, #200]	; (800a874 <LmHandlerConfigure+0x1e8>)
 800a7aa:	78a3      	ldrb	r3, [r4, #2]
 800a7ac:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a7b0:	a807      	add	r0, sp, #28
 800a7b2:	f003 f971 	bl	800da98 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800a7b6:	2338      	movs	r3, #56	; 0x38
 800a7b8:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a7c0:	a807      	add	r0, sp, #28
 800a7c2:	f003 f969 	bl	800da98 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a7c6:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800a7ca:	a905      	add	r1, sp, #20
 800a7cc:	7820      	ldrb	r0, [r4, #0]
 800a7ce:	f004 fe6d 	bl	800f4ac <RegionGetPhyParam>
 800a7d2:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800a7d4:	1b43      	subs	r3, r0, r5
 800a7d6:	bf18      	it	ne
 800a7d8:	2301      	movne	r3, #1
 800a7da:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 800a7dc:	2014      	movs	r0, #20
 800a7de:	f7ff ff45 	bl	800a66c <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800a7e2:	79a0      	ldrb	r0, [r4, #6]
 800a7e4:	f003 fdc6 	bl	800e374 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800a7e8:	4628      	mov	r0, r5
}
 800a7ea:	b010      	add	sp, #64	; 0x40
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800a7ee:	2328      	movs	r3, #40	; 0x28
 800a7f0:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800a7f4:	4b25      	ldr	r3, [pc, #148]	; (800a88c <LmHandlerConfigure+0x200>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	b14b      	cbz	r3, 800a810 <LmHandlerConfigure+0x184>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800a7fc:	a807      	add	r0, sp, #28
 800a7fe:	f002 fffd 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800a802:	4b22      	ldr	r3, [pc, #136]	; (800a88c <LmHandlerConfigure+0x200>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	f240 518c 	movw	r1, #1420	; 0x58c
 800a80c:	9808      	ldr	r0, [sp, #32]
 800a80e:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800a810:	2327      	movs	r3, #39	; 0x27
 800a812:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800a816:	a807      	add	r0, sp, #28
 800a818:	f003 f93e 	bl	800da98 <LoRaMacMibSetRequestConfirm>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f47f af62 	bne.w	800a6e6 <LmHandlerConfigure+0x5a>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a822:	2301      	movs	r3, #1
 800a824:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800a828:	a807      	add	r0, sp, #28
 800a82a:	f002 ffe7 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800a82e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f43f af57 	beq.w	800a6e6 <LmHandlerConfigure+0x5a>
                CtxRestoreDone = true;
 800a838:	4b13      	ldr	r3, [pc, #76]	; (800a888 <LmHandlerConfigure+0x1fc>)
 800a83a:	2201      	movs	r2, #1
 800a83c:	701a      	strb	r2, [r3, #0]
 800a83e:	e752      	b.n	800a6e6 <LmHandlerConfigure+0x5a>
        mibReq.Type = MIB_NET_ID;
 800a840:	2305      	movs	r3, #5
 800a842:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800a846:	2300      	movs	r3, #0
 800a848:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800a84a:	a807      	add	r0, sp, #28
 800a84c:	f003 f924 	bl	800da98 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800a850:	4b0e      	ldr	r3, [pc, #56]	; (800a88c <LmHandlerConfigure+0x200>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	4798      	blx	r3
 800a858:	4b0d      	ldr	r3, [pc, #52]	; (800a890 <LmHandlerConfigure+0x204>)
 800a85a:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 800a85c:	2306      	movs	r3, #6
 800a85e:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800a862:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800a864:	a807      	add	r0, sp, #28
 800a866:	f003 f917 	bl	800da98 <LoRaMacMibSetRequestConfirm>
 800a86a:	e761      	b.n	800a730 <LmHandlerConfigure+0xa4>
        return LORAMAC_HANDLER_ERROR;
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295
 800a870:	e7bb      	b.n	800a7ea <LmHandlerConfigure+0x15e>
 800a872:	bf00      	nop
 800a874:	20003448 	.word	0x20003448
 800a878:	2000342c 	.word	0x2000342c
 800a87c:	0801559c 	.word	0x0801559c
 800a880:	2000346c 	.word	0x2000346c
 800a884:	20003480 	.word	0x20003480
 800a888:	20003426 	.word	0x20003426
 800a88c:	20003430 	.word	0x20003430
 800a890:	20000080 	.word	0x20000080
 800a894:	080155e8 	.word	0x080155e8

0800a898 <LmHandlerPackageRegister>:
    switch( id )
 800a898:	b9f0      	cbnz	r0, 800a8d8 <LmHandlerPackageRegister+0x40>
{
 800a89a:	b538      	push	{r3, r4, r5, lr}
 800a89c:	460c      	mov	r4, r1
 800a89e:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 800a8a0:	f000 fb76 	bl	800af90 <LmhpCompliancePackageFactory>
    if( package != NULL )
 800a8a4:	b1a8      	cbz	r0, 800a8d2 <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 800a8a6:	4a0e      	ldr	r2, [pc, #56]	; (800a8e0 <LmHandlerPackageRegister+0x48>)
 800a8a8:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800a8ac:	4a0d      	ldr	r2, [pc, #52]	; (800a8e4 <LmHandlerPackageRegister+0x4c>)
 800a8ae:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800a8b0:	4a0d      	ldr	r2, [pc, #52]	; (800a8e8 <LmHandlerPackageRegister+0x50>)
 800a8b2:	6812      	ldr	r2, [r2, #0]
 800a8b4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800a8b6:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800a8b8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800a8ba:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800a8bc:	490b      	ldr	r1, [pc, #44]	; (800a8ec <LmHandlerPackageRegister+0x54>)
 800a8be:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800a8c0:	6992      	ldr	r2, [r2, #24]
 800a8c2:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800a8c4:	6843      	ldr	r3, [r0, #4]
 800a8c6:	22f2      	movs	r2, #242	; 0xf2
 800a8c8:	4909      	ldr	r1, [pc, #36]	; (800a8f0 <LmHandlerPackageRegister+0x58>)
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800a8ce:	2000      	movs	r0, #0
}
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 800a8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d6:	e7fb      	b.n	800a8d0 <LmHandlerPackageRegister+0x38>
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	20003434 	.word	0x20003434
 800a8e4:	0800a1b9 	.word	0x0800a1b9
 800a8e8:	20003430 	.word	0x20003430
 800a8ec:	0800a275 	.word	0x0800a275
 800a8f0:	20003334 	.word	0x20003334

0800a8f4 <LmHandlerInit>:
{
 800a8f4:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 800a8f6:	4b13      	ldr	r3, [pc, #76]	; (800a944 <LmHandlerInit+0x50>)
 800a8f8:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800a8fa:	4b13      	ldr	r3, [pc, #76]	; (800a948 <LmHandlerInit+0x54>)
 800a8fc:	4a13      	ldr	r2, [pc, #76]	; (800a94c <LmHandlerInit+0x58>)
 800a8fe:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800a900:	4a13      	ldr	r2, [pc, #76]	; (800a950 <LmHandlerInit+0x5c>)
 800a902:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800a904:	4a13      	ldr	r2, [pc, #76]	; (800a954 <LmHandlerInit+0x60>)
 800a906:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800a908:	4a13      	ldr	r2, [pc, #76]	; (800a958 <LmHandlerInit+0x64>)
 800a90a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800a90c:	6802      	ldr	r2, [r0, #0]
 800a90e:	4b13      	ldr	r3, [pc, #76]	; (800a95c <LmHandlerInit+0x68>)
 800a910:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800a912:	6842      	ldr	r2, [r0, #4]
 800a914:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800a916:	6882      	ldr	r2, [r0, #8]
 800a918:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800a91a:	4a11      	ldr	r2, [pc, #68]	; (800a960 <LmHandlerInit+0x6c>)
 800a91c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800a91e:	6982      	ldr	r2, [r0, #24]
 800a920:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800a922:	4b10      	ldr	r3, [pc, #64]	; (800a964 <LmHandlerInit+0x70>)
 800a924:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800a926:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a928:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800a92a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a92c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800a92e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a930:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800a932:	4619      	mov	r1, r3
 800a934:	2000      	movs	r0, #0
 800a936:	f7ff ffaf 	bl	800a898 <LmHandlerPackageRegister>
 800a93a:	b900      	cbnz	r0, 800a93e <LmHandlerInit+0x4a>
}
 800a93c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 800a93e:	f04f 30ff 	mov.w	r0, #4294967295
 800a942:	e7fb      	b.n	800a93c <LmHandlerInit+0x48>
 800a944:	20003430 	.word	0x20003430
 800a948:	20003480 	.word	0x20003480
 800a94c:	0800a10d 	.word	0x0800a10d
 800a950:	0800a4f5 	.word	0x0800a4f5
 800a954:	0800a5b9 	.word	0x0800a5b9
 800a958:	0800a0a9 	.word	0x0800a0a9
 800a95c:	2000346c 	.word	0x2000346c
 800a960:	0800f455 	.word	0x0800f455
 800a964:	2000345c 	.word	0x2000345c

0800a968 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 800a968:	b161      	cbz	r1, 800a984 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 800a96a:	b118      	cbz	r0, 800a974 <LmHandlerGetVersion+0xc>
 800a96c:	2801      	cmp	r0, #1
 800a96e:	d005      	beq.n	800a97c <LmHandlerGetVersion+0x14>
 800a970:	2000      	movs	r0, #0
 800a972:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800a974:	4a05      	ldr	r2, [pc, #20]	; (800a98c <LmHandlerGetVersion+0x24>)
 800a976:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800a978:	2000      	movs	r0, #0
            break;
 800a97a:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800a97c:	4a04      	ldr	r2, [pc, #16]	; (800a990 <LmHandlerGetVersion+0x28>)
 800a97e:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800a980:	2000      	movs	r0, #0
            break;
 800a982:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a984:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	01000400 	.word	0x01000400
 800a990:	02010001 	.word	0x02010001

0800a994 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800a994:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800a996:	f003 fd01 	bl	800e39c <LoRaMacDeInitialization>
 800a99a:	b900      	cbnz	r0, 800a99e <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800a99c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a99e:	f06f 0001 	mvn.w	r0, #1
 800a9a2:	e7fb      	b.n	800a99c <LmHandlerStop+0x8>

0800a9a4 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800a9a4:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800a9a6:	f002 fe8b 	bl	800d6c0 <LoRaMacHalt>
 800a9aa:	b900      	cbnz	r0, 800a9ae <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800a9ac:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a9ae:	f06f 0001 	mvn.w	r0, #1
 800a9b2:	e7fb      	b.n	800a9ac <LmHandlerHalt+0x8>

0800a9b4 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800a9b8:	f7ff fff4 	bl	800a9a4 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800a9bc:	4604      	mov	r4, r0
 800a9be:	b148      	cbz	r0, 800a9d4 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800a9c0:	b92c      	cbnz	r4, 800a9ce <LmHandlerNvmDataStore+0x1a>
 800a9c2:	4b18      	ldr	r3, [pc, #96]	; (800aa24 <LmHandlerNvmDataStore+0x70>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	b10b      	cbz	r3, 800a9ce <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	4798      	blx	r3
    }

    return lmhStatus;
}
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	b00a      	add	sp, #40	; 0x28
 800a9d2:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800a9d4:	f004 fd46 	bl	800f464 <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 800a9d8:	f110 0f02 	cmn.w	r0, #2
 800a9dc:	d012      	beq.n	800aa04 <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800a9de:	b9d0      	cbnz	r0, 800aa16 <LmHandlerNvmDataStore+0x62>
 800a9e0:	4b10      	ldr	r3, [pc, #64]	; (800aa24 <LmHandlerNvmDataStore+0x70>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	b1cb      	cbz	r3, 800aa1c <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 800a9e8:	2327      	movs	r3, #39	; 0x27
 800a9ea:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800a9ee:	a801      	add	r0, sp, #4
 800a9f0:	f002 ff04 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800a9f4:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <LmHandlerNvmDataStore+0x70>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 800a9fe:	9802      	ldr	r0, [sp, #8]
 800aa00:	4798      	blx	r3
 800aa02:	e001      	b.n	800aa08 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800aa04:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800aa08:	f004 fd3c 	bl	800f484 <NvmDataMgmtStoreEnd>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d0d7      	beq.n	800a9c0 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800aa10:	f04f 34ff 	mov.w	r4, #4294967295
 800aa14:	e7db      	b.n	800a9ce <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800aa16:	f04f 34ff 	mov.w	r4, #4294967295
 800aa1a:	e7f5      	b.n	800aa08 <LmHandlerNvmDataStore+0x54>
 800aa1c:	f04f 34ff 	mov.w	r4, #4294967295
 800aa20:	e7f2      	b.n	800aa08 <LmHandlerNvmDataStore+0x54>
 800aa22:	bf00      	nop
 800aa24:	20003430 	.word	0x20003430

0800aa28 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800aa28:	4b01      	ldr	r3, [pc, #4]	; (800aa30 <LmhpComplianceIsInitialized+0x8>)
 800aa2a:	7818      	ldrb	r0, [r3, #0]
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20003494 	.word	0x20003494

0800aa34 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800aa34:	4b01      	ldr	r3, [pc, #4]	; (800aa3c <LmhpComplianceIsTxPending+0x8>)
 800aa36:	7858      	ldrb	r0, [r3, #1]
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	20003494 	.word	0x20003494

0800aa40 <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800aa40:	4770      	bx	lr

0800aa42 <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800aa42:	4770      	bx	lr

0800aa44 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800aa44:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 800aa46:	4b03      	ldr	r3, [pc, #12]	; (800aa54 <OnProcessTimer+0x10>)
 800aa48:	2201      	movs	r2, #1
 800aa4a:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800aa4c:	4b02      	ldr	r3, [pc, #8]	; (800aa58 <OnProcessTimer+0x14>)
 800aa4e:	695b      	ldr	r3, [r3, #20]
 800aa50:	4798      	blx	r3
}
 800aa52:	bd08      	pop	{r3, pc}
 800aa54:	20003494 	.word	0x20003494
 800aa58:	200000d0 	.word	0x200000d0

0800aa5c <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800aa5c:	4b8d      	ldr	r3, [pc, #564]	; (800ac94 <LmhpComplianceOnMcpsIndication+0x238>)
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 81fd 	beq.w	800ae60 <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800aa66:	78c3      	ldrb	r3, [r0, #3]
 800aa68:	b90b      	cbnz	r3, 800aa6e <LmhpComplianceOnMcpsIndication+0x12>
 800aa6a:	7b83      	ldrb	r3, [r0, #14]
 800aa6c:	b11b      	cbz	r3, 800aa76 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800aa6e:	4a89      	ldr	r2, [pc, #548]	; (800ac94 <LmhpComplianceOnMcpsIndication+0x238>)
 800aa70:	8a13      	ldrh	r3, [r2, #16]
 800aa72:	3301      	adds	r3, #1
 800aa74:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800aa76:	7b43      	ldrb	r3, [r0, #13]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 81f1 	beq.w	800ae60 <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800aa7e:	78c3      	ldrb	r3, [r0, #3]
 800aa80:	2be0      	cmp	r3, #224	; 0xe0
 800aa82:	f040 81ed 	bne.w	800ae60 <LmhpComplianceOnMcpsIndication+0x404>
{
 800aa86:	b570      	push	{r4, r5, r6, lr}
 800aa88:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 800aa8a:	4b82      	ldr	r3, [pc, #520]	; (800ac94 <LmhpComplianceOnMcpsIndication+0x238>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 800aa90:	6884      	ldr	r4, [r0, #8]
 800aa92:	7823      	ldrb	r3, [r4, #0]
 800aa94:	2b7f      	cmp	r3, #127	; 0x7f
 800aa96:	f200 8093 	bhi.w	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
 800aa9a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aa9e:	0080      	.short	0x0080
 800aaa0:	00a600a1 	.word	0x00a600a1
 800aaa4:	00b400ac 	.word	0x00b400ac
 800aaa8:	00c800c1 	.word	0x00c800c1
 800aaac:	00f200e1 	.word	0x00f200e1
 800aab0:	0133011f 	.word	0x0133011f
 800aab4:	00910091 	.word	0x00910091
 800aab8:	00910091 	.word	0x00910091
 800aabc:	00910091 	.word	0x00910091
 800aac0:	00910091 	.word	0x00910091
 800aac4:	00910091 	.word	0x00910091
 800aac8:	00910091 	.word	0x00910091
 800aacc:	00910091 	.word	0x00910091
 800aad0:	00910091 	.word	0x00910091
 800aad4:	00910091 	.word	0x00910091
 800aad8:	00910091 	.word	0x00910091
 800aadc:	01370091 	.word	0x01370091
 800aae0:	0142013e 	.word	0x0142013e
 800aae4:	00910091 	.word	0x00910091
 800aae8:	00910091 	.word	0x00910091
 800aaec:	00910091 	.word	0x00910091
 800aaf0:	00910091 	.word	0x00910091
 800aaf4:	00910091 	.word	0x00910091
 800aaf8:	00910091 	.word	0x00910091
 800aafc:	00910091 	.word	0x00910091
 800ab00:	00910091 	.word	0x00910091
 800ab04:	00910091 	.word	0x00910091
 800ab08:	00910091 	.word	0x00910091
 800ab0c:	00910091 	.word	0x00910091
 800ab10:	00910091 	.word	0x00910091
 800ab14:	00910091 	.word	0x00910091
 800ab18:	00910091 	.word	0x00910091
 800ab1c:	00910091 	.word	0x00910091
 800ab20:	00910091 	.word	0x00910091
 800ab24:	00910091 	.word	0x00910091
 800ab28:	00910091 	.word	0x00910091
 800ab2c:	00910091 	.word	0x00910091
 800ab30:	00910091 	.word	0x00910091
 800ab34:	00910091 	.word	0x00910091
 800ab38:	00910091 	.word	0x00910091
 800ab3c:	00910091 	.word	0x00910091
 800ab40:	00910091 	.word	0x00910091
 800ab44:	00910091 	.word	0x00910091
 800ab48:	00910091 	.word	0x00910091
 800ab4c:	00910091 	.word	0x00910091
 800ab50:	00910091 	.word	0x00910091
 800ab54:	00910091 	.word	0x00910091
 800ab58:	00910091 	.word	0x00910091
 800ab5c:	00910091 	.word	0x00910091
 800ab60:	00910091 	.word	0x00910091
 800ab64:	00910091 	.word	0x00910091
 800ab68:	00910091 	.word	0x00910091
 800ab6c:	00910091 	.word	0x00910091
 800ab70:	00910091 	.word	0x00910091
 800ab74:	00910091 	.word	0x00910091
 800ab78:	00910091 	.word	0x00910091
 800ab7c:	00910091 	.word	0x00910091
 800ab80:	00910091 	.word	0x00910091
 800ab84:	00910091 	.word	0x00910091
 800ab88:	00910091 	.word	0x00910091
 800ab8c:	00910091 	.word	0x00910091
 800ab90:	00910091 	.word	0x00910091
 800ab94:	00910091 	.word	0x00910091
 800ab98:	016e014d 	.word	0x016e014d
 800ab9c:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800ab9e:	4b3d      	ldr	r3, [pc, #244]	; (800ac94 <LmhpComplianceOnMcpsIndication+0x238>)
 800aba0:	68da      	ldr	r2, [r3, #12]
 800aba2:	2101      	movs	r1, #1
 800aba4:	7299      	strb	r1, [r3, #10]
 800aba6:	2000      	movs	r0, #0
 800aba8:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800abaa:	68d8      	ldr	r0, [r3, #12]
 800abac:	7a9a      	ldrb	r2, [r3, #10]
 800abae:	1854      	adds	r4, r2, r1
 800abb0:	729c      	strb	r4, [r3, #10]
 800abb2:	2406      	movs	r4, #6
 800abb4:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800abb6:	68d8      	ldr	r0, [r3, #12]
 800abb8:	7a9a      	ldrb	r2, [r3, #10]
 800abba:	1854      	adds	r4, r2, r1
 800abbc:	729c      	strb	r4, [r3, #10]
 800abbe:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 800abc0:	4b34      	ldr	r3, [pc, #208]	; (800ac94 <LmhpComplianceOnMcpsIndication+0x238>)
 800abc2:	7a9b      	ldrb	r3, [r3, #10]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 8144 	beq.w	800ae52 <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 800abca:	4c33      	ldr	r4, [pc, #204]	; (800ac98 <LmhpComplianceOnMcpsIndication+0x23c>)
 800abcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800abd0:	4620      	mov	r0, r4
 800abd2:	f009 febf 	bl	8014954 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800abd6:	4620      	mov	r0, r4
 800abd8:	f009 fe76 	bl	80148c8 <UTIL_TIMER_Start>
}
 800abdc:	b014      	add	sp, #80	; 0x50
 800abde:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 800abe0:	4b2c      	ldr	r3, [pc, #176]	; (800ac94 <LmhpComplianceOnMcpsIndication+0x238>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800abe8:	e7ea      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800abea:	4b2c      	ldr	r3, [pc, #176]	; (800ac9c <LmhpComplianceOnMcpsIndication+0x240>)
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abee:	2101      	movs	r1, #1
 800abf0:	2002      	movs	r0, #2
 800abf2:	4798      	blx	r3
        break;
 800abf4:	e7e4      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800abf6:	7862      	ldrb	r2, [r4, #1]
 800abf8:	4b26      	ldr	r3, [pc, #152]	; (800ac94 <LmhpComplianceOnMcpsIndication+0x238>)
 800abfa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800ac04:	e7dc      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 800ac06:	2304      	movs	r3, #4
 800ac08:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800ac0c:	7863      	ldrb	r3, [r4, #1]
 800ac0e:	3b00      	subs	r3, #0
 800ac10:	bf18      	it	ne
 800ac12:	2301      	movne	r3, #1
 800ac14:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800ac18:	4668      	mov	r0, sp
 800ac1a:	f002 ff3d 	bl	800da98 <LoRaMacMibSetRequestConfirm>
        break;
 800ac1e:	e7cf      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800ac20:	7860      	ldrb	r0, [r4, #1]
 800ac22:	3800      	subs	r0, #0
 800ac24:	bf18      	it	ne
 800ac26:	2001      	movne	r0, #1
 800ac28:	f003 fba4 	bl	800e374 <LoRaMacTestSetDutyCycleOn>
        break;
 800ac2c:	e7c8      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800ac2e:	466d      	mov	r5, sp
 800ac30:	4e1b      	ldr	r6, [pc, #108]	; (800aca0 <LmhpComplianceOnMcpsIndication+0x244>)
 800ac32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ac34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ac38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac3a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ac3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800ac42:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800ac44:	2b0a      	cmp	r3, #10
 800ac46:	d8bb      	bhi.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800ac48:	4a16      	ldr	r2, [pc, #88]	; (800aca4 <LmhpComplianceOnMcpsIndication+0x248>)
 800ac4a:	6812      	ldr	r2, [r2, #0]
 800ac4c:	6852      	ldr	r2, [r2, #4]
 800ac4e:	2a00      	cmp	r2, #0
 800ac50:	d0b6      	beq.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800ac52:	a914      	add	r1, sp, #80	; 0x50
 800ac54:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ac58:	f853 0c50 	ldr.w	r0, [r3, #-80]
 800ac5c:	4790      	blx	r2
        break;
 800ac5e:	e7af      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800ac60:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800ac62:	1e53      	subs	r3, r2, #1
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d8aa      	bhi.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800ac6a:	1e50      	subs	r0, r2, #1
 800ac6c:	bf18      	it	ne
 800ac6e:	2001      	movne	r0, #1
 800ac70:	4b08      	ldr	r3, [pc, #32]	; (800ac94 <LmhpComplianceOnMcpsIndication+0x238>)
 800ac72:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800ac74:	4b0b      	ldr	r3, [pc, #44]	; (800aca4 <LmhpComplianceOnMcpsIndication+0x248>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0a0      	beq.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800ac7e:	4798      	blx	r3
 800ac80:	e79e      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800ac82:	4b04      	ldr	r3, [pc, #16]	; (800ac94 <LmhpComplianceOnMcpsIndication+0x238>)
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	2101      	movs	r1, #1
 800ac88:	7299      	strb	r1, [r3, #10]
 800ac8a:	2308      	movs	r3, #8
 800ac8c:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800ac8e:	460b      	mov	r3, r1
 800ac90:	e01b      	b.n	800acca <LmhpComplianceOnMcpsIndication+0x26e>
 800ac92:	bf00      	nop
 800ac94:	20003494 	.word	0x20003494
 800ac98:	200034cc 	.word	0x200034cc
 800ac9c:	200000d0 	.word	0x200000d0
 800aca0:	08014e7c 	.word	0x08014e7c
 800aca4:	20003490 	.word	0x20003490
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800aca8:	6882      	ldr	r2, [r0, #8]
 800acaa:	f101 0c01 	add.w	ip, r1, #1
 800acae:	5c52      	ldrb	r2, [r2, r1]
 800acb0:	496c      	ldr	r1, [pc, #432]	; (800ae64 <LmhpComplianceOnMcpsIndication+0x408>)
 800acb2:	68cd      	ldr	r5, [r1, #12]
 800acb4:	7a8c      	ldrb	r4, [r1, #10]
 800acb6:	f104 0e01 	add.w	lr, r4, #1
 800acba:	f881 e00a 	strb.w	lr, [r1, #10]
 800acbe:	3201      	adds	r2, #1
 800acc0:	552a      	strb	r2, [r5, r4]
             i++ )
 800acc2:	3301      	adds	r3, #1
 800acc4:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800acc6:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800acca:	4a66      	ldr	r2, [pc, #408]	; (800ae64 <LmhpComplianceOnMcpsIndication+0x408>)
 800accc:	7a52      	ldrb	r2, [r2, #9]
 800acce:	7b04      	ldrb	r4, [r0, #12]
 800acd0:	42a2      	cmp	r2, r4
 800acd2:	bf28      	it	cs
 800acd4:	4622      	movcs	r2, r4
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d8e6      	bhi.n	800aca8 <LmhpComplianceOnMcpsIndication+0x24c>
 800acda:	e771      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800acdc:	4b61      	ldr	r3, [pc, #388]	; (800ae64 <LmhpComplianceOnMcpsIndication+0x408>)
 800acde:	68da      	ldr	r2, [r3, #12]
 800ace0:	2101      	movs	r1, #1
 800ace2:	7299      	strb	r1, [r3, #10]
 800ace4:	2109      	movs	r1, #9
 800ace6:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800ace8:	8a18      	ldrh	r0, [r3, #16]
 800acea:	68d9      	ldr	r1, [r3, #12]
 800acec:	7a9a      	ldrb	r2, [r3, #10]
 800acee:	1c54      	adds	r4, r2, #1
 800acf0:	729c      	strb	r4, [r3, #10]
 800acf2:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800acf4:	8a1a      	ldrh	r2, [r3, #16]
 800acf6:	68d8      	ldr	r0, [r3, #12]
 800acf8:	7a99      	ldrb	r1, [r3, #10]
 800acfa:	1c4c      	adds	r4, r1, #1
 800acfc:	729c      	strb	r4, [r3, #10]
 800acfe:	0a13      	lsrs	r3, r2, #8
 800ad00:	5443      	strb	r3, [r0, r1]
        break;
 800ad02:	e75d      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 800ad04:	4b57      	ldr	r3, [pc, #348]	; (800ae64 <LmhpComplianceOnMcpsIndication+0x408>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	821a      	strh	r2, [r3, #16]
        break;
 800ad0a:	e759      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 800ad0c:	2304      	movs	r3, #4
 800ad0e:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 800ad12:	4668      	mov	r0, sp
 800ad14:	f003 f946 	bl	800dfa4 <LoRaMacMlmeRequest>
        break;
 800ad18:	e752      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 800ad1a:	4b53      	ldr	r3, [pc, #332]	; (800ae68 <LmhpComplianceOnMcpsIndication+0x40c>)
 800ad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1e:	4798      	blx	r3
        break;
 800ad20:	e74e      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800ad22:	7860      	ldrb	r0, [r4, #1]
 800ad24:	4b4f      	ldr	r3, [pc, #316]	; (800ae64 <LmhpComplianceOnMcpsIndication+0x408>)
 800ad26:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800ad28:	4b50      	ldr	r3, [pc, #320]	; (800ae6c <LmhpComplianceOnMcpsIndication+0x410>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f43f af46 	beq.w	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800ad34:	4798      	blx	r3
 800ad36:	e743      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 800ad38:	7b03      	ldrb	r3, [r0, #12]
 800ad3a:	2b07      	cmp	r3, #7
 800ad3c:	f47f af40 	bne.w	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 800ad40:	2305      	movs	r3, #5
 800ad42:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800ad46:	7863      	ldrb	r3, [r4, #1]
 800ad48:	78a2      	ldrb	r2, [r4, #2]
 800ad4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 800ad4e:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800ad52:	78e3      	ldrb	r3, [r4, #3]
 800ad54:	7922      	ldrb	r2, [r4, #4]
 800ad56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800ad5a:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800ad5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800ad60:	2264      	movs	r2, #100	; 0x64
 800ad62:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800ad66:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800ad68:	6883      	ldr	r3, [r0, #8]
 800ad6a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800ad6e:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 800ad72:	4668      	mov	r0, sp
 800ad74:	f003 f916 	bl	800dfa4 <LoRaMacMlmeRequest>
        break;
 800ad78:	e722      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800ad7a:	2339      	movs	r3, #57	; 0x39
 800ad7c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 800ad80:	2300      	movs	r3, #0
 800ad82:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 800ad86:	a80b      	add	r0, sp, #44	; 0x2c
 800ad88:	f002 fe86 	bl	800da98 <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 800ad8c:	4b35      	ldr	r3, [pc, #212]	; (800ae64 <LmhpComplianceOnMcpsIndication+0x408>)
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800ad94:	e714      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 800ad96:	232a      	movs	r3, #42	; 0x2a
 800ad98:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ad9c:	4668      	mov	r0, sp
 800ad9e:	f002 fd2d 	bl	800d7fc <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800ada2:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800ada4:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800ada6:	4b2f      	ldr	r3, [pc, #188]	; (800ae64 <LmhpComplianceOnMcpsIndication+0x408>)
 800ada8:	68dc      	ldr	r4, [r3, #12]
 800adaa:	7a98      	ldrb	r0, [r3, #10]
 800adac:	1c45      	adds	r5, r0, #1
 800adae:	729d      	strb	r5, [r3, #10]
 800adb0:	257f      	movs	r5, #127	; 0x7f
 800adb2:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800adb4:	482d      	ldr	r0, [pc, #180]	; (800ae6c <LmhpComplianceOnMcpsIndication+0x410>)
 800adb6:	6800      	ldr	r0, [r0, #0]
 800adb8:	68dd      	ldr	r5, [r3, #12]
 800adba:	7a9c      	ldrb	r4, [r3, #10]
 800adbc:	1c66      	adds	r6, r4, #1
 800adbe:	729e      	strb	r6, [r3, #10]
 800adc0:	78c6      	ldrb	r6, [r0, #3]
 800adc2:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800adc4:	68dd      	ldr	r5, [r3, #12]
 800adc6:	7a9c      	ldrb	r4, [r3, #10]
 800adc8:	1c66      	adds	r6, r4, #1
 800adca:	729e      	strb	r6, [r3, #10]
 800adcc:	7886      	ldrb	r6, [r0, #2]
 800adce:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800add0:	68dd      	ldr	r5, [r3, #12]
 800add2:	7a9c      	ldrb	r4, [r3, #10]
 800add4:	1c66      	adds	r6, r4, #1
 800add6:	729e      	strb	r6, [r3, #10]
 800add8:	7846      	ldrb	r6, [r0, #1]
 800adda:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800addc:	68dd      	ldr	r5, [r3, #12]
 800adde:	7a9c      	ldrb	r4, [r3, #10]
 800ade0:	1c66      	adds	r6, r4, #1
 800ade2:	729e      	strb	r6, [r3, #10]
 800ade4:	7800      	ldrb	r0, [r0, #0]
 800ade6:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800ade8:	68dc      	ldr	r4, [r3, #12]
 800adea:	7a98      	ldrb	r0, [r3, #10]
 800adec:	1c45      	adds	r5, r0, #1
 800adee:	729d      	strb	r5, [r3, #10]
 800adf0:	f3c1 6507 	ubfx	r5, r1, #24, #8
 800adf4:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800adf6:	68dc      	ldr	r4, [r3, #12]
 800adf8:	7a98      	ldrb	r0, [r3, #10]
 800adfa:	1c45      	adds	r5, r0, #1
 800adfc:	729d      	strb	r5, [r3, #10]
 800adfe:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800ae02:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800ae04:	68dc      	ldr	r4, [r3, #12]
 800ae06:	7a98      	ldrb	r0, [r3, #10]
 800ae08:	1c45      	adds	r5, r0, #1
 800ae0a:	729d      	strb	r5, [r3, #10]
 800ae0c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800ae10:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800ae12:	68dc      	ldr	r4, [r3, #12]
 800ae14:	7a98      	ldrb	r0, [r3, #10]
 800ae16:	1c45      	adds	r5, r0, #1
 800ae18:	729d      	strb	r5, [r3, #10]
 800ae1a:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800ae1c:	68d8      	ldr	r0, [r3, #12]
 800ae1e:	7a99      	ldrb	r1, [r3, #10]
 800ae20:	1c4c      	adds	r4, r1, #1
 800ae22:	729c      	strb	r4, [r3, #10]
 800ae24:	f3c2 6407 	ubfx	r4, r2, #24, #8
 800ae28:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800ae2a:	68d8      	ldr	r0, [r3, #12]
 800ae2c:	7a99      	ldrb	r1, [r3, #10]
 800ae2e:	1c4c      	adds	r4, r1, #1
 800ae30:	729c      	strb	r4, [r3, #10]
 800ae32:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800ae36:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800ae38:	68d8      	ldr	r0, [r3, #12]
 800ae3a:	7a99      	ldrb	r1, [r3, #10]
 800ae3c:	1c4c      	adds	r4, r1, #1
 800ae3e:	729c      	strb	r4, [r3, #10]
 800ae40:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800ae44:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800ae46:	68d8      	ldr	r0, [r3, #12]
 800ae48:	7a99      	ldrb	r1, [r3, #10]
 800ae4a:	1c4c      	adds	r4, r1, #1
 800ae4c:	729c      	strb	r4, [r3, #10]
 800ae4e:	5442      	strb	r2, [r0, r1]
        break;
 800ae50:	e6b6      	b.n	800abc0 <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 800ae52:	4807      	ldr	r0, [pc, #28]	; (800ae70 <LmhpComplianceOnMcpsIndication+0x414>)
 800ae54:	f009 fcde 	bl	8014814 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800ae58:	4b02      	ldr	r3, [pc, #8]	; (800ae64 <LmhpComplianceOnMcpsIndication+0x408>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	705a      	strb	r2, [r3, #1]
 800ae5e:	e6bd      	b.n	800abdc <LmhpComplianceOnMcpsIndication+0x180>
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20003494 	.word	0x20003494
 800ae68:	200000d0 	.word	0x200000d0
 800ae6c:	20003490 	.word	0x20003490
 800ae70:	200034cc 	.word	0x200034cc

0800ae74 <LmhpComplianceProcess>:
{
 800ae74:	b530      	push	{r4, r5, lr}
 800ae76:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 800ae78:	4b28      	ldr	r3, [pc, #160]	; (800af1c <LmhpComplianceProcess+0xa8>)
 800ae7a:	785b      	ldrb	r3, [r3, #1]
 800ae7c:	b993      	cbnz	r3, 800aea4 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800ae7e:	4b27      	ldr	r3, [pc, #156]	; (800af1c <LmhpComplianceProcess+0xa8>)
 800ae80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d13f      	bne.n	800af08 <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 800ae88:	4b24      	ldr	r3, [pc, #144]	; (800af1c <LmhpComplianceProcess+0xa8>)
 800ae8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae8e:	b13b      	cbz	r3, 800aea0 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 800ae90:	4b22      	ldr	r3, [pc, #136]	; (800af1c <LmhpComplianceProcess+0xa8>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 800ae98:	4b21      	ldr	r3, [pc, #132]	; (800af20 <LmhpComplianceProcess+0xac>)
 800ae9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae9c:	b103      	cbz	r3, 800aea0 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 800ae9e:	4798      	blx	r3
}
 800aea0:	b003      	add	sp, #12
 800aea2:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 800aea4:	f009 fc76 	bl	8014794 <UTIL_TIMER_GetCurrentTime>
 800aea8:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800aeaa:	4b1c      	ldr	r3, [pc, #112]	; (800af1c <LmhpComplianceProcess+0xa8>)
 800aeac:	685d      	ldr	r5, [r3, #4]
 800aeae:	f7ff f9f5 	bl	800a29c <LmHandlerGetDutyCycleWaitTime>
 800aeb2:	4405      	add	r5, r0
 800aeb4:	42a5      	cmp	r5, r4
 800aeb6:	d2e7      	bcs.n	800ae88 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 800aeb8:	4b18      	ldr	r3, [pc, #96]	; (800af1c <LmhpComplianceProcess+0xa8>)
 800aeba:	7a9b      	ldrb	r3, [r3, #10]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d0e3      	beq.n	800ae88 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 800aec0:	22e0      	movs	r2, #224	; 0xe0
 800aec2:	f88d 2000 	strb.w	r2, [sp]
 800aec6:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800aeca:	4b14      	ldr	r3, [pc, #80]	; (800af1c <LmhpComplianceProcess+0xa8>)
 800aecc:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 800aece:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800aed0:	2201      	movs	r2, #1
 800aed2:	7a19      	ldrb	r1, [r3, #8]
 800aed4:	4668      	mov	r0, sp
 800aed6:	f7ff f9f9 	bl	800a2cc <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800aeda:	f110 0f02 	cmn.w	r0, #2
 800aede:	d009      	beq.n	800aef4 <LmhpComplianceProcess+0x80>
 800aee0:	f110 0f06 	cmn.w	r0, #6
 800aee4:	d006      	beq.n	800aef4 <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 800aee6:	4b0d      	ldr	r3, [pc, #52]	; (800af1c <LmhpComplianceProcess+0xa8>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800aeec:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 800aeee:	4b0b      	ldr	r3, [pc, #44]	; (800af1c <LmhpComplianceProcess+0xa8>)
 800aef0:	605c      	str	r4, [r3, #4]
 800aef2:	e7c9      	b.n	800ae88 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 800aef4:	4d0b      	ldr	r5, [pc, #44]	; (800af24 <LmhpComplianceProcess+0xb0>)
 800aef6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aefa:	4628      	mov	r0, r5
 800aefc:	f009 fd2a 	bl	8014954 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800af00:	4628      	mov	r0, r5
 800af02:	f009 fce1 	bl	80148c8 <UTIL_TIMER_Start>
 800af06:	e7f2      	b.n	800aeee <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 800af08:	4b04      	ldr	r3, [pc, #16]	; (800af1c <LmhpComplianceProcess+0xa8>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800af10:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 800af14:	f7ff fa7c 	bl	800a410 <LmHandlerRequestClass>
 800af18:	e7b6      	b.n	800ae88 <LmhpComplianceProcess+0x14>
 800af1a:	bf00      	nop
 800af1c:	20003494 	.word	0x20003494
 800af20:	200000d0 	.word	0x200000d0
 800af24:	200034cc 	.word	0x200034cc

0800af28 <LmhpComplianceInit>:
{
 800af28:	b530      	push	{r4, r5, lr}
 800af2a:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800af2c:	b188      	cbz	r0, 800af52 <LmhpComplianceInit+0x2a>
 800af2e:	4603      	mov	r3, r0
 800af30:	b179      	cbz	r1, 800af52 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800af32:	4813      	ldr	r0, [pc, #76]	; (800af80 <LmhpComplianceInit+0x58>)
 800af34:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800af36:	4b13      	ldr	r3, [pc, #76]	; (800af84 <LmhpComplianceInit+0x5c>)
 800af38:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800af3a:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 800af3c:	2201      	movs	r2, #1
 800af3e:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800af40:	2200      	movs	r2, #0
 800af42:	9200      	str	r2, [sp, #0]
 800af44:	4b10      	ldr	r3, [pc, #64]	; (800af88 <LmhpComplianceInit+0x60>)
 800af46:	f04f 31ff 	mov.w	r1, #4294967295
 800af4a:	4810      	ldr	r0, [pc, #64]	; (800af8c <LmhpComplianceInit+0x64>)
 800af4c:	f009 fc04 	bl	8014758 <UTIL_TIMER_Create>
 800af50:	e004      	b.n	800af5c <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	4a0a      	ldr	r2, [pc, #40]	; (800af80 <LmhpComplianceInit+0x58>)
 800af56:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800af58:	4a0a      	ldr	r2, [pc, #40]	; (800af84 <LmhpComplianceInit+0x5c>)
 800af5a:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 800af5c:	4c09      	ldr	r4, [pc, #36]	; (800af84 <LmhpComplianceInit+0x5c>)
 800af5e:	2500      	movs	r5, #0
 800af60:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800af62:	2220      	movs	r2, #32
 800af64:	4629      	mov	r1, r5
 800af66:	f104 0014 	add.w	r0, r4, #20
 800af6a:	f007 fb4a 	bl	8012602 <memset1>
    ComplianceTestState.IsTxPending = false;
 800af6e:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800af70:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800af72:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800af76:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800af7a:	b003      	add	sp, #12
 800af7c:	bd30      	pop	{r4, r5, pc}
 800af7e:	bf00      	nop
 800af80:	20003490 	.word	0x20003490
 800af84:	20003494 	.word	0x20003494
 800af88:	0800aa45 	.word	0x0800aa45
 800af8c:	200034cc 	.word	0x200034cc

0800af90 <LmhpCompliancePackageFactory>:
}
 800af90:	4800      	ldr	r0, [pc, #0]	; (800af94 <LmhpCompliancePackageFactory+0x4>)
 800af92:	4770      	bx	lr
 800af94:	200000d0 	.word	0x200000d0

0800af98 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 800af98:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800af9a:	4a06      	ldr	r2, [pc, #24]	; (800afb4 <OnRadioRxError+0x1c>)
 800af9c:	7813      	ldrb	r3, [r2, #0]
 800af9e:	f043 0304 	orr.w	r3, r3, #4
 800afa2:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800afa4:	4b04      	ldr	r3, [pc, #16]	; (800afb8 <OnRadioRxError+0x20>)
 800afa6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800afaa:	b113      	cbz	r3, 800afb2 <OnRadioRxError+0x1a>
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	b103      	cbz	r3, 800afb2 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800afb0:	4798      	blx	r3
    }
}
 800afb2:	bd08      	pop	{r3, pc}
 800afb4:	200034e4 	.word	0x200034e4
 800afb8:	200034e8 	.word	0x200034e8

0800afbc <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800afbc:	4b07      	ldr	r3, [pc, #28]	; (800afdc <UpdateRxSlotIdleState+0x20>)
 800afbe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d004      	beq.n	800afd0 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800afc6:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <UpdateRxSlotIdleState+0x24>)
 800afc8:	2206      	movs	r2, #6
 800afca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 800afce:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800afd0:	4b03      	ldr	r3, [pc, #12]	; (800afe0 <UpdateRxSlotIdleState+0x24>)
 800afd2:	2202      	movs	r2, #2
 800afd4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	20008000 	.word	0x20008000
 800afe0:	200034e8 	.word	0x200034e8

0800afe4 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800afe4:	4b01      	ldr	r3, [pc, #4]	; (800afec <LoRaMacEnableRequests+0x8>)
 800afe6:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 800afea:	4770      	bx	lr
 800afec:	200034e8 	.word	0x200034e8

0800aff0 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800aff0:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800aff2:	4b15      	ldr	r3, [pc, #84]	; (800b048 <LoRaMacHandleIndicationEvents+0x58>)
 800aff4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800aff8:	f013 0f08 	tst.w	r3, #8
 800affc:	d00e      	beq.n	800b01c <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800affe:	4812      	ldr	r0, [pc, #72]	; (800b048 <LoRaMacHandleIndicationEvents+0x58>)
 800b000:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 800b004:	f36f 03c3 	bfc	r3, #3, #1
 800b008:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800b00c:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800b016:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 800b01a:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b01c:	4b0a      	ldr	r3, [pc, #40]	; (800b048 <LoRaMacHandleIndicationEvents+0x58>)
 800b01e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800b022:	f013 0f02 	tst.w	r3, #2
 800b026:	d00e      	beq.n	800b046 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b028:	4807      	ldr	r0, [pc, #28]	; (800b048 <LoRaMacHandleIndicationEvents+0x58>)
 800b02a:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 800b02e:	f36f 0341 	bfc	r3, #1, #1
 800b032:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800b036:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800b040:	f200 4024 	addw	r0, r0, #1060	; 0x424
 800b044:	4798      	blx	r3
    }
}
 800b046:	bd08      	pop	{r3, pc}
 800b048:	200034e8 	.word	0x200034e8

0800b04c <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800b04c:	b110      	cbz	r0, 800b054 <CheckForMinimumAbpDatarate+0x8>
 800b04e:	2901      	cmp	r1, #1
 800b050:	d001      	beq.n	800b056 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800b052:	2000      	movs	r0, #0
}
 800b054:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800b056:	2a00      	cmp	r2, #0
 800b058:	d0fc      	beq.n	800b054 <CheckForMinimumAbpDatarate+0x8>
    return false;
 800b05a:	2000      	movs	r0, #0
 800b05c:	4770      	bx	lr
	...

0800b060 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800b060:	4b07      	ldr	r3, [pc, #28]	; (800b080 <LoRaMacCheckForRxAbort+0x20>)
 800b062:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b066:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b06a:	d008      	beq.n	800b07e <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800b06c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b070:	4a03      	ldr	r2, [pc, #12]	; (800b080 <LoRaMacCheckForRxAbort+0x20>)
 800b072:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b076:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800b07a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800b07e:	4770      	bx	lr
 800b080:	200034e8 	.word	0x200034e8

0800b084 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800b084:	4b06      	ldr	r3, [pc, #24]	; (800b0a0 <CalculateBackOff+0x1c>)
 800b086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b088:	b94b      	cbnz	r3, 800b09e <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800b08a:	4a05      	ldr	r2, [pc, #20]	; (800b0a0 <CalculateBackOff+0x1c>)
 800b08c:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 800b090:	4904      	ldr	r1, [pc, #16]	; (800b0a4 <CalculateBackOff+0x20>)
 800b092:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 800b096:	3b01      	subs	r3, #1
 800b098:	fb01 f303 	mul.w	r3, r1, r3
 800b09c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800b09e:	4770      	bx	lr
 800b0a0:	20008000 	.word	0x20008000
 800b0a4:	200034e8 	.word	0x200034e8

0800b0a8 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800b0a8:	b508      	push	{r3, lr}
 800b0aa:	4684      	mov	ip, r0
 800b0ac:	4608      	mov	r0, r1
 800b0ae:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b0b0:	4b06      	ldr	r3, [pc, #24]	; (800b0cc <SetTxContinuousWave+0x24>)
 800b0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b4:	4662      	mov	r2, ip
 800b0b6:	b249      	sxtb	r1, r1
 800b0b8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b0ba:	4a05      	ldr	r2, [pc, #20]	; (800b0d0 <SetTxContinuousWave+0x28>)
 800b0bc:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800b0c0:	f043 0302 	orr.w	r3, r3, #2
 800b0c4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	bd08      	pop	{r3, pc}
 800b0cc:	08015d04 	.word	0x08015d04
 800b0d0:	200034e8 	.word	0x200034e8

0800b0d4 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	b1f8      	cbz	r0, 800b118 <DetermineFrameType+0x44>
 800b0d8:	b301      	cbz	r1, 800b11c <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800b0da:	7b03      	ldrb	r3, [r0, #12]
 800b0dc:	f013 030f 	ands.w	r3, r3, #15
 800b0e0:	d005      	beq.n	800b0ee <DetermineFrameType+0x1a>
 800b0e2:	f890 0020 	ldrb.w	r0, [r0, #32]
 800b0e6:	b110      	cbz	r0, 800b0ee <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	7008      	strb	r0, [r1, #0]
 800b0ec:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800b0ee:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800b0f2:	b910      	cbnz	r0, 800b0fa <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	700b      	strb	r3, [r1, #0]
 800b0f8:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800b0fa:	b92b      	cbnz	r3, 800b108 <DetermineFrameType+0x34>
 800b0fc:	f892 0020 	ldrb.w	r0, [r2, #32]
 800b100:	b910      	cbnz	r0, 800b108 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800b102:	2302      	movs	r3, #2
 800b104:	700b      	strb	r3, [r1, #0]
 800b106:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800b108:	b953      	cbnz	r3, 800b120 <DetermineFrameType+0x4c>
 800b10a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b10e:	b14a      	cbz	r2, 800b124 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800b110:	2203      	movs	r2, #3
 800b112:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800b114:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800b116:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b118:	2003      	movs	r0, #3
 800b11a:	4770      	bx	lr
 800b11c:	2003      	movs	r0, #3
 800b11e:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800b120:	2018      	movs	r0, #24
 800b122:	4770      	bx	lr
 800b124:	2018      	movs	r0, #24
}
 800b126:	4770      	bx	lr

0800b128 <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 800b128:	4288      	cmp	r0, r1
 800b12a:	d201      	bcs.n	800b130 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800b12c:	2000      	movs	r0, #0
 800b12e:	4770      	bx	lr
        return true;
 800b130:	2001      	movs	r0, #1
}
 800b132:	4770      	bx	lr

0800b134 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800b134:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800b136:	4b0b      	ldr	r3, [pc, #44]	; (800b164 <CheckRetransUnconfirmedUplink+0x30>)
 800b138:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800b13c:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <CheckRetransUnconfirmedUplink+0x34>)
 800b13e:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b142:	f7ff fff1 	bl	800b128 <CheckRetrans>
 800b146:	b950      	cbnz	r0, 800b15e <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b148:	4b07      	ldr	r3, [pc, #28]	; (800b168 <CheckRetransUnconfirmedUplink+0x34>)
 800b14a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800b14e:	f013 0f02 	tst.w	r3, #2
 800b152:	d004      	beq.n	800b15e <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b154:	4b04      	ldr	r3, [pc, #16]	; (800b168 <CheckRetransUnconfirmedUplink+0x34>)
 800b156:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d900      	bls.n	800b160 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800b15e:	bd08      	pop	{r3, pc}
            return true;
 800b160:	2001      	movs	r0, #1
 800b162:	e7fc      	b.n	800b15e <CheckRetransUnconfirmedUplink+0x2a>
 800b164:	20008000 	.word	0x20008000
 800b168:	200034e8 	.word	0x200034e8

0800b16c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800b16c:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800b16e:	4b09      	ldr	r3, [pc, #36]	; (800b194 <CheckRetransConfirmedUplink+0x28>)
 800b170:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800b174:	4b08      	ldr	r3, [pc, #32]	; (800b198 <CheckRetransConfirmedUplink+0x2c>)
 800b176:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800b17a:	f7ff ffd5 	bl	800b128 <CheckRetrans>
 800b17e:	b940      	cbnz	r0, 800b192 <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b180:	4b05      	ldr	r3, [pc, #20]	; (800b198 <CheckRetransConfirmedUplink+0x2c>)
 800b182:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800b186:	f013 0f02 	tst.w	r3, #2
 800b18a:	d002      	beq.n	800b192 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800b18c:	4b02      	ldr	r3, [pc, #8]	; (800b198 <CheckRetransConfirmedUplink+0x2c>)
 800b18e:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 800b192:	bd08      	pop	{r3, pc}
 800b194:	20008000 	.word	0x20008000
 800b198:	200034e8 	.word	0x200034e8

0800b19c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 800b19c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b1a0:	d000      	beq.n	800b1a4 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800b1a2:	3001      	adds	r0, #1
    }
    return counter;
}
 800b1a4:	4770      	bx	lr
	...

0800b1a8 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800b1a8:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800b1aa:	4b12      	ldr	r3, [pc, #72]	; (800b1f4 <StopRetransmission+0x4c>)
 800b1ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800b1b0:	f013 0f02 	tst.w	r3, #2
 800b1b4:	d004      	beq.n	800b1c0 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800b1b6:	4b0f      	ldr	r3, [pc, #60]	; (800b1f4 <StopRetransmission+0x4c>)
 800b1b8:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d908      	bls.n	800b1d2 <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800b1c0:	4b0d      	ldr	r3, [pc, #52]	; (800b1f8 <StopRetransmission+0x50>)
 800b1c2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800b1c6:	b123      	cbz	r3, 800b1d2 <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800b1c8:	4c0b      	ldr	r4, [pc, #44]	; (800b1f8 <StopRetransmission+0x50>)
 800b1ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b1cc:	f7ff ffe6 	bl	800b19c <IncreaseAdrAckCounter>
 800b1d0:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800b1d2:	4b08      	ldr	r3, [pc, #32]	; (800b1f4 <StopRetransmission+0x4c>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 800b1da:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 800b1de:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b1e2:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b1e6:	f022 0202 	bic.w	r2, r2, #2
 800b1ea:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800b1ee:	2001      	movs	r0, #1
 800b1f0:	bd10      	pop	{r4, pc}
 800b1f2:	bf00      	nop
 800b1f4:	200034e8 	.word	0x200034e8
 800b1f8:	20008000 	.word	0x20008000

0800b1fc <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800b1fc:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800b1fe:	4b04      	ldr	r3, [pc, #16]	; (800b210 <CallNvmDataChangeCallback+0x14>)
 800b200:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b204:	b113      	cbz	r3, 800b20c <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800b206:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800b208:	b103      	cbz	r3, 800b20c <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800b20a:	4798      	blx	r3
    }
}
 800b20c:	bd08      	pop	{r3, pc}
 800b20e:	bf00      	nop
 800b210:	200034e8 	.word	0x200034e8

0800b214 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800b214:	4b04      	ldr	r3, [pc, #16]	; (800b228 <IsRequestPending+0x14>)
 800b216:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 800b21a:	f010 0005 	ands.w	r0, r0, #5
 800b21e:	d100      	bne.n	800b222 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800b220:	4770      	bx	lr
        return 1;
 800b222:	2001      	movs	r0, #1
 800b224:	e7fc      	b.n	800b220 <IsRequestPending+0xc>
 800b226:	bf00      	nop
 800b228:	200034e8 	.word	0x200034e8

0800b22c <GetMaxAppPayloadWithoutFOptsLength>:
{
 800b22c:	b500      	push	{lr}
 800b22e:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b230:	4b0d      	ldr	r3, [pc, #52]	; (800b268 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800b232:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b236:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800b23a:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800b23e:	220d      	movs	r2, #13
 800b240:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800b244:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b248:	b113      	cbz	r3, 800b250 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800b24a:	230e      	movs	r3, #14
 800b24c:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b250:	a902      	add	r1, sp, #8
 800b252:	4b05      	ldr	r3, [pc, #20]	; (800b268 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800b254:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b258:	f004 f928 	bl	800f4ac <RegionGetPhyParam>
 800b25c:	9001      	str	r0, [sp, #4]
}
 800b25e:	b2c0      	uxtb	r0, r0
 800b260:	b005      	add	sp, #20
 800b262:	f85d fb04 	ldr.w	pc, [sp], #4
 800b266:	bf00      	nop
 800b268:	20008000 	.word	0x20008000

0800b26c <ValidatePayloadLength>:
{
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4605      	mov	r5, r0
 800b270:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b272:	4608      	mov	r0, r1
 800b274:	f7ff ffda 	bl	800b22c <GetMaxAppPayloadWithoutFOptsLength>
 800b278:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800b27a:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d303      	bcc.n	800b288 <ValidatePayloadLength+0x1c>
 800b280:	2aff      	cmp	r2, #255	; 0xff
 800b282:	d903      	bls.n	800b28c <ValidatePayloadLength+0x20>
    return false;
 800b284:	2000      	movs	r0, #0
 800b286:	e000      	b.n	800b28a <ValidatePayloadLength+0x1e>
 800b288:	2000      	movs	r0, #0
}
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800b28c:	2001      	movs	r0, #1
 800b28e:	e7fc      	b.n	800b28a <ValidatePayloadLength+0x1e>

0800b290 <ProcessRadioTxDone>:
{
 800b290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b292:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b294:	4b35      	ldr	r3, [pc, #212]	; (800b36c <ProcessRadioTxDone+0xdc>)
 800b296:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d002      	beq.n	800b2a4 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800b29e:	4b34      	ldr	r3, [pc, #208]	; (800b370 <ProcessRadioTxDone+0xe0>)
 800b2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a2:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800b2a4:	4c33      	ldr	r4, [pc, #204]	; (800b374 <ProcessRadioTxDone+0xe4>)
 800b2a6:	f504 7560 	add.w	r5, r4, #896	; 0x380
 800b2aa:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f009 fb50 	bl	8014954 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	f009 fb07 	bl	80148c8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800b2ba:	f504 7566 	add.w	r5, r4, #920	; 0x398
 800b2be:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f009 fb46 	bl	8014954 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f009 fafd 	bl	80148c8 <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 800b2ce:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d134      	bne.n	800b340 <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b2d6:	4b27      	ldr	r3, [pc, #156]	; (800b374 <ProcessRadioTxDone+0xe4>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800b2de:	4b26      	ldr	r3, [pc, #152]	; (800b378 <ProcessRadioTxDone+0xe8>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4c22      	ldr	r4, [pc, #136]	; (800b36c <ProcessRadioTxDone+0xdc>)
 800b2e4:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800b2e6:	4f23      	ldr	r7, [pc, #140]	; (800b374 <ProcessRadioTxDone+0xe4>)
 800b2e8:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 800b2ec:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800b2f0:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b2f2:	ae0c      	add	r6, sp, #48	; 0x30
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	f009 f9c1 	bl	801467c <SysTimeGetMcuTime>
 800b2fa:	ad02      	add	r5, sp, #8
 800b2fc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800b306:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b30a:	4628      	mov	r0, r5
 800b30c:	f009 f953 	bl	80145b6 <SysTimeSub>
 800b310:	ab07      	add	r3, sp, #28
 800b312:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b316:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800b31a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800b31e:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800b320:	2301      	movs	r3, #1
 800b322:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b326:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800b32a:	b90b      	cbnz	r3, 800b330 <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 800b32c:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800b330:	a904      	add	r1, sp, #16
 800b332:	4b0e      	ldr	r3, [pc, #56]	; (800b36c <ProcessRadioTxDone+0xdc>)
 800b334:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b338:	f004 f8d0 	bl	800f4dc <RegionSetBandTxDone>
}
 800b33c:	b00f      	add	sp, #60	; 0x3c
 800b33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800b340:	2315      	movs	r3, #21
 800b342:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b346:	a90a      	add	r1, sp, #40	; 0x28
 800b348:	4b08      	ldr	r3, [pc, #32]	; (800b36c <ProcessRadioTxDone+0xdc>)
 800b34a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b34e:	f004 f8ad 	bl	800f4ac <RegionGetPhyParam>
 800b352:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800b354:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800b358:	f204 4404 	addw	r4, r4, #1028	; 0x404
 800b35c:	4401      	add	r1, r0
 800b35e:	4620      	mov	r0, r4
 800b360:	f009 faf8 	bl	8014954 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800b364:	4620      	mov	r0, r4
 800b366:	f009 faaf 	bl	80148c8 <UTIL_TIMER_Start>
 800b36a:	e7b8      	b.n	800b2de <ProcessRadioTxDone+0x4e>
 800b36c:	20008000 	.word	0x20008000
 800b370:	08015d04 	.word	0x08015d04
 800b374:	200034e8 	.word	0x200034e8
 800b378:	20003aa8 	.word	0x20003aa8

0800b37c <OnRetransmitTimeoutTimerEvent>:
{
 800b37c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800b37e:	4c09      	ldr	r4, [pc, #36]	; (800b3a4 <OnRetransmitTimeoutTimerEvent+0x28>)
 800b380:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800b384:	f009 fa46 	bl	8014814 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800b388:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800b38c:	b113      	cbz	r3, 800b394 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800b38e:	2201      	movs	r2, #1
 800b390:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b394:	4b03      	ldr	r3, [pc, #12]	; (800b3a4 <OnRetransmitTimeoutTimerEvent+0x28>)
 800b396:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b39a:	b113      	cbz	r3, 800b3a2 <OnRetransmitTimeoutTimerEvent+0x26>
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	b103      	cbz	r3, 800b3a2 <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b3a0:	4798      	blx	r3
}
 800b3a2:	bd10      	pop	{r4, pc}
 800b3a4:	200034e8 	.word	0x200034e8

0800b3a8 <PrepareRxDoneAbort>:
{
 800b3a8:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800b3aa:	4b0e      	ldr	r3, [pc, #56]	; (800b3e4 <PrepareRxDoneAbort+0x3c>)
 800b3ac:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b3b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b3b4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800b3b8:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800b3bc:	b973      	cbnz	r3, 800b3dc <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800b3be:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <PrepareRxDoneAbort+0x3c>)
 800b3c0:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800b3c4:	f042 0202 	orr.w	r2, r2, #2
 800b3c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b3cc:	b2d2      	uxtb	r2, r2
 800b3ce:	f042 0220 	orr.w	r2, r2, #32
 800b3d2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800b3d6:	f7ff fdf1 	bl	800afbc <UpdateRxSlotIdleState>
}
 800b3da:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800b3dc:	2000      	movs	r0, #0
 800b3de:	f7ff ffcd 	bl	800b37c <OnRetransmitTimeoutTimerEvent>
 800b3e2:	e7ec      	b.n	800b3be <PrepareRxDoneAbort+0x16>
 800b3e4:	200034e8 	.word	0x200034e8

0800b3e8 <LoRaMacCheckForBeaconAcquisition>:
{
 800b3e8:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b3ea:	200b      	movs	r0, #11
 800b3ec:	f003 faf2 	bl	800e9d4 <LoRaMacConfirmQueueIsCmdActive>
 800b3f0:	b188      	cbz	r0, 800b416 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800b3f2:	4b0b      	ldr	r3, [pc, #44]	; (800b420 <LoRaMacCheckForBeaconAcquisition+0x38>)
 800b3f4:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b3f8:	f010 0f01 	tst.w	r0, #1
 800b3fc:	d10d      	bne.n	800b41a <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b3fe:	f010 0004 	ands.w	r0, r0, #4
 800b402:	d009      	beq.n	800b418 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b404:	461a      	mov	r2, r3
 800b406:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b40a:	f023 0302 	bic.w	r3, r3, #2
 800b40e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800b412:	2001      	movs	r0, #1
 800b414:	e000      	b.n	800b418 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800b416:	2000      	movs	r0, #0
}
 800b418:	bd08      	pop	{r3, pc}
    return 0x00;
 800b41a:	2000      	movs	r0, #0
 800b41c:	e7fc      	b.n	800b418 <LoRaMacCheckForBeaconAcquisition+0x30>
 800b41e:	bf00      	nop
 800b420:	200034e8 	.word	0x200034e8

0800b424 <GetFCntDown>:
{
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	9c04      	ldr	r4, [sp, #16]
 800b428:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800b42a:	b1f2      	cbz	r2, 800b46a <GetFCntDown+0x46>
 800b42c:	4694      	mov	ip, r2
 800b42e:	b1f4      	cbz	r4, 800b46e <GetFCntDown+0x4a>
 800b430:	b1fd      	cbz	r5, 800b472 <GetFCntDown+0x4e>
    switch( addrID )
 800b432:	b188      	cbz	r0, 800b458 <GetFCntDown+0x34>
 800b434:	2801      	cmp	r0, #1
 800b436:	d11e      	bne.n	800b476 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 800b438:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d002      	beq.n	800b446 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800b440:	2303      	movs	r3, #3
 800b442:	7023      	strb	r3, [r4, #0]
 800b444:	e00a      	b.n	800b45c <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800b446:	b121      	cbz	r1, 800b452 <GetFCntDown+0x2e>
 800b448:	2903      	cmp	r1, #3
 800b44a:	d002      	beq.n	800b452 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800b44c:	2301      	movs	r3, #1
 800b44e:	7023      	strb	r3, [r4, #0]
 800b450:	e004      	b.n	800b45c <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800b452:	2302      	movs	r3, #2
 800b454:	7023      	strb	r3, [r4, #0]
 800b456:	e001      	b.n	800b45c <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800b458:	2304      	movs	r3, #4
 800b45a:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800b45c:	462a      	mov	r2, r5
 800b45e:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800b462:	7820      	ldrb	r0, [r4, #0]
 800b464:	f003 fcd8 	bl	800ee18 <LoRaMacCryptoGetFCntDown>
}
 800b468:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b46a:	2009      	movs	r0, #9
 800b46c:	e7fc      	b.n	800b468 <GetFCntDown+0x44>
 800b46e:	2009      	movs	r0, #9
 800b470:	e7fa      	b.n	800b468 <GetFCntDown+0x44>
 800b472:	2009      	movs	r0, #9
 800b474:	e7f8      	b.n	800b468 <GetFCntDown+0x44>
    switch( addrID )
 800b476:	2005      	movs	r0, #5
 800b478:	e7f6      	b.n	800b468 <GetFCntDown+0x44>

0800b47a <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800b47a:	2801      	cmp	r0, #1
 800b47c:	d900      	bls.n	800b480 <RemoveMacCommands+0x6>
 800b47e:	4770      	bx	lr
{
 800b480:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800b482:	2a01      	cmp	r2, #1
 800b484:	d105      	bne.n	800b492 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800b486:	f011 0f20 	tst.w	r1, #32
 800b48a:	d004      	beq.n	800b496 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800b48c:	f003 f93e 	bl	800e70c <LoRaMacCommandsRemoveStickyAnsCmds>
 800b490:	e001      	b.n	800b496 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800b492:	f003 f93b 	bl	800e70c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800b496:	bd08      	pop	{r3, pc}

0800b498 <ProcessMacCommands>:
{
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	b08f      	sub	sp, #60	; 0x3c
 800b49e:	4698      	mov	r8, r3
    uint8_t status = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b4a6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800b4aa:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	f200 82d9 	bhi.w	800ba66 <ProcessMacCommands+0x5ce>
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800b4ba:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800b4be:	42bc      	cmp	r4, r7
 800b4c0:	f080 82d1 	bcs.w	800ba66 <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800b4c4:	5d28      	ldrb	r0, [r5, r4]
 800b4c6:	f003 f989 	bl	800e7dc <LoRaMacCommandsGetCmdSize>
 800b4ca:	4420      	add	r0, r4
 800b4cc:	42b8      	cmp	r0, r7
 800b4ce:	f300 82ca 	bgt.w	800ba66 <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 800b4d2:	1c66      	adds	r6, r4, #1
 800b4d4:	b2f6      	uxtb	r6, r6
 800b4d6:	5d2b      	ldrb	r3, [r5, r4]
 800b4d8:	3b02      	subs	r3, #2
 800b4da:	2b11      	cmp	r3, #17
 800b4dc:	f200 82c3 	bhi.w	800ba66 <ProcessMacCommands+0x5ce>
 800b4e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b4e4:	00280012 	.word	0x00280012
 800b4e8:	00c000ad 	.word	0x00c000ad
 800b4ec:	011e0106 	.word	0x011e0106
 800b4f0:	01740157 	.word	0x01740157
 800b4f4:	02c101bf 	.word	0x02c101bf
 800b4f8:	01ef02c1 	.word	0x01ef02c1
 800b4fc:	02c102c1 	.word	0x02c102c1
 800b500:	02680251 	.word	0x02680251
 800b504:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800b508:	2004      	movs	r0, #4
 800b50a:	f003 fa63 	bl	800e9d4 <LoRaMacConfirmQueueIsCmdActive>
 800b50e:	b908      	cbnz	r0, 800b514 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800b510:	4634      	mov	r4, r6
 800b512:	e7d4      	b.n	800b4be <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800b514:	2104      	movs	r1, #4
 800b516:	2000      	movs	r0, #0
 800b518:	f003 fa10 	bl	800e93c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800b51c:	1ca3      	adds	r3, r4, #2
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	5da9      	ldrb	r1, [r5, r6]
 800b522:	4aa7      	ldr	r2, [pc, #668]	; (800b7c0 <ProcessMacCommands+0x328>)
 800b524:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800b528:	3403      	adds	r4, #3
 800b52a:	b2e4      	uxtb	r4, r4
 800b52c:	5ceb      	ldrb	r3, [r5, r3]
 800b52e:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 800b532:	e7c4      	b.n	800b4be <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800b534:	2300      	movs	r3, #0
 800b536:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800b53a:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800b53e:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800b542:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800b546:	f1b9 0f00 	cmp.w	r9, #0
 800b54a:	d036      	beq.n	800b5ba <ProcessMacCommands+0x122>
                    macIndex += 4;
 800b54c:	3405      	adds	r4, #5
 800b54e:	b2e4      	uxtb	r4, r4
 800b550:	e7b5      	b.n	800b4be <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800b552:	2305      	movs	r3, #5
 800b554:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b558:	e050      	b.n	800b5fc <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800b55a:	4b9a      	ldr	r3, [pc, #616]	; (800b7c4 <ProcessMacCommands+0x32c>)
 800b55c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b560:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800b564:	4293      	cmp	r3, r2
 800b566:	da03      	bge.n	800b570 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800b568:	4b96      	ldr	r3, [pc, #600]	; (800b7c4 <ProcessMacCommands+0x32c>)
 800b56a:	2101      	movs	r1, #1
 800b56c:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800b570:	4b94      	ldr	r3, [pc, #592]	; (800b7c4 <ProcessMacCommands+0x32c>)
 800b572:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800b576:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800b57a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800b57e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800b582:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800b586:	e04d      	b.n	800b624 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800b588:	2201      	movs	r2, #1
 800b58a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800b58e:	2003      	movs	r0, #3
 800b590:	f003 f85c 	bl	800e64c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800b594:	3401      	adds	r4, #1
 800b596:	b2e4      	uxtb	r4, r4
 800b598:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b59c:	498a      	ldr	r1, [pc, #552]	; (800b7c8 <ProcessMacCommands+0x330>)
 800b59e:	fba1 2103 	umull	r2, r1, r1, r3
 800b5a2:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800b5a6:	d3ef      	bcc.n	800b588 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 800b5a8:	441e      	add	r6, r3
 800b5aa:	b2f6      	uxtb	r6, r6
 800b5ac:	1e74      	subs	r4, r6, #1
 800b5ae:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 800b5b0:	42a7      	cmp	r7, r4
 800b5b2:	d93a      	bls.n	800b62a <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800b5b4:	5d2b      	ldrb	r3, [r5, r4]
 800b5b6:	2b03      	cmp	r3, #3
 800b5b8:	d136      	bne.n	800b628 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800b5ba:	1e73      	subs	r3, r6, #1
 800b5bc:	442b      	add	r3, r5
 800b5be:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800b5c0:	4b80      	ldr	r3, [pc, #512]	; (800b7c4 <ProcessMacCommands+0x32c>)
 800b5c2:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800b5c6:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b5ca:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 800b5ce:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800b5d2:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800b5d6:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b5da:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800b5de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b5e2:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800b5e6:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800b5ea:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b5ee:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800b5f0:	2a00      	cmp	r2, #0
 800b5f2:	d0ae      	beq.n	800b552 <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800b5f4:	1bbb      	subs	r3, r7, r6
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800b5fc:	ab05      	add	r3, sp, #20
 800b5fe:	9301      	str	r3, [sp, #4]
 800b600:	ab03      	add	r3, sp, #12
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	f10d 030b 	add.w	r3, sp, #11
 800b608:	f10d 020a 	add.w	r2, sp, #10
 800b60c:	a907      	add	r1, sp, #28
 800b60e:	486d      	ldr	r0, [pc, #436]	; (800b7c4 <ProcessMacCommands+0x32c>)
 800b610:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800b614:	f003 ffe2 	bl	800f5dc <RegionLinkAdrReq>
 800b618:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800b61c:	f000 0007 	and.w	r0, r0, #7
 800b620:	2807      	cmp	r0, #7
 800b622:	d09a      	beq.n	800b55a <ProcessMacCommands+0xc2>
{
 800b624:	2400      	movs	r4, #0
 800b626:	e7b7      	b.n	800b598 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800b628:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800b62a:	42bc      	cmp	r4, r7
 800b62c:	d204      	bcs.n	800b638 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800b62e:	3c01      	subs	r4, #1
 800b630:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800b632:	f04f 0901 	mov.w	r9, #1
 800b636:	e742      	b.n	800b4be <ProcessMacCommands+0x26>
 800b638:	f04f 0901 	mov.w	r9, #1
                break;
 800b63c:	e73f      	b.n	800b4be <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800b63e:	3402      	adds	r4, #2
 800b640:	b2e4      	uxtb	r4, r4
 800b642:	5dab      	ldrb	r3, [r5, r6]
 800b644:	f003 030f 	and.w	r3, r3, #15
 800b648:	495e      	ldr	r1, [pc, #376]	; (800b7c4 <ProcessMacCommands+0x32c>)
 800b64a:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800b64e:	2201      	movs	r2, #1
 800b650:	fa02 f303 	lsl.w	r3, r2, r3
 800b654:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800b658:	2200      	movs	r2, #0
 800b65a:	a90b      	add	r1, sp, #44	; 0x2c
 800b65c:	2004      	movs	r0, #4
 800b65e:	f002 fff5 	bl	800e64c <LoRaMacCommandsAddCmd>
                break;
 800b662:	e72c      	b.n	800b4be <ProcessMacCommands+0x26>
                status = 0x07;
 800b664:	2307      	movs	r3, #7
 800b666:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800b66a:	5dab      	ldrb	r3, [r5, r6]
 800b66c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b670:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800b674:	57ab      	ldrsb	r3, [r5, r6]
 800b676:	f003 030f 	and.w	r3, r3, #15
 800b67a:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800b67e:	1ca3      	adds	r3, r4, #2
 800b680:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800b682:	1ce1      	adds	r1, r4, #3
 800b684:	b2c9      	uxtb	r1, r1
 800b686:	5ceb      	ldrb	r3, [r5, r3]
 800b688:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b68a:	1d22      	adds	r2, r4, #4
 800b68c:	b2d2      	uxtb	r2, r2
 800b68e:	5c69      	ldrb	r1, [r5, r1]
 800b690:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b694:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b696:	3405      	adds	r4, #5
 800b698:	b2e4      	uxtb	r4, r4
 800b69a:	5caa      	ldrb	r2, [r5, r2]
 800b69c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6a0:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800b6a2:	2264      	movs	r2, #100	; 0x64
 800b6a4:	fb02 f303 	mul.w	r3, r2, r3
 800b6a8:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800b6aa:	a907      	add	r1, sp, #28
 800b6ac:	4b45      	ldr	r3, [pc, #276]	; (800b7c4 <ProcessMacCommands+0x32c>)
 800b6ae:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b6b2:	f003 ffaf 	bl	800f614 <RegionRxParamSetupReq>
 800b6b6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800b6ba:	f000 0307 	and.w	r3, r0, #7
 800b6be:	2b07      	cmp	r3, #7
 800b6c0:	d007      	beq.n	800b6d2 <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800b6c2:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	a90b      	add	r1, sp, #44	; 0x2c
 800b6ca:	2005      	movs	r0, #5
 800b6cc:	f002 ffbe 	bl	800e64c <LoRaMacCommandsAddCmd>
                break;
 800b6d0:	e6f5      	b.n	800b4be <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800b6d2:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800b6d6:	4b3b      	ldr	r3, [pc, #236]	; (800b7c4 <ProcessMacCommands+0x32c>)
 800b6d8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800b6dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800b6e0:	9a08      	ldr	r2, [sp, #32]
 800b6e2:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800b6e4:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800b6e6:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800b6ea:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800b6ee:	e7e8      	b.n	800b6c2 <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800b6f0:	4b33      	ldr	r3, [pc, #204]	; (800b7c0 <ProcessMacCommands+0x328>)
 800b6f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b6f6:	b17b      	cbz	r3, 800b718 <ProcessMacCommands+0x280>
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	b17b      	cbz	r3, 800b71c <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800b6fc:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800b6fe:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800b702:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800b706:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800b70a:	2202      	movs	r2, #2
 800b70c:	a90b      	add	r1, sp, #44	; 0x2c
 800b70e:	2006      	movs	r0, #6
 800b710:	f002 ff9c 	bl	800e64c <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800b714:	4634      	mov	r4, r6
                break;
 800b716:	e6d2      	b.n	800b4be <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800b718:	20ff      	movs	r0, #255	; 0xff
 800b71a:	e7f0      	b.n	800b6fe <ProcessMacCommands+0x266>
 800b71c:	20ff      	movs	r0, #255	; 0xff
 800b71e:	e7ee      	b.n	800b6fe <ProcessMacCommands+0x266>
                status = 0x03;
 800b720:	2303      	movs	r3, #3
 800b722:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800b726:	1ca3      	adds	r3, r4, #2
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	57aa      	ldrsb	r2, [r5, r6]
 800b72c:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800b730:	aa07      	add	r2, sp, #28
 800b732:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800b734:	1ce2      	adds	r2, r4, #3
 800b736:	b2d2      	uxtb	r2, r2
 800b738:	5ceb      	ldrb	r3, [r5, r3]
 800b73a:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b73c:	1d21      	adds	r1, r4, #4
 800b73e:	b2c9      	uxtb	r1, r1
 800b740:	5caa      	ldrb	r2, [r5, r2]
 800b742:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b746:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b748:	1d62      	adds	r2, r4, #5
 800b74a:	b2d2      	uxtb	r2, r2
 800b74c:	5c69      	ldrb	r1, [r5, r1]
 800b74e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b752:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800b754:	2164      	movs	r1, #100	; 0x64
 800b756:	fb01 f303 	mul.w	r3, r1, r3
 800b75a:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800b760:	3406      	adds	r4, #6
 800b762:	b2e4      	uxtb	r4, r4
 800b764:	56ab      	ldrsb	r3, [r5, r2]
 800b766:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800b76a:	a905      	add	r1, sp, #20
 800b76c:	4b15      	ldr	r3, [pc, #84]	; (800b7c4 <ProcessMacCommands+0x32c>)
 800b76e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b772:	f003 ff5e 	bl	800f632 <RegionNewChannelReq>
 800b776:	b2c3      	uxtb	r3, r0
 800b778:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800b77c:	2800      	cmp	r0, #0
 800b77e:	f6ff ae9e 	blt.w	800b4be <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800b782:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800b786:	2201      	movs	r2, #1
 800b788:	a90b      	add	r1, sp, #44	; 0x2c
 800b78a:	2007      	movs	r0, #7
 800b78c:	f002 ff5e 	bl	800e64c <LoRaMacCommandsAddCmd>
                break;
 800b790:	e695      	b.n	800b4be <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800b792:	3402      	adds	r4, #2
 800b794:	b2e4      	uxtb	r4, r4
 800b796:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800b798:	f013 030f 	ands.w	r3, r3, #15
 800b79c:	d100      	bne.n	800b7a0 <ProcessMacCommands+0x308>
                    delay++;
 800b79e:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800b7a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7a4:	fb02 f303 	mul.w	r3, r2, r3
 800b7a8:	4a06      	ldr	r2, [pc, #24]	; (800b7c4 <ProcessMacCommands+0x32c>)
 800b7aa:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800b7ac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b7b0:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	a90b      	add	r1, sp, #44	; 0x2c
 800b7b6:	2008      	movs	r0, #8
 800b7b8:	f002 ff48 	bl	800e64c <LoRaMacCommandsAddCmd>
                break;
 800b7bc:	e67f      	b.n	800b4be <ProcessMacCommands+0x26>
 800b7be:	bf00      	nop
 800b7c0:	200034e8 	.word	0x200034e8
 800b7c4:	20008000 	.word	0x20008000
 800b7c8:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800b7cc:	3402      	adds	r4, #2
 800b7ce:	b2e4      	uxtb	r4, r4
 800b7d0:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800b7d8:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800b7dc:	f013 0f20 	tst.w	r3, #32
 800b7e0:	d002      	beq.n	800b7e8 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800b7e8:	f013 0f10 	tst.w	r3, #16
 800b7ec:	d002      	beq.n	800b7f4 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800b7f4:	f003 030f 	and.w	r3, r3, #15
 800b7f8:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800b7fc:	a903      	add	r1, sp, #12
 800b7fe:	4b9b      	ldr	r3, [pc, #620]	; (800ba6c <ProcessMacCommands+0x5d4>)
 800b800:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b804:	f003 ff24 	bl	800f650 <RegionTxParamSetupReq>
 800b808:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b80c:	f43f ae57 	beq.w	800b4be <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800b810:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800b814:	4e95      	ldr	r6, [pc, #596]	; (800ba6c <ProcessMacCommands+0x5d4>)
 800b816:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800b81a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800b81e:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800b822:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800b826:	4a92      	ldr	r2, [pc, #584]	; (800ba70 <ProcessMacCommands+0x5d8>)
 800b828:	5cd0      	ldrb	r0, [r2, r3]
 800b82a:	f7f4 ffd3 	bl	80007d4 <__aeabi_ui2f>
 800b82e:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800b830:	2302      	movs	r3, #2
 800b832:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b836:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b83a:	a907      	add	r1, sp, #28
 800b83c:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800b840:	f003 fe34 	bl	800f4ac <RegionGetPhyParam>
 800b844:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800b846:	b240      	sxtb	r0, r0
 800b848:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800b84c:	4298      	cmp	r0, r3
 800b84e:	bfb8      	it	lt
 800b850:	4618      	movlt	r0, r3
 800b852:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800b856:	2200      	movs	r2, #0
 800b858:	a90b      	add	r1, sp, #44	; 0x2c
 800b85a:	2009      	movs	r0, #9
 800b85c:	f002 fef6 	bl	800e64c <LoRaMacCommandsAddCmd>
                break;
 800b860:	e62d      	b.n	800b4be <ProcessMacCommands+0x26>
                status = 0x03;
 800b862:	2303      	movs	r3, #3
 800b864:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800b868:	1ca3      	adds	r3, r4, #2
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	5daa      	ldrb	r2, [r5, r6]
 800b86e:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800b872:	1ce1      	adds	r1, r4, #3
 800b874:	b2c9      	uxtb	r1, r1
 800b876:	5ceb      	ldrb	r3, [r5, r3]
 800b878:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b87a:	1d22      	adds	r2, r4, #4
 800b87c:	b2d2      	uxtb	r2, r2
 800b87e:	5c69      	ldrb	r1, [r5, r1]
 800b880:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b884:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b886:	3405      	adds	r4, #5
 800b888:	b2e4      	uxtb	r4, r4
 800b88a:	5caa      	ldrb	r2, [r5, r2]
 800b88c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b890:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800b892:	2264      	movs	r2, #100	; 0x64
 800b894:	fb02 f303 	mul.w	r3, r2, r3
 800b898:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800b89a:	a907      	add	r1, sp, #28
 800b89c:	4b73      	ldr	r3, [pc, #460]	; (800ba6c <ProcessMacCommands+0x5d4>)
 800b89e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b8a2:	f003 fee4 	bl	800f66e <RegionDlChannelReq>
 800b8a6:	b2c3      	uxtb	r3, r0
 800b8a8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	f6ff ae06 	blt.w	800b4be <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800b8b2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	a90b      	add	r1, sp, #44	; 0x2c
 800b8ba:	200a      	movs	r0, #10
 800b8bc:	f002 fec6 	bl	800e64c <LoRaMacCommandsAddCmd>
                break;
 800b8c0:	e5fd      	b.n	800b4be <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800b8c2:	2009      	movs	r0, #9
 800b8c4:	f003 f886 	bl	800e9d4 <LoRaMacConfirmQueueIsCmdActive>
 800b8c8:	b928      	cbnz	r0, 800b8d6 <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800b8ca:	4b6a      	ldr	r3, [pc, #424]	; (800ba74 <ProcessMacCommands+0x5dc>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 800b8d2:	4634      	mov	r4, r6
 800b8d4:	e5f3      	b.n	800b4be <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800b8d6:	2109      	movs	r1, #9
 800b8d8:	2000      	movs	r0, #0
 800b8da:	f003 f82f 	bl	800e93c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800b8de:	a803      	add	r0, sp, #12
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	9303      	str	r3, [sp, #12]
 800b8e4:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800b8e6:	f10d 0a14 	add.w	sl, sp, #20
 800b8ea:	9305      	str	r3, [sp, #20]
 800b8ec:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800b8ee:	f10d 0b1c 	add.w	fp, sp, #28
 800b8f2:	9307      	str	r3, [sp, #28]
 800b8f4:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800b8f6:	1ca1      	adds	r1, r4, #2
 800b8f8:	b2c9      	uxtb	r1, r1
 800b8fa:	5dab      	ldrb	r3, [r5, r6]
 800b8fc:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800b8fe:	1ce2      	adds	r2, r4, #3
 800b900:	b2d2      	uxtb	r2, r2
 800b902:	5c69      	ldrb	r1, [r5, r1]
 800b904:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b908:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800b90a:	1d21      	adds	r1, r4, #4
 800b90c:	b2c9      	uxtb	r1, r1
 800b90e:	5caa      	ldrb	r2, [r5, r2]
 800b910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b914:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800b916:	1d62      	adds	r2, r4, #5
 800b918:	b2d2      	uxtb	r2, r2
 800b91a:	5c69      	ldrb	r1, [r5, r1]
 800b91c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b920:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800b922:	3406      	adds	r4, #6
 800b924:	b2e4      	uxtb	r4, r4
 800b926:	5caa      	ldrb	r2, [r5, r2]
 800b928:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800b92c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b930:	fb01 f202 	mul.w	r2, r1, r2
 800b934:	0a12      	lsrs	r2, r2, #8
 800b936:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800b93a:	c803      	ldmia	r0, {r0, r1}
 800b93c:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800b940:	4a4d      	ldr	r2, [pc, #308]	; (800ba78 <ProcessMacCommands+0x5e0>)
 800b942:	441a      	add	r2, r3
 800b944:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800b946:	4658      	mov	r0, fp
 800b948:	f008 fe76 	bl	8014638 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800b94c:	4e49      	ldr	r6, [pc, #292]	; (800ba74 <ProcessMacCommands+0x5dc>)
 800b94e:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800b958:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800b95c:	a80c      	add	r0, sp, #48	; 0x30
 800b95e:	f008 fe2a 	bl	80145b6 <SysTimeSub>
 800b962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b968:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800b96c:	4650      	mov	r0, sl
 800b96e:	f008 fe03 	bl	8014578 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800b972:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b976:	f008 fe3d 	bl	80145f4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800b97a:	f002 fdcb 	bl	800e514 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800b97e:	2301      	movs	r3, #1
 800b980:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 800b984:	e59b      	b.n	800b4be <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800b986:	200c      	movs	r0, #12
 800b988:	f003 f824 	bl	800e9d4 <LoRaMacConfirmQueueIsCmdActive>
 800b98c:	b908      	cbnz	r0, 800b992 <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 800b98e:	4634      	mov	r4, r6
 800b990:	e595      	b.n	800b4be <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800b992:	210c      	movs	r1, #12
 800b994:	2000      	movs	r0, #0
 800b996:	f002 ffd1 	bl	800e93c <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800b99a:	4b36      	ldr	r3, [pc, #216]	; (800ba74 <ProcessMacCommands+0x5dc>)
 800b99c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b9a0:	3b04      	subs	r3, #4
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d801      	bhi.n	800b9ac <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 800b9a8:	4634      	mov	r4, r6
 800b9aa:	e588      	b.n	800b4be <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800b9ac:	f002 fdae 	bl	800e50c <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800b9b0:	4634      	mov	r4, r6
 800b9b2:	e584      	b.n	800b4be <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800b9b4:	1ca2      	adds	r2, r4, #2
 800b9b6:	b2d2      	uxtb	r2, r2
 800b9b8:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b9ba:	1ce1      	adds	r1, r4, #3
 800b9bc:	b2c9      	uxtb	r1, r1
 800b9be:	5caa      	ldrb	r2, [r5, r2]
 800b9c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b9c4:	1d22      	adds	r2, r4, #4
 800b9c6:	b2d2      	uxtb	r2, r2
 800b9c8:	5c69      	ldrb	r1, [r5, r1]
 800b9ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800b9ce:	3405      	adds	r4, #5
 800b9d0:	b2e4      	uxtb	r4, r4
 800b9d2:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800b9d4:	2164      	movs	r1, #100	; 0x64
 800b9d6:	fb03 f101 	mul.w	r1, r3, r1
 800b9da:	f000 000f 	and.w	r0, r0, #15
 800b9de:	f002 fd96 	bl	800e50e <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800b9e2:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	a90b      	add	r1, sp, #44	; 0x2c
 800b9ea:	2011      	movs	r0, #17
 800b9ec:	f002 fe2e 	bl	800e64c <LoRaMacCommandsAddCmd>
                break;
 800b9f0:	e565      	b.n	800b4be <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800b9f2:	200d      	movs	r0, #13
 800b9f4:	f002 ffee 	bl	800e9d4 <LoRaMacConfirmQueueIsCmdActive>
 800b9f8:	b908      	cbnz	r0, 800b9fe <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 800b9fa:	4634      	mov	r4, r6
 800b9fc:	e55f      	b.n	800b4be <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800b9fe:	210d      	movs	r1, #13
 800ba00:	2000      	movs	r0, #0
 800ba02:	f002 ff9b 	bl	800e93c <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800ba06:	1ca2      	adds	r2, r4, #2
 800ba08:	b2d2      	uxtb	r2, r2
 800ba0a:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800ba0c:	1ce3      	adds	r3, r4, #3
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800ba12:	3404      	adds	r4, #4
 800ba14:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800ba16:	4a19      	ldr	r2, [pc, #100]	; (800ba7c <ProcessMacCommands+0x5e4>)
 800ba18:	6812      	ldr	r2, [r2, #0]
 800ba1a:	5ce9      	ldrb	r1, [r5, r3]
 800ba1c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800ba20:	f002 fd77 	bl	800e512 <LoRaMacClassBBeaconTimingAns>
 800ba24:	e54b      	b.n	800b4be <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800ba26:	1ca1      	adds	r1, r4, #2
 800ba28:	b2c9      	uxtb	r1, r1
 800ba2a:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ba2c:	1ce2      	adds	r2, r4, #3
 800ba2e:	b2d2      	uxtb	r2, r2
 800ba30:	5c68      	ldrb	r0, [r5, r1]
 800ba32:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ba36:	3404      	adds	r4, #4
 800ba38:	b2e4      	uxtb	r4, r4
 800ba3a:	5ca8      	ldrb	r0, [r5, r2]
 800ba3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800ba40:	2064      	movs	r0, #100	; 0x64
 800ba42:	fb03 f000 	mul.w	r0, r3, r0
 800ba46:	f002 fd66 	bl	800e516 <LoRaMacClassBBeaconFreqReq>
 800ba4a:	b140      	cbz	r0, 800ba5e <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800ba52:	2201      	movs	r2, #1
 800ba54:	a90b      	add	r1, sp, #44	; 0x2c
 800ba56:	2013      	movs	r0, #19
 800ba58:	f002 fdf8 	bl	800e64c <LoRaMacCommandsAddCmd>
                break;
 800ba5c:	e52f      	b.n	800b4be <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800ba64:	e7f5      	b.n	800ba52 <ProcessMacCommands+0x5ba>
}
 800ba66:	b00f      	add	sp, #60	; 0x3c
 800ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6c:	20008000 	.word	0x20008000
 800ba70:	08015654 	.word	0x08015654
 800ba74:	200034e8 	.word	0x200034e8
 800ba78:	12d53d80 	.word	0x12d53d80
 800ba7c:	20003a98 	.word	0x20003a98

0800ba80 <ProcessRadioRxDone>:
{
 800ba80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba84:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 800ba86:	4b96      	ldr	r3, [pc, #600]	; (800bce0 <ProcessRadioRxDone+0x260>)
 800ba88:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800ba8a:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800ba8c:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800ba90:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800ba94:	2300      	movs	r3, #0
 800ba96:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800ba98:	4a92      	ldr	r2, [pc, #584]	; (800bce4 <ProcessRadioRxDone+0x264>)
 800ba9a:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800ba9e:	4a92      	ldr	r2, [pc, #584]	; (800bce8 <ProcessRadioRxDone+0x268>)
 800baa0:	7811      	ldrb	r1, [r2, #0]
 800baa2:	f363 0100 	bfi	r1, r3, #0, #1
 800baa6:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800baa8:	4c90      	ldr	r4, [pc, #576]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800baaa:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800baae:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800bab2:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800bab6:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 800baba:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800babe:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800bac2:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800bac6:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800baca:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800bace:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800bad2:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800bad6:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800bada:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800bade:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800bae2:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800bae6:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800baea:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 800baee:	4b80      	ldr	r3, [pc, #512]	; (800bcf0 <ProcessRadioRxDone+0x270>)
 800baf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf2:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800baf4:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800baf8:	b1c3      	cbz	r3, 800bb2c <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800bafa:	4629      	mov	r1, r5
 800bafc:	4630      	mov	r0, r6
 800bafe:	f002 fcf2 	bl	800e4e6 <LoRaMacClassBRxBeacon>
 800bb02:	b9c0      	cbnz	r0, 800bb36 <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bb04:	4b77      	ldr	r3, [pc, #476]	; (800bce4 <ProcessRadioRxDone+0x264>)
 800bb06:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d019      	beq.n	800bb42 <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 800bb0e:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800bb10:	0963      	lsrs	r3, r4, #5
 800bb12:	3b01      	subs	r3, #1
 800bb14:	2b06      	cmp	r3, #6
 800bb16:	f200 82d4 	bhi.w	800c0c2 <ProcessRadioRxDone+0x642>
 800bb1a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb1e:	002f      	.short	0x002f
 800bb20:	00b502d2 	.word	0x00b502d2
 800bb24:	00b102d2 	.word	0x00b102d2
 800bb28:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 800bb2c:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800bb30:	f008 fe70 	bl	8014814 <UTIL_TIMER_Stop>
 800bb34:	e7e1      	b.n	800bafa <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800bb36:	4b6d      	ldr	r3, [pc, #436]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800bb38:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800bb3c:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 800bb40:	e2bc      	b.n	800c0bc <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800bb42:	f002 fcd4 	bl	800e4ee <LoRaMacClassBIsPingExpected>
 800bb46:	b150      	cbz	r0, 800bb5e <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bb48:	2000      	movs	r0, #0
 800bb4a:	f002 fcc5 	bl	800e4d8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800bb4e:	2000      	movs	r0, #0
 800bb50:	f002 fcc7 	bl	800e4e2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bb54:	4b65      	ldr	r3, [pc, #404]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800bb56:	2204      	movs	r2, #4
 800bb58:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800bb5c:	e7d7      	b.n	800bb0e <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bb5e:	f002 fcc8 	bl	800e4f2 <LoRaMacClassBIsMulticastExpected>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d0d3      	beq.n	800bb0e <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bb66:	2000      	movs	r0, #0
 800bb68:	f002 fcb7 	bl	800e4da <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	f002 fcb9 	bl	800e4e4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800bb72:	4b5e      	ldr	r3, [pc, #376]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800bb74:	2205      	movs	r2, #5
 800bb76:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800bb7a:	e7c8      	b.n	800bb0e <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800bb7c:	2d10      	cmp	r5, #16
 800bb7e:	d962      	bls.n	800bc46 <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 800bb80:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 800bb82:	b2ed      	uxtb	r5, r5
 800bb84:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800bb88:	4b56      	ldr	r3, [pc, #344]	; (800bce4 <ProcessRadioRxDone+0x264>)
 800bb8a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d160      	bne.n	800bc54 <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800bb92:	f006 fced 	bl	8012570 <SecureElementGetJoinEui>
 800bb96:	4601      	mov	r1, r0
 800bb98:	aa04      	add	r2, sp, #16
 800bb9a:	20ff      	movs	r0, #255	; 0xff
 800bb9c:	f003 fa90 	bl	800f0c0 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d163      	bne.n	800bc6c <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800bba4:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800bba8:	4b4e      	ldr	r3, [pc, #312]	; (800bce4 <ProcessRadioRxDone+0x264>)
 800bbaa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800bbae:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800bbb2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800bbb6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800bbba:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800bbbe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bbc2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800bbc6:	9a07      	ldr	r2, [sp, #28]
 800bbc8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800bbcc:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800bbd0:	f3c2 1102 	ubfx	r1, r2, #4, #3
 800bbd4:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bbd8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800bbdc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800bbe0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800bbe4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 800bbe8:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800bbea:	b90a      	cbnz	r2, 800bbf0 <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800bbec:	2201      	movs	r2, #1
 800bbee:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800bbf0:	4c3c      	ldr	r4, [pc, #240]	; (800bce4 <ProcessRadioRxDone+0x264>)
 800bbf2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bbf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bbf8:	fb02 f303 	mul.w	r3, r2, r3
 800bbfc:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800bbfe:	4413      	add	r3, r2
 800bc00:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800bc08:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 800bc0c:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 800bc0e:	3d11      	subs	r5, #17
 800bc10:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 800bc14:	4b35      	ldr	r3, [pc, #212]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800bc16:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800bc1a:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800bc1e:	a91d      	add	r1, sp, #116	; 0x74
 800bc20:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800bc24:	f003 fc86 	bl	800f534 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800bc28:	2302      	movs	r3, #2
 800bc2a:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800bc2e:	2001      	movs	r0, #1
 800bc30:	f002 fed0 	bl	800e9d4 <LoRaMacConfirmQueueIsCmdActive>
 800bc34:	b9a8      	cbnz	r0, 800bc62 <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800bc36:	4a2d      	ldr	r2, [pc, #180]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800bc38:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800bc3c:	f043 0308 	orr.w	r3, r3, #8
 800bc40:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800bc44:	e227      	b.n	800c096 <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc46:	4b29      	ldr	r3, [pc, #164]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800bc4e:	f7ff fbab 	bl	800b3a8 <PrepareRxDoneAbort>
                return;
 800bc52:	e233      	b.n	800c0bc <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc54:	4b25      	ldr	r3, [pc, #148]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800bc5c:	f7ff fba4 	bl	800b3a8 <PrepareRxDoneAbort>
                return;
 800bc60:	e22c      	b.n	800c0bc <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800bc62:	2101      	movs	r1, #1
 800bc64:	2000      	movs	r0, #0
 800bc66:	f002 fe69 	bl	800e93c <LoRaMacConfirmQueueSetStatus>
 800bc6a:	e7e4      	b.n	800bc36 <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800bc6c:	2001      	movs	r0, #1
 800bc6e:	f002 feb1 	bl	800e9d4 <LoRaMacConfirmQueueIsCmdActive>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d0df      	beq.n	800bc36 <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800bc76:	2101      	movs	r1, #1
 800bc78:	2007      	movs	r0, #7
 800bc7a:	f002 fe5f 	bl	800e93c <LoRaMacConfirmQueueSetStatus>
 800bc7e:	e7da      	b.n	800bc36 <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800bc80:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bc88:	4b16      	ldr	r3, [pc, #88]	; (800bce4 <ProcessRadioRxDone+0x264>)
 800bc8a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800bc8e:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800bc92:	4a16      	ldr	r2, [pc, #88]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800bc94:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 800bc98:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800bc9c:	220d      	movs	r2, #13
 800bc9e:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800bca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bca6:	b113      	cbz	r3, 800bcae <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800bca8:	230e      	movs	r3, #14
 800bcaa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bcae:	a91b      	add	r1, sp, #108	; 0x6c
 800bcb0:	4b0c      	ldr	r3, [pc, #48]	; (800bce4 <ProcessRadioRxDone+0x264>)
 800bcb2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800bcb6:	f003 fbf9 	bl	800f4ac <RegionGetPhyParam>
 800bcba:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800bcbc:	f1a5 030d 	sub.w	r3, r5, #13
 800bcc0:	b21b      	sxth	r3, r3
 800bcc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bcc6:	b200      	sxth	r0, r0
 800bcc8:	4283      	cmp	r3, r0
 800bcca:	dc01      	bgt.n	800bcd0 <ProcessRadioRxDone+0x250>
 800bccc:	2d0b      	cmp	r5, #11
 800bcce:	d811      	bhi.n	800bcf4 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bcd0:	4b06      	ldr	r3, [pc, #24]	; (800bcec <ProcessRadioRxDone+0x26c>)
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800bcd8:	f7ff fb66 	bl	800b3a8 <PrepareRxDoneAbort>
                return;
 800bcdc:	e1ee      	b.n	800c0bc <ProcessRadioRxDone+0x63c>
 800bcde:	bf00      	nop
 800bce0:	20003a98 	.word	0x20003a98
 800bce4:	20008000 	.word	0x20008000
 800bce8:	200034e4 	.word	0x200034e4
 800bcec:	200034e8 	.word	0x200034e8
 800bcf0:	08015d04 	.word	0x08015d04
            macMsgData.Buffer = payload;
 800bcf4:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 800bcf6:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800bcfa:	4bba      	ldr	r3, [pc, #744]	; (800bfe4 <ProcessRadioRxDone+0x564>)
 800bcfc:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800bcfe:	23ff      	movs	r3, #255	; 0xff
 800bd00:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800bd04:	a80e      	add	r0, sp, #56	; 0x38
 800bd06:	f003 faa1 	bl	800f24c <LoRaMacParserData>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d142      	bne.n	800bd94 <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bd0e:	4bb6      	ldr	r3, [pc, #728]	; (800bfe8 <ProcessRadioRxDone+0x568>)
 800bd10:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d044      	beq.n	800bda2 <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800bd18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd1a:	4bb4      	ldr	r3, [pc, #720]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bd1c:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800bd20:	f10d 010a 	add.w	r1, sp, #10
 800bd24:	a80e      	add	r0, sp, #56	; 0x38
 800bd26:	f7ff f9d5 	bl	800b0d4 <DetermineFrameType>
 800bd2a:	4605      	mov	r5, r0
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d163      	bne.n	800bdf8 <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d065      	beq.n	800be06 <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800bd3a:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800bd3c:	2d01      	cmp	r5, #1
 800bd3e:	d10a      	bne.n	800bd56 <ProcessRadioRxDone+0x2d6>
 800bd40:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	f040 808a 	bne.w	800be5e <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800bd4a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800bd4e:	f013 0f60 	tst.w	r3, #96	; 0x60
 800bd52:	f040 8084 	bne.w	800be5e <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800bd56:	ab03      	add	r3, sp, #12
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	f10d 030b 	add.w	r3, sp, #11
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	4ba1      	ldr	r3, [pc, #644]	; (800bfe8 <ProcessRadioRxDone+0x568>)
 800bd62:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800bd66:	aa0e      	add	r2, sp, #56	; 0x38
 800bd68:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f7ff fb59 	bl	800b424 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d07f      	beq.n	800be76 <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800bd76:	2807      	cmp	r0, #7
 800bd78:	d078      	beq.n	800be6c <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bd7a:	4b9c      	ldr	r3, [pc, #624]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800bd82:	9a03      	ldr	r2, [sp, #12]
 800bd84:	4b99      	ldr	r3, [pc, #612]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bd86:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800bd8a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800bd8e:	f7ff fb0b 	bl	800b3a8 <PrepareRxDoneAbort>
                return;
 800bd92:	e193      	b.n	800c0bc <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bd94:	4b95      	ldr	r3, [pc, #596]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800bd9c:	f7ff fb04 	bl	800b3a8 <PrepareRxDoneAbort>
                return;
 800bda0:	e18c      	b.n	800c0bc <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800bda2:	f002 fba4 	bl	800e4ee <LoRaMacClassBIsPingExpected>
 800bda6:	b188      	cbz	r0, 800bdcc <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bda8:	2000      	movs	r0, #0
 800bdaa:	f002 fb95 	bl	800e4d8 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800bdae:	2000      	movs	r0, #0
 800bdb0:	f002 fb97 	bl	800e4e2 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bdb4:	4b8d      	ldr	r3, [pc, #564]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bdb6:	2204      	movs	r2, #4
 800bdb8:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800bdbc:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800bdc0:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800bdc4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bdc6:	f002 fbab 	bl	800e520 <LoRaMacClassBSetFPendingBit>
 800bdca:	e7a5      	b.n	800bd18 <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bdcc:	f002 fb91 	bl	800e4f2 <LoRaMacClassBIsMulticastExpected>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d0a1      	beq.n	800bd18 <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	f002 fb80 	bl	800e4da <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800bdda:	2000      	movs	r0, #0
 800bddc:	f002 fb82 	bl	800e4e4 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800bde0:	4b82      	ldr	r3, [pc, #520]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bde2:	2205      	movs	r2, #5
 800bde4:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800bde8:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800bdec:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800bdf0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bdf2:	f002 fb95 	bl	800e520 <LoRaMacClassBSetFPendingBit>
 800bdf6:	e78f      	b.n	800bd18 <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdf8:	4b7c      	ldr	r3, [pc, #496]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800be00:	f7ff fad2 	bl	800b3a8 <PrepareRxDoneAbort>
                return;
 800be04:	e15a      	b.n	800c0bc <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800be06:	4618      	mov	r0, r3
 800be08:	4a77      	ldr	r2, [pc, #476]	; (800bfe8 <ProcessRadioRxDone+0x568>)
 800be0a:	212c      	movs	r1, #44	; 0x2c
 800be0c:	fb01 2203 	mla	r2, r1, r3, r2
 800be10:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800be14:	9910      	ldr	r1, [sp, #64]	; 0x40
 800be16:	428a      	cmp	r2, r1
 800be18:	d002      	beq.n	800be20 <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800be1a:	3301      	adds	r3, #1
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	e78a      	b.n	800bd36 <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800be20:	4971      	ldr	r1, [pc, #452]	; (800bfe8 <ProcessRadioRxDone+0x568>)
 800be22:	262c      	movs	r6, #44	; 0x2c
 800be24:	fb06 1103 	mla	r1, r6, r3, r1
 800be28:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800be2c:	2900      	cmp	r1, #0
 800be2e:	d0f4      	beq.n	800be1a <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800be30:	4b6d      	ldr	r3, [pc, #436]	; (800bfe8 <ProcessRadioRxDone+0x568>)
 800be32:	fb06 3000 	mla	r0, r6, r0, r3
 800be36:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800be3a:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 800be3e:	6809      	ldr	r1, [r1, #0]
 800be40:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800be42:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800be46:	2b02      	cmp	r3, #2
 800be48:	d002      	beq.n	800be50 <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800be4a:	4690      	mov	r8, r2
                    multicast = 1;
 800be4c:	2501      	movs	r5, #1
 800be4e:	e775      	b.n	800bd3c <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800be50:	4b66      	ldr	r3, [pc, #408]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800be52:	2103      	movs	r1, #3
 800be54:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800be58:	4690      	mov	r8, r2
                    multicast = 1;
 800be5a:	2501      	movs	r5, #1
 800be5c:	e76e      	b.n	800bd3c <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800be5e:	4b63      	ldr	r3, [pc, #396]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800be60:	2201      	movs	r2, #1
 800be62:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800be66:	f7ff fa9f 	bl	800b3a8 <PrepareRxDoneAbort>
                return;
 800be6a:	e127      	b.n	800c0bc <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800be6c:	4b5f      	ldr	r3, [pc, #380]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800be6e:	2208      	movs	r2, #8
 800be70:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800be74:	e785      	b.n	800bd82 <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800be76:	ab0e      	add	r3, sp, #56	; 0x38
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	9b03      	ldr	r3, [sp, #12]
 800be7c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800be80:	4641      	mov	r1, r8
 800be82:	4630      	mov	r0, r6
 800be84:	f003 f870 	bl	800ef68 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800be88:	2800      	cmp	r0, #0
 800be8a:	d13d      	bne.n	800bf08 <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800be8c:	4b57      	ldr	r3, [pc, #348]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800be8e:	2100      	movs	r1, #0
 800be90:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800be94:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800be98:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800be9c:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800bea0:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800bea4:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800bea8:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800beac:	9803      	ldr	r0, [sp, #12]
 800beae:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800beb2:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800beb6:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800beba:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bebe:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800bec2:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800bec6:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 800beca:	2801      	cmp	r0, #1
 800becc:	d92a      	bls.n	800bf24 <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 800bece:	2d01      	cmp	r5, #1
 800bed0:	d02e      	beq.n	800bf30 <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800bed2:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800bed6:	2ca0      	cmp	r4, #160	; 0xa0
 800bed8:	d02f      	beq.n	800bf3a <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800beda:	2300      	movs	r3, #0
 800bedc:	4a42      	ldr	r2, [pc, #264]	; (800bfe8 <ProcessRadioRxDone+0x568>)
 800bede:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800bee2:	4a42      	ldr	r2, [pc, #264]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bee4:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800bee8:	4b40      	ldr	r3, [pc, #256]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800beea:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 800beee:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800bef2:	f7ff fac2 	bl	800b47a <RemoveMacCommands>
            switch( fType )
 800bef6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800befa:	2b03      	cmp	r3, #3
 800befc:	f200 809a 	bhi.w	800c034 <ProcessRadioRxDone+0x5b4>
 800bf00:	e8df f003 	tbb	[pc, r3]
 800bf04:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800bf08:	2802      	cmp	r0, #2
 800bf0a:	d006      	beq.n	800bf1a <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800bf0c:	4b37      	ldr	r3, [pc, #220]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bf0e:	220b      	movs	r2, #11
 800bf10:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800bf14:	f7ff fa48 	bl	800b3a8 <PrepareRxDoneAbort>
                return;
 800bf18:	e0d0      	b.n	800c0bc <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800bf1a:	4b34      	ldr	r3, [pc, #208]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bf1c:	220a      	movs	r2, #10
 800bf1e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800bf22:	e7f7      	b.n	800bf14 <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800bf24:	4b30      	ldr	r3, [pc, #192]	; (800bfe8 <ProcessRadioRxDone+0x568>)
 800bf26:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 800bf2e:	e7ce      	b.n	800bece <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800bf30:	4b2e      	ldr	r3, [pc, #184]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bf32:	2202      	movs	r2, #2
 800bf34:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800bf38:	e7d6      	b.n	800bee8 <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800bf3a:	4b2b      	ldr	r3, [pc, #172]	; (800bfe8 <ProcessRadioRxDone+0x568>)
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800bf42:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800bf46:	b913      	cbnz	r3, 800bf4e <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800bf48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bf4a:	4b27      	ldr	r3, [pc, #156]	; (800bfe8 <ProcessRadioRxDone+0x568>)
 800bf4c:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800bf4e:	4b27      	ldr	r3, [pc, #156]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800bf56:	4290      	cmp	r0, r2
 800bf58:	d9c6      	bls.n	800bee8 <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800bf5a:	4b23      	ldr	r3, [pc, #140]	; (800bfe8 <ProcessRadioRxDone+0x568>)
 800bf5c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800bf60:	4b22      	ldr	r3, [pc, #136]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bf62:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800bf66:	4a22      	ldr	r2, [pc, #136]	; (800bff0 <ProcessRadioRxDone+0x570>)
 800bf68:	6812      	ldr	r2, [r2, #0]
 800bf6a:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 800bf6e:	e7bb      	b.n	800bee8 <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800bf70:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800bf74:	4c1d      	ldr	r4, [pc, #116]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bf76:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	463b      	mov	r3, r7
 800bf7e:	f002 020f 	and.w	r2, r2, #15
 800bf82:	2100      	movs	r1, #0
 800bf84:	a812      	add	r0, sp, #72	; 0x48
 800bf86:	f7ff fa87 	bl	800b498 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800bf8a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800bf8e:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800bf92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf94:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800bf98:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800bf9c:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800bfa6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800bfaa:	2be0      	cmp	r3, #224	; 0xe0
 800bfac:	d049      	beq.n	800c042 <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800bfae:	4a0f      	ldr	r2, [pc, #60]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bfb0:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800bfb4:	f043 0302 	orr.w	r3, r3, #2
 800bfb8:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800bfbc:	e06b      	b.n	800c096 <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800bfbe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800bfc2:	4c0a      	ldr	r4, [pc, #40]	; (800bfec <ProcessRadioRxDone+0x56c>)
 800bfc4:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	463b      	mov	r3, r7
 800bfcc:	f002 020f 	and.w	r2, r2, #15
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	a812      	add	r0, sp, #72	; 0x48
 800bfd4:	f7ff fa60 	bl	800b498 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800bfd8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800bfdc:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800bfe0:	e7e1      	b.n	800bfa6 <ProcessRadioRxDone+0x526>
 800bfe2:	bf00      	nop
 800bfe4:	20003720 	.word	0x20003720
 800bfe8:	20008000 	.word	0x20008000
 800bfec:	200034e8 	.word	0x200034e8
 800bff0:	20003a98 	.word	0x20003a98
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800bff4:	4c3d      	ldr	r4, [pc, #244]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800bff6:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	463b      	mov	r3, r7
 800bffe:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800c002:	2100      	movs	r1, #0
 800c004:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c006:	f7ff fa47 	bl	800b498 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c00a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800c00e:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800c012:	e7c8      	b.n	800bfa6 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c014:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800c018:	4b34      	ldr	r3, [pc, #208]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800c01a:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c01e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c020:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c024:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800c028:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800c032:	e7b8      	b.n	800bfa6 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c034:	4b2d      	ldr	r3, [pc, #180]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800c036:	2201      	movs	r2, #1
 800c038:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800c03c:	f7ff f9b4 	bl	800b3a8 <PrepareRxDoneAbort>
                    break;
 800c040:	e7b1      	b.n	800bfa6 <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800c042:	4a2b      	ldr	r2, [pc, #172]	; (800c0f0 <ProcessRadioRxDone+0x670>)
 800c044:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 800c048:	2a00      	cmp	r2, #0
 800c04a:	d1b0      	bne.n	800bfae <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c04c:	4a27      	ldr	r2, [pc, #156]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800c04e:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800c058:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800c05c:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 800c060:	e7a5      	b.n	800bfae <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800c062:	1e6a      	subs	r2, r5, #1
 800c064:	4c21      	ldr	r4, [pc, #132]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800c066:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800c06a:	b292      	uxth	r2, r2
 800c06c:	1c71      	adds	r1, r6, #1
 800c06e:	4638      	mov	r0, r7
 800c070:	f006 faaf 	bl	80125d2 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800c074:	2303      	movs	r3, #3
 800c076:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800c080:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800c084:	3d01      	subs	r5, #1
 800c086:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c08a:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800c08e:	f043 0302 	orr.w	r3, r3, #2
 800c092:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c096:	4b15      	ldr	r3, [pc, #84]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800c098:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d917      	bls.n	800c0d0 <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800c0a0:	4b12      	ldr	r3, [pc, #72]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800c0a2:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d006      	beq.n	800c0b8 <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800c0aa:	4a10      	ldr	r2, [pc, #64]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800c0ac:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800c0b0:	f043 0320 	orr.w	r3, r3, #32
 800c0b4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800c0b8:	f7fe ff80 	bl	800afbc <UpdateRxSlotIdleState>
}
 800c0bc:	b021      	add	sp, #132	; 0x84
 800c0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c0c2:	4b0a      	ldr	r3, [pc, #40]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800c0ca:	f7ff f96d 	bl	800b3a8 <PrepareRxDoneAbort>
            break;
 800c0ce:	e7e2      	b.n	800c096 <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 800c0d0:	4b06      	ldr	r3, [pc, #24]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800c0d2:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d0e2      	beq.n	800c0a0 <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800c0da:	4b04      	ldr	r3, [pc, #16]	; (800c0ec <ProcessRadioRxDone+0x66c>)
 800c0dc:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d0dd      	beq.n	800c0a0 <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	f7ff f949 	bl	800b37c <OnRetransmitTimeoutTimerEvent>
 800c0ea:	e7d9      	b.n	800c0a0 <ProcessRadioRxDone+0x620>
 800c0ec:	200034e8 	.word	0x200034e8
 800c0f0:	20008000 	.word	0x20008000

0800c0f4 <ProcessRadioTxTimeout>:
{
 800c0f4:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c0f6:	4b0f      	ldr	r3, [pc, #60]	; (800c134 <ProcessRadioTxTimeout+0x40>)
 800c0f8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	d002      	beq.n	800c106 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800c100:	4b0d      	ldr	r3, [pc, #52]	; (800c138 <ProcessRadioTxTimeout+0x44>)
 800c102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c104:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800c106:	f7fe ff59 	bl	800afbc <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800c10a:	4c0c      	ldr	r4, [pc, #48]	; (800c13c <ProcessRadioTxTimeout+0x48>)
 800c10c:	2002      	movs	r0, #2
 800c10e:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800c112:	f002 fc41 	bl	800e998 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800c116:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800c11a:	b113      	cbz	r3, 800c122 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800c11c:	2201      	movs	r2, #1
 800c11e:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c122:	4a06      	ldr	r2, [pc, #24]	; (800c13c <ProcessRadioTxTimeout+0x48>)
 800c124:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800c128:	f043 0320 	orr.w	r3, r3, #32
 800c12c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800c130:	bd10      	pop	{r4, pc}
 800c132:	bf00      	nop
 800c134:	20008000 	.word	0x20008000
 800c138:	08015d04 	.word	0x08015d04
 800c13c:	200034e8 	.word	0x200034e8

0800c140 <CheckForClassBCollision>:
{
 800c140:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c142:	f002 f9d2 	bl	800e4ea <LoRaMacClassBIsBeaconExpected>
 800c146:	b978      	cbnz	r0, 800c168 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c148:	4b09      	ldr	r3, [pc, #36]	; (800c170 <CheckForClassBCollision+0x30>)
 800c14a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d001      	beq.n	800c156 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800c152:	2000      	movs	r0, #0
}
 800c154:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c156:	f002 f9ca 	bl	800e4ee <LoRaMacClassBIsPingExpected>
 800c15a:	b938      	cbnz	r0, 800c16c <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c15c:	f002 f9c9 	bl	800e4f2 <LoRaMacClassBIsMulticastExpected>
 800c160:	2800      	cmp	r0, #0
 800c162:	d0f7      	beq.n	800c154 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800c164:	200f      	movs	r0, #15
 800c166:	e7f5      	b.n	800c154 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800c168:	200e      	movs	r0, #14
 800c16a:	e7f3      	b.n	800c154 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800c16c:	200f      	movs	r0, #15
 800c16e:	e7f1      	b.n	800c154 <CheckForClassBCollision+0x14>
 800c170:	20008000 	.word	0x20008000

0800c174 <HandleRadioRxErrorTimeout>:
{
 800c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c176:	4605      	mov	r5, r0
 800c178:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c17a:	4b34      	ldr	r3, [pc, #208]	; (800c24c <HandleRadioRxErrorTimeout+0xd8>)
 800c17c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c180:	2b02      	cmp	r3, #2
 800c182:	d002      	beq.n	800c18a <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800c184:	4b32      	ldr	r3, [pc, #200]	; (800c250 <HandleRadioRxErrorTimeout+0xdc>)
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c18a:	f002 f9ae 	bl	800e4ea <LoRaMacClassBIsBeaconExpected>
 800c18e:	4606      	mov	r6, r0
 800c190:	bb50      	cbnz	r0, 800c1e8 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c192:	4b2e      	ldr	r3, [pc, #184]	; (800c24c <HandleRadioRxErrorTimeout+0xd8>)
 800c194:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d02c      	beq.n	800c1f6 <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800c19c:	2e00      	cmp	r6, #0
 800c19e:	d152      	bne.n	800c246 <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800c1a0:	4b2c      	ldr	r3, [pc, #176]	; (800c254 <HandleRadioRxErrorTimeout+0xe0>)
 800c1a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d13c      	bne.n	800c224 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800c1aa:	4b2a      	ldr	r3, [pc, #168]	; (800c254 <HandleRadioRxErrorTimeout+0xe0>)
 800c1ac:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800c1b0:	b113      	cbz	r3, 800c1b8 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800c1b2:	4b28      	ldr	r3, [pc, #160]	; (800c254 <HandleRadioRxErrorTimeout+0xe0>)
 800c1b4:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f002 fbed 	bl	800e998 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800c1be:	4b23      	ldr	r3, [pc, #140]	; (800c24c <HandleRadioRxErrorTimeout+0xd8>)
 800c1c0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c1c2:	f008 faf1 	bl	80147a8 <UTIL_TIMER_GetElapsedTime>
 800c1c6:	4b23      	ldr	r3, [pc, #140]	; (800c254 <HandleRadioRxErrorTimeout+0xe0>)
 800c1c8:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800c1cc:	4298      	cmp	r0, r3
 800c1ce:	d33a      	bcc.n	800c246 <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800c1d0:	4c20      	ldr	r4, [pc, #128]	; (800c254 <HandleRadioRxErrorTimeout+0xe0>)
 800c1d2:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800c1d6:	f008 fb1d 	bl	8014814 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c1da:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800c1de:	f043 0320 	orr.w	r3, r3, #32
 800c1e2:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 800c1e6:	e02e      	b.n	800c246 <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800c1e8:	2002      	movs	r0, #2
 800c1ea:	f002 f974 	bl	800e4d6 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	f002 f976 	bl	800e4e0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800c1f4:	e7cd      	b.n	800c192 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c1f6:	f002 f97a 	bl	800e4ee <LoRaMacClassBIsPingExpected>
 800c1fa:	4607      	mov	r7, r0
 800c1fc:	b950      	cbnz	r0, 800c214 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c1fe:	f002 f978 	bl	800e4f2 <LoRaMacClassBIsMulticastExpected>
 800c202:	2800      	cmp	r0, #0
 800c204:	d0ca      	beq.n	800c19c <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c206:	2000      	movs	r0, #0
 800c208:	f002 f967 	bl	800e4da <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c20c:	2000      	movs	r0, #0
 800c20e:	f002 f969 	bl	800e4e4 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800c212:	e018      	b.n	800c246 <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c214:	2000      	movs	r0, #0
 800c216:	f002 f95f 	bl	800e4d8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c21a:	2000      	movs	r0, #0
 800c21c:	f002 f961 	bl	800e4e2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800c220:	463e      	mov	r6, r7
 800c222:	e7ec      	b.n	800c1fe <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800c224:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <HandleRadioRxErrorTimeout+0xe0>)
 800c226:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800c22a:	b113      	cbz	r3, 800c232 <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800c22c:	4b09      	ldr	r3, [pc, #36]	; (800c254 <HandleRadioRxErrorTimeout+0xe0>)
 800c22e:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800c232:	4620      	mov	r0, r4
 800c234:	f002 fbb0 	bl	800e998 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800c238:	4a06      	ldr	r2, [pc, #24]	; (800c254 <HandleRadioRxErrorTimeout+0xe0>)
 800c23a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800c23e:	f043 0320 	orr.w	r3, r3, #32
 800c242:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800c246:	f7fe feb9 	bl	800afbc <UpdateRxSlotIdleState>
}
 800c24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c24c:	20008000 	.word	0x20008000
 800c250:	08015d04 	.word	0x08015d04
 800c254:	200034e8 	.word	0x200034e8

0800c258 <ProcessRadioRxError>:
{
 800c258:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800c25a:	2106      	movs	r1, #6
 800c25c:	2005      	movs	r0, #5
 800c25e:	f7ff ff89 	bl	800c174 <HandleRadioRxErrorTimeout>
}
 800c262:	bd08      	pop	{r3, pc}

0800c264 <ProcessRadioRxTimeout>:
{
 800c264:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800c266:	2104      	movs	r1, #4
 800c268:	2003      	movs	r0, #3
 800c26a:	f7ff ff83 	bl	800c174 <HandleRadioRxErrorTimeout>
}
 800c26e:	bd08      	pop	{r3, pc}

0800c270 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c270:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c274:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800c276:	4a14      	ldr	r2, [pc, #80]	; (800c2c8 <LoRaMacHandleIrqEvents+0x58>)
 800c278:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800c27a:	2000      	movs	r0, #0
 800c27c:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c27e:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800c282:	b303      	cbz	r3, 800c2c6 <LoRaMacHandleIrqEvents+0x56>
{
 800c284:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800c286:	b2dc      	uxtb	r4, r3
 800c288:	f013 0f20 	tst.w	r3, #32
 800c28c:	d10c      	bne.n	800c2a8 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800c28e:	f014 0f10 	tst.w	r4, #16
 800c292:	d10c      	bne.n	800c2ae <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800c294:	f014 0f08 	tst.w	r4, #8
 800c298:	d10c      	bne.n	800c2b4 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800c29a:	f014 0f04 	tst.w	r4, #4
 800c29e:	d10c      	bne.n	800c2ba <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800c2a0:	f014 0f02 	tst.w	r4, #2
 800c2a4:	d10c      	bne.n	800c2c0 <LoRaMacHandleIrqEvents+0x50>
}
 800c2a6:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800c2a8:	f7fe fff2 	bl	800b290 <ProcessRadioTxDone>
 800c2ac:	e7ef      	b.n	800c28e <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800c2ae:	f7ff fbe7 	bl	800ba80 <ProcessRadioRxDone>
 800c2b2:	e7ef      	b.n	800c294 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800c2b4:	f7ff ff1e 	bl	800c0f4 <ProcessRadioTxTimeout>
 800c2b8:	e7ef      	b.n	800c29a <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800c2ba:	f7ff ffcd 	bl	800c258 <ProcessRadioRxError>
 800c2be:	e7ef      	b.n	800c2a0 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800c2c0:	f7ff ffd0 	bl	800c264 <ProcessRadioRxTimeout>
}
 800c2c4:	e7ef      	b.n	800c2a6 <LoRaMacHandleIrqEvents+0x36>
 800c2c6:	4770      	bx	lr
 800c2c8:	200034e4 	.word	0x200034e4

0800c2cc <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800c2cc:	b909      	cbnz	r1, 800c2d2 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800c2ce:	2000      	movs	r0, #0
}
 800c2d0:	4770      	bx	lr
{
 800c2d2:	b510      	push	{r4, lr}
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800c2d8:	f008 fa66 	bl	80147a8 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800c2dc:	42a0      	cmp	r0, r4
 800c2de:	d801      	bhi.n	800c2e4 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800c2e0:	2000      	movs	r0, #0
}
 800c2e2:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800c2e4:	4b02      	ldr	r3, [pc, #8]	; (800c2f0 <LoRaMacHandleResponseTimeout+0x24>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	e7f8      	b.n	800c2e2 <LoRaMacHandleResponseTimeout+0x16>
 800c2f0:	20008000 	.word	0x20008000

0800c2f4 <LoRaMacHandleMlmeRequest>:
{
 800c2f4:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c2f6:	4b14      	ldr	r3, [pc, #80]	; (800c348 <LoRaMacHandleMlmeRequest+0x54>)
 800c2f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c2fc:	f013 0f04 	tst.w	r3, #4
 800c300:	d100      	bne.n	800c304 <LoRaMacHandleMlmeRequest+0x10>
}
 800c302:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800c304:	2001      	movs	r0, #1
 800c306:	f002 fb65 	bl	800e9d4 <LoRaMacConfirmQueueIsCmdActive>
 800c30a:	b178      	cbz	r0, 800c32c <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800c30c:	2001      	movs	r0, #1
 800c30e:	f002 fb2b 	bl	800e968 <LoRaMacConfirmQueueGetStatus>
 800c312:	b918      	cbnz	r0, 800c31c <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800c314:	4b0c      	ldr	r3, [pc, #48]	; (800c348 <LoRaMacHandleMlmeRequest+0x54>)
 800c316:	2200      	movs	r2, #0
 800c318:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c31c:	4a0a      	ldr	r2, [pc, #40]	; (800c348 <LoRaMacHandleMlmeRequest+0x54>)
 800c31e:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c322:	f023 0302 	bic.w	r3, r3, #2
 800c326:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800c32a:	e7ea      	b.n	800c302 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800c32c:	2005      	movs	r0, #5
 800c32e:	f002 fb51 	bl	800e9d4 <LoRaMacConfirmQueueIsCmdActive>
 800c332:	2800      	cmp	r0, #0
 800c334:	d0e5      	beq.n	800c302 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c336:	4a04      	ldr	r2, [pc, #16]	; (800c348 <LoRaMacHandleMlmeRequest+0x54>)
 800c338:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c33c:	f023 0302 	bic.w	r3, r3, #2
 800c340:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800c344:	e7dd      	b.n	800c302 <LoRaMacHandleMlmeRequest+0xe>
 800c346:	bf00      	nop
 800c348:	200034e8 	.word	0x200034e8

0800c34c <SerializeTxFrame>:
{
 800c34c:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800c34e:	4b0f      	ldr	r3, [pc, #60]	; (800c38c <SerializeTxFrame+0x40>)
 800c350:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c354:	b11b      	cbz	r3, 800c35e <SerializeTxFrame+0x12>
 800c356:	2b04      	cmp	r3, #4
 800c358:	d00a      	beq.n	800c370 <SerializeTxFrame+0x24>
 800c35a:	2003      	movs	r0, #3
}
 800c35c:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800c35e:	480c      	ldr	r0, [pc, #48]	; (800c390 <SerializeTxFrame+0x44>)
 800c360:	f002 ffd3 	bl	800f30a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800c364:	b968      	cbnz	r0, 800c382 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800c366:	4b09      	ldr	r3, [pc, #36]	; (800c38c <SerializeTxFrame+0x40>)
 800c368:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c36c:	801a      	strh	r2, [r3, #0]
            break;
 800c36e:	e7f5      	b.n	800c35c <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800c370:	4807      	ldr	r0, [pc, #28]	; (800c390 <SerializeTxFrame+0x44>)
 800c372:	f003 f800 	bl	800f376 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800c376:	b930      	cbnz	r0, 800c386 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800c378:	4b04      	ldr	r3, [pc, #16]	; (800c38c <SerializeTxFrame+0x40>)
 800c37a:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c37e:	801a      	strh	r2, [r3, #0]
            break;
 800c380:	e7ec      	b.n	800c35c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c382:	2011      	movs	r0, #17
 800c384:	e7ea      	b.n	800c35c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c386:	2011      	movs	r0, #17
 800c388:	e7e8      	b.n	800c35c <SerializeTxFrame+0x10>
 800c38a:	bf00      	nop
 800c38c:	200034e8 	.word	0x200034e8
 800c390:	200035f0 	.word	0x200035f0

0800c394 <ComputeRxWindowParameters>:
{
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c398:	4c1d      	ldr	r4, [pc, #116]	; (800c410 <ComputeRxWindowParameters+0x7c>)
 800c39a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800c39e:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800c3a2:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800c3a6:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	f003 f993 	bl	800f6d6 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c3b0:	4d18      	ldr	r5, [pc, #96]	; (800c414 <ComputeRxWindowParameters+0x80>)
 800c3b2:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c3ba:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800c3be:	b241      	sxtb	r1, r0
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f003 f8d4 	bl	800f56e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c3c6:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c3ce:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800c3d2:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800c3d6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800c3da:	f003 f8c8 	bl	800f56e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c3de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c3e0:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800c3e4:	440b      	add	r3, r1
 800c3e6:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c3ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c3ec:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c3f6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800c3fa:	b93b      	cbnz	r3, 800c40c <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c3fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3fe:	4419      	add	r1, r3
 800c400:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c404:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c406:	440a      	add	r2, r1
 800c408:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800c40c:	b002      	add	sp, #8
 800c40e:	bd70      	pop	{r4, r5, r6, pc}
 800c410:	20008000 	.word	0x20008000
 800c414:	200034e8 	.word	0x200034e8

0800c418 <VerifyTxFrame>:
{
 800c418:	b510      	push	{r4, lr}
 800c41a:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800c41c:	2300      	movs	r3, #0
 800c41e:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c420:	4b0d      	ldr	r3, [pc, #52]	; (800c458 <VerifyTxFrame+0x40>)
 800c422:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 800c426:	b914      	cbnz	r4, 800c42e <VerifyTxFrame+0x16>
}
 800c428:	4620      	mov	r0, r4
 800c42a:	b002      	add	sp, #8
 800c42c:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c42e:	a801      	add	r0, sp, #4
 800c430:	f002 f980 	bl	800e734 <LoRaMacCommandsGetSizeSerializedCmds>
 800c434:	4604      	mov	r4, r0
 800c436:	b968      	cbnz	r0, 800c454 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800c438:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c43c:	4b06      	ldr	r3, [pc, #24]	; (800c458 <VerifyTxFrame+0x40>)
 800c43e:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800c442:	4b06      	ldr	r3, [pc, #24]	; (800c45c <VerifyTxFrame+0x44>)
 800c444:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800c448:	f7fe ff10 	bl	800b26c <ValidatePayloadLength>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d1eb      	bne.n	800c428 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800c450:	2408      	movs	r4, #8
 800c452:	e7e9      	b.n	800c428 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c454:	2413      	movs	r4, #19
 800c456:	e7e7      	b.n	800c428 <VerifyTxFrame+0x10>
 800c458:	20008000 	.word	0x20008000
 800c45c:	200034e8 	.word	0x200034e8

0800c460 <SecureFrame>:
{
 800c460:	b530      	push	{r4, r5, lr}
 800c462:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800c468:	4b18      	ldr	r3, [pc, #96]	; (800c4cc <SecureFrame+0x6c>)
 800c46a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c46e:	b133      	cbz	r3, 800c47e <SecureFrame+0x1e>
 800c470:	4605      	mov	r5, r0
 800c472:	460c      	mov	r4, r1
 800c474:	2b04      	cmp	r3, #4
 800c476:	d00b      	beq.n	800c490 <SecureFrame+0x30>
 800c478:	2003      	movs	r0, #3
}
 800c47a:	b003      	add	sp, #12
 800c47c:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800c47e:	4814      	ldr	r0, [pc, #80]	; (800c4d0 <SecureFrame+0x70>)
 800c480:	f002 fd08 	bl	800ee94 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800c484:	b9d8      	cbnz	r0, 800c4be <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800c486:	4b11      	ldr	r3, [pc, #68]	; (800c4cc <SecureFrame+0x6c>)
 800c488:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c48c:	801a      	strh	r2, [r3, #0]
            break;
 800c48e:	e7f4      	b.n	800c47a <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800c490:	a801      	add	r0, sp, #4
 800c492:	f002 fcb5 	bl	800ee00 <LoRaMacCryptoGetFCntUp>
 800c496:	b9a0      	cbnz	r0, 800c4c2 <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800c498:	4b0c      	ldr	r3, [pc, #48]	; (800c4cc <SecureFrame+0x6c>)
 800c49a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800c49e:	b113      	cbz	r3, 800c4a6 <SecureFrame+0x46>
                fCntUp -= 1;
 800c4a0:	9b01      	ldr	r3, [sp, #4]
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800c4a6:	4b0a      	ldr	r3, [pc, #40]	; (800c4d0 <SecureFrame+0x70>)
 800c4a8:	4622      	mov	r2, r4
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	9801      	ldr	r0, [sp, #4]
 800c4ae:	f002 fd17 	bl	800eee0 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800c4b2:	b940      	cbnz	r0, 800c4c6 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800c4b4:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <SecureFrame+0x6c>)
 800c4b6:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c4ba:	801a      	strh	r2, [r3, #0]
            break;
 800c4bc:	e7dd      	b.n	800c47a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c4be:	2011      	movs	r0, #17
 800c4c0:	e7db      	b.n	800c47a <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800c4c2:	2012      	movs	r0, #18
 800c4c4:	e7d9      	b.n	800c47a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c4c6:	2011      	movs	r0, #17
 800c4c8:	e7d7      	b.n	800c47a <SecureFrame+0x1a>
 800c4ca:	bf00      	nop
 800c4cc:	200034e8 	.word	0x200034e8
 800c4d0:	200035f0 	.word	0x200035f0

0800c4d4 <SendFrameOnChannel>:
{
 800c4d4:	b570      	push	{r4, r5, r6, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800c4e0:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c4e4:	4d35      	ldr	r5, [pc, #212]	; (800c5bc <SendFrameOnChannel+0xe8>)
 800c4e6:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800c4ea:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c4ee:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800c4f2:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800c4f6:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800c4f8:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800c4fa:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800c4fc:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800c4fe:	4c30      	ldr	r4, [pc, #192]	; (800c5c0 <SendFrameOnChannel+0xec>)
 800c500:	8823      	ldrh	r3, [r4, #0]
 800c502:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c506:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 800c50a:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800c50e:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 800c512:	f10d 0207 	add.w	r2, sp, #7
 800c516:	a902      	add	r1, sp, #8
 800c518:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800c51c:	f003 f84b 	bl	800f5b6 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c526:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800c52a:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 800c52e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c532:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 800c536:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800c53a:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 800c53e:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800c542:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800c546:	f001 ffd6 	bl	800e4f6 <LoRaMacClassBIsBeaconModeActive>
 800c54a:	bb60      	cbnz	r0, 800c5a6 <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c54c:	4b1b      	ldr	r3, [pc, #108]	; (800c5bc <SendFrameOnChannel+0xe8>)
 800c54e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c552:	2b01      	cmp	r3, #1
 800c554:	d02f      	beq.n	800c5b6 <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 800c556:	f001 ffd1 	bl	800e4fc <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800c55a:	4b18      	ldr	r3, [pc, #96]	; (800c5bc <SendFrameOnChannel+0xe8>)
 800c55c:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800c560:	4b17      	ldr	r3, [pc, #92]	; (800c5c0 <SendFrameOnChannel+0xec>)
 800c562:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 800c566:	b2c0      	uxtb	r0, r0
 800c568:	f7ff ff7a 	bl	800c460 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800c56c:	4604      	mov	r4, r0
 800c56e:	b9b8      	cbnz	r0, 800c5a0 <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800c570:	4813      	ldr	r0, [pc, #76]	; (800c5c0 <SendFrameOnChannel+0xec>)
 800c572:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800c576:	f043 0302 	orr.w	r3, r3, #2
 800c57a:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800c57e:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 800c582:	3301      	adds	r3, #1
 800c584:	b2db      	uxtb	r3, r3
 800c586:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800c58a:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800c594:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <SendFrameOnChannel+0xf0>)
 800c596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c598:	f830 1b02 	ldrh.w	r1, [r0], #2
 800c59c:	b2c9      	uxtb	r1, r1
 800c59e:	4798      	blx	r3
}
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	b006      	add	sp, #24
 800c5a4:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800c5a6:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 800c5aa:	f001 ffb6 	bl	800e51a <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d0cc      	beq.n	800c54c <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800c5b2:	2410      	movs	r4, #16
 800c5b4:	e7f4      	b.n	800c5a0 <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 800c5b6:	f001 ffb2 	bl	800e51e <LoRaMacClassBStopRxSlots>
 800c5ba:	e7cc      	b.n	800c556 <SendFrameOnChannel+0x82>
 800c5bc:	20008000 	.word	0x20008000
 800c5c0:	200034e8 	.word	0x200034e8
 800c5c4:	08015d04 	.word	0x08015d04

0800c5c8 <ScheduleTx>:
{
 800c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5cc:	b08c      	sub	sp, #48	; 0x30
 800c5ce:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800c5d0:	f7ff fdb6 	bl	800c140 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	b118      	cbz	r0, 800c5e0 <ScheduleTx+0x18>
}
 800c5d8:	4620      	mov	r0, r4
 800c5da:	b00c      	add	sp, #48	; 0x30
 800c5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800c5e0:	f7fe fd50 	bl	800b084 <CalculateBackOff>
    status = SerializeTxFrame( );
 800c5e4:	f7ff feb2 	bl	800c34c <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	d1f4      	bne.n	800c5d8 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800c5ee:	4e36      	ldr	r6, [pc, #216]	; (800c6c8 <ScheduleTx+0x100>)
 800c5f0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800c5f2:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c5f4:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800c5f8:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800c5fc:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800c600:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800c604:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c608:	4640      	mov	r0, r8
 800c60a:	f008 f837 	bl	801467c <SysTimeGetMcuTime>
 800c60e:	af02      	add	r7, sp, #8
 800c610:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 800c61a:	e898 0006 	ldmia.w	r8, {r1, r2}
 800c61e:	4638      	mov	r0, r7
 800c620:	f007 ffc9 	bl	80145b6 <SysTimeSub>
 800c624:	ab07      	add	r3, sp, #28
 800c626:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c62a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800c62e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800c630:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800c632:	2300      	movs	r3, #0
 800c634:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800c638:	2301      	movs	r3, #1
 800c63a:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800c63e:	4b23      	ldr	r3, [pc, #140]	; (800c6cc <ScheduleTx+0x104>)
 800c640:	881b      	ldrh	r3, [r3, #0]
 800c642:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c646:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800c64a:	b92b      	cbnz	r3, 800c658 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800c64c:	2301      	movs	r3, #1
 800c64e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800c652:	2300      	movs	r3, #0
 800c654:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800c658:	4a1c      	ldr	r2, [pc, #112]	; (800c6cc <ScheduleTx+0x104>)
 800c65a:	481b      	ldr	r0, [pc, #108]	; (800c6c8 <ScheduleTx+0x100>)
 800c65c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 800c666:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 800c66a:	a904      	add	r1, sp, #16
 800c66c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800c670:	f003 f81c 	bl	800f6ac <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800c674:	b1b0      	cbz	r0, 800c6a4 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800c676:	280b      	cmp	r0, #11
 800c678:	d122      	bne.n	800c6c0 <ScheduleTx+0xf8>
 800c67a:	b31d      	cbz	r5, 800c6c4 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800c67c:	4b13      	ldr	r3, [pc, #76]	; (800c6cc <ScheduleTx+0x104>)
 800c67e:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800c682:	2900      	cmp	r1, #0
 800c684:	d0a8      	beq.n	800c5d8 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800c686:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800c68a:	f042 0220 	orr.w	r2, r2, #32
 800c68e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800c692:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800c696:	4628      	mov	r0, r5
 800c698:	f008 f95c 	bl	8014954 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800c69c:	4628      	mov	r0, r5
 800c69e:	f008 f913 	bl	80148c8 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800c6a2:	e799      	b.n	800c5d8 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800c6a4:	f7ff fe76 	bl	800c394 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800c6a8:	f7ff feb6 	bl	800c418 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800c6ac:	4604      	mov	r4, r0
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d192      	bne.n	800c5d8 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800c6b2:	4b06      	ldr	r3, [pc, #24]	; (800c6cc <ScheduleTx+0x104>)
 800c6b4:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800c6b8:	f7ff ff0c 	bl	800c4d4 <SendFrameOnChannel>
 800c6bc:	4604      	mov	r4, r0
 800c6be:	e78b      	b.n	800c5d8 <ScheduleTx+0x10>
            return status;
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	e789      	b.n	800c5d8 <ScheduleTx+0x10>
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	e787      	b.n	800c5d8 <ScheduleTx+0x10>
 800c6c8:	20008000 	.word	0x20008000
 800c6cc:	200034e8 	.word	0x200034e8

0800c6d0 <OnTxDelayedTimerEvent>:
{
 800c6d0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800c6d2:	4c16      	ldr	r4, [pc, #88]	; (800c72c <OnTxDelayedTimerEvent+0x5c>)
 800c6d4:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800c6d8:	f008 f89c 	bl	8014814 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800c6dc:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800c6e0:	f023 0320 	bic.w	r3, r3, #32
 800c6e4:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800c6e8:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 800c6ec:	4b10      	ldr	r3, [pc, #64]	; (800c730 <OnTxDelayedTimerEvent+0x60>)
 800c6ee:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800c6f2:	f7ff fdeb 	bl	800c2cc <LoRaMacHandleResponseTimeout>
 800c6f6:	b100      	cbz	r0, 800c6fa <OnTxDelayedTimerEvent+0x2a>
}
 800c6f8:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	f7ff ff64 	bl	800c5c8 <ScheduleTx>
 800c700:	2800      	cmp	r0, #0
 800c702:	d0f9      	beq.n	800c6f8 <OnTxDelayedTimerEvent+0x28>
 800c704:	280b      	cmp	r0, #11
 800c706:	d0f7      	beq.n	800c6f8 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c708:	4b09      	ldr	r3, [pc, #36]	; (800c730 <OnTxDelayedTimerEvent+0x60>)
 800c70a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800c70e:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800c712:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 800c716:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800c71a:	2009      	movs	r0, #9
 800c71c:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800c720:	f002 f93a 	bl	800e998 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800c724:	f7fe fd40 	bl	800b1a8 <StopRetransmission>
            break;
 800c728:	e7e6      	b.n	800c6f8 <OnTxDelayedTimerEvent+0x28>
 800c72a:	bf00      	nop
 800c72c:	200034e8 	.word	0x200034e8
 800c730:	20008000 	.word	0x20008000

0800c734 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c734:	4b1c      	ldr	r3, [pc, #112]	; (800c7a8 <LoRaMacHandleMcpsRequest+0x74>)
 800c736:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c73a:	f013 0f01 	tst.w	r3, #1
 800c73e:	d032      	beq.n	800c7a6 <LoRaMacHandleMcpsRequest+0x72>
{
 800c740:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c742:	4b19      	ldr	r3, [pc, #100]	; (800c7a8 <LoRaMacHandleMcpsRequest+0x74>)
 800c744:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800c748:	b12b      	cbz	r3, 800c756 <LoRaMacHandleMcpsRequest+0x22>
 800c74a:	2b03      	cmp	r3, #3
 800c74c:	d003      	beq.n	800c756 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d006      	beq.n	800c760 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800c752:	2000      	movs	r0, #0
 800c754:	e002      	b.n	800c75c <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800c756:	f7fe fced 	bl	800b134 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800c75a:	b940      	cbnz	r0, 800c76e <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800c75c:	b1b8      	cbz	r0, 800c78e <LoRaMacHandleMcpsRequest+0x5a>
}
 800c75e:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800c760:	4b11      	ldr	r3, [pc, #68]	; (800c7a8 <LoRaMacHandleMcpsRequest+0x74>)
 800c762:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c766:	b183      	cbz	r3, 800c78a <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800c768:	f7fe fd00 	bl	800b16c <CheckRetransConfirmedUplink>
 800c76c:	e7f5      	b.n	800c75a <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800c76e:	4c0e      	ldr	r4, [pc, #56]	; (800c7a8 <LoRaMacHandleMcpsRequest+0x74>)
 800c770:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800c774:	f008 f84e 	bl	8014814 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800c778:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800c77c:	f023 0320 	bic.w	r3, r3, #32
 800c780:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800c784:	f7fe fd10 	bl	800b1a8 <StopRetransmission>
 800c788:	e7e9      	b.n	800c75e <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800c78a:	2001      	movs	r0, #1
 800c78c:	e7e6      	b.n	800c75c <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800c78e:	4b06      	ldr	r3, [pc, #24]	; (800c7a8 <LoRaMacHandleMcpsRequest+0x74>)
 800c790:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c794:	f36f 1245 	bfc	r2, #5, #1
 800c798:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800c79c:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800c7a0:	f7ff ff96 	bl	800c6d0 <OnTxDelayedTimerEvent>
}
 800c7a4:	e7db      	b.n	800c75e <LoRaMacHandleMcpsRequest+0x2a>
 800c7a6:	4770      	bx	lr
 800c7a8:	200034e8 	.word	0x200034e8

0800c7ac <LoRaMacHandleRequestEvents>:
{
 800c7ac:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800c7ae:	4b22      	ldr	r3, [pc, #136]	; (800c838 <LoRaMacHandleRequestEvents+0x8c>)
 800c7b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c7b4:	bb7b      	cbnz	r3, 800c816 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c7b6:	4b20      	ldr	r3, [pc, #128]	; (800c838 <LoRaMacHandleRequestEvents+0x8c>)
 800c7b8:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 800c7bc:	f014 0501 	ands.w	r5, r4, #1
 800c7c0:	d005      	beq.n	800c7ce <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800c7c2:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c7c6:	f36f 0200 	bfc	r2, #0, #1
 800c7ca:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c7ce:	4b1a      	ldr	r3, [pc, #104]	; (800c838 <LoRaMacHandleRequestEvents+0x8c>)
 800c7d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c7d4:	f013 0f04 	tst.w	r3, #4
 800c7d8:	d006      	beq.n	800c7e8 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c7da:	4b17      	ldr	r3, [pc, #92]	; (800c838 <LoRaMacHandleRequestEvents+0x8c>)
 800c7dc:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c7e0:	f36f 0282 	bfc	r2, #2, #1
 800c7e4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c7e8:	2001      	movs	r0, #1
 800c7ea:	f7fe fbfb 	bl	800afe4 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800c7ee:	b135      	cbz	r5, 800c7fe <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800c7f0:	4811      	ldr	r0, [pc, #68]	; (800c838 <LoRaMacHandleRequestEvents+0x8c>)
 800c7f2:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f200 4044 	addw	r0, r0, #1092	; 0x444
 800c7fc:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800c7fe:	f014 0f04 	tst.w	r4, #4
 800c802:	d109      	bne.n	800c818 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800c804:	f001 fe7b 	bl	800e4fe <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800c808:	4b0b      	ldr	r3, [pc, #44]	; (800c838 <LoRaMacHandleRequestEvents+0x8c>)
 800c80a:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c80e:	f36f 1245 	bfc	r2, #5, #1
 800c812:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 800c816:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800c818:	4808      	ldr	r0, [pc, #32]	; (800c83c <LoRaMacHandleRequestEvents+0x90>)
 800c81a:	f002 f8e7 	bl	800e9ec <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800c81e:	f002 f917 	bl	800ea50 <LoRaMacConfirmQueueGetCnt>
 800c822:	2800      	cmp	r0, #0
 800c824:	d0ee      	beq.n	800c804 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c826:	4a04      	ldr	r2, [pc, #16]	; (800c838 <LoRaMacHandleRequestEvents+0x8c>)
 800c828:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800c82c:	f043 0304 	orr.w	r3, r3, #4
 800c830:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800c834:	e7e6      	b.n	800c804 <LoRaMacHandleRequestEvents+0x58>
 800c836:	bf00      	nop
 800c838:	200034e8 	.word	0x200034e8
 800c83c:	20003940 	.word	0x20003940

0800c840 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800c842:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c846:	b103      	cbz	r3, 800c84a <LoRaMacHandleScheduleUplinkEvent+0xa>
 800c848:	4770      	bx	lr
{
 800c84a:	b500      	push	{lr}
 800c84c:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800c84e:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800c852:	f10d 0007 	add.w	r0, sp, #7
 800c856:	f001 ffab 	bl	800e7b0 <LoRaMacCommandsStickyCmdsPending>
}
 800c85a:	b003      	add	sp, #12
 800c85c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c860:	200034e8 	.word	0x200034e8

0800c864 <OpenContinuousRxCWindow>:
{
 800c864:	b570      	push	{r4, r5, r6, lr}
 800c866:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800c868:	4c16      	ldr	r4, [pc, #88]	; (800c8c4 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c86a:	4d17      	ldr	r5, [pc, #92]	; (800c8c8 <OpenContinuousRxCWindow+0x64>)
 800c86c:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800c870:	9600      	str	r6, [sp, #0]
 800c872:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c874:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800c878:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800c87c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800c880:	f002 fe75 	bl	800f56e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c884:	2302      	movs	r3, #2
 800c886:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c88a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800c88e:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800c892:	2301      	movs	r3, #1
 800c894:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800c898:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 800c89c:	4631      	mov	r1, r6
 800c89e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800c8a2:	f002 fe78 	bl	800f596 <RegionRxConfig>
 800c8a6:	b158      	cbz	r0, 800c8c0 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800c8a8:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800c8ac:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 800c8b0:	4b06      	ldr	r3, [pc, #24]	; (800c8cc <OpenContinuousRxCWindow+0x68>)
 800c8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800c8b8:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800c8bc:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800c8c0:	b002      	add	sp, #8
 800c8c2:	bd70      	pop	{r4, r5, r6, pc}
 800c8c4:	20008000 	.word	0x20008000
 800c8c8:	200034e8 	.word	0x200034e8
 800c8cc:	08015d04 	.word	0x08015d04

0800c8d0 <RxWindowSetup>:
{
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800c8d4:	f007 ff9e 	bl	8014814 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800c8d8:	4b0c      	ldr	r3, [pc, #48]	; (800c90c <RxWindowSetup+0x3c>)
 800c8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8dc:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800c8de:	4a0c      	ldr	r2, [pc, #48]	; (800c910 <RxWindowSetup+0x40>)
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	4b0c      	ldr	r3, [pc, #48]	; (800c914 <RxWindowSetup+0x44>)
 800c8e4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c8e8:	f002 fe55 	bl	800f596 <RegionRxConfig>
 800c8ec:	b160      	cbz	r0, 800c908 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800c8ee:	4d0a      	ldr	r5, [pc, #40]	; (800c918 <RxWindowSetup+0x48>)
 800c8f0:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800c8f4:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800c8f8:	4b04      	ldr	r3, [pc, #16]	; (800c90c <RxWindowSetup+0x3c>)
 800c8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8fc:	4a05      	ldr	r2, [pc, #20]	; (800c914 <RxWindowSetup+0x44>)
 800c8fe:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800c900:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800c902:	7ce3      	ldrb	r3, [r4, #19]
 800c904:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800c908:	bd38      	pop	{r3, r4, r5, pc}
 800c90a:	bf00      	nop
 800c90c:	08015d04 	.word	0x08015d04
 800c910:	20003910 	.word	0x20003910
 800c914:	20008000 	.word	0x20008000
 800c918:	200034e8 	.word	0x200034e8

0800c91c <OnRxWindow2TimerEvent>:
{
 800c91c:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800c91e:	4b13      	ldr	r3, [pc, #76]	; (800c96c <OnRxWindow2TimerEvent+0x50>)
 800c920:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c924:	b903      	cbnz	r3, 800c928 <OnRxWindow2TimerEvent+0xc>
}
 800c926:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800c928:	4810      	ldr	r0, [pc, #64]	; (800c96c <OnRxWindow2TimerEvent+0x50>)
 800c92a:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800c92e:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800c932:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <OnRxWindow2TimerEvent+0x54>)
 800c934:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c936:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c93a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c93e:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800c942:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800c946:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800c94a:	2200      	movs	r2, #0
 800c94c:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800c950:	2201      	movs	r2, #1
 800c952:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c956:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800c95a:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800c95e:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800c962:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800c966:	f7ff ffb3 	bl	800c8d0 <RxWindowSetup>
 800c96a:	e7dc      	b.n	800c926 <OnRxWindow2TimerEvent+0xa>
 800c96c:	200034e8 	.word	0x200034e8
 800c970:	20008000 	.word	0x20008000

0800c974 <OnRxWindow1TimerEvent>:
{
 800c974:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800c976:	4811      	ldr	r0, [pc, #68]	; (800c9bc <OnRxWindow1TimerEvent+0x48>)
 800c978:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800c97c:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800c980:	4b0f      	ldr	r3, [pc, #60]	; (800c9c0 <OnRxWindow1TimerEvent+0x4c>)
 800c982:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800c986:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c98a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c98e:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800c992:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800c996:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800c99a:	2200      	movs	r2, #0
 800c99c:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800c9a0:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c9a4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800c9a8:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800c9ac:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800c9b0:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800c9b4:	f7ff ff8c 	bl	800c8d0 <RxWindowSetup>
}
 800c9b8:	bd08      	pop	{r3, pc}
 800c9ba:	bf00      	nop
 800c9bc:	200034e8 	.word	0x200034e8
 800c9c0:	20008000 	.word	0x20008000

0800c9c4 <LoRaMacHandleNvm>:
{
 800c9c4:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800c9c6:	4b30      	ldr	r3, [pc, #192]	; (800ca88 <LoRaMacHandleNvm+0xc4>)
 800c9c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c9cc:	b103      	cbz	r3, 800c9d0 <LoRaMacHandleNvm+0xc>
}
 800c9ce:	bd38      	pop	{r3, r4, r5, pc}
 800c9d0:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800c9d2:	2124      	movs	r1, #36	; 0x24
 800c9d4:	f005 fe1e 	bl	8012614 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800c9d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9da:	4283      	cmp	r3, r0
 800c9dc:	d052      	beq.n	800ca84 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800c9de:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800c9e0:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800c9e2:	2114      	movs	r1, #20
 800c9e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c9e8:	f005 fe14 	bl	8012614 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800c9ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c9ee:	4283      	cmp	r3, r0
 800c9f0:	d002      	beq.n	800c9f8 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800c9f2:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800c9f4:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800c9f8:	21e0      	movs	r1, #224	; 0xe0
 800c9fa:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800c9fe:	f005 fe09 	bl	8012614 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800ca02:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800ca06:	4283      	cmp	r3, r0
 800ca08:	d003      	beq.n	800ca12 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800ca0a:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ca0e:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ca12:	21bc      	movs	r1, #188	; 0xbc
 800ca14:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800ca18:	f005 fdfc 	bl	8012614 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800ca1c:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800ca20:	4283      	cmp	r3, r0
 800ca22:	d003      	beq.n	800ca2c <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800ca24:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ca28:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ca2c:	2110      	movs	r1, #16
 800ca2e:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800ca32:	f005 fdef 	bl	8012614 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ca36:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800ca3a:	4283      	cmp	r3, r0
 800ca3c:	d003      	beq.n	800ca46 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800ca3e:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ca42:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ca46:	f44f 715e 	mov.w	r1, #888	; 0x378
 800ca4a:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 800ca4e:	f005 fde1 	bl	8012614 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ca52:	f8d4 3570 	ldr.w	r3, [r4, #1392]	; 0x570
 800ca56:	4283      	cmp	r3, r0
 800ca58:	d003      	beq.n	800ca62 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800ca5a:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800ca5e:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ca62:	2114      	movs	r1, #20
 800ca64:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800ca68:	f005 fdd4 	bl	8012614 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800ca6c:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800ca70:	4283      	cmp	r3, r0
 800ca72:	d003      	beq.n	800ca7c <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800ca74:	f8c4 0588 	str.w	r0, [r4, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800ca78:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	f7fe fbbd 	bl	800b1fc <CallNvmDataChangeCallback>
 800ca82:	e7a4      	b.n	800c9ce <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ca84:	2500      	movs	r5, #0
 800ca86:	e7ac      	b.n	800c9e2 <LoRaMacHandleNvm+0x1e>
 800ca88:	200034e8 	.word	0x200034e8

0800ca8c <RestoreNvmData>:
{
 800ca8c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800ca8e:	4b34      	ldr	r3, [pc, #208]	; (800cb60 <RestoreNvmData+0xd4>)
 800ca90:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d001      	beq.n	800ca9c <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800ca98:	2001      	movs	r0, #1
}
 800ca9a:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800ca9c:	4c31      	ldr	r4, [pc, #196]	; (800cb64 <RestoreNvmData+0xd8>)
 800ca9e:	2124      	movs	r1, #36	; 0x24
 800caa0:	4620      	mov	r0, r4
 800caa2:	f005 fdb7 	bl	8012614 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800caa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caa8:	4283      	cmp	r3, r0
 800caaa:	d001      	beq.n	800cab0 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800caac:	2017      	movs	r0, #23
 800caae:	e7f4      	b.n	800ca9a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800cab0:	2114      	movs	r1, #20
 800cab2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cab6:	f005 fdad 	bl	8012614 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800caba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cabc:	4283      	cmp	r3, r0
 800cabe:	d001      	beq.n	800cac4 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cac0:	2017      	movs	r0, #23
 800cac2:	e7ea      	b.n	800ca9a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800cac4:	21e0      	movs	r1, #224	; 0xe0
 800cac6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800caca:	f005 fda3 	bl	8012614 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800cace:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800cad2:	4283      	cmp	r3, r0
 800cad4:	d001      	beq.n	800cada <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cad6:	2017      	movs	r0, #23
 800cad8:	e7df      	b.n	800ca9a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800cada:	21bc      	movs	r1, #188	; 0xbc
 800cadc:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800cae0:	f005 fd98 	bl	8012614 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800cae4:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800cae8:	4283      	cmp	r3, r0
 800caea:	d001      	beq.n	800caf0 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800caec:	2017      	movs	r0, #23
 800caee:	e7d4      	b.n	800ca9a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800caf0:	2110      	movs	r1, #16
 800caf2:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800caf6:	f005 fd8d 	bl	8012614 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800cafa:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800cafe:	4283      	cmp	r3, r0
 800cb00:	d001      	beq.n	800cb06 <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cb02:	2017      	movs	r0, #23
 800cb04:	e7c9      	b.n	800ca9a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800cb06:	2114      	movs	r1, #20
 800cb08:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800cb0c:	f005 fd82 	bl	8012614 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800cb10:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800cb14:	4283      	cmp	r3, r0
 800cb16:	d001      	beq.n	800cb1c <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800cb18:	2017      	movs	r0, #23
 800cb1a:	e7be      	b.n	800ca9a <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800cb1c:	4625      	mov	r5, r4
 800cb1e:	4c12      	ldr	r4, [pc, #72]	; (800cb68 <RestoreNvmData+0xdc>)
 800cb20:	f240 528c 	movw	r2, #1420	; 0x58c
 800cb24:	4629      	mov	r1, r5
 800cb26:	4620      	mov	r0, r4
 800cb28:	f005 fd53 	bl	80125d2 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800cb2c:	f240 528c 	movw	r2, #1420	; 0x58c
 800cb30:	2100      	movs	r1, #0
 800cb32:	4628      	mov	r0, r5
 800cb34:	f005 fd65 	bl	8012602 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800cb38:	4b09      	ldr	r3, [pc, #36]	; (800cb60 <RestoreNvmData+0xd4>)
 800cb3a:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800cb3e:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800cb42:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800cb44:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cb48:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800cb4c:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800cb50:	2201      	movs	r2, #1
 800cb52:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cb56:	2202      	movs	r2, #2
 800cb58:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	e79c      	b.n	800ca9a <RestoreNvmData+0xe>
 800cb60:	200034e8 	.word	0x200034e8
 800cb64:	2000858c 	.word	0x2000858c
 800cb68:	20008000 	.word	0x20008000

0800cb6c <OnRadioRxTimeout>:
{
 800cb6c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800cb6e:	4a09      	ldr	r2, [pc, #36]	; (800cb94 <OnRadioRxTimeout+0x28>)
 800cb70:	7813      	ldrb	r3, [r2, #0]
 800cb72:	f043 0302 	orr.w	r3, r3, #2
 800cb76:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cb78:	4b07      	ldr	r3, [pc, #28]	; (800cb98 <OnRadioRxTimeout+0x2c>)
 800cb7a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cb7e:	b113      	cbz	r3, 800cb86 <OnRadioRxTimeout+0x1a>
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	b103      	cbz	r3, 800cb86 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cb84:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800cb86:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <OnRadioRxTimeout+0x30>)
 800cb88:	2201      	movs	r2, #1
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	2002      	movs	r0, #2
 800cb8e:	f007 fbc9 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 800cb92:	bd08      	pop	{r3, pc}
 800cb94:	200034e4 	.word	0x200034e4
 800cb98:	200034e8 	.word	0x200034e8
 800cb9c:	08015614 	.word	0x08015614

0800cba0 <OnRadioTxTimeout>:
{
 800cba0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800cba2:	4a09      	ldr	r2, [pc, #36]	; (800cbc8 <OnRadioTxTimeout+0x28>)
 800cba4:	7813      	ldrb	r3, [r2, #0]
 800cba6:	f043 0308 	orr.w	r3, r3, #8
 800cbaa:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cbac:	4b07      	ldr	r3, [pc, #28]	; (800cbcc <OnRadioTxTimeout+0x2c>)
 800cbae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cbb2:	b113      	cbz	r3, 800cbba <OnRadioTxTimeout+0x1a>
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	b103      	cbz	r3, 800cbba <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cbb8:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800cbba:	4b05      	ldr	r3, [pc, #20]	; (800cbd0 <OnRadioTxTimeout+0x30>)
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	2002      	movs	r0, #2
 800cbc2:	f007 fbaf 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 800cbc6:	bd08      	pop	{r3, pc}
 800cbc8:	200034e4 	.word	0x200034e4
 800cbcc:	200034e8 	.word	0x200034e8
 800cbd0:	08015624 	.word	0x08015624

0800cbd4 <OnRadioRxDone>:
{
 800cbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd8:	4680      	mov	r8, r0
 800cbda:	460f      	mov	r7, r1
 800cbdc:	4616      	mov	r6, r2
 800cbde:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800cbe0:	f007 fdd8 	bl	8014794 <UTIL_TIMER_GetCurrentTime>
 800cbe4:	4c0f      	ldr	r4, [pc, #60]	; (800cc24 <OnRadioRxDone+0x50>)
 800cbe6:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800cbe8:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800cbec:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800cbee:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800cbf0:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800cbf2:	4b0d      	ldr	r3, [pc, #52]	; (800cc28 <OnRadioRxDone+0x54>)
 800cbf4:	781a      	ldrb	r2, [r3, #0]
 800cbf6:	f042 0210 	orr.w	r2, r2, #16
 800cbfa:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800cbfc:	b2d2      	uxtb	r2, r2
 800cbfe:	f042 0201 	orr.w	r2, r2, #1
 800cc02:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cc04:	4b09      	ldr	r3, [pc, #36]	; (800cc2c <OnRadioRxDone+0x58>)
 800cc06:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cc0a:	b113      	cbz	r3, 800cc12 <OnRadioRxDone+0x3e>
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	b103      	cbz	r3, 800cc12 <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cc10:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800cc12:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <OnRadioRxDone+0x5c>)
 800cc14:	2201      	movs	r2, #1
 800cc16:	2100      	movs	r1, #0
 800cc18:	2002      	movs	r0, #2
 800cc1a:	f007 fb83 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 800cc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc22:	bf00      	nop
 800cc24:	20003a98 	.word	0x20003a98
 800cc28:	200034e4 	.word	0x200034e4
 800cc2c:	200034e8 	.word	0x200034e8
 800cc30:	08015634 	.word	0x08015634

0800cc34 <OnRadioTxDone>:
{
 800cc34:	b530      	push	{r4, r5, lr}
 800cc36:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800cc38:	f007 fdac 	bl	8014794 <UTIL_TIMER_GetCurrentTime>
 800cc3c:	4b0f      	ldr	r3, [pc, #60]	; (800cc7c <OnRadioTxDone+0x48>)
 800cc3e:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800cc40:	4d0f      	ldr	r5, [pc, #60]	; (800cc80 <OnRadioTxDone+0x4c>)
 800cc42:	466c      	mov	r4, sp
 800cc44:	4620      	mov	r0, r4
 800cc46:	f007 fcf7 	bl	8014638 <SysTimeGet>
 800cc4a:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800cc4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cc52:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800cc56:	4a0b      	ldr	r2, [pc, #44]	; (800cc84 <OnRadioTxDone+0x50>)
 800cc58:	7813      	ldrb	r3, [r2, #0]
 800cc5a:	f043 0320 	orr.w	r3, r3, #32
 800cc5e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cc60:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800cc64:	b113      	cbz	r3, 800cc6c <OnRadioTxDone+0x38>
 800cc66:	691b      	ldr	r3, [r3, #16]
 800cc68:	b103      	cbz	r3, 800cc6c <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cc6a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800cc6c:	4b06      	ldr	r3, [pc, #24]	; (800cc88 <OnRadioTxDone+0x54>)
 800cc6e:	2201      	movs	r2, #1
 800cc70:	2100      	movs	r1, #0
 800cc72:	2002      	movs	r0, #2
 800cc74:	f007 fb56 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 800cc78:	b003      	add	sp, #12
 800cc7a:	bd30      	pop	{r4, r5, pc}
 800cc7c:	20003aa8 	.word	0x20003aa8
 800cc80:	200034e8 	.word	0x200034e8
 800cc84:	200034e4 	.word	0x200034e4
 800cc88:	08015644 	.word	0x08015644

0800cc8c <ResetMacParameters>:
{
 800cc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc8e:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800cc90:	4c53      	ldr	r4, [pc, #332]	; (800cde0 <ResetMacParameters+0x154>)
 800cc92:	2600      	movs	r6, #0
 800cc94:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800cc98:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800cc9a:	4d52      	ldr	r5, [pc, #328]	; (800cde4 <ResetMacParameters+0x158>)
 800cc9c:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 800cca0:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 800cca4:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 800cca8:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800ccac:	2701      	movs	r7, #1
 800ccae:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ccb2:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 800ccb6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ccba:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 800ccbe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800ccc2:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800ccc6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800ccca:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800ccce:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 800ccd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ccd6:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800ccda:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800ccde:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800cce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cce6:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800ccea:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800ccee:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800ccf2:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800ccf6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800ccfa:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800ccfe:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800cd00:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800cd04:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800cd06:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 800cd0a:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800cd0e:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 800cd12:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800cd16:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800cd1a:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800cd1e:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800cd20:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800cd24:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800cd26:	4b30      	ldr	r3, [pc, #192]	; (800cde8 <ResetMacParameters+0x15c>)
 800cd28:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800cd2a:	a901      	add	r1, sp, #4
 800cd2c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800cd30:	f002 fbe2 	bl	800f4f8 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800cd34:	f885 641f 	strb.w	r6, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800cd38:	f885 63d0 	strb.w	r6, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800cd3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd3e:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cd42:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800cd46:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800cd4a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800cd4e:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800cd52:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800cd56:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cd5a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800cd5e:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800cd62:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 800cd66:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 800cd6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cd6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd70:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800cd74:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800cd78:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800cd82:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800cd84:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800cd86:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800cd8a:	b11b      	cbz	r3, 800cd94 <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800cd8c:	685a      	ldr	r2, [r3, #4]
 800cd8e:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800cd90:	691b      	ldr	r3, [r3, #16]
 800cd92:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800cd94:	4b13      	ldr	r3, [pc, #76]	; (800cde4 <ResetMacParameters+0x158>)
 800cd96:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 800cd9a:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800cd9c:	f203 4224 	addw	r2, r3, #1060	; 0x424
 800cda0:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800cda2:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 800cda6:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800cda8:	f203 4395 	addw	r3, r3, #1173	; 0x495
 800cdac:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800cdae:	4a0c      	ldr	r2, [pc, #48]	; (800cde0 <ResetMacParameters+0x154>)
 800cdb0:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 800cdb4:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800cdb6:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800cdba:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800cdbc:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800cdc0:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800cdc2:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 800cdc6:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800cdc8:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 800cdcc:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800cdce:	f202 5274 	addw	r2, r2, #1396	; 0x574
 800cdd2:	a90e      	add	r1, sp, #56	; 0x38
 800cdd4:	a805      	add	r0, sp, #20
 800cdd6:	f001 fb7d 	bl	800e4d4 <LoRaMacClassBInit>
}
 800cdda:	b011      	add	sp, #68	; 0x44
 800cddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdde:	bf00      	nop
 800cde0:	20008000 	.word	0x20008000
 800cde4:	200034e8 	.word	0x200034e8
 800cde8:	20003a08 	.word	0x20003a08

0800cdec <SwitchClass>:
{
 800cdec:	b570      	push	{r4, r5, r6, lr}
 800cdee:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800cdf0:	4b3e      	ldr	r3, [pc, #248]	; (800ceec <SwitchClass+0x100>)
 800cdf2:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 800cdf6:	2d01      	cmp	r5, #1
 800cdf8:	d065      	beq.n	800cec6 <SwitchClass+0xda>
 800cdfa:	2d02      	cmp	r5, #2
 800cdfc:	d06b      	beq.n	800ced6 <SwitchClass+0xea>
 800cdfe:	b10d      	cbz	r5, 800ce04 <SwitchClass+0x18>
 800ce00:	2003      	movs	r0, #3
}
 800ce02:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800ce04:	b930      	cbnz	r0, 800ce14 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ce06:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ce0a:	3364      	adds	r3, #100	; 0x64
 800ce0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ce10:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800ce14:	2c01      	cmp	r4, #1
 800ce16:	d022      	beq.n	800ce5e <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ce18:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800ce1a:	2c02      	cmp	r4, #2
 800ce1c:	d1f1      	bne.n	800ce02 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ce1e:	4b33      	ldr	r3, [pc, #204]	; (800ceec <SwitchClass+0x100>)
 800ce20:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ce24:	4e32      	ldr	r6, [pc, #200]	; (800cef0 <SwitchClass+0x104>)
 800ce26:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800ce2a:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800ce2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce34:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800ce38:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ce42:	2300      	movs	r3, #0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	dd13      	ble.n	800ce70 <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 800ce48:	4b29      	ldr	r3, [pc, #164]	; (800cef0 <SwitchClass+0x104>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 800ce50:	4b28      	ldr	r3, [pc, #160]	; (800cef4 <SwitchClass+0x108>)
 800ce52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce54:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800ce56:	f7ff fd05 	bl	800c864 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	e7d1      	b.n	800ce02 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f001 fb4e 	bl	800e500 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d1d8      	bne.n	800ce1a <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ce68:	4b20      	ldr	r3, [pc, #128]	; (800ceec <SwitchClass+0x100>)
 800ce6a:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800ce6e:	e7d4      	b.n	800ce1a <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ce70:	4618      	mov	r0, r3
 800ce72:	4a1e      	ldr	r2, [pc, #120]	; (800ceec <SwitchClass+0x100>)
 800ce74:	212c      	movs	r1, #44	; 0x2c
 800ce76:	fb01 2203 	mla	r2, r1, r3, r2
 800ce7a:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 800ce7e:	b912      	cbnz	r2, 800ce86 <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ce80:	3301      	adds	r3, #1
 800ce82:	b25b      	sxtb	r3, r3
 800ce84:	e7de      	b.n	800ce44 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ce86:	4a19      	ldr	r2, [pc, #100]	; (800ceec <SwitchClass+0x100>)
 800ce88:	fb01 2000 	mla	r0, r1, r0, r2
 800ce8c:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 800ce90:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ce92:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 800ce96:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ce9a:	4b15      	ldr	r3, [pc, #84]	; (800cef0 <SwitchClass+0x104>)
 800ce9c:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800cea0:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800cea4:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cea8:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800ceac:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ceb0:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800ceb4:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ceb8:	2203      	movs	r2, #3
 800ceba:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800cec4:	e7c0      	b.n	800ce48 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800cec6:	f001 fb1b 	bl	800e500 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d199      	bne.n	800ce02 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800cece:	4b07      	ldr	r3, [pc, #28]	; (800ceec <SwitchClass+0x100>)
 800ced0:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800ced4:	e795      	b.n	800ce02 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800ced6:	b938      	cbnz	r0, 800cee8 <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ced8:	4b04      	ldr	r3, [pc, #16]	; (800ceec <SwitchClass+0x100>)
 800ceda:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 800cede:	4b05      	ldr	r3, [pc, #20]	; (800cef4 <SwitchClass+0x108>)
 800cee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee2:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800cee4:	4620      	mov	r0, r4
 800cee6:	e78c      	b.n	800ce02 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cee8:	2003      	movs	r0, #3
 800ceea:	e78a      	b.n	800ce02 <SwitchClass+0x16>
 800ceec:	20008000 	.word	0x20008000
 800cef0:	200034e8 	.word	0x200034e8
 800cef4:	08015d04 	.word	0x08015d04

0800cef8 <SendReJoinReq>:
{
 800cef8:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800cefa:	28ff      	cmp	r0, #255	; 0xff
 800cefc:	d003      	beq.n	800cf06 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800cefe:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800cf00:	f7ff fb62 	bl	800c5c8 <ScheduleTx>
}
 800cf04:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800cf06:	2000      	movs	r0, #0
 800cf08:	f7ff ff70 	bl	800cdec <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800cf0c:	4d0e      	ldr	r5, [pc, #56]	; (800cf48 <SendReJoinReq+0x50>)
 800cf0e:	2400      	movs	r4, #0
 800cf10:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800cf14:	1cab      	adds	r3, r5, #2
 800cf16:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800cf1a:	23ff      	movs	r3, #255	; 0xff
 800cf1c:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800cf20:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800cf24:	f005 fb24 	bl	8012570 <SecureElementGetJoinEui>
 800cf28:	4601      	mov	r1, r0
 800cf2a:	2208      	movs	r2, #8
 800cf2c:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800cf30:	f005 fb4f 	bl	80125d2 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800cf34:	f005 fb06 	bl	8012544 <SecureElementGetDevEui>
 800cf38:	4601      	mov	r1, r0
 800cf3a:	2208      	movs	r2, #8
 800cf3c:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800cf40:	f005 fb47 	bl	80125d2 <memcpy1>
            allowDelayedTx = false;
 800cf44:	4620      	mov	r0, r4
            break;
 800cf46:	e7db      	b.n	800cf00 <SendReJoinReq+0x8>
 800cf48:	200034e8 	.word	0x200034e8

0800cf4c <PrepareFrame>:
{
 800cf4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf50:	b083      	sub	sp, #12
 800cf52:	4605      	mov	r5, r0
 800cf54:	460e      	mov	r6, r1
 800cf56:	4617      	mov	r7, r2
 800cf58:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800cf5c:	4959      	ldr	r1, [pc, #356]	; (800d0c4 <PrepareFrame+0x178>)
 800cf5e:	2200      	movs	r2, #0
 800cf60:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800cf62:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 800cf66:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800cf68:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800cf6a:	4698      	mov	r8, r3
 800cf6c:	b1cb      	cbz	r3, 800cfa2 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800cf6e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800d0c4 <PrepareFrame+0x178>
 800cf72:	4622      	mov	r2, r4
 800cf74:	4641      	mov	r1, r8
 800cf76:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800cf7a:	f005 fb2a 	bl	80125d2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800cf7e:	b2e0      	uxtb	r0, r4
 800cf80:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800cf84:	782b      	ldrb	r3, [r5, #0]
 800cf86:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800cf8a:	782b      	ldrb	r3, [r5, #0]
 800cf8c:	095b      	lsrs	r3, r3, #5
 800cf8e:	2b04      	cmp	r3, #4
 800cf90:	d009      	beq.n	800cfa6 <PrepareFrame+0x5a>
 800cf92:	2b07      	cmp	r3, #7
 800cf94:	d079      	beq.n	800d08a <PrepareFrame+0x13e>
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d009      	beq.n	800cfae <PrepareFrame+0x62>
 800cf9a:	2002      	movs	r0, #2
}
 800cf9c:	b003      	add	sp, #12
 800cf9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800cfa2:	4614      	mov	r4, r2
 800cfa4:	e7e3      	b.n	800cf6e <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800cfa6:	4b47      	ldr	r3, [pc, #284]	; (800d0c4 <PrepareFrame+0x178>)
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800cfae:	4b45      	ldr	r3, [pc, #276]	; (800d0c4 <PrepareFrame+0x178>)
 800cfb0:	2204      	movs	r2, #4
 800cfb2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800cfb6:	1c9a      	adds	r2, r3, #2
 800cfb8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800cfbc:	22ff      	movs	r2, #255	; 0xff
 800cfbe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800cfc2:	782a      	ldrb	r2, [r5, #0]
 800cfc4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800cfc8:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800cfcc:	4a3e      	ldr	r2, [pc, #248]	; (800d0c8 <PrepareFrame+0x17c>)
 800cfce:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800cfd2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800cfd6:	7832      	ldrb	r2, [r6, #0]
 800cfd8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800cfdc:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800cfe0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800cfe4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800cfe8:	a801      	add	r0, sp, #4
 800cfea:	f001 ff09 	bl	800ee00 <LoRaMacCryptoGetFCntUp>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d15c      	bne.n	800d0ac <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800cff2:	9a01      	ldr	r2, [sp, #4]
 800cff4:	4b33      	ldr	r3, [pc, #204]	; (800d0c4 <PrepareFrame+0x178>)
 800cff6:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800cffa:	2100      	movs	r1, #0
 800cffc:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 800d000:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d004:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d008:	4668      	mov	r0, sp
 800d00a:	f001 fb93 	bl	800e734 <LoRaMacCommandsGetSizeSerializedCmds>
 800d00e:	2800      	cmp	r0, #0
 800d010:	d14e      	bne.n	800d0b0 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800d012:	9b00      	ldr	r3, [sp, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d0c1      	beq.n	800cf9c <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800d018:	4b2b      	ldr	r3, [pc, #172]	; (800d0c8 <PrepareFrame+0x17c>)
 800d01a:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800d01e:	f7fe f905 	bl	800b22c <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d022:	4b28      	ldr	r3, [pc, #160]	; (800d0c4 <PrepareFrame+0x178>)
 800d024:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800d028:	b113      	cbz	r3, 800d030 <PrepareFrame+0xe4>
 800d02a:	9a00      	ldr	r2, [sp, #0]
 800d02c:	2a0f      	cmp	r2, #15
 800d02e:	d915      	bls.n	800d05c <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d030:	b113      	cbz	r3, 800d038 <PrepareFrame+0xec>
 800d032:	9b00      	ldr	r3, [sp, #0]
 800d034:	2b0f      	cmp	r3, #15
 800d036:	d821      	bhi.n	800d07c <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d038:	4a24      	ldr	r2, [pc, #144]	; (800d0cc <PrepareFrame+0x180>)
 800d03a:	4669      	mov	r1, sp
 800d03c:	f001 fb86 	bl	800e74c <LoRaMacCommandsSerializeCmds>
 800d040:	2800      	cmp	r0, #0
 800d042:	d13b      	bne.n	800d0bc <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d044:	4b1f      	ldr	r3, [pc, #124]	; (800d0c4 <PrepareFrame+0x178>)
 800d046:	2200      	movs	r2, #0
 800d048:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800d04c:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 800d050:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d054:	9a00      	ldr	r2, [sp, #0]
 800d056:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800d05a:	e79f      	b.n	800cf9c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d05c:	4a1c      	ldr	r2, [pc, #112]	; (800d0d0 <PrepareFrame+0x184>)
 800d05e:	4669      	mov	r1, sp
 800d060:	200f      	movs	r0, #15
 800d062:	f001 fb73 	bl	800e74c <LoRaMacCommandsSerializeCmds>
 800d066:	bb28      	cbnz	r0, 800d0b4 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d068:	7833      	ldrb	r3, [r6, #0]
 800d06a:	9a00      	ldr	r2, [sp, #0]
 800d06c:	f362 0303 	bfi	r3, r2, #0, #4
 800d070:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d072:	b2da      	uxtb	r2, r3
 800d074:	4b13      	ldr	r3, [pc, #76]	; (800d0c4 <PrepareFrame+0x178>)
 800d076:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800d07a:	e78f      	b.n	800cf9c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d07c:	4a13      	ldr	r2, [pc, #76]	; (800d0cc <PrepareFrame+0x180>)
 800d07e:	4669      	mov	r1, sp
 800d080:	f001 fb64 	bl	800e74c <LoRaMacCommandsSerializeCmds>
 800d084:	b1c0      	cbz	r0, 800d0b8 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d086:	2013      	movs	r0, #19
 800d088:	e788      	b.n	800cf9c <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d08a:	f1b8 0f00 	cmp.w	r8, #0
 800d08e:	d017      	beq.n	800d0c0 <PrepareFrame+0x174>
 800d090:	2800      	cmp	r0, #0
 800d092:	d083      	beq.n	800cf9c <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d094:	4c0b      	ldr	r4, [pc, #44]	; (800d0c4 <PrepareFrame+0x178>)
 800d096:	b282      	uxth	r2, r0
 800d098:	4641      	mov	r1, r8
 800d09a:	1ce0      	adds	r0, r4, #3
 800d09c:	f005 fa99 	bl	80125d2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d0a0:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	e777      	b.n	800cf9c <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d0ac:	2012      	movs	r0, #18
 800d0ae:	e775      	b.n	800cf9c <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d0b0:	2013      	movs	r0, #19
 800d0b2:	e773      	b.n	800cf9c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d0b4:	2013      	movs	r0, #19
 800d0b6:	e771      	b.n	800cf9c <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d0b8:	200a      	movs	r0, #10
 800d0ba:	e76f      	b.n	800cf9c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d0bc:	2013      	movs	r0, #19
 800d0be:	e76d      	b.n	800cf9c <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	e76b      	b.n	800cf9c <PrepareFrame+0x50>
 800d0c4:	200034e8 	.word	0x200034e8
 800d0c8:	20008000 	.word	0x20008000
 800d0cc:	20003988 	.word	0x20003988
 800d0d0:	20003600 	.word	0x20003600

0800d0d4 <Send>:
{
 800d0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d8:	b08a      	sub	sp, #40	; 0x28
 800d0da:	4617      	mov	r7, r2
 800d0dc:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d0de:	4c45      	ldr	r4, [pc, #276]	; (800d1f4 <Send+0x120>)
 800d0e0:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800d0e4:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d0e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d0ea:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d0ec:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d07c      	beq.n	800d1ee <Send+0x11a>
 800d0f4:	4605      	mov	r5, r0
 800d0f6:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800d0f8:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800d0fc:	b90b      	cbnz	r3, 800d102 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d0fe:	2100      	movs	r1, #0
 800d100:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800d102:	2300      	movs	r3, #0
 800d104:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800d108:	483a      	ldr	r0, [pc, #232]	; (800d1f4 <Send+0x120>)
 800d10a:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 800d10e:	f361 13c7 	bfi	r3, r1, #7, #1
 800d112:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d116:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d054      	beq.n	800d1c8 <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800d11e:	4b35      	ldr	r3, [pc, #212]	; (800d1f4 <Send+0x120>)
 800d120:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d124:	b12b      	cbz	r3, 800d132 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800d126:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d12a:	f043 0320 	orr.w	r3, r3, #32
 800d12e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800d132:	2301      	movs	r3, #1
 800d134:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800d138:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d13c:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800d13e:	4b2e      	ldr	r3, [pc, #184]	; (800d1f8 <Send+0x124>)
 800d140:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800d144:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800d148:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800d14c:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d150:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d154:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800d158:	4926      	ldr	r1, [pc, #152]	; (800d1f4 <Send+0x120>)
 800d15a:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 800d15e:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d162:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 800d166:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800d16a:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800d16e:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800d172:	ab08      	add	r3, sp, #32
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	f101 0360 	add.w	r3, r1, #96	; 0x60
 800d17a:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800d17e:	3139      	adds	r1, #57	; 0x39
 800d180:	a803      	add	r0, sp, #12
 800d182:	f001 f92d 	bl	800e3e0 <LoRaMacAdrCalcNext>
 800d186:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d18a:	f360 1386 	bfi	r3, r0, #6, #1
 800d18e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800d192:	f8cd 8000 	str.w	r8, [sp]
 800d196:	463b      	mov	r3, r7
 800d198:	4632      	mov	r2, r6
 800d19a:	a909      	add	r1, sp, #36	; 0x24
 800d19c:	4628      	mov	r0, r5
 800d19e:	f7ff fed5 	bl	800cf4c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	b108      	cbz	r0, 800d1aa <Send+0xd6>
 800d1a6:	280a      	cmp	r0, #10
 800d1a8:	d104      	bne.n	800d1b4 <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800d1aa:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800d1ae:	f7ff fa0b 	bl	800c5c8 <ScheduleTx>
 800d1b2:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800d1b4:	b17c      	cbz	r4, 800d1d6 <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800d1b6:	4b0f      	ldr	r3, [pc, #60]	; (800d1f4 <Send+0x120>)
 800d1b8:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800d1bc:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	b00a      	add	sp, #40	; 0x28
 800d1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800d1c8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d1cc:	f043 0310 	orr.w	r3, r3, #16
 800d1d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d1d4:	e7a3      	b.n	800d11e <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800d1d6:	4b07      	ldr	r3, [pc, #28]	; (800d1f4 <Send+0x120>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800d1de:	9a08      	ldr	r2, [sp, #32]
 800d1e0:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800d1e2:	f001 fa7b 	bl	800e6dc <LoRaMacCommandsRemoveNoneStickyCmds>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d0ea      	beq.n	800d1c0 <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d1ea:	2413      	movs	r4, #19
 800d1ec:	e7e8      	b.n	800d1c0 <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800d1ee:	2407      	movs	r4, #7
 800d1f0:	e7e6      	b.n	800d1c0 <Send+0xec>
 800d1f2:	bf00      	nop
 800d1f4:	20008000 	.word	0x20008000
 800d1f8:	200034e8 	.word	0x200034e8

0800d1fc <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800d1fc:	4b0a      	ldr	r3, [pc, #40]	; (800d228 <LoRaMacIsBusy+0x2c>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	f013 0f01 	tst.w	r3, #1
 800d204:	d10a      	bne.n	800d21c <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d206:	4b09      	ldr	r3, [pc, #36]	; (800d22c <LoRaMacIsBusy+0x30>)
 800d208:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d20c:	b943      	cbnz	r3, 800d220 <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800d20e:	4b07      	ldr	r3, [pc, #28]	; (800d22c <LoRaMacIsBusy+0x30>)
 800d210:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d214:	2b01      	cmp	r3, #1
 800d216:	d005      	beq.n	800d224 <LoRaMacIsBusy+0x28>
    return true;
 800d218:	2001      	movs	r0, #1
 800d21a:	4770      	bx	lr
        return true;
 800d21c:	2001      	movs	r0, #1
 800d21e:	4770      	bx	lr
    return true;
 800d220:	2001      	movs	r0, #1
 800d222:	4770      	bx	lr
        return false;
 800d224:	2000      	movs	r0, #0
}
 800d226:	4770      	bx	lr
 800d228:	200034e4 	.word	0x200034e4
 800d22c:	200034e8 	.word	0x200034e8

0800d230 <LoRaMacProcess>:
{
 800d230:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800d232:	f7ff f81d 	bl	800c270 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800d236:	f001 f974 	bl	800e522 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800d23a:	4b20      	ldr	r3, [pc, #128]	; (800d2bc <LoRaMacProcess+0x8c>)
 800d23c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800d240:	f013 0f20 	tst.w	r3, #32
 800d244:	d10d      	bne.n	800d262 <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800d246:	f7fd fed3 	bl	800aff0 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800d24a:	4b1c      	ldr	r3, [pc, #112]	; (800d2bc <LoRaMacProcess+0x8c>)
 800d24c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800d250:	2b02      	cmp	r3, #2
 800d252:	d024      	beq.n	800d29e <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800d254:	4b19      	ldr	r3, [pc, #100]	; (800d2bc <LoRaMacProcess+0x8c>)
 800d256:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800d25a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d25e:	d121      	bne.n	800d2a4 <LoRaMacProcess+0x74>
}
 800d260:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800d262:	2000      	movs	r0, #0
 800d264:	f7fd febe 	bl	800afe4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800d268:	f7fd fefa 	bl	800b060 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800d26c:	f7fd ffd2 	bl	800b214 <IsRequestPending>
 800d270:	b110      	cbz	r0, 800d278 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800d272:	f7fe f8b9 	bl	800b3e8 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800d276:	b918      	cbnz	r0, 800d280 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800d278:	f7ff f83c 	bl	800c2f4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800d27c:	f7ff fa5a 	bl	800c734 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800d280:	f7ff fa94 	bl	800c7ac <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800d284:	f7ff fadc 	bl	800c840 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d288:	2001      	movs	r0, #1
 800d28a:	f7fd feab 	bl	800afe4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800d28e:	4a0b      	ldr	r2, [pc, #44]	; (800d2bc <LoRaMacProcess+0x8c>)
 800d290:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800d294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d298:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800d29c:	e7d3      	b.n	800d246 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800d29e:	f7ff fae1 	bl	800c864 <OpenContinuousRxCWindow>
 800d2a2:	e7d7      	b.n	800d254 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800d2a4:	4b05      	ldr	r3, [pc, #20]	; (800d2bc <LoRaMacProcess+0x8c>)
 800d2a6:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800d2aa:	f36f 1286 	bfc	r2, #6, #1
 800d2ae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800d2b2:	4803      	ldr	r0, [pc, #12]	; (800d2c0 <LoRaMacProcess+0x90>)
 800d2b4:	f7ff fb86 	bl	800c9c4 <LoRaMacHandleNvm>
}
 800d2b8:	e7d2      	b.n	800d260 <LoRaMacProcess+0x30>
 800d2ba:	bf00      	nop
 800d2bc:	200034e8 	.word	0x200034e8
 800d2c0:	20008000 	.word	0x20008000

0800d2c4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800d2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c8:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	f000 81a4 	beq.w	800d618 <LoRaMacInitialization+0x354>
 800d2d0:	460f      	mov	r7, r1
 800d2d2:	4691      	mov	r9, r2
 800d2d4:	4680      	mov	r8, r0
 800d2d6:	2900      	cmp	r1, #0
 800d2d8:	f000 81a0 	beq.w	800d61c <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d2dc:	6803      	ldr	r3, [r0, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 819e 	beq.w	800d620 <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 800d2e4:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 819c 	beq.w	800d624 <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d2ec:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 819a 	beq.w	800d628 <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 800d2f4:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f000 8198 	beq.w	800d62c <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	f002 f8cb 	bl	800f498 <RegionIsActive>
 800d302:	2800      	cmp	r0, #0
 800d304:	f000 8194 	beq.w	800d630 <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800d308:	4640      	mov	r0, r8
 800d30a:	f001 fac9 	bl	800e8a0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800d30e:	4ccc      	ldr	r4, [pc, #816]	; (800d640 <LoRaMacInitialization+0x37c>)
 800d310:	f240 528c 	movw	r2, #1420	; 0x58c
 800d314:	2100      	movs	r1, #0
 800d316:	4620      	mov	r0, r4
 800d318:	f005 f973 	bl	8012602 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800d31c:	4dc9      	ldr	r5, [pc, #804]	; (800d644 <LoRaMacInitialization+0x380>)
 800d31e:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800d322:	2100      	movs	r1, #0
 800d324:	4628      	mov	r0, r5
 800d326:	f005 f96c 	bl	8012602 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800d32a:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800d32e:	2600      	movs	r6, #0
 800d330:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800d334:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800d338:	4bc3      	ldr	r3, [pc, #780]	; (800d648 <LoRaMacInitialization+0x384>)
 800d33a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800d33e:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800d342:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800d346:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800d348:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800d34c:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800d34e:	4bbf      	ldr	r3, [pc, #764]	; (800d64c <LoRaMacInitialization+0x388>)
 800d350:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d352:	a905      	add	r1, sp, #20
 800d354:	4648      	mov	r0, r9
 800d356:	f002 f8cf 	bl	800f4f8 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d35a:	230f      	movs	r3, #15
 800d35c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d360:	a90a      	add	r1, sp, #40	; 0x28
 800d362:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d366:	f002 f8a1 	bl	800f4ac <RegionGetPhyParam>
 800d36a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800d36c:	1b80      	subs	r0, r0, r6
 800d36e:	bf18      	it	ne
 800d370:	2001      	movne	r0, #1
 800d372:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800d376:	f04f 0a0a 	mov.w	sl, #10
 800d37a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d37e:	a90a      	add	r1, sp, #40	; 0x28
 800d380:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d384:	f002 f892 	bl	800f4ac <RegionGetPhyParam>
 800d388:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800d38a:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800d38e:	f04f 0906 	mov.w	r9, #6
 800d392:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d396:	a90a      	add	r1, sp, #40	; 0x28
 800d398:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d39c:	f002 f886 	bl	800f4ac <RegionGetPhyParam>
 800d3a0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800d3a2:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800d3a6:	2310      	movs	r3, #16
 800d3a8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d3ac:	a90a      	add	r1, sp, #40	; 0x28
 800d3ae:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d3b2:	f002 f87b 	bl	800f4ac <RegionGetPhyParam>
 800d3b6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800d3b8:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800d3bc:	2311      	movs	r3, #17
 800d3be:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d3c2:	a90a      	add	r1, sp, #40	; 0x28
 800d3c4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d3c8:	f002 f870 	bl	800f4ac <RegionGetPhyParam>
 800d3cc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800d3ce:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800d3d2:	2312      	movs	r3, #18
 800d3d4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d3d8:	a90a      	add	r1, sp, #40	; 0x28
 800d3da:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d3de:	f002 f865 	bl	800f4ac <RegionGetPhyParam>
 800d3e2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800d3e4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800d3e8:	2313      	movs	r3, #19
 800d3ea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d3ee:	a90a      	add	r1, sp, #40	; 0x28
 800d3f0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d3f4:	f002 f85a 	bl	800f4ac <RegionGetPhyParam>
 800d3f8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800d3fa:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800d3fe:	2314      	movs	r3, #20
 800d400:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d404:	a90a      	add	r1, sp, #40	; 0x28
 800d406:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d40a:	f002 f84f 	bl	800f4ac <RegionGetPhyParam>
 800d40e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800d410:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800d414:	2316      	movs	r3, #22
 800d416:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d41a:	a90a      	add	r1, sp, #40	; 0x28
 800d41c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d420:	f002 f844 	bl	800f4ac <RegionGetPhyParam>
 800d424:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800d426:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800d42a:	2317      	movs	r3, #23
 800d42c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d430:	a90a      	add	r1, sp, #40	; 0x28
 800d432:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d436:	f002 f839 	bl	800f4ac <RegionGetPhyParam>
 800d43a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800d43c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800d440:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800d444:	2318      	movs	r3, #24
 800d446:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d44a:	a90a      	add	r1, sp, #40	; 0x28
 800d44c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d450:	f002 f82c 	bl	800f4ac <RegionGetPhyParam>
 800d454:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800d456:	b2c0      	uxtb	r0, r0
 800d458:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800d45c:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800d460:	231d      	movs	r3, #29
 800d462:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d466:	a90a      	add	r1, sp, #40	; 0x28
 800d468:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d46c:	f002 f81e 	bl	800f4ac <RegionGetPhyParam>
 800d470:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800d472:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800d476:	231e      	movs	r3, #30
 800d478:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d47c:	a90a      	add	r1, sp, #40	; 0x28
 800d47e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d482:	f002 f813 	bl	800f4ac <RegionGetPhyParam>
 800d486:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800d488:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800d48c:	231f      	movs	r3, #31
 800d48e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d492:	a90a      	add	r1, sp, #40	; 0x28
 800d494:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d498:	f002 f808 	bl	800f4ac <RegionGetPhyParam>
 800d49c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800d49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800d4a4:	2320      	movs	r3, #32
 800d4a6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d4aa:	a90a      	add	r1, sp, #40	; 0x28
 800d4ac:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d4b0:	f001 fffc 	bl	800f4ac <RegionGetPhyParam>
 800d4b4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800d4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4b8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800d4bc:	230b      	movs	r3, #11
 800d4be:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d4c2:	a90a      	add	r1, sp, #40	; 0x28
 800d4c4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d4c8:	f001 fff0 	bl	800f4ac <RegionGetPhyParam>
 800d4cc:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800d4ce:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800d4d2:	230c      	movs	r3, #12
 800d4d4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d4d8:	a90a      	add	r1, sp, #40	; 0x28
 800d4da:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d4de:	f001 ffe5 	bl	800f4ac <RegionGetPhyParam>
 800d4e2:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800d4e4:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800d4e8:	f04f 0b01 	mov.w	fp, #1
 800d4ec:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800d4f0:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800d4f4:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800d4f8:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800d4fc:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800d500:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d504:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800d506:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800d50a:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800d50c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800d510:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800d512:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800d516:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800d518:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800d51c:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800d51e:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800d522:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800d526:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 800d52a:	f7ff fbaf 	bl	800cc8c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800d52e:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800d532:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800d536:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 800d53a:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800d53e:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d540:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800d542:	9600      	str	r6, [sp, #0]
 800d544:	4b42      	ldr	r3, [pc, #264]	; (800d650 <LoRaMacInitialization+0x38c>)
 800d546:	4632      	mov	r2, r6
 800d548:	f04f 31ff 	mov.w	r1, #4294967295
 800d54c:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800d550:	f007 f902 	bl	8014758 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800d554:	9600      	str	r6, [sp, #0]
 800d556:	4b3f      	ldr	r3, [pc, #252]	; (800d654 <LoRaMacInitialization+0x390>)
 800d558:	4632      	mov	r2, r6
 800d55a:	f04f 31ff 	mov.w	r1, #4294967295
 800d55e:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800d562:	f007 f8f9 	bl	8014758 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800d566:	9600      	str	r6, [sp, #0]
 800d568:	4b3b      	ldr	r3, [pc, #236]	; (800d658 <LoRaMacInitialization+0x394>)
 800d56a:	4632      	mov	r2, r6
 800d56c:	f04f 31ff 	mov.w	r1, #4294967295
 800d570:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800d574:	f007 f8f0 	bl	8014758 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800d578:	9600      	str	r6, [sp, #0]
 800d57a:	4b38      	ldr	r3, [pc, #224]	; (800d65c <LoRaMacInitialization+0x398>)
 800d57c:	4632      	mov	r2, r6
 800d57e:	f04f 31ff 	mov.w	r1, #4294967295
 800d582:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800d586:	f007 f8e7 	bl	8014758 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800d58a:	f10d 0808 	add.w	r8, sp, #8
 800d58e:	4640      	mov	r0, r8
 800d590:	f007 f874 	bl	801467c <SysTimeGetMcuTime>
 800d594:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800d598:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d59c:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800d5a0:	4b2f      	ldr	r3, [pc, #188]	; (800d660 <LoRaMacInitialization+0x39c>)
 800d5a2:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800d5a4:	4b2f      	ldr	r3, [pc, #188]	; (800d664 <LoRaMacInitialization+0x3a0>)
 800d5a6:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800d5aa:	4b2f      	ldr	r3, [pc, #188]	; (800d668 <LoRaMacInitialization+0x3a4>)
 800d5ac:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800d5b0:	4b2e      	ldr	r3, [pc, #184]	; (800d66c <LoRaMacInitialization+0x3a8>)
 800d5b2:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800d5b6:	4b2e      	ldr	r3, [pc, #184]	; (800d670 <LoRaMacInitialization+0x3ac>)
 800d5b8:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800d5bc:	4b2d      	ldr	r3, [pc, #180]	; (800d674 <LoRaMacInitialization+0x3b0>)
 800d5be:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800d5c2:	4b2d      	ldr	r3, [pc, #180]	; (800d678 <LoRaMacInitialization+0x3b4>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800d5ca:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800d5cc:	68b9      	ldr	r1, [r7, #8]
 800d5ce:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800d5d2:	f004 fd59 	bl	8012088 <SecureElementInit>
 800d5d6:	bb80      	cbnz	r0, 800d63a <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f001 fbf1 	bl	800edc0 <LoRaMacCryptoInit>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d14c      	bne.n	800d67c <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800d5e2:	f001 f823 	bl	800e62c <LoRaMacCommandsInit>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d14a      	bne.n	800d680 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800d5ea:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800d5ee:	f001 fc39 	bl	800ee64 <LoRaMacCryptoSetMulticastReference>
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d145      	bne.n	800d684 <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800d5f8:	4d1f      	ldr	r5, [pc, #124]	; (800d678 <LoRaMacInitialization+0x3b4>)
 800d5fa:	696b      	ldr	r3, [r5, #20]
 800d5fc:	4798      	blx	r3
 800d5fe:	f004 ffd5 	bl	80125ac <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800d602:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800d604:	4a0e      	ldr	r2, [pc, #56]	; (800d640 <LoRaMacInitialization+0x37c>)
 800d606:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800d60a:	4798      	blx	r3
    Radio.Sleep( );
 800d60c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d60e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d610:	4658      	mov	r0, fp
 800d612:	f7fd fce7 	bl	800afe4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800d616:	e00c      	b.n	800d632 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d618:	2403      	movs	r4, #3
 800d61a:	e00a      	b.n	800d632 <LoRaMacInitialization+0x36e>
 800d61c:	2403      	movs	r4, #3
 800d61e:	e008      	b.n	800d632 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d620:	2403      	movs	r4, #3
 800d622:	e006      	b.n	800d632 <LoRaMacInitialization+0x36e>
 800d624:	2403      	movs	r4, #3
 800d626:	e004      	b.n	800d632 <LoRaMacInitialization+0x36e>
 800d628:	2403      	movs	r4, #3
 800d62a:	e002      	b.n	800d632 <LoRaMacInitialization+0x36e>
 800d62c:	2403      	movs	r4, #3
 800d62e:	e000      	b.n	800d632 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800d630:	2409      	movs	r4, #9
}
 800d632:	4620      	mov	r0, r4
 800d634:	b00d      	add	sp, #52	; 0x34
 800d636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d63a:	2411      	movs	r4, #17
 800d63c:	e7f9      	b.n	800d632 <LoRaMacInitialization+0x36e>
 800d63e:	bf00      	nop
 800d640:	20008000 	.word	0x20008000
 800d644:	200034e8 	.word	0x200034e8
 800d648:	01000400 	.word	0x01000400
 800d64c:	20003a08 	.word	0x20003a08
 800d650:	0800c6d1 	.word	0x0800c6d1
 800d654:	0800c975 	.word	0x0800c975
 800d658:	0800c91d 	.word	0x0800c91d
 800d65c:	0800b37d 	.word	0x0800b37d
 800d660:	200034e4 	.word	0x200034e4
 800d664:	0800cc35 	.word	0x0800cc35
 800d668:	0800cbd5 	.word	0x0800cbd5
 800d66c:	0800af99 	.word	0x0800af99
 800d670:	0800cba1 	.word	0x0800cba1
 800d674:	0800cb6d 	.word	0x0800cb6d
 800d678:	08015d04 	.word	0x08015d04
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d67c:	2411      	movs	r4, #17
 800d67e:	e7d8      	b.n	800d632 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d680:	2413      	movs	r4, #19
 800d682:	e7d6      	b.n	800d632 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d684:	2411      	movs	r4, #17
 800d686:	e7d4      	b.n	800d632 <LoRaMacInitialization+0x36e>

0800d688 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800d688:	2000      	movs	r0, #0
 800d68a:	4b02      	ldr	r3, [pc, #8]	; (800d694 <LoRaMacStart+0xc>)
 800d68c:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	200034e8 	.word	0x200034e8

0800d698 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800d698:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800d69a:	f7ff fdaf 	bl	800d1fc <LoRaMacIsBusy>
 800d69e:	b130      	cbz	r0, 800d6ae <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800d6a0:	4b06      	ldr	r3, [pc, #24]	; (800d6bc <LoRaMacStop+0x24>)
 800d6a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d006      	beq.n	800d6b8 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800d6aa:	2001      	movs	r0, #1
}
 800d6ac:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800d6ae:	4b03      	ldr	r3, [pc, #12]	; (800d6bc <LoRaMacStop+0x24>)
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800d6b6:	e7f9      	b.n	800d6ac <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	e7f7      	b.n	800d6ac <LoRaMacStop+0x14>
 800d6bc:	200034e8 	.word	0x200034e8

0800d6c0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800d6c0:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800d6c2:	4c14      	ldr	r4, [pc, #80]	; (800d714 <LoRaMacHalt+0x54>)
 800d6c4:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800d6c8:	f007 f8a4 	bl	8014814 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800d6cc:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800d6d0:	f007 f8a0 	bl	8014814 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d6d4:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800d6d8:	f007 f89c 	bl	8014814 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800d6dc:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800d6e0:	f007 f898 	bl	8014814 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800d6e4:	f000 ff0a 	bl	800e4fc <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800d6e8:	4b0b      	ldr	r3, [pc, #44]	; (800d718 <LoRaMacHalt+0x58>)
 800d6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ec:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800d6ee:	2500      	movs	r5, #0
 800d6f0:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800d6f4:	4e09      	ldr	r6, [pc, #36]	; (800d71c <LoRaMacHalt+0x5c>)
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f7ff f964 	bl	800c9c4 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800d6fc:	f240 528c 	movw	r2, #1420	; 0x58c
 800d700:	4631      	mov	r1, r6
 800d702:	4807      	ldr	r0, [pc, #28]	; (800d720 <LoRaMacHalt+0x60>)
 800d704:	f004 ff65 	bl	80125d2 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800d708:	2301      	movs	r3, #1
 800d70a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800d70e:	4628      	mov	r0, r5
 800d710:	bd70      	pop	{r4, r5, r6, pc}
 800d712:	bf00      	nop
 800d714:	200034e8 	.word	0x200034e8
 800d718:	08015d04 	.word	0x08015d04
 800d71c:	20008000 	.word	0x20008000
 800d720:	2000858c 	.word	0x2000858c

0800d724 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800d724:	b530      	push	{r4, r5, lr}
 800d726:	b08b      	sub	sp, #44	; 0x2c
 800d728:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d72a:	4b32      	ldr	r3, [pc, #200]	; (800d7f4 <LoRaMacQueryTxPossible+0xd0>)
 800d72c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d72e:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d730:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800d734:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d738:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800d73c:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800d740:	4b2d      	ldr	r3, [pc, #180]	; (800d7f8 <LoRaMacQueryTxPossible+0xd4>)
 800d742:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d746:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800d74a:	2300      	movs	r3, #0
 800d74c:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800d74e:	2900      	cmp	r1, #0
 800d750:	d049      	beq.n	800d7e6 <LoRaMacQueryTxPossible+0xc2>
 800d752:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800d754:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800d758:	4b26      	ldr	r3, [pc, #152]	; (800d7f4 <LoRaMacQueryTxPossible+0xd0>)
 800d75a:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800d75e:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d762:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800d764:	4924      	ldr	r1, [pc, #144]	; (800d7f8 <LoRaMacQueryTxPossible+0xd4>)
 800d766:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 800d76a:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800d76e:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 800d772:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d776:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800d77a:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d77e:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800d782:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800d786:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d78a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d78e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800d792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d796:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800d79a:	ab04      	add	r3, sp, #16
 800d79c:	9300      	str	r3, [sp, #0]
 800d79e:	f10d 030d 	add.w	r3, sp, #13
 800d7a2:	f10d 020e 	add.w	r2, sp, #14
 800d7a6:	f10d 010f 	add.w	r1, sp, #15
 800d7aa:	a805      	add	r0, sp, #20
 800d7ac:	f000 fe18 	bl	800e3e0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800d7b0:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800d7b4:	f7fd fd3a 	bl	800b22c <GetMaxAppPayloadWithoutFOptsLength>
 800d7b8:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d7ba:	a802      	add	r0, sp, #8
 800d7bc:	f000 ffba 	bl	800e734 <LoRaMacCommandsGetSizeSerializedCmds>
 800d7c0:	b998      	cbnz	r0, 800d7ea <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800d7c2:	9b02      	ldr	r3, [sp, #8]
 800d7c4:	2b0f      	cmp	r3, #15
 800d7c6:	d80a      	bhi.n	800d7de <LoRaMacQueryTxPossible+0xba>
 800d7c8:	786a      	ldrb	r2, [r5, #1]
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d807      	bhi.n	800d7de <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800d7d2:	9b02      	ldr	r3, [sp, #8]
 800d7d4:	441c      	add	r4, r3
 800d7d6:	42a2      	cmp	r2, r4
 800d7d8:	d309      	bcc.n	800d7ee <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800d7da:	b00b      	add	sp, #44	; 0x2c
 800d7dc:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800d7e2:	2008      	movs	r0, #8
 800d7e4:	e7f9      	b.n	800d7da <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d7e6:	2003      	movs	r0, #3
 800d7e8:	e7f7      	b.n	800d7da <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d7ea:	2013      	movs	r0, #19
 800d7ec:	e7f5      	b.n	800d7da <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800d7ee:	2008      	movs	r0, #8
 800d7f0:	e7f3      	b.n	800d7da <LoRaMacQueryTxPossible+0xb6>
 800d7f2:	bf00      	nop
 800d7f4:	20008000 	.word	0x20008000
 800d7f8:	200034e8 	.word	0x200034e8

0800d7fc <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	f000 813d 	beq.w	800da7c <LoRaMacMibGetRequestConfirm+0x280>
{
 800d802:	b510      	push	{r4, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800d808:	7800      	ldrb	r0, [r0, #0]
 800d80a:	2839      	cmp	r0, #57	; 0x39
 800d80c:	f200 8132 	bhi.w	800da74 <LoRaMacMibGetRequestConfirm+0x278>
 800d810:	e8df f010 	tbh	[pc, r0, lsl #1]
 800d814:	0040003a 	.word	0x0040003a
 800d818:	004b0046 	.word	0x004b0046
 800d81c:	00560050 	.word	0x00560050
 800d820:	0130005c 	.word	0x0130005c
 800d824:	01300130 	.word	0x01300130
 800d828:	01300130 	.word	0x01300130
 800d82c:	01300130 	.word	0x01300130
 800d830:	00620130 	.word	0x00620130
 800d834:	006e0068 	.word	0x006e0068
 800d838:	0083007b 	.word	0x0083007b
 800d83c:	0093008b 	.word	0x0093008b
 800d840:	009b00a8 	.word	0x009b00a8
 800d844:	00bb00b5 	.word	0x00bb00b5
 800d848:	00c500c0 	.word	0x00c500c0
 800d84c:	00cf00ca 	.word	0x00cf00ca
 800d850:	00e500d4 	.word	0x00e500d4
 800d854:	00f700eb 	.word	0x00f700eb
 800d858:	00fd00f1 	.word	0x00fd00f1
 800d85c:	01080102 	.word	0x01080102
 800d860:	010d0115 	.word	0x010d0115
 800d864:	01300111 	.word	0x01300111
 800d868:	0130011b 	.word	0x0130011b
 800d86c:	01300130 	.word	0x01300130
 800d870:	01300130 	.word	0x01300130
 800d874:	01300130 	.word	0x01300130
 800d878:	01300130 	.word	0x01300130
 800d87c:	01300130 	.word	0x01300130
 800d880:	01300130 	.word	0x01300130
 800d884:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800d888:	4b7d      	ldr	r3, [pc, #500]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d88a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d88e:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800d890:	b004      	add	sp, #16
 800d892:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d894:	4b7a      	ldr	r3, [pc, #488]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d896:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800d89a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d89c:	2000      	movs	r0, #0
            break;
 800d89e:	e7f7      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800d8a0:	f004 fe50 	bl	8012544 <SecureElementGetDevEui>
 800d8a4:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8a6:	2000      	movs	r0, #0
            break;
 800d8a8:	e7f2      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800d8aa:	f004 fe61 	bl	8012570 <SecureElementGetJoinEui>
 800d8ae:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8b0:	2000      	movs	r0, #0
            break;
 800d8b2:	e7ed      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800d8b4:	4b72      	ldr	r3, [pc, #456]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d8b6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800d8ba:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8bc:	2000      	movs	r0, #0
            break;
 800d8be:	e7e7      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800d8c0:	4b6f      	ldr	r3, [pc, #444]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d8c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d8c6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8c8:	2000      	movs	r0, #0
            break;
 800d8ca:	e7e1      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800d8cc:	4b6c      	ldr	r3, [pc, #432]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d8ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d8d2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8d4:	2000      	movs	r0, #0
            break;
 800d8d6:	e7db      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800d8d8:	4b69      	ldr	r3, [pc, #420]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d8da:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800d8de:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8e0:	2000      	movs	r0, #0
            break;
 800d8e2:	e7d5      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d8e4:	4b66      	ldr	r3, [pc, #408]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d8e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8ea:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8ec:	2000      	movs	r0, #0
            break;
 800d8ee:	e7cf      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 800d8f0:	231c      	movs	r3, #28
 800d8f2:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d8f6:	a902      	add	r1, sp, #8
 800d8f8:	4b61      	ldr	r3, [pc, #388]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d8fa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800d8fe:	f001 fdd5 	bl	800f4ac <RegionGetPhyParam>
 800d902:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800d904:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d906:	2000      	movs	r0, #0
            break;
 800d908:	e7c2      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800d90a:	3404      	adds	r4, #4
 800d90c:	4b5d      	ldr	r3, [pc, #372]	; (800da84 <LoRaMacMibGetRequestConfirm+0x288>)
 800d90e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d912:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d916:	2000      	movs	r0, #0
            break;
 800d918:	e7ba      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800d91a:	3404      	adds	r4, #4
 800d91c:	4b5a      	ldr	r3, [pc, #360]	; (800da88 <LoRaMacMibGetRequestConfirm+0x28c>)
 800d91e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d922:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d926:	2000      	movs	r0, #0
            break;
 800d928:	e7b2      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800d92a:	3404      	adds	r4, #4
 800d92c:	4b57      	ldr	r3, [pc, #348]	; (800da8c <LoRaMacMibGetRequestConfirm+0x290>)
 800d92e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d932:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d936:	2000      	movs	r0, #0
            break;
 800d938:	e7aa      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800d93a:	3404      	adds	r4, #4
 800d93c:	4b54      	ldr	r3, [pc, #336]	; (800da90 <LoRaMacMibGetRequestConfirm+0x294>)
 800d93e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d942:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d946:	2000      	movs	r0, #0
            break;
 800d948:	e7a2      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800d94a:	231a      	movs	r3, #26
 800d94c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d950:	a902      	add	r1, sp, #8
 800d952:	4b4b      	ldr	r3, [pc, #300]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d954:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800d958:	f001 fda8 	bl	800f4ac <RegionGetPhyParam>
 800d95c:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800d95e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d960:	2000      	movs	r0, #0
            break;
 800d962:	e795      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800d964:	2319      	movs	r3, #25
 800d966:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d96a:	a902      	add	r1, sp, #8
 800d96c:	4b44      	ldr	r3, [pc, #272]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d96e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800d972:	f001 fd9b 	bl	800f4ac <RegionGetPhyParam>
 800d976:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800d978:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d97a:	2000      	movs	r0, #0
            break;
 800d97c:	e788      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800d97e:	4b40      	ldr	r3, [pc, #256]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d980:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d984:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d986:	2000      	movs	r0, #0
            break;
 800d988:	e782      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800d98a:	4b3d      	ldr	r3, [pc, #244]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d98c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d98e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d990:	2000      	movs	r0, #0
            break;
 800d992:	e77d      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800d994:	4b3a      	ldr	r3, [pc, #232]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d998:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d99a:	2000      	movs	r0, #0
            break;
 800d99c:	e778      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800d99e:	4b38      	ldr	r3, [pc, #224]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9a2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9a4:	2000      	movs	r0, #0
            break;
 800d9a6:	e773      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800d9a8:	4b35      	ldr	r3, [pc, #212]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d9aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9ac:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9ae:	2000      	movs	r0, #0
            break;
 800d9b0:	e76e      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800d9b2:	4b33      	ldr	r3, [pc, #204]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d9b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9b6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9b8:	2000      	movs	r0, #0
            break;
 800d9ba:	e769      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800d9bc:	2302      	movs	r3, #2
 800d9be:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d9c2:	4b2f      	ldr	r3, [pc, #188]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d9c4:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d9c8:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d9cc:	a902      	add	r1, sp, #8
 800d9ce:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800d9d2:	f001 fd6b 	bl	800f4ac <RegionGetPhyParam>
 800d9d6:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800d9d8:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9da:	2000      	movs	r0, #0
            break;
 800d9dc:	e758      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d9de:	4b28      	ldr	r3, [pc, #160]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d9e0:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800d9e4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9e6:	2000      	movs	r0, #0
            break;
 800d9e8:	e752      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800d9ea:	4b25      	ldr	r3, [pc, #148]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d9ec:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800d9f0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9f2:	2000      	movs	r0, #0
            break;
 800d9f4:	e74c      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d9f6:	4b22      	ldr	r3, [pc, #136]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800d9f8:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800d9fc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9fe:	2000      	movs	r0, #0
            break;
 800da00:	e746      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800da02:	4b1f      	ldr	r3, [pc, #124]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800da04:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800da08:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da0a:	2000      	movs	r0, #0
            break;
 800da0c:	e740      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800da0e:	4b1c      	ldr	r3, [pc, #112]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800da10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da12:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da14:	2000      	movs	r0, #0
            break;
 800da16:	e73b      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800da18:	4b19      	ldr	r3, [pc, #100]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800da1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800da1e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da20:	2000      	movs	r0, #0
            break;
 800da22:	e735      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800da24:	4b16      	ldr	r3, [pc, #88]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800da26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da28:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da2a:	2000      	movs	r0, #0
            break;
 800da2c:	e730      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 800da2e:	4b14      	ldr	r3, [pc, #80]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800da30:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da32:	2000      	movs	r0, #0
            break;
 800da34:	e72c      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 800da36:	4b17      	ldr	r3, [pc, #92]	; (800da94 <LoRaMacMibGetRequestConfirm+0x298>)
 800da38:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da3a:	2000      	movs	r0, #0
            break;
 800da3c:	e728      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800da3e:	4b10      	ldr	r3, [pc, #64]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800da40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800da44:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da46:	2000      	movs	r0, #0
            break;
 800da48:	e722      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800da4a:	4b0d      	ldr	r3, [pc, #52]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800da4c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800da50:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800da52:	f001 fe53 	bl	800f6fc <RegionGetVersion>
 800da56:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da58:	2000      	movs	r0, #0
            break;
 800da5a:	e719      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800da5c:	4b08      	ldr	r3, [pc, #32]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800da5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da62:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da64:	2000      	movs	r0, #0
            break;
 800da66:	e713      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800da68:	4b05      	ldr	r3, [pc, #20]	; (800da80 <LoRaMacMibGetRequestConfirm+0x284>)
 800da6a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800da6e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da70:	2000      	movs	r0, #0
            break;
 800da72:	e70d      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800da74:	4620      	mov	r0, r4
 800da76:	f000 fd45 	bl	800e504 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800da7a:	e709      	b.n	800d890 <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800da7c:	2003      	movs	r0, #3
}
 800da7e:	4770      	bx	lr
 800da80:	20008000 	.word	0x20008000
 800da84:	20008064 	.word	0x20008064
 800da88:	200080a8 	.word	0x200080a8
 800da8c:	2000806c 	.word	0x2000806c
 800da90:	200080b0 	.word	0x200080b0
 800da94:	2000858c 	.word	0x2000858c

0800da98 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800da98:	2800      	cmp	r0, #0
 800da9a:	f000 8254 	beq.w	800df46 <LoRaMacMibSetRequestConfirm+0x4ae>
{
 800da9e:	b530      	push	{r4, r5, lr}
 800daa0:	b085      	sub	sp, #20
 800daa2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800daa4:	4ba3      	ldr	r3, [pc, #652]	; (800dd34 <LoRaMacMibSetRequestConfirm+0x29c>)
 800daa6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800daaa:	f013 0f02 	tst.w	r3, #2
 800daae:	f040 824c 	bne.w	800df4a <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800dab2:	7805      	ldrb	r5, [r0, #0]
 800dab4:	2d39      	cmp	r5, #57	; 0x39
 800dab6:	f200 8243 	bhi.w	800df40 <LoRaMacMibSetRequestConfirm+0x4a8>
 800daba:	e8df f015 	tbh	[pc, r5, lsl #1]
 800dabe:	003a      	.short	0x003a
 800dac0:	00500047 	.word	0x00500047
 800dac4:	005e0057 	.word	0x005e0057
 800dac8:	006a0064 	.word	0x006a0064
 800dacc:	007b0070 	.word	0x007b0070
 800dad0:	00910086 	.word	0x00910086
 800dad4:	00a7009c 	.word	0x00a7009c
 800dad8:	00bd00b2 	.word	0x00bd00b2
 800dadc:	00d400c9 	.word	0x00d400c9
 800dae0:	00da0241 	.word	0x00da0241
 800dae4:	011a0100 	.word	0x011a0100
 800dae8:	017d0153 	.word	0x017d0153
 800daec:	018d016d 	.word	0x018d016d
 800daf0:	019d0198 	.word	0x019d0198
 800daf4:	01a701a2 	.word	0x01a701a2
 800daf8:	024101ac 	.word	0x024101ac
 800dafc:	01c601b1 	.word	0x01c601b1
 800db00:	01df01f3 	.word	0x01df01f3
 800db04:	020e0207 	.word	0x020e0207
 800db08:	021b0216 	.word	0x021b0216
 800db0c:	02410221 	.word	0x02410221
 800db10:	02410224 	.word	0x02410224
 800db14:	02410241 	.word	0x02410241
 800db18:	02410241 	.word	0x02410241
 800db1c:	02410241 	.word	0x02410241
 800db20:	02410241 	.word	0x02410241
 800db24:	02410241 	.word	0x02410241
 800db28:	02410241 	.word	0x02410241
 800db2c:	02350241 	.word	0x02350241
 800db30:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800db32:	7900      	ldrb	r0, [r0, #4]
 800db34:	f7ff f95a 	bl	800cdec <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 800db38:	b930      	cbnz	r0, 800db48 <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800db3a:	4a7e      	ldr	r2, [pc, #504]	; (800dd34 <LoRaMacMibSetRequestConfirm+0x29c>)
 800db3c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800db40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db44:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800db48:	b005      	add	sp, #20
 800db4a:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800db4c:	7903      	ldrb	r3, [r0, #4]
 800db4e:	2b02      	cmp	r3, #2
 800db50:	f000 81fd 	beq.w	800df4e <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800db54:	4a78      	ldr	r2, [pc, #480]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800db56:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db5a:	2000      	movs	r0, #0
 800db5c:	e7ed      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800db5e:	6840      	ldr	r0, [r0, #4]
 800db60:	f004 fce2 	bl	8012528 <SecureElementSetDevEui>
 800db64:	2800      	cmp	r0, #0
 800db66:	d0e8      	beq.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800db68:	2003      	movs	r0, #3
 800db6a:	e7ed      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800db6c:	6840      	ldr	r0, [r0, #4]
 800db6e:	f004 fcef 	bl	8012550 <SecureElementSetJoinEui>
 800db72:	2800      	cmp	r0, #0
 800db74:	d0e1      	beq.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800db76:	4628      	mov	r0, r5
 800db78:	e7e6      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800db7a:	7902      	ldrb	r2, [r0, #4]
 800db7c:	4b6e      	ldr	r3, [pc, #440]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800db7e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db82:	2000      	movs	r0, #0
 800db84:	e7d9      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800db86:	6842      	ldr	r2, [r0, #4]
 800db88:	4b6b      	ldr	r3, [pc, #428]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800db8a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db8e:	2000      	movs	r0, #0
 800db90:	e7d3      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800db92:	6842      	ldr	r2, [r0, #4]
 800db94:	4b68      	ldr	r3, [pc, #416]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800db96:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db9a:	2000      	movs	r0, #0
 800db9c:	e7cd      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 800db9e:	6841      	ldr	r1, [r0, #4]
 800dba0:	2900      	cmp	r1, #0
 800dba2:	f000 81d6 	beq.w	800df52 <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800dba6:	2000      	movs	r0, #0
 800dba8:	f001 fa6e 	bl	800f088 <LoRaMacCryptoSetKey>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d0c4      	beq.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dbb0:	2011      	movs	r0, #17
 800dbb2:	e7c9      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 800dbb4:	6841      	ldr	r1, [r0, #4]
 800dbb6:	2900      	cmp	r1, #0
 800dbb8:	f000 81cd 	beq.w	800df56 <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800dbbc:	2001      	movs	r0, #1
 800dbbe:	f001 fa63 	bl	800f088 <LoRaMacCryptoSetKey>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d0b9      	beq.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dbc6:	2011      	movs	r0, #17
 800dbc8:	e7be      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 800dbca:	6841      	ldr	r1, [r0, #4]
 800dbcc:	2900      	cmp	r1, #0
 800dbce:	f000 81c4 	beq.w	800df5a <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800dbd2:	2002      	movs	r0, #2
 800dbd4:	f001 fa58 	bl	800f088 <LoRaMacCryptoSetKey>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d0ae      	beq.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dbdc:	2011      	movs	r0, #17
 800dbde:	e7b3      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 800dbe0:	6841      	ldr	r1, [r0, #4]
 800dbe2:	2900      	cmp	r1, #0
 800dbe4:	f000 81bb 	beq.w	800df5e <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800dbe8:	2003      	movs	r0, #3
 800dbea:	f001 fa4d 	bl	800f088 <LoRaMacCryptoSetKey>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d0a3      	beq.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dbf2:	2011      	movs	r0, #17
 800dbf4:	e7a8      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 800dbf6:	6841      	ldr	r1, [r0, #4]
 800dbf8:	2900      	cmp	r1, #0
 800dbfa:	f000 81b2 	beq.w	800df62 <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800dbfe:	207f      	movs	r0, #127	; 0x7f
 800dc00:	f001 fa42 	bl	800f088 <LoRaMacCryptoSetKey>
 800dc04:	2800      	cmp	r0, #0
 800dc06:	d098      	beq.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc08:	2011      	movs	r0, #17
 800dc0a:	e79d      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 800dc0c:	6841      	ldr	r1, [r0, #4]
 800dc0e:	2900      	cmp	r1, #0
 800dc10:	f000 81a9 	beq.w	800df66 <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800dc14:	2080      	movs	r0, #128	; 0x80
 800dc16:	f001 fa37 	bl	800f088 <LoRaMacCryptoSetKey>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d08d      	beq.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc1e:	2011      	movs	r0, #17
 800dc20:	e792      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800dc22:	6841      	ldr	r1, [r0, #4]
 800dc24:	2900      	cmp	r1, #0
 800dc26:	f000 81a0 	beq.w	800df6a <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800dc2a:	2081      	movs	r0, #129	; 0x81
 800dc2c:	f001 fa2c 	bl	800f088 <LoRaMacCryptoSetKey>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d082      	beq.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc34:	2011      	movs	r0, #17
 800dc36:	e787      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800dc38:	6841      	ldr	r1, [r0, #4]
 800dc3a:	2900      	cmp	r1, #0
 800dc3c:	f000 8197 	beq.w	800df6e <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800dc40:	2082      	movs	r0, #130	; 0x82
 800dc42:	f001 fa21 	bl	800f088 <LoRaMacCryptoSetKey>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	f43f af77 	beq.w	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc4c:	2011      	movs	r0, #17
 800dc4e:	e77b      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800dc50:	7900      	ldrb	r0, [r0, #4]
 800dc52:	4b39      	ldr	r3, [pc, #228]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800dc54:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800dc58:	4c38      	ldr	r4, [pc, #224]	; (800dd3c <LoRaMacMibSetRequestConfirm+0x2a4>)
 800dc5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc5c:	4798      	blx	r3
            Radio.Sleep( );
 800dc5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dc60:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc62:	2000      	movs	r0, #0
 800dc64:	e769      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800dc66:	7902      	ldrb	r2, [r0, #4]
 800dc68:	4b33      	ldr	r3, [pc, #204]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800dc6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc6e:	2000      	movs	r0, #0
 800dc70:	e763      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800dc72:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800dc76:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dc7a:	4b2f      	ldr	r3, [pc, #188]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800dc7c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800dc80:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800dc84:	2207      	movs	r2, #7
 800dc86:	a901      	add	r1, sp, #4
 800dc88:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dc8c:	f001 fc42 	bl	800f514 <RegionVerify>
 800dc90:	b908      	cbnz	r0, 800dc96 <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dc92:	2003      	movs	r0, #3
 800dc94:	e750      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800dc96:	6863      	ldr	r3, [r4, #4]
 800dc98:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	a901      	add	r1, sp, #4
 800dc9e:	4b26      	ldr	r3, [pc, #152]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800dca0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dca4:	f001 fc36 	bl	800f514 <RegionVerify>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	f000 8162 	beq.w	800df72 <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800dcae:	4b24      	ldr	r3, [pc, #144]	; (800dd40 <LoRaMacMibSetRequestConfirm+0x2a8>)
 800dcb0:	3404      	adds	r4, #4
 800dcb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dcb6:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dcba:	2000      	movs	r0, #0
 800dcbc:	e73c      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800dcbe:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800dcc2:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dcc6:	4b1c      	ldr	r3, [pc, #112]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800dcc8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800dccc:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800dcd0:	2207      	movs	r2, #7
 800dcd2:	a901      	add	r1, sp, #4
 800dcd4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dcd8:	f001 fc1c 	bl	800f514 <RegionVerify>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	f000 814a 	beq.w	800df76 <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800dce2:	4b18      	ldr	r3, [pc, #96]	; (800dd44 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800dce4:	3404      	adds	r4, #4
 800dce6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dcea:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dcee:	2000      	movs	r0, #0
 800dcf0:	e722      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800dcf2:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800dcf6:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dcfa:	4b0f      	ldr	r3, [pc, #60]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800dcfc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800dd00:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800dd04:	2207      	movs	r2, #7
 800dd06:	a901      	add	r1, sp, #4
 800dd08:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dd0c:	f001 fc02 	bl	800f514 <RegionVerify>
 800dd10:	2800      	cmp	r0, #0
 800dd12:	f000 8132 	beq.w	800df7a <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800dd16:	4b08      	ldr	r3, [pc, #32]	; (800dd38 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800dd18:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800dd1c:	3404      	adds	r4, #4
 800dd1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dd22:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800dd26:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d00c      	beq.n	800dd48 <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd2e:	2000      	movs	r0, #0
 800dd30:	e702      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
 800dd32:	bf00      	nop
 800dd34:	200034e8 	.word	0x200034e8
 800dd38:	20008000 	.word	0x20008000
 800dd3c:	08015d04 	.word	0x08015d04
 800dd40:	20008064 	.word	0x20008064
 800dd44:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800dd48:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800dd4c:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 800dd50:	2800      	cmp	r0, #0
 800dd52:	f43f aef1 	beq.w	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 800dd56:	4b90      	ldr	r3, [pc, #576]	; (800df98 <LoRaMacMibSetRequestConfirm+0x500>)
 800dd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5a:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800dd5c:	f7fe fd82 	bl	800c864 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd60:	2000      	movs	r0, #0
 800dd62:	e6e9      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800dd64:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800dd68:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dd6c:	4b8b      	ldr	r3, [pc, #556]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800dd6e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800dd72:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800dd76:	2207      	movs	r2, #7
 800dd78:	a901      	add	r1, sp, #4
 800dd7a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dd7e:	f001 fbc9 	bl	800f514 <RegionVerify>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	f000 80fb 	beq.w	800df7e <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800dd88:	4b85      	ldr	r3, [pc, #532]	; (800dfa0 <LoRaMacMibSetRequestConfirm+0x508>)
 800dd8a:	3404      	adds	r4, #4
 800dd8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dd90:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dd94:	2000      	movs	r0, #0
 800dd96:	e6cf      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800dd98:	6843      	ldr	r3, [r0, #4]
 800dd9a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800dda2:	a902      	add	r1, sp, #8
 800dda4:	4b7d      	ldr	r3, [pc, #500]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800dda6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ddaa:	f001 fbd1 	bl	800f550 <RegionChanMaskSet>
 800ddae:	b108      	cbz	r0, 800ddb4 <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	e6c1      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ddb4:	2003      	movs	r0, #3
 800ddb6:	e6c7      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ddb8:	6843      	ldr	r3, [r0, #4]
 800ddba:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ddc2:	a902      	add	r1, sp, #8
 800ddc4:	4b75      	ldr	r3, [pc, #468]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800ddc6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ddca:	f001 fbc1 	bl	800f550 <RegionChanMaskSet>
 800ddce:	b108      	cbz	r0, 800ddd4 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	e6b1      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ddd4:	2003      	movs	r0, #3
 800ddd6:	e6b7      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ddd8:	7902      	ldrb	r2, [r0, #4]
 800ddda:	1e53      	subs	r3, r2, #1
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	2b0e      	cmp	r3, #14
 800dde0:	f200 80cf 	bhi.w	800df82 <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800dde4:	4b6d      	ldr	r3, [pc, #436]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800dde6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ddea:	2000      	movs	r0, #0
 800ddec:	e6a4      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ddee:	6842      	ldr	r2, [r0, #4]
 800ddf0:	4b6a      	ldr	r3, [pc, #424]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800ddf2:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	e6a0      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ddf8:	6842      	ldr	r2, [r0, #4]
 800ddfa:	4b68      	ldr	r3, [pc, #416]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800ddfc:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ddfe:	2000      	movs	r0, #0
 800de00:	e69b      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800de02:	6842      	ldr	r2, [r0, #4]
 800de04:	4b65      	ldr	r3, [pc, #404]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800de06:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de08:	2000      	movs	r0, #0
 800de0a:	e696      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800de0c:	6842      	ldr	r2, [r0, #4]
 800de0e:	4b63      	ldr	r3, [pc, #396]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800de10:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de12:	2000      	movs	r0, #0
 800de14:	e691      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800de16:	6842      	ldr	r2, [r0, #4]
 800de18:	4b60      	ldr	r3, [pc, #384]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800de1a:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de1c:	2000      	movs	r0, #0
 800de1e:	e68c      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800de20:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800de24:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800de28:	2206      	movs	r2, #6
 800de2a:	a901      	add	r1, sp, #4
 800de2c:	4b5b      	ldr	r3, [pc, #364]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800de2e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800de32:	f001 fb6f 	bl	800f514 <RegionVerify>
 800de36:	2800      	cmp	r0, #0
 800de38:	f000 80a5 	beq.w	800df86 <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800de3c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800de40:	4b56      	ldr	r3, [pc, #344]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800de42:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de46:	2000      	movs	r0, #0
 800de48:	e676      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800de4a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800de4e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800de52:	4b52      	ldr	r3, [pc, #328]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800de54:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800de58:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800de5c:	2205      	movs	r2, #5
 800de5e:	a901      	add	r1, sp, #4
 800de60:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800de64:	f001 fb56 	bl	800f514 <RegionVerify>
 800de68:	2800      	cmp	r0, #0
 800de6a:	f000 808e 	beq.w	800df8a <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800de6e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800de72:	4b4a      	ldr	r3, [pc, #296]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800de74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de78:	2000      	movs	r0, #0
 800de7a:	e65d      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800de7c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800de80:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800de84:	220a      	movs	r2, #10
 800de86:	a901      	add	r1, sp, #4
 800de88:	4b44      	ldr	r3, [pc, #272]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800de8a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800de8e:	f001 fb41 	bl	800f514 <RegionVerify>
 800de92:	2800      	cmp	r0, #0
 800de94:	d07b      	beq.n	800df8e <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800de96:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800de9a:	4b40      	ldr	r3, [pc, #256]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800de9c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dea0:	2000      	movs	r0, #0
 800dea2:	e649      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800dea4:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800dea8:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800deac:	2209      	movs	r2, #9
 800deae:	a901      	add	r1, sp, #4
 800deb0:	4b3a      	ldr	r3, [pc, #232]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800deb2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800deb6:	f001 fb2d 	bl	800f514 <RegionVerify>
 800deba:	2800      	cmp	r0, #0
 800debc:	d069      	beq.n	800df92 <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800debe:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800dec2:	4b36      	ldr	r3, [pc, #216]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800dec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dec8:	2000      	movs	r0, #0
 800deca:	e635      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800decc:	6842      	ldr	r2, [r0, #4]
 800dece:	4b33      	ldr	r3, [pc, #204]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800ded0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ded4:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ded6:	2000      	movs	r0, #0
 800ded8:	e62f      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800deda:	7902      	ldrb	r2, [r0, #4]
 800dedc:	4b2f      	ldr	r3, [pc, #188]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800dede:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800dee2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dee6:	2000      	movs	r0, #0
 800dee8:	e627      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800deea:	6842      	ldr	r2, [r0, #4]
 800deec:	4b2b      	ldr	r3, [pc, #172]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800deee:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800def0:	2000      	movs	r0, #0
 800def2:	e622      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800def4:	6842      	ldr	r2, [r0, #4]
 800def6:	4b29      	ldr	r3, [pc, #164]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800def8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800defc:	2000      	movs	r0, #0
 800defe:	e61c      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 800df00:	f7fe fdc4 	bl	800ca8c <RestoreNvmData>
            break;
 800df04:	e618      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800df06:	7983      	ldrb	r3, [r0, #6]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d901      	bls.n	800df10 <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df0c:	2003      	movs	r0, #3
 800df0e:	e61b      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800df10:	6842      	ldr	r2, [r0, #4]
 800df12:	4b22      	ldr	r3, [pc, #136]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800df14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800df18:	6840      	ldr	r0, [r0, #4]
 800df1a:	f000 ff69 	bl	800edf0 <LoRaMacCryptoSetLrWanVersion>
 800df1e:	2800      	cmp	r0, #0
 800df20:	f43f ae0a 	beq.w	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800df24:	2011      	movs	r0, #17
 800df26:	e60f      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800df28:	6842      	ldr	r2, [r0, #4]
 800df2a:	4b1c      	ldr	r3, [pc, #112]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800df2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df30:	2000      	movs	r0, #0
 800df32:	e602      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800df34:	7902      	ldrb	r2, [r0, #4]
 800df36:	4b19      	ldr	r3, [pc, #100]	; (800df9c <LoRaMacMibSetRequestConfirm+0x504>)
 800df38:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df3c:	2000      	movs	r0, #0
 800df3e:	e5fc      	b.n	800db3a <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800df40:	f000 fae2 	bl	800e508 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800df44:	e5f8      	b.n	800db38 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800df46:	2003      	movs	r0, #3
}
 800df48:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800df4a:	2001      	movs	r0, #1
 800df4c:	e5fc      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df4e:	2003      	movs	r0, #3
 800df50:	e5fa      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df52:	2003      	movs	r0, #3
 800df54:	e5f8      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df56:	2003      	movs	r0, #3
 800df58:	e5f6      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df5a:	2003      	movs	r0, #3
 800df5c:	e5f4      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df5e:	2003      	movs	r0, #3
 800df60:	e5f2      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df62:	2003      	movs	r0, #3
 800df64:	e5f0      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df66:	2003      	movs	r0, #3
 800df68:	e5ee      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df6a:	2003      	movs	r0, #3
 800df6c:	e5ec      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df6e:	2003      	movs	r0, #3
 800df70:	e5ea      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df72:	2003      	movs	r0, #3
 800df74:	e5e8      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df76:	2003      	movs	r0, #3
 800df78:	e5e6      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df7a:	2003      	movs	r0, #3
 800df7c:	e5e4      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df7e:	2003      	movs	r0, #3
 800df80:	e5e2      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df82:	2003      	movs	r0, #3
 800df84:	e5e0      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df86:	2003      	movs	r0, #3
 800df88:	e5de      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df8a:	2003      	movs	r0, #3
 800df8c:	e5dc      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df8e:	2003      	movs	r0, #3
 800df90:	e5da      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df92:	2003      	movs	r0, #3
 800df94:	e5d8      	b.n	800db48 <LoRaMacMibSetRequestConfirm+0xb0>
 800df96:	bf00      	nop
 800df98:	08015d04 	.word	0x08015d04
 800df9c:	20008000 	.word	0x20008000
 800dfa0:	200080b0 	.word	0x200080b0

0800dfa4 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800dfa4:	b570      	push	{r4, r5, r6, lr}
 800dfa6:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	f000 80ea 	beq.w	800e188 <LoRaMacMlmeRequest+0x1e4>
 800dfb4:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800dfb6:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800dfb8:	f7ff f920 	bl	800d1fc <LoRaMacIsBusy>
 800dfbc:	b118      	cbz	r0, 800dfc6 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800dfbe:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	b006      	add	sp, #24
 800dfc4:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800dfc6:	f000 fd49 	bl	800ea5c <LoRaMacConfirmQueueIsFull>
 800dfca:	b108      	cbz	r0, 800dfd0 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800dfcc:	2401      	movs	r4, #1
 800dfce:	e7f7      	b.n	800dfc0 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800dfd0:	f000 fd3e 	bl	800ea50 <LoRaMacConfirmQueueGetCnt>
 800dfd4:	b308      	cbz	r0, 800e01a <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dfd6:	4b6d      	ldr	r3, [pc, #436]	; (800e18c <LoRaMacMlmeRequest+0x1e8>)
 800dfd8:	2101      	movs	r1, #1
 800dfda:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800dfde:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800dfe2:	f042 0204 	orr.w	r2, r2, #4
 800dfe6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 800dfea:	782b      	ldrb	r3, [r5, #0]
 800dfec:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dff0:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800dff4:	2200      	movs	r2, #0
 800dff6:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800dffa:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800dffe:	461c      	mov	r4, r3
 800e000:	3b01      	subs	r3, #1
 800e002:	2b0c      	cmp	r3, #12
 800e004:	f200 80a6 	bhi.w	800e154 <LoRaMacMlmeRequest+0x1b0>
 800e008:	e8df f003 	tbb	[pc, r3]
 800e00c:	5aa4a40d 	.word	0x5aa4a40d
 800e010:	a4a4a464 	.word	0xa4a4a464
 800e014:	7695a46d 	.word	0x7695a46d
 800e018:	8c          	.byte	0x8c
 800e019:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800e01a:	2214      	movs	r2, #20
 800e01c:	2100      	movs	r1, #0
 800e01e:	485c      	ldr	r0, [pc, #368]	; (800e190 <LoRaMacMlmeRequest+0x1ec>)
 800e020:	f004 faef 	bl	8012602 <memset1>
 800e024:	e7d7      	b.n	800dfd6 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800e026:	4b59      	ldr	r3, [pc, #356]	; (800e18c <LoRaMacMlmeRequest+0x1e8>)
 800e028:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e02c:	f013 0f20 	tst.w	r3, #32
 800e030:	d1c6      	bne.n	800dfc0 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800e032:	792b      	ldrb	r3, [r5, #4]
 800e034:	2b02      	cmp	r3, #2
 800e036:	d003      	beq.n	800e040 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d021      	beq.n	800e080 <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e03c:	2402      	movs	r4, #2
 800e03e:	e08a      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 800e040:	f7fe fe24 	bl	800cc8c <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800e044:	4c53      	ldr	r4, [pc, #332]	; (800e194 <LoRaMacMlmeRequest+0x1f0>)
 800e046:	2200      	movs	r2, #0
 800e048:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800e04c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e050:	f001 fb1c 	bl	800f68c <RegionAlternateDr>
 800e054:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800e058:	2307      	movs	r3, #7
 800e05a:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800e05e:	20ff      	movs	r0, #255	; 0xff
 800e060:	f7fe ff4a 	bl	800cef8 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800e064:	4604      	mov	r4, r0
 800e066:	2800      	cmp	r0, #0
 800e068:	d075      	beq.n	800e156 <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800e06a:	4e4a      	ldr	r6, [pc, #296]	; (800e194 <LoRaMacMlmeRequest+0x1f0>)
 800e06c:	2201      	movs	r2, #1
 800e06e:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800e072:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800e076:	f001 fb09 	bl	800f68c <RegionAlternateDr>
 800e07a:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800e07e:	e06a      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800e080:	4e44      	ldr	r6, [pc, #272]	; (800e194 <LoRaMacMlmeRequest+0x1f0>)
 800e082:	2400      	movs	r4, #0
 800e084:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800e088:	2302      	movs	r3, #2
 800e08a:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e08e:	4669      	mov	r1, sp
 800e090:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800e094:	f001 fa30 	bl	800f4f8 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800e098:	792b      	ldrb	r3, [r5, #4]
 800e09a:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e09e:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800e0a8:	4e38      	ldr	r6, [pc, #224]	; (800e18c <LoRaMacMlmeRequest+0x1e8>)
 800e0aa:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800e0ae:	691b      	ldr	r3, [r3, #16]
 800e0b0:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e0b2:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 800e0b6:	f043 0320 	orr.w	r3, r3, #32
 800e0ba:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 800e0be:	e04a      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	a904      	add	r1, sp, #16
 800e0c4:	2002      	movs	r0, #2
 800e0c6:	f000 fac1 	bl	800e64c <LoRaMacCommandsAddCmd>
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d042      	beq.n	800e156 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e0d0:	2413      	movs	r4, #19
 800e0d2:	e040      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800e0d4:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800e0d8:	b2d2      	uxtb	r2, r2
 800e0da:	68a9      	ldr	r1, [r5, #8]
 800e0dc:	88a8      	ldrh	r0, [r5, #4]
 800e0de:	f7fc ffe3 	bl	800b0a8 <SetTxContinuousWave>
 800e0e2:	4604      	mov	r4, r0
            break;
 800e0e4:	e037      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	a904      	add	r1, sp, #16
 800e0ea:	200d      	movs	r0, #13
 800e0ec:	f000 faae 	bl	800e64c <LoRaMacCommandsAddCmd>
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	b380      	cbz	r0, 800e156 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e0f4:	2413      	movs	r4, #19
 800e0f6:	e02e      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800e0f8:	4b26      	ldr	r3, [pc, #152]	; (800e194 <LoRaMacMlmeRequest+0x1f0>)
 800e0fa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e0fe:	b10b      	cbz	r3, 800e104 <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e100:	2402      	movs	r4, #2
 800e102:	e028      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800e104:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800e106:	f004 0007 	and.w	r0, r4, #7
 800e10a:	f000 f9f6 	bl	800e4fa <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800e10e:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800e112:	2201      	movs	r2, #1
 800e114:	a904      	add	r1, sp, #16
 800e116:	2010      	movs	r0, #16
 800e118:	f000 fa98 	bl	800e64c <LoRaMacCommandsAddCmd>
 800e11c:	4604      	mov	r4, r0
 800e11e:	b1d0      	cbz	r0, 800e156 <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e120:	2413      	movs	r4, #19
 800e122:	e018      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e124:	2200      	movs	r2, #0
 800e126:	a904      	add	r1, sp, #16
 800e128:	2012      	movs	r0, #18
 800e12a:	f000 fa8f 	bl	800e64c <LoRaMacCommandsAddCmd>
 800e12e:	4604      	mov	r4, r0
 800e130:	b188      	cbz	r0, 800e156 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e132:	2413      	movs	r4, #19
 800e134:	e00f      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 800e136:	2301      	movs	r3, #1
 800e138:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800e13c:	f000 f9ce 	bl	800e4dc <LoRaMacClassBIsAcquisitionInProgress>
 800e140:	b108      	cbz	r0, 800e146 <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 800e142:	2401      	movs	r4, #1
 800e144:	e007      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800e146:	f000 f9c6 	bl	800e4d6 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800e14a:	2000      	movs	r0, #0
 800e14c:	f000 f9c8 	bl	800e4e0 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800e150:	2400      	movs	r4, #0
 800e152:	e000      	b.n	800e156 <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 800e154:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e156:	4b0d      	ldr	r3, [pc, #52]	; (800e18c <LoRaMacMlmeRequest+0x1e8>)
 800e158:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800e15c:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800e15e:	b17c      	cbz	r4, 800e180 <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e160:	f000 fc76 	bl	800ea50 <LoRaMacConfirmQueueGetCnt>
 800e164:	2800      	cmp	r0, #0
 800e166:	f47f af2b 	bne.w	800dfc0 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800e16a:	4b08      	ldr	r3, [pc, #32]	; (800e18c <LoRaMacMlmeRequest+0x1e8>)
 800e16c:	2100      	movs	r1, #0
 800e16e:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e172:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800e176:	f361 0282 	bfi	r2, r1, #2, #1
 800e17a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800e17e:	e71f      	b.n	800dfc0 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800e180:	a805      	add	r0, sp, #20
 800e182:	f000 fba1 	bl	800e8c8 <LoRaMacConfirmQueueAdd>
 800e186:	e71b      	b.n	800dfc0 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e188:	2403      	movs	r4, #3
 800e18a:	e719      	b.n	800dfc0 <LoRaMacMlmeRequest+0x1c>
 800e18c:	200034e8 	.word	0x200034e8
 800e190:	20003940 	.word	0x20003940
 800e194:	20008000 	.word	0x20008000

0800e198 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	b091      	sub	sp, #68	; 0x44
 800e19e:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	f000 80de 	beq.w	800e362 <LoRaMacMcpsRequest+0x1ca>
 800e1a6:	f04f 0a00 	mov.w	sl, #0
 800e1aa:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800e1ac:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800e1b0:	f7ff f824 	bl	800d1fc <LoRaMacIsBusy>
 800e1b4:	4680      	mov	r8, r0
 800e1b6:	b118      	cbz	r0, 800e1c0 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800e1b8:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800e1ba:	b011      	add	sp, #68	; 0x44
 800e1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800e1c0:	ac06      	add	r4, sp, #24
 800e1c2:	462e      	mov	r6, r5
 800e1c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e1c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1c8:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800e1cc:	4651      	mov	r1, sl
 800e1ce:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800e1d2:	4c66      	ldr	r4, [pc, #408]	; (800e36c <LoRaMacMcpsRequest+0x1d4>)
 800e1d4:	2214      	movs	r2, #20
 800e1d6:	f204 4044 	addw	r0, r4, #1092	; 0x444
 800e1da:	f004 fa12 	bl	8012602 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800e1e4:	4b62      	ldr	r3, [pc, #392]	; (800e370 <LoRaMacMcpsRequest+0x1d8>)
 800e1e6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	d065      	beq.n	800e2ba <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800e1ee:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800e1f2:	2f01      	cmp	r7, #1
 800e1f4:	f000 8086 	beq.w	800e304 <LoRaMacMcpsRequest+0x16c>
 800e1f8:	2f03      	cmp	r7, #3
 800e1fa:	f000 8096 	beq.w	800e32a <LoRaMacMcpsRequest+0x192>
 800e1fe:	2f00      	cmp	r7, #0
 800e200:	d06d      	beq.n	800e2de <LoRaMacMcpsRequest+0x146>
 800e202:	f04f 0b00 	mov.w	fp, #0
 800e206:	f8cd b014 	str.w	fp, [sp, #20]
 800e20a:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e20e:	2302      	movs	r3, #2
 800e210:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e214:	4e56      	ldr	r6, [pc, #344]	; (800e370 <LoRaMacMcpsRequest+0x1d8>)
 800e216:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800e21a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e21e:	a90e      	add	r1, sp, #56	; 0x38
 800e220:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800e224:	f001 f942 	bl	800f4ac <RegionGetPhyParam>
 800e228:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800e22a:	b244      	sxtb	r4, r0
 800e22c:	45a3      	cmp	fp, r4
 800e22e:	bfb8      	it	lt
 800e230:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800e232:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 800e236:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 800e23a:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 800e23e:	4648      	mov	r0, r9
 800e240:	f7fc ff04 	bl	800b04c <CheckForMinimumAbpDatarate>
 800e244:	4603      	mov	r3, r0
 800e246:	b900      	cbnz	r0, 800e24a <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800e248:	465c      	mov	r4, fp
    if( readyToSend == true )
 800e24a:	f1b8 0f00 	cmp.w	r8, #0
 800e24e:	f000 8082 	beq.w	800e356 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800e252:	f1b9 0f00 	cmp.w	r9, #0
 800e256:	d000      	beq.n	800e25a <LoRaMacMcpsRequest+0xc2>
 800e258:	b19b      	cbz	r3, 800e282 <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800e25a:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e25e:	4b44      	ldr	r3, [pc, #272]	; (800e370 <LoRaMacMcpsRequest+0x1d8>)
 800e260:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800e264:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800e268:	2205      	movs	r2, #5
 800e26a:	a90b      	add	r1, sp, #44	; 0x2c
 800e26c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e270:	f001 f950 	bl	800f514 <RegionVerify>
 800e274:	2800      	cmp	r0, #0
 800e276:	d076      	beq.n	800e366 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e278:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800e27c:	4b3c      	ldr	r3, [pc, #240]	; (800e370 <LoRaMacMcpsRequest+0x1d8>)
 800e27e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800e282:	4b3a      	ldr	r3, [pc, #232]	; (800e36c <LoRaMacMcpsRequest+0x1d4>)
 800e284:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 800e288:	4b39      	ldr	r3, [pc, #228]	; (800e370 <LoRaMacMcpsRequest+0x1d8>)
 800e28a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800e28e:	f7fe f81d 	bl	800c2cc <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800e292:	9b03      	ldr	r3, [sp, #12]
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	4653      	mov	r3, sl
 800e298:	9a05      	ldr	r2, [sp, #20]
 800e29a:	9904      	ldr	r1, [sp, #16]
 800e29c:	a80c      	add	r0, sp, #48	; 0x30
 800e29e:	f7fe ff19 	bl	800d0d4 <Send>
        if( status == LORAMAC_STATUS_OK )
 800e2a2:	2800      	cmp	r0, #0
 800e2a4:	d152      	bne.n	800e34c <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800e2a6:	4b31      	ldr	r3, [pc, #196]	; (800e36c <LoRaMacMcpsRequest+0x1d4>)
 800e2a8:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800e2ac:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800e2b0:	f042 0201 	orr.w	r2, r2, #1
 800e2b4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800e2b8:	e04e      	b.n	800e358 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800e2ba:	4b2d      	ldr	r3, [pc, #180]	; (800e370 <LoRaMacMcpsRequest+0x1d8>)
 800e2bc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d194      	bne.n	800e1ee <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800e2c4:	4b2a      	ldr	r3, [pc, #168]	; (800e370 <LoRaMacMcpsRequest+0x1d8>)
 800e2c6:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d18f      	bne.n	800e1ee <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800e2ce:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d18b      	bne.n	800e1ee <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	f88d 3018 	strb.w	r3, [sp, #24]
 800e2dc:	e787      	b.n	800e1ee <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800e2de:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e2e2:	2202      	movs	r2, #2
 800e2e4:	f362 1347 	bfi	r3, r2, #5, #3
 800e2e8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800e2ec:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e2f0:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800e2f2:	9b08      	ldr	r3, [sp, #32]
 800e2f4:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800e2f6:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800e2fa:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800e2fe:	f04f 0801 	mov.w	r8, #1
            break;
 800e302:	e784      	b.n	800e20e <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800e304:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e308:	2204      	movs	r2, #4
 800e30a:	f362 1347 	bfi	r3, r2, #5, #3
 800e30e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800e312:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e316:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800e318:	9b08      	ldr	r3, [sp, #32]
 800e31a:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800e31c:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800e320:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800e324:	f04f 0801 	mov.w	r8, #1
            break;
 800e328:	e771      	b.n	800e20e <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800e32a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e32e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800e332:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800e336:	9b07      	ldr	r3, [sp, #28]
 800e338:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800e33a:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800e33e:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800e342:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800e346:	2300      	movs	r3, #0
 800e348:	9304      	str	r3, [sp, #16]
            break;
 800e34a:	e760      	b.n	800e20e <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800e34c:	4b07      	ldr	r3, [pc, #28]	; (800e36c <LoRaMacMcpsRequest+0x1d4>)
 800e34e:	2200      	movs	r2, #0
 800e350:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800e354:	e000      	b.n	800e358 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e356:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e358:	4b04      	ldr	r3, [pc, #16]	; (800e36c <LoRaMacMcpsRequest+0x1d4>)
 800e35a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800e35e:	612b      	str	r3, [r5, #16]
    return status;
 800e360:	e72b      	b.n	800e1ba <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e362:	2003      	movs	r0, #3
 800e364:	e729      	b.n	800e1ba <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800e366:	2003      	movs	r0, #3
 800e368:	e727      	b.n	800e1ba <LoRaMacMcpsRequest+0x22>
 800e36a:	bf00      	nop
 800e36c:	200034e8 	.word	0x200034e8
 800e370:	20008000 	.word	0x20008000

0800e374 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800e374:	b510      	push	{r4, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800e37a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800e37e:	220f      	movs	r2, #15
 800e380:	a901      	add	r1, sp, #4
 800e382:	4b05      	ldr	r3, [pc, #20]	; (800e398 <LoRaMacTestSetDutyCycleOn+0x24>)
 800e384:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e388:	f001 f8c4 	bl	800f514 <RegionVerify>
 800e38c:	b110      	cbz	r0, 800e394 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800e38e:	4b02      	ldr	r3, [pc, #8]	; (800e398 <LoRaMacTestSetDutyCycleOn+0x24>)
 800e390:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800e394:	b002      	add	sp, #8
 800e396:	bd10      	pop	{r4, pc}
 800e398:	20008000 	.word	0x20008000

0800e39c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800e39c:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800e39e:	f7ff f97b 	bl	800d698 <LoRaMacStop>
 800e3a2:	b110      	cbz	r0, 800e3aa <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800e3a4:	2401      	movs	r4, #1
    }
}
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	bd38      	pop	{r3, r4, r5, pc}
 800e3aa:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800e3ac:	4d0a      	ldr	r5, [pc, #40]	; (800e3d8 <LoRaMacDeInitialization+0x3c>)
 800e3ae:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800e3b2:	f006 fa2f 	bl	8014814 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800e3b6:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800e3ba:	f006 fa2b 	bl	8014814 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e3be:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800e3c2:	f006 fa27 	bl	8014814 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800e3c6:	f000 f899 	bl	800e4fc <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800e3ca:	f7fe fc5f 	bl	800cc8c <ResetMacParameters>
        Radio.Sleep( );
 800e3ce:	4b03      	ldr	r3, [pc, #12]	; (800e3dc <LoRaMacDeInitialization+0x40>)
 800e3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d2:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800e3d4:	e7e7      	b.n	800e3a6 <LoRaMacDeInitialization+0xa>
 800e3d6:	bf00      	nop
 800e3d8:	200034e8 	.word	0x200034e8
 800e3dc:	08015d04 	.word	0x08015d04

0800e3e0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800e3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e4:	b08b      	sub	sp, #44	; 0x2c
 800e3e6:	460f      	mov	r7, r1
 800e3e8:	4616      	mov	r6, r2
 800e3ea:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800e3ec:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800e3f0:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800e3f4:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800e3f8:	6842      	ldr	r2, [r0, #4]
 800e3fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e3fc:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800e3fe:	f890 8001 	ldrb.w	r8, [r0, #1]
 800e402:	f1b8 0f00 	cmp.w	r8, #0
 800e406:	d109      	bne.n	800e41c <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800e408:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800e40c:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800e410:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800e414:	4640      	mov	r0, r8
 800e416:	b00b      	add	sp, #44	; 0x2c
 800e418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e41c:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800e41e:	2302      	movs	r3, #2
 800e420:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800e424:	7bc3      	ldrb	r3, [r0, #15]
 800e426:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800e42a:	a908      	add	r1, sp, #32
 800e42c:	7c00      	ldrb	r0, [r0, #16]
 800e42e:	f001 f83d 	bl	800f4ac <RegionGetPhyParam>
 800e432:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800e434:	b243      	sxtb	r3, r0
 800e436:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800e438:	454b      	cmp	r3, r9
 800e43a:	bfb8      	it	lt
 800e43c:	464b      	movlt	r3, r9
 800e43e:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800e440:	6862      	ldr	r2, [r4, #4]
 800e442:	8923      	ldrh	r3, [r4, #8]
 800e444:	429a      	cmp	r2, r3
 800e446:	d201      	bcs.n	800e44c <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800e448:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800e44c:	8961      	ldrh	r1, [r4, #10]
 800e44e:	440b      	add	r3, r1
 800e450:	429a      	cmp	r2, r3
 800e452:	d224      	bcs.n	800e49e <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800e454:	6863      	ldr	r3, [r4, #4]
 800e456:	8921      	ldrh	r1, [r4, #8]
 800e458:	8962      	ldrh	r2, [r4, #10]
 800e45a:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800e45e:	4283      	cmp	r3, r0
 800e460:	d332      	bcc.n	800e4c8 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800e462:	1a5b      	subs	r3, r3, r1
 800e464:	fbb3 f1f2 	udiv	r1, r3, r2
 800e468:	fb02 3311 	mls	r3, r2, r1, r3
 800e46c:	bb7b      	cbnz	r3, 800e4ce <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800e46e:	9b01      	ldr	r3, [sp, #4]
 800e470:	4599      	cmp	r9, r3
 800e472:	dc03      	bgt.n	800e47c <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800e474:	7823      	ldrb	r3, [r4, #0]
 800e476:	b9eb      	cbnz	r3, 800e4b4 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800e478:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800e47c:	2321      	movs	r3, #33	; 0x21
 800e47e:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800e482:	9b00      	ldr	r3, [sp, #0]
 800e484:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800e488:	7be3      	ldrb	r3, [r4, #15]
 800e48a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800e48e:	a908      	add	r1, sp, #32
 800e490:	7c20      	ldrb	r0, [r4, #16]
 800e492:	f001 f80b 	bl	800f4ac <RegionGetPhyParam>
 800e496:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800e498:	fa4f f980 	sxtb.w	r9, r0
 800e49c:	e7b4      	b.n	800e408 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800e49e:	230a      	movs	r3, #10
 800e4a0:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800e4a4:	a908      	add	r1, sp, #32
 800e4a6:	7c20      	ldrb	r0, [r4, #16]
 800e4a8:	f001 f800 	bl	800f4ac <RegionGetPhyParam>
 800e4ac:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800e4ae:	fa4f fa80 	sxtb.w	sl, r0
 800e4b2:	e7cf      	b.n	800e454 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800e4b4:	2302      	movs	r3, #2
 800e4b6:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800e4ba:	a903      	add	r1, sp, #12
 800e4bc:	7c20      	ldrb	r0, [r4, #16]
 800e4be:	f001 f81b 	bl	800f4f8 <RegionInitDefaults>
                    nbTrans = 1;
 800e4c2:	f04f 0b01 	mov.w	fp, #1
 800e4c6:	e7d9      	b.n	800e47c <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800e4c8:	f8dd 9000 	ldr.w	r9, [sp]
 800e4cc:	e79c      	b.n	800e408 <LoRaMacAdrCalcNext+0x28>
 800e4ce:	f8dd 9000 	ldr.w	r9, [sp]
 800e4d2:	e799      	b.n	800e408 <LoRaMacAdrCalcNext+0x28>

0800e4d4 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4d4:	4770      	bx	lr

0800e4d6 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4d6:	4770      	bx	lr

0800e4d8 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4d8:	4770      	bx	lr

0800e4da <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4da:	4770      	bx	lr

0800e4dc <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4dc:	2000      	movs	r0, #0
 800e4de:	4770      	bx	lr

0800e4e0 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4e0:	4770      	bx	lr

0800e4e2 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4e2:	4770      	bx	lr

0800e4e4 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4e4:	4770      	bx	lr

0800e4e6 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	4770      	bx	lr

0800e4ea <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	4770      	bx	lr

0800e4ee <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	4770      	bx	lr

0800e4f2 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4f2:	2000      	movs	r0, #0
 800e4f4:	4770      	bx	lr

0800e4f6 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4f6:	2000      	movs	r0, #0
 800e4f8:	4770      	bx	lr

0800e4fa <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4fa:	4770      	bx	lr

0800e4fc <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4fc:	4770      	bx	lr

0800e4fe <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e4fe:	4770      	bx	lr

0800e500 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e500:	2002      	movs	r0, #2
 800e502:	4770      	bx	lr

0800e504 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e504:	2002      	movs	r0, #2
 800e506:	4770      	bx	lr

0800e508 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e508:	2002      	movs	r0, #2
 800e50a:	4770      	bx	lr

0800e50c <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e50c:	4770      	bx	lr

0800e50e <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e50e:	2000      	movs	r0, #0
 800e510:	4770      	bx	lr

0800e512 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e512:	4770      	bx	lr

0800e514 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e514:	4770      	bx	lr

0800e516 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e516:	2000      	movs	r0, #0
 800e518:	4770      	bx	lr

0800e51a <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e51a:	2000      	movs	r0, #0
 800e51c:	4770      	bx	lr

0800e51e <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e51e:	4770      	bx	lr

0800e520 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e520:	4770      	bx	lr

0800e522 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e522:	4770      	bx	lr

0800e524 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800e524:	2300      	movs	r3, #0
 800e526:	2b0f      	cmp	r3, #15
 800e528:	d804      	bhi.n	800e534 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800e52a:	5cc2      	ldrb	r2, [r0, r3]
 800e52c:	b922      	cbnz	r2, 800e538 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800e52e:	3301      	adds	r3, #1
 800e530:	b29b      	uxth	r3, r3
 800e532:	e7f8      	b.n	800e526 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800e534:	2001      	movs	r0, #1
 800e536:	4770      	bx	lr
            return false;
 800e538:	2000      	movs	r0, #0
}
 800e53a:	4770      	bx	lr

0800e53c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800e53c:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800e53e:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800e540:	0125      	lsls	r5, r4, #4
 800e542:	f105 0308 	add.w	r3, r5, #8
 800e546:	4d06      	ldr	r5, [pc, #24]	; (800e560 <MallocNewMacCommandSlot+0x24>)
 800e548:	441d      	add	r5, r3
 800e54a:	4628      	mov	r0, r5
 800e54c:	f7ff ffea 	bl	800e524 <IsSlotFree>
 800e550:	b920      	cbnz	r0, 800e55c <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800e552:	3401      	adds	r4, #1
 800e554:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800e556:	2c20      	cmp	r4, #32
 800e558:	d1f2      	bne.n	800e540 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800e55a:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800e55c:	4628      	mov	r0, r5
 800e55e:	bd38      	pop	{r3, r4, r5, pc}
 800e560:	20003aac 	.word	0x20003aac

0800e564 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800e564:	b120      	cbz	r0, 800e570 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800e566:	2200      	movs	r2, #0
 800e568:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800e56a:	6042      	str	r2, [r0, #4]

    return true;
 800e56c:	2001      	movs	r0, #1
 800e56e:	4770      	bx	lr
        return false;
 800e570:	2000      	movs	r0, #0
}
 800e572:	4770      	bx	lr

0800e574 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800e574:	4603      	mov	r3, r0
 800e576:	b160      	cbz	r0, 800e592 <LinkedListAdd+0x1e>
 800e578:	b169      	cbz	r1, 800e596 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800e57a:	6802      	ldr	r2, [r0, #0]
 800e57c:	b13a      	cbz	r2, 800e58e <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800e57e:	685a      	ldr	r2, [r3, #4]
 800e580:	b102      	cbz	r2, 800e584 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800e582:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800e584:	2200      	movs	r2, #0
 800e586:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800e588:	6059      	str	r1, [r3, #4]

    return true;
 800e58a:	2001      	movs	r0, #1
 800e58c:	4770      	bx	lr
        list->First = element;
 800e58e:	6001      	str	r1, [r0, #0]
 800e590:	e7f5      	b.n	800e57e <LinkedListAdd+0xa>
        return false;
 800e592:	2000      	movs	r0, #0
 800e594:	4770      	bx	lr
 800e596:	2000      	movs	r0, #0
}
 800e598:	4770      	bx	lr

0800e59a <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800e59a:	b160      	cbz	r0, 800e5b6 <LinkedListGetPrevious+0x1c>
 800e59c:	b161      	cbz	r1, 800e5b8 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800e59e:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800e5a0:	4281      	cmp	r1, r0
 800e5a2:	d102      	bne.n	800e5aa <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800e5a4:	2000      	movs	r0, #0
    }

    return curElement;
}
 800e5a6:	4770      	bx	lr
            curElement = curElement->Next;
 800e5a8:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d0fb      	beq.n	800e5a6 <LinkedListGetPrevious+0xc>
 800e5ae:	6803      	ldr	r3, [r0, #0]
 800e5b0:	428b      	cmp	r3, r1
 800e5b2:	d1f9      	bne.n	800e5a8 <LinkedListGetPrevious+0xe>
 800e5b4:	4770      	bx	lr
 800e5b6:	4770      	bx	lr
        return NULL;
 800e5b8:	4608      	mov	r0, r1
 800e5ba:	4770      	bx	lr

0800e5bc <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800e5bc:	b1b8      	cbz	r0, 800e5ee <LinkedListRemove+0x32>
{
 800e5be:	b538      	push	{r3, r4, r5, lr}
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800e5c4:	b1a9      	cbz	r1, 800e5f2 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800e5c6:	f7ff ffe8 	bl	800e59a <LinkedListGetPrevious>

    if( list->First == element )
 800e5ca:	682b      	ldr	r3, [r5, #0]
 800e5cc:	42a3      	cmp	r3, r4
 800e5ce:	d009      	beq.n	800e5e4 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800e5d0:	686b      	ldr	r3, [r5, #4]
 800e5d2:	42a3      	cmp	r3, r4
 800e5d4:	d009      	beq.n	800e5ea <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800e5d6:	b108      	cbz	r0, 800e5dc <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	6023      	str	r3, [r4, #0]

    return true;
 800e5e0:	2001      	movs	r0, #1
}
 800e5e2:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800e5e4:	6823      	ldr	r3, [r4, #0]
 800e5e6:	602b      	str	r3, [r5, #0]
 800e5e8:	e7f2      	b.n	800e5d0 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800e5ea:	6068      	str	r0, [r5, #4]
 800e5ec:	e7f3      	b.n	800e5d6 <LinkedListRemove+0x1a>
        return false;
 800e5ee:	2000      	movs	r0, #0
}
 800e5f0:	4770      	bx	lr
        return false;
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	e7f5      	b.n	800e5e2 <LinkedListRemove+0x26>
	...

0800e5f8 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800e5f8:	2811      	cmp	r0, #17
 800e5fa:	d808      	bhi.n	800e60e <IsSticky+0x16>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	fa03 f000 	lsl.w	r0, r3, r0
 800e602:	4b04      	ldr	r3, [pc, #16]	; (800e614 <IsSticky+0x1c>)
 800e604:	4218      	tst	r0, r3
 800e606:	bf14      	ite	ne
 800e608:	2001      	movne	r0, #1
 800e60a:	2000      	moveq	r0, #0
 800e60c:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800e60e:	2000      	movs	r0, #0
    }
}
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	00020720 	.word	0x00020720

0800e618 <FreeMacCommandSlot>:
    if( slot == NULL )
 800e618:	b130      	cbz	r0, 800e628 <FreeMacCommandSlot+0x10>
{
 800e61a:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800e61c:	2210      	movs	r2, #16
 800e61e:	2100      	movs	r1, #0
 800e620:	f003 ffef 	bl	8012602 <memset1>
    return true;
 800e624:	2001      	movs	r0, #1
}
 800e626:	bd08      	pop	{r3, pc}
        return false;
 800e628:	2000      	movs	r0, #0
}
 800e62a:	4770      	bx	lr

0800e62c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800e62c:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800e62e:	4c06      	ldr	r4, [pc, #24]	; (800e648 <LoRaMacCommandsInit+0x1c>)
 800e630:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800e634:	2100      	movs	r1, #0
 800e636:	4620      	mov	r0, r4
 800e638:	f003 ffe3 	bl	8012602 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800e63c:	4620      	mov	r0, r4
 800e63e:	f7ff ff91 	bl	800e564 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800e642:	2000      	movs	r0, #0
 800e644:	bd10      	pop	{r4, pc}
 800e646:	bf00      	nop
 800e648:	20003aac 	.word	0x20003aac

0800e64c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800e64c:	b301      	cbz	r1, 800e690 <LoRaMacCommandsAddCmd+0x44>
{
 800e64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e650:	4605      	mov	r5, r0
 800e652:	4614      	mov	r4, r2
 800e654:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800e656:	f7ff ff71 	bl	800e53c <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800e65a:	4606      	mov	r6, r0
 800e65c:	b1d0      	cbz	r0, 800e694 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800e65e:	4601      	mov	r1, r0
 800e660:	480e      	ldr	r0, [pc, #56]	; (800e69c <LoRaMacCommandsAddCmd+0x50>)
 800e662:	f7ff ff87 	bl	800e574 <LinkedListAdd>
 800e666:	b1b8      	cbz	r0, 800e698 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800e668:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800e66a:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800e66c:	b2a2      	uxth	r2, r4
 800e66e:	4639      	mov	r1, r7
 800e670:	1d70      	adds	r0, r6, #5
 800e672:	f003 ffae 	bl	80125d2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800e676:	4628      	mov	r0, r5
 800e678:	f7ff ffbe 	bl	800e5f8 <IsSticky>
 800e67c:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800e67e:	4b07      	ldr	r3, [pc, #28]	; (800e69c <LoRaMacCommandsAddCmd+0x50>)
 800e680:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e684:	4414      	add	r4, r2
 800e686:	3401      	adds	r4, #1
 800e688:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800e68c:	2000      	movs	r0, #0
}
 800e68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e690:	2001      	movs	r0, #1
}
 800e692:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800e694:	2002      	movs	r0, #2
 800e696:	e7fa      	b.n	800e68e <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800e698:	2005      	movs	r0, #5
 800e69a:	e7f8      	b.n	800e68e <LoRaMacCommandsAddCmd+0x42>
 800e69c:	20003aac 	.word	0x20003aac

0800e6a0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800e6a0:	b1a0      	cbz	r0, 800e6cc <LoRaMacCommandsRemoveCmd+0x2c>
{
 800e6a2:	b510      	push	{r4, lr}
 800e6a4:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800e6a6:	4601      	mov	r1, r0
 800e6a8:	480b      	ldr	r0, [pc, #44]	; (800e6d8 <LoRaMacCommandsRemoveCmd+0x38>)
 800e6aa:	f7ff ff87 	bl	800e5bc <LinkedListRemove>
 800e6ae:	b178      	cbz	r0, 800e6d0 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800e6b0:	68a1      	ldr	r1, [r4, #8]
 800e6b2:	4a09      	ldr	r2, [pc, #36]	; (800e6d8 <LoRaMacCommandsRemoveCmd+0x38>)
 800e6b4:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800e6b8:	1a5b      	subs	r3, r3, r1
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f7ff ffa9 	bl	800e618 <FreeMacCommandSlot>
 800e6c6:	b128      	cbz	r0, 800e6d4 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800e6c8:	2000      	movs	r0, #0
}
 800e6ca:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e6cc:	2001      	movs	r0, #1
}
 800e6ce:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800e6d0:	2003      	movs	r0, #3
 800e6d2:	e7fa      	b.n	800e6ca <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800e6d4:	2005      	movs	r0, #5
 800e6d6:	e7f8      	b.n	800e6ca <LoRaMacCommandsRemoveCmd+0x2a>
 800e6d8:	20003aac 	.word	0x20003aac

0800e6dc <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800e6dc:	4b0a      	ldr	r3, [pc, #40]	; (800e708 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800e6de:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800e6e0:	b120      	cbz	r0, 800e6ec <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800e6e2:	7b03      	ldrb	r3, [r0, #12]
 800e6e4:	b11b      	cbz	r3, 800e6ee <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800e6e6:	6800      	ldr	r0, [r0, #0]
 800e6e8:	e7fa      	b.n	800e6e0 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800e6ea:	bd10      	pop	{r4, pc}
 800e6ec:	4770      	bx	lr
{
 800e6ee:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800e6f0:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800e6f2:	f7ff ffd5 	bl	800e6a0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800e6f6:	4620      	mov	r0, r4
    while( curElement != NULL )
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d0f6      	beq.n	800e6ea <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800e6fc:	7b03      	ldrb	r3, [r0, #12]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d0f6      	beq.n	800e6f0 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800e702:	6800      	ldr	r0, [r0, #0]
 800e704:	e7f8      	b.n	800e6f8 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800e706:	bf00      	nop
 800e708:	20003aac 	.word	0x20003aac

0800e70c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800e70c:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800e70e:	4b08      	ldr	r3, [pc, #32]	; (800e730 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800e710:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800e712:	e000      	b.n	800e716 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800e714:	462c      	mov	r4, r5
    while( curElement != NULL )
 800e716:	b14c      	cbz	r4, 800e72c <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800e718:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800e71a:	7920      	ldrb	r0, [r4, #4]
 800e71c:	f7ff ff6c 	bl	800e5f8 <IsSticky>
 800e720:	2800      	cmp	r0, #0
 800e722:	d0f7      	beq.n	800e714 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800e724:	4620      	mov	r0, r4
 800e726:	f7ff ffbb 	bl	800e6a0 <LoRaMacCommandsRemoveCmd>
 800e72a:	e7f3      	b.n	800e714 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800e72c:	2000      	movs	r0, #0
 800e72e:	bd38      	pop	{r3, r4, r5, pc}
 800e730:	20003aac 	.word	0x20003aac

0800e734 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800e734:	b128      	cbz	r0, 800e742 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800e736:	4a04      	ldr	r2, [pc, #16]	; (800e748 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800e738:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800e73c:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800e73e:	2000      	movs	r0, #0
 800e740:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e742:	2001      	movs	r0, #1
}
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	20003aac 	.word	0x20003aac

0800e74c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800e74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800e750:	4b16      	ldr	r3, [pc, #88]	; (800e7ac <LoRaMacCommandsSerializeCmds+0x60>)
 800e752:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800e754:	b32a      	cbz	r2, 800e7a2 <LoRaMacCommandsSerializeCmds+0x56>
 800e756:	4607      	mov	r7, r0
 800e758:	4688      	mov	r8, r1
 800e75a:	4616      	mov	r6, r2
 800e75c:	b319      	cbz	r1, 800e7a6 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800e75e:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800e760:	b194      	cbz	r4, 800e788 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800e762:	1a7a      	subs	r2, r7, r1
 800e764:	68a3      	ldr	r3, [r4, #8]
 800e766:	3301      	adds	r3, #1
 800e768:	429a      	cmp	r2, r3
 800e76a:	d30d      	bcc.n	800e788 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800e76c:	1c4d      	adds	r5, r1, #1
 800e76e:	b2ed      	uxtb	r5, r5
 800e770:	7923      	ldrb	r3, [r4, #4]
 800e772:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800e774:	8922      	ldrh	r2, [r4, #8]
 800e776:	1d61      	adds	r1, r4, #5
 800e778:	1970      	adds	r0, r6, r5
 800e77a:	f003 ff2a 	bl	80125d2 <memcpy1>
            itr += curElement->PayloadSize;
 800e77e:	68a3      	ldr	r3, [r4, #8]
 800e780:	441d      	add	r5, r3
 800e782:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800e784:	6824      	ldr	r4, [r4, #0]
 800e786:	e7eb      	b.n	800e760 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800e788:	b12c      	cbz	r4, 800e796 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800e78a:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800e78c:	4620      	mov	r0, r4
 800e78e:	f7ff ff87 	bl	800e6a0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800e792:	462c      	mov	r4, r5
 800e794:	e7f8      	b.n	800e788 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800e796:	4640      	mov	r0, r8
 800e798:	f7ff ffcc 	bl	800e734 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800e79c:	2000      	movs	r0, #0
}
 800e79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e7a2:	2001      	movs	r0, #1
 800e7a4:	e7fb      	b.n	800e79e <LoRaMacCommandsSerializeCmds+0x52>
 800e7a6:	2001      	movs	r0, #1
 800e7a8:	e7f9      	b.n	800e79e <LoRaMacCommandsSerializeCmds+0x52>
 800e7aa:	bf00      	nop
 800e7ac:	20003aac 	.word	0x20003aac

0800e7b0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800e7b0:	4601      	mov	r1, r0
 800e7b2:	b170      	cbz	r0, 800e7d2 <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800e7b4:	4b08      	ldr	r3, [pc, #32]	; (800e7d8 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800e7b6:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800e7bc:	b13b      	cbz	r3, 800e7ce <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800e7be:	7b1a      	ldrb	r2, [r3, #12]
 800e7c0:	b90a      	cbnz	r2, 800e7c6 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	e7fa      	b.n	800e7bc <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800e7ca:	2000      	movs	r0, #0
 800e7cc:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800e7ce:	2000      	movs	r0, #0
 800e7d0:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e7d2:	2001      	movs	r0, #1
}
 800e7d4:	4770      	bx	lr
 800e7d6:	bf00      	nop
 800e7d8:	20003aac 	.word	0x20003aac

0800e7dc <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800e7dc:	1e83      	subs	r3, r0, #2
 800e7de:	2b11      	cmp	r3, #17
 800e7e0:	d80a      	bhi.n	800e7f8 <LoRaMacCommandsGetCmdSize+0x1c>
 800e7e2:	e8df f003 	tbb	[pc, r3]
 800e7e6:	0b23      	.short	0x0b23
 800e7e8:	110f240d 	.word	0x110f240d
 800e7ec:	09171513 	.word	0x09171513
 800e7f0:	09091909 	.word	0x09091909
 800e7f4:	211f1d1b 	.word	0x211f1d1b
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800e7fc:	2005      	movs	r0, #5
            break;
 800e7fe:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800e800:	2002      	movs	r0, #2
            break;
 800e802:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800e804:	2001      	movs	r0, #1
            break;
 800e806:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800e808:	2006      	movs	r0, #6
            break;
 800e80a:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800e80c:	2002      	movs	r0, #2
            break;
 800e80e:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800e810:	2002      	movs	r0, #2
            break;
 800e812:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800e814:	2005      	movs	r0, #5
            break;
 800e816:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800e818:	2006      	movs	r0, #6
            break;
 800e81a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800e81c:	2001      	movs	r0, #1
            break;
 800e81e:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800e820:	2005      	movs	r0, #5
            break;
 800e822:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800e824:	2004      	movs	r0, #4
            break;
 800e826:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800e828:	2004      	movs	r0, #4
            break;
 800e82a:	4770      	bx	lr
            cidSize = 3;
 800e82c:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800e82e:	4770      	bx	lr

0800e830 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800e830:	4b03      	ldr	r3, [pc, #12]	; (800e840 <IncreaseBufferPointer+0x10>)
 800e832:	4298      	cmp	r0, r3
 800e834:	d001      	beq.n	800e83a <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800e836:	3004      	adds	r0, #4
 800e838:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800e83a:	4802      	ldr	r0, [pc, #8]	; (800e844 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800e83c:	4770      	bx	lr
 800e83e:	bf00      	nop
 800e840:	20003cd4 	.word	0x20003cd4
 800e844:	20003cc4 	.word	0x20003cc4

0800e848 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800e848:	b108      	cbz	r0, 800e84e <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800e84a:	2000      	movs	r0, #0
 800e84c:	4770      	bx	lr
        return true;
 800e84e:	2001      	movs	r0, #1
}
 800e850:	4770      	bx	lr

0800e852 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800e852:	2804      	cmp	r0, #4
 800e854:	d801      	bhi.n	800e85a <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800e856:	2000      	movs	r0, #0
 800e858:	4770      	bx	lr
        return true;
 800e85a:	2001      	movs	r0, #1
}
 800e85c:	4770      	bx	lr
	...

0800e860 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800e860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e862:	4606      	mov	r6, r0
 800e864:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800e866:	4b0d      	ldr	r3, [pc, #52]	; (800e89c <GetElement+0x3c>)
 800e868:	f893 7020 	ldrb.w	r7, [r3, #32]
 800e86c:	4638      	mov	r0, r7
 800e86e:	f7ff ffeb 	bl	800e848 <IsListEmpty>
 800e872:	b970      	cbnz	r0, 800e892 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800e874:	2500      	movs	r5, #0
 800e876:	42af      	cmp	r7, r5
 800e878:	d909      	bls.n	800e88e <GetElement+0x2e>
    {
        if( element->Request == request )
 800e87a:	7823      	ldrb	r3, [r4, #0]
 800e87c:	42b3      	cmp	r3, r6
 800e87e:	d00a      	beq.n	800e896 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800e880:	4620      	mov	r0, r4
 800e882:	f7ff ffd5 	bl	800e830 <IncreaseBufferPointer>
 800e886:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800e888:	3501      	adds	r5, #1
 800e88a:	b2ed      	uxtb	r5, r5
 800e88c:	e7f3      	b.n	800e876 <GetElement+0x16>
    }

    return NULL;
 800e88e:	2000      	movs	r0, #0
}
 800e890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800e892:	2000      	movs	r0, #0
 800e894:	e7fc      	b.n	800e890 <GetElement+0x30>
            return element;
 800e896:	4620      	mov	r0, r4
 800e898:	e7fa      	b.n	800e890 <GetElement+0x30>
 800e89a:	bf00      	nop
 800e89c:	20003cb8 	.word	0x20003cb8

0800e8a0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800e8a0:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800e8a2:	4c08      	ldr	r4, [pc, #32]	; (800e8c4 <LoRaMacConfirmQueueInit+0x24>)
 800e8a4:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800e8ac:	f104 000c 	add.w	r0, r4, #12
 800e8b0:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800e8b2:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800e8b4:	2214      	movs	r2, #20
 800e8b6:	21ff      	movs	r1, #255	; 0xff
 800e8b8:	f003 fea3 	bl	8012602 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800e8c2:	bd10      	pop	{r4, pc}
 800e8c4:	20003cb8 	.word	0x20003cb8

0800e8c8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800e8cc:	4b0f      	ldr	r3, [pc, #60]	; (800e90c <LoRaMacConfirmQueueAdd+0x44>)
 800e8ce:	f893 0020 	ldrb.w	r0, [r3, #32]
 800e8d2:	f7ff ffbe 	bl	800e852 <IsListFull>
 800e8d6:	b9b8      	cbnz	r0, 800e908 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800e8d8:	4c0c      	ldr	r4, [pc, #48]	; (800e90c <LoRaMacConfirmQueueAdd+0x44>)
 800e8da:	68a3      	ldr	r3, [r4, #8]
 800e8dc:	782a      	ldrb	r2, [r5, #0]
 800e8de:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800e8e0:	68a3      	ldr	r3, [r4, #8]
 800e8e2:	786a      	ldrb	r2, [r5, #1]
 800e8e4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800e8e6:	68a3      	ldr	r3, [r4, #8]
 800e8e8:	78ea      	ldrb	r2, [r5, #3]
 800e8ea:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800e8ec:	68a3      	ldr	r3, [r4, #8]
 800e8ee:	78aa      	ldrb	r2, [r5, #2]
 800e8f0:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800e8f2:	f894 3020 	ldrb.w	r3, [r4, #32]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800e8fc:	68a0      	ldr	r0, [r4, #8]
 800e8fe:	f7ff ff97 	bl	800e830 <IncreaseBufferPointer>
 800e902:	60a0      	str	r0, [r4, #8]

    return true;
 800e904:	2001      	movs	r0, #1
}
 800e906:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800e908:	2000      	movs	r0, #0
 800e90a:	e7fc      	b.n	800e906 <LoRaMacConfirmQueueAdd+0x3e>
 800e90c:	20003cb8 	.word	0x20003cb8

0800e910 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800e910:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800e912:	4b09      	ldr	r3, [pc, #36]	; (800e938 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800e914:	f893 4020 	ldrb.w	r4, [r3, #32]
 800e918:	4620      	mov	r0, r4
 800e91a:	f7ff ff95 	bl	800e848 <IsListEmpty>
 800e91e:	b948      	cbnz	r0, 800e934 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800e920:	4d05      	ldr	r5, [pc, #20]	; (800e938 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800e922:	3c01      	subs	r4, #1
 800e924:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800e928:	6868      	ldr	r0, [r5, #4]
 800e92a:	f7ff ff81 	bl	800e830 <IncreaseBufferPointer>
 800e92e:	6068      	str	r0, [r5, #4]

    return true;
 800e930:	2001      	movs	r0, #1
}
 800e932:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800e934:	2000      	movs	r0, #0
 800e936:	e7fc      	b.n	800e932 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800e938:	20003cb8 	.word	0x20003cb8

0800e93c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800e93c:	b538      	push	{r3, r4, r5, lr}
 800e93e:	4605      	mov	r5, r0
 800e940:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800e942:	4b08      	ldr	r3, [pc, #32]	; (800e964 <LoRaMacConfirmQueueSetStatus+0x28>)
 800e944:	f893 0020 	ldrb.w	r0, [r3, #32]
 800e948:	f7ff ff7e 	bl	800e848 <IsListEmpty>
 800e94c:	b948      	cbnz	r0, 800e962 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800e94e:	4b05      	ldr	r3, [pc, #20]	; (800e964 <LoRaMacConfirmQueueSetStatus+0x28>)
 800e950:	689a      	ldr	r2, [r3, #8]
 800e952:	6859      	ldr	r1, [r3, #4]
 800e954:	4620      	mov	r0, r4
 800e956:	f7ff ff83 	bl	800e860 <GetElement>
        if( element != NULL )
 800e95a:	b110      	cbz	r0, 800e962 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800e95c:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800e95e:	2201      	movs	r2, #1
 800e960:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800e962:	bd38      	pop	{r3, r4, r5, pc}
 800e964:	20003cb8 	.word	0x20003cb8

0800e968 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800e968:	b510      	push	{r4, lr}
 800e96a:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800e96c:	4b09      	ldr	r3, [pc, #36]	; (800e994 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800e96e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800e972:	f7ff ff69 	bl	800e848 <IsListEmpty>
 800e976:	b940      	cbnz	r0, 800e98a <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800e978:	4b06      	ldr	r3, [pc, #24]	; (800e994 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800e97a:	689a      	ldr	r2, [r3, #8]
 800e97c:	6859      	ldr	r1, [r3, #4]
 800e97e:	4620      	mov	r0, r4
 800e980:	f7ff ff6e 	bl	800e860 <GetElement>
        if( element != NULL )
 800e984:	b118      	cbz	r0, 800e98e <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800e986:	7840      	ldrb	r0, [r0, #1]
 800e988:	e000      	b.n	800e98c <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e98a:	2001      	movs	r0, #1
}
 800e98c:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e98e:	2001      	movs	r0, #1
 800e990:	e7fc      	b.n	800e98c <LoRaMacConfirmQueueGetStatus+0x24>
 800e992:	bf00      	nop
 800e994:	20003cb8 	.word	0x20003cb8

0800e998 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800e99c:	4b0c      	ldr	r3, [pc, #48]	; (800e9d0 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800e99e:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800e9a0:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800e9a4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800e9a8:	f7ff ff4e 	bl	800e848 <IsListEmpty>
 800e9ac:	b150      	cbz	r0, 800e9c4 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800e9ae:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	f7ff ff3b 	bl	800e830 <IncreaseBufferPointer>
 800e9ba:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800e9bc:	4b04      	ldr	r3, [pc, #16]	; (800e9d0 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	4283      	cmp	r3, r0
 800e9c2:	d0f4      	beq.n	800e9ae <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800e9c4:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800e9c6:	78e3      	ldrb	r3, [r4, #3]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1f3      	bne.n	800e9b4 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800e9cc:	e7f0      	b.n	800e9b0 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800e9ce:	bf00      	nop
 800e9d0:	20003cb8 	.word	0x20003cb8

0800e9d4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800e9d4:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800e9d6:	4b04      	ldr	r3, [pc, #16]	; (800e9e8 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800e9d8:	689a      	ldr	r2, [r3, #8]
 800e9da:	6859      	ldr	r1, [r3, #4]
 800e9dc:	f7ff ff40 	bl	800e860 <GetElement>
 800e9e0:	b100      	cbz	r0, 800e9e4 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800e9e2:	2001      	movs	r0, #1
    }
    return false;
}
 800e9e4:	bd08      	pop	{r3, pc}
 800e9e6:	bf00      	nop
 800e9e8:	20003cb8 	.word	0x20003cb8

0800e9ec <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800e9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800e9f2:	4b16      	ldr	r3, [pc, #88]	; (800ea4c <LoRaMacConfirmQueueHandleCb+0x60>)
 800e9f4:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800e9f8:	2400      	movs	r4, #0
 800e9fa:	e00d      	b.n	800ea18 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800e9fc:	781a      	ldrb	r2, [r3, #0]
 800e9fe:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800ea02:	785a      	ldrb	r2, [r3, #1]
 800ea04:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800ea08:	78db      	ldrb	r3, [r3, #3]
 800ea0a:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800ea0e:	f7ff ff7f 	bl	800e910 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800ea12:	b1a5      	cbz	r5, 800ea3e <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800ea14:	3401      	adds	r4, #1
 800ea16:	b2e4      	uxtb	r4, r4
 800ea18:	42bc      	cmp	r4, r7
 800ea1a:	d214      	bcs.n	800ea46 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800ea1c:	4b0b      	ldr	r3, [pc, #44]	; (800ea4c <LoRaMacConfirmQueueHandleCb+0x60>)
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	7812      	ldrb	r2, [r2, #0]
 800ea22:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800ea24:	685a      	ldr	r2, [r3, #4]
 800ea26:	7852      	ldrb	r2, [r2, #1]
 800ea28:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800ea2e:	2d00      	cmp	r5, #0
 800ea30:	d0e4      	beq.n	800e9fc <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800ea32:	4b06      	ldr	r3, [pc, #24]	; (800ea4c <LoRaMacConfirmQueueHandleCb+0x60>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	4630      	mov	r0, r6
 800ea3a:	4798      	blx	r3
 800ea3c:	e7e7      	b.n	800ea0e <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800ea3e:	a801      	add	r0, sp, #4
 800ea40:	f7ff ff42 	bl	800e8c8 <LoRaMacConfirmQueueAdd>
 800ea44:	e7e6      	b.n	800ea14 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800ea46:	b003      	add	sp, #12
 800ea48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20003cb8 	.word	0x20003cb8

0800ea50 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800ea50:	4b01      	ldr	r3, [pc, #4]	; (800ea58 <LoRaMacConfirmQueueGetCnt+0x8>)
 800ea52:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ea56:	4770      	bx	lr
 800ea58:	20003cb8 	.word	0x20003cb8

0800ea5c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800ea5c:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ea5e:	4b03      	ldr	r3, [pc, #12]	; (800ea6c <LoRaMacConfirmQueueIsFull+0x10>)
 800ea60:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ea64:	f7ff fef5 	bl	800e852 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800ea68:	bd08      	pop	{r3, pc}
 800ea6a:	bf00      	nop
 800ea6c:	20003cb8 	.word	0x20003cb8

0800ea70 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800ea70:	b410      	push	{r4}
 800ea72:	9c01      	ldr	r4, [sp, #4]
 800ea74:	9902      	ldr	r1, [sp, #8]
 800ea76:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800ea78:	b1da      	cbz	r2, 800eab2 <PrepareB0+0x42>
 800ea7a:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800ea7c:	2049      	movs	r0, #73	; 0x49
 800ea7e:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800ea80:	2000      	movs	r0, #0
 800ea82:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800ea84:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800ea86:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800ea88:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800ea8a:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800ea8c:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800ea8e:	0a23      	lsrs	r3, r4, #8
 800ea90:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800ea92:	0c23      	lsrs	r3, r4, #16
 800ea94:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800ea96:	0e24      	lsrs	r4, r4, #24
 800ea98:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800ea9a:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800ea9c:	0a0b      	lsrs	r3, r1, #8
 800ea9e:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800eaa0:	0c0b      	lsrs	r3, r1, #16
 800eaa2:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800eaa4:	0e09      	lsrs	r1, r1, #24
 800eaa6:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800eaa8:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800eaaa:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800eaae:	bc10      	pop	{r4}
 800eab0:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eab2:	2009      	movs	r0, #9
 800eab4:	e7fb      	b.n	800eaae <PrepareB0+0x3e>
	...

0800eab8 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800eab8:	2300      	movs	r3, #0
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d80e      	bhi.n	800eadc <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800eabe:	469c      	mov	ip, r3
 800eac0:	4a07      	ldr	r2, [pc, #28]	; (800eae0 <GetKeyAddrItem+0x28>)
 800eac2:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800eac6:	4282      	cmp	r2, r0
 800eac8:	d002      	beq.n	800ead0 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800eaca:	3301      	adds	r3, #1
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	e7f4      	b.n	800eaba <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800ead0:	4b03      	ldr	r3, [pc, #12]	; (800eae0 <GetKeyAddrItem+0x28>)
 800ead2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800ead6:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800ead8:	2000      	movs	r0, #0
 800eada:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800eadc:	200b      	movs	r0, #11
}
 800eade:	4770      	bx	lr
 800eae0:	20000108 	.word	0x20000108

0800eae4 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800eae4:	460b      	mov	r3, r1
 800eae6:	2900      	cmp	r1, #0
 800eae8:	d024      	beq.n	800eb34 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800eaea:	3801      	subs	r0, #1
 800eaec:	2803      	cmp	r0, #3
 800eaee:	d823      	bhi.n	800eb38 <GetLastFcntDown+0x54>
 800eaf0:	e8df f000 	tbb	[pc, r0]
 800eaf4:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800eaf8:	4a10      	ldr	r2, [pc, #64]	; (800eb3c <GetLastFcntDown+0x58>)
 800eafa:	6812      	ldr	r2, [r2, #0]
 800eafc:	6911      	ldr	r1, [r2, #16]
 800eafe:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800eb00:	6913      	ldr	r3, [r2, #16]
 800eb02:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800eb04:	2000      	movs	r0, #0
            break;
 800eb06:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800eb08:	4a0c      	ldr	r2, [pc, #48]	; (800eb3c <GetLastFcntDown+0x58>)
 800eb0a:	6812      	ldr	r2, [r2, #0]
 800eb0c:	6951      	ldr	r1, [r2, #20]
 800eb0e:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800eb10:	6953      	ldr	r3, [r2, #20]
 800eb12:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800eb14:	2000      	movs	r0, #0
            break;
 800eb16:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800eb18:	4a08      	ldr	r2, [pc, #32]	; (800eb3c <GetLastFcntDown+0x58>)
 800eb1a:	6812      	ldr	r2, [r2, #0]
 800eb1c:	6991      	ldr	r1, [r2, #24]
 800eb1e:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800eb20:	6993      	ldr	r3, [r2, #24]
 800eb22:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800eb24:	2000      	movs	r0, #0
            break;
 800eb26:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800eb28:	4a04      	ldr	r2, [pc, #16]	; (800eb3c <GetLastFcntDown+0x58>)
 800eb2a:	6812      	ldr	r2, [r2, #0]
 800eb2c:	69d2      	ldr	r2, [r2, #28]
 800eb2e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800eb30:	2000      	movs	r0, #0
            break;
 800eb32:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eb34:	2009      	movs	r0, #9
 800eb36:	4770      	bx	lr
    switch( fCntID )
 800eb38:	2005      	movs	r0, #5
}
 800eb3a:	4770      	bx	lr
 800eb3c:	20003cdc 	.word	0x20003cdc

0800eb40 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800eb40:	b510      	push	{r4, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800eb46:	2300      	movs	r3, #0
 800eb48:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800eb4a:	a901      	add	r1, sp, #4
 800eb4c:	f7ff ffca 	bl	800eae4 <GetLastFcntDown>
 800eb50:	b948      	cbnz	r0, 800eb66 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800eb52:	9b01      	ldr	r3, [sp, #4]
 800eb54:	42a3      	cmp	r3, r4
 800eb56:	d309      	bcc.n	800eb6c <CheckFCntDown+0x2c>
 800eb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb5c:	d001      	beq.n	800eb62 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800eb5e:	2000      	movs	r0, #0
 800eb60:	e002      	b.n	800eb68 <CheckFCntDown+0x28>
        return true;
 800eb62:	2001      	movs	r0, #1
 800eb64:	e000      	b.n	800eb68 <CheckFCntDown+0x28>
        return false;
 800eb66:	2000      	movs	r0, #0
    }
}
 800eb68:	b002      	add	sp, #8
 800eb6a:	bd10      	pop	{r4, pc}
        return true;
 800eb6c:	2001      	movs	r0, #1
 800eb6e:	e7fb      	b.n	800eb68 <CheckFCntDown+0x28>

0800eb70 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800eb70:	3801      	subs	r0, #1
 800eb72:	2803      	cmp	r0, #3
 800eb74:	d812      	bhi.n	800eb9c <UpdateFCntDown+0x2c>
 800eb76:	e8df f000 	tbb	[pc, r0]
 800eb7a:	0602      	.short	0x0602
 800eb7c:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800eb7e:	4b08      	ldr	r3, [pc, #32]	; (800eba0 <UpdateFCntDown+0x30>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	6119      	str	r1, [r3, #16]
            break;
 800eb84:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800eb86:	4b06      	ldr	r3, [pc, #24]	; (800eba0 <UpdateFCntDown+0x30>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	6159      	str	r1, [r3, #20]
            break;
 800eb8c:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800eb8e:	4b04      	ldr	r3, [pc, #16]	; (800eba0 <UpdateFCntDown+0x30>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	6199      	str	r1, [r3, #24]
            break;
 800eb94:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800eb96:	4b02      	ldr	r3, [pc, #8]	; (800eba0 <UpdateFCntDown+0x30>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop
 800eba0:	20003cdc 	.word	0x20003cdc

0800eba4 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800eba4:	4b0a      	ldr	r3, [pc, #40]	; (800ebd0 <ResetFCnts+0x2c>)
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	2300      	movs	r3, #0
 800ebaa:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ebac:	f04f 31ff 	mov.w	r1, #4294967295
 800ebb0:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ebb2:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ebb4:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800ebb6:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	dd00      	ble.n	800ebbe <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800ebbc:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800ebbe:	1d99      	adds	r1, r3, #6
 800ebc0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ebc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc8:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ebca:	3301      	adds	r3, #1
 800ebcc:	e7f4      	b.n	800ebb8 <ResetFCnts+0x14>
 800ebce:	bf00      	nop
 800ebd0:	20003cdc 	.word	0x20003cdc

0800ebd4 <ComputeCmacB0>:
{
 800ebd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd8:	b088      	sub	sp, #32
 800ebda:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800ebdc:	b1f0      	cbz	r0, 800ec1c <ComputeCmacB0+0x48>
 800ebde:	460c      	mov	r4, r1
 800ebe0:	4615      	mov	r5, r2
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	4680      	mov	r8, r0
 800ebe6:	b1de      	cbz	r6, 800ec20 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ebe8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ebec:	d81a      	bhi.n	800ec24 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ebee:	af04      	add	r7, sp, #16
 800ebf0:	9702      	str	r7, [sp, #8]
 800ebf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ebf4:	9301      	str	r3, [sp, #4]
 800ebf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebf8:	9300      	str	r3, [sp, #0]
 800ebfa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800ebfe:	4629      	mov	r1, r5
 800ec00:	4620      	mov	r0, r4
 800ec02:	f7ff ff35 	bl	800ea70 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ec06:	9600      	str	r6, [sp, #0]
 800ec08:	462b      	mov	r3, r5
 800ec0a:	4622      	mov	r2, r4
 800ec0c:	4641      	mov	r1, r8
 800ec0e:	4638      	mov	r0, r7
 800ec10:	f003 fb87 	bl	8012322 <SecureElementComputeAesCmac>
 800ec14:	b940      	cbnz	r0, 800ec28 <ComputeCmacB0+0x54>
}
 800ec16:	b008      	add	sp, #32
 800ec18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ec1c:	2009      	movs	r0, #9
 800ec1e:	e7fa      	b.n	800ec16 <ComputeCmacB0+0x42>
 800ec20:	2009      	movs	r0, #9
 800ec22:	e7f8      	b.n	800ec16 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ec24:	200d      	movs	r0, #13
 800ec26:	e7f6      	b.n	800ec16 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ec28:	200e      	movs	r0, #14
 800ec2a:	e7f4      	b.n	800ec16 <ComputeCmacB0+0x42>

0800ec2c <DeriveSessionKey10x>:
{
 800ec2c:	b510      	push	{r4, lr}
 800ec2e:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800ec30:	2400      	movs	r4, #0
 800ec32:	9400      	str	r4, [sp, #0]
 800ec34:	9401      	str	r4, [sp, #4]
 800ec36:	9402      	str	r4, [sp, #8]
 800ec38:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800ec3a:	2802      	cmp	r0, #2
 800ec3c:	d003      	beq.n	800ec46 <DeriveSessionKey10x+0x1a>
 800ec3e:	2803      	cmp	r0, #3
 800ec40:	d025      	beq.n	800ec8e <DeriveSessionKey10x+0x62>
 800ec42:	200a      	movs	r0, #10
 800ec44:	e021      	b.n	800ec8a <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800ec46:	2401      	movs	r4, #1
 800ec48:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800ec4c:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800ec50:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ec54:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800ec58:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800ec5c:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800ec60:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800ec64:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ec68:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800ec6c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800ec70:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800ec74:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800ec78:	0a1b      	lsrs	r3, r3, #8
 800ec7a:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800ec7e:	4602      	mov	r2, r0
 800ec80:	2101      	movs	r1, #1
 800ec82:	4668      	mov	r0, sp
 800ec84:	f003 fbec 	bl	8012460 <SecureElementDeriveAndStoreKey>
 800ec88:	b928      	cbnz	r0, 800ec96 <DeriveSessionKey10x+0x6a>
}
 800ec8a:	b004      	add	sp, #16
 800ec8c:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800ec8e:	2402      	movs	r4, #2
 800ec90:	f88d 4000 	strb.w	r4, [sp]
            break;
 800ec94:	e7da      	b.n	800ec4c <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ec96:	200e      	movs	r0, #14
 800ec98:	e7f7      	b.n	800ec8a <DeriveSessionKey10x+0x5e>

0800ec9a <PayloadEncrypt>:
{
 800ec9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec9e:	b088      	sub	sp, #32
 800eca0:	4690      	mov	r8, r2
 800eca2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d052      	beq.n	800ed4e <PayloadEncrypt+0xb4>
 800eca8:	460d      	mov	r5, r1
 800ecaa:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800ecac:	2600      	movs	r6, #0
 800ecae:	9604      	str	r6, [sp, #16]
 800ecb0:	9605      	str	r6, [sp, #20]
 800ecb2:	9606      	str	r6, [sp, #24]
 800ecb4:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800ecb6:	9600      	str	r6, [sp, #0]
 800ecb8:	9601      	str	r6, [sp, #4]
 800ecba:	9602      	str	r6, [sp, #8]
 800ecbc:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800ecbe:	2701      	movs	r7, #1
 800ecc0:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800ecc4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800ecc8:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800eccc:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800ecd0:	0a19      	lsrs	r1, r3, #8
 800ecd2:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800ecd6:	0c19      	lsrs	r1, r3, #16
 800ecd8:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800ecdc:	0e1b      	lsrs	r3, r3, #24
 800ecde:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800ece2:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800ece6:	0a13      	lsrs	r3, r2, #8
 800ece8:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800ecec:	0c13      	lsrs	r3, r2, #16
 800ecee:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800ecf2:	0e12      	lsrs	r2, r2, #24
 800ecf4:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800ecf8:	e014      	b.n	800ed24 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800ecfa:	18f2      	adds	r2, r6, r3
 800ecfc:	5ca0      	ldrb	r0, [r4, r2]
 800ecfe:	f103 0120 	add.w	r1, r3, #32
 800ed02:	4469      	add	r1, sp
 800ed04:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800ed08:	4048      	eors	r0, r1
 800ed0a:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	462a      	mov	r2, r5
 800ed12:	2d10      	cmp	r5, #16
 800ed14:	bfa8      	it	ge
 800ed16:	2210      	movge	r2, #16
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	dbee      	blt.n	800ecfa <PayloadEncrypt+0x60>
        size -= 16;
 800ed1c:	3d10      	subs	r5, #16
 800ed1e:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800ed20:	3610      	adds	r6, #16
 800ed22:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800ed24:	2d00      	cmp	r5, #0
 800ed26:	dd0e      	ble.n	800ed46 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800ed28:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800ed2c:	3701      	adds	r7, #1
 800ed2e:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800ed30:	ab04      	add	r3, sp, #16
 800ed32:	4642      	mov	r2, r8
 800ed34:	2110      	movs	r1, #16
 800ed36:	4668      	mov	r0, sp
 800ed38:	f003 fb18 	bl	801236c <SecureElementAesEncrypt>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d0e6      	beq.n	800ed10 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ed42:	200e      	movs	r0, #14
 800ed44:	e000      	b.n	800ed48 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800ed46:	2000      	movs	r0, #0
}
 800ed48:	b008      	add	sp, #32
 800ed4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ed4e:	2009      	movs	r0, #9
 800ed50:	e7fa      	b.n	800ed48 <PayloadEncrypt+0xae>

0800ed52 <VerifyCmacB0>:
    if( msg == 0 )
 800ed52:	b370      	cbz	r0, 800edb2 <VerifyCmacB0+0x60>
{
 800ed54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed58:	b0c8      	sub	sp, #288	; 0x120
 800ed5a:	460c      	mov	r4, r1
 800ed5c:	4615      	mov	r5, r2
 800ed5e:	461e      	mov	r6, r3
 800ed60:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ed62:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ed66:	d826      	bhi.n	800edb6 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800ed68:	af04      	add	r7, sp, #16
 800ed6a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800ed6e:	2100      	movs	r1, #0
 800ed70:	4638      	mov	r0, r7
 800ed72:	f003 fc46 	bl	8012602 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ed76:	9702      	str	r7, [sp, #8]
 800ed78:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800ed7a:	9301      	str	r3, [sp, #4]
 800ed7c:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800ed7e:	9300      	str	r3, [sp, #0]
 800ed80:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800ed84:	4632      	mov	r2, r6
 800ed86:	4629      	mov	r1, r5
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f7ff fe71 	bl	800ea70 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800ed8e:	4622      	mov	r2, r4
 800ed90:	4641      	mov	r1, r8
 800ed92:	a808      	add	r0, sp, #32
 800ed94:	f003 fc1d 	bl	80125d2 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800ed98:	f104 0110 	add.w	r1, r4, #16
 800ed9c:	462b      	mov	r3, r5
 800ed9e:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800eda0:	b289      	uxth	r1, r1
 800eda2:	4638      	mov	r0, r7
 800eda4:	f003 facc 	bl	8012340 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800eda8:	b130      	cbz	r0, 800edb8 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800edaa:	2801      	cmp	r0, #1
 800edac:	d004      	beq.n	800edb8 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800edae:	200e      	movs	r0, #14
 800edb0:	e002      	b.n	800edb8 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800edb2:	2009      	movs	r0, #9
}
 800edb4:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800edb6:	200d      	movs	r0, #13
}
 800edb8:	b048      	add	sp, #288	; 0x120
 800edba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800edc0 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800edc0:	b188      	cbz	r0, 800ede6 <LoRaMacCryptoInit+0x26>
{
 800edc2:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800edc4:	4c09      	ldr	r4, [pc, #36]	; (800edec <LoRaMacCryptoInit+0x2c>)
 800edc6:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800edc8:	2228      	movs	r2, #40	; 0x28
 800edca:	2100      	movs	r1, #0
 800edcc:	f003 fc19 	bl	8012602 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800edd0:	6823      	ldr	r3, [r4, #0]
 800edd2:	2201      	movs	r2, #1
 800edd4:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800edd6:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800edd8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800edda:	2400      	movs	r4, #0
 800eddc:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800edde:	f7ff fee1 	bl	800eba4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800ede2:	4620      	mov	r0, r4
}
 800ede4:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800ede6:	2008      	movs	r0, #8
}
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	20003cdc 	.word	0x20003cdc

0800edf0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800edf0:	4b02      	ldr	r3, [pc, #8]	; (800edfc <LoRaMacCryptoSetLrWanVersion+0xc>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800edf6:	2000      	movs	r0, #0
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	20003cdc 	.word	0x20003cdc

0800ee00 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800ee00:	b130      	cbz	r0, 800ee10 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800ee02:	4b04      	ldr	r3, [pc, #16]	; (800ee14 <LoRaMacCryptoGetFCntUp+0x14>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ee10:	2009      	movs	r0, #9
}
 800ee12:	4770      	bx	lr
 800ee14:	20003cdc 	.word	0x20003cdc

0800ee18 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800ee18:	b530      	push	{r4, r5, lr}
 800ee1a:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800ee20:	b1f2      	cbz	r2, 800ee60 <LoRaMacCryptoGetFCntDown+0x48>
 800ee22:	460c      	mov	r4, r1
 800ee24:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800ee26:	a901      	add	r1, sp, #4
 800ee28:	f7ff fe5c 	bl	800eae4 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ee2c:	b948      	cbnz	r0, 800ee42 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800ee2e:	9b01      	ldr	r3, [sp, #4]
 800ee30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee34:	d007      	beq.n	800ee46 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800ee36:	b29a      	uxth	r2, r3
 800ee38:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800ee3a:	2a00      	cmp	r2, #0
 800ee3c:	dd05      	ble.n	800ee4a <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800ee3e:	4413      	add	r3, r2
 800ee40:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ee42:	b003      	add	sp, #12
 800ee44:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800ee46:	602c      	str	r4, [r5, #0]
 800ee48:	e7fb      	b.n	800ee42 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800ee4a:	b132      	cbz	r2, 800ee5a <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800ee4c:	0c1b      	lsrs	r3, r3, #16
 800ee4e:	041b      	lsls	r3, r3, #16
 800ee50:	4423      	add	r3, r4
 800ee52:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ee56:	602b      	str	r3, [r5, #0]
 800ee58:	e7f3      	b.n	800ee42 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800ee5a:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800ee5c:	2007      	movs	r0, #7
 800ee5e:	e7f0      	b.n	800ee42 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ee60:	2009      	movs	r0, #9
 800ee62:	e7ee      	b.n	800ee42 <LoRaMacCryptoGetFCntDown+0x2a>

0800ee64 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800ee64:	4601      	mov	r1, r0
 800ee66:	b908      	cbnz	r0, 800ee6c <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ee68:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ee6a:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	dd01      	ble.n	800ee76 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800ee72:	2000      	movs	r0, #0
 800ee74:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800ee76:	4a06      	ldr	r2, [pc, #24]	; (800ee90 <LoRaMacCryptoSetMulticastReference+0x2c>)
 800ee78:	6812      	ldr	r2, [r2, #0]
 800ee7a:	202c      	movs	r0, #44	; 0x2c
 800ee7c:	fb00 1003 	mla	r0, r0, r3, r1
 800ee80:	f103 0c06 	add.w	ip, r3, #6
 800ee84:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800ee88:	3204      	adds	r2, #4
 800ee8a:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	e7ee      	b.n	800ee6e <LoRaMacCryptoSetMulticastReference+0xa>
 800ee90:	20003cdc 	.word	0x20003cdc

0800ee94 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800ee94:	b1d8      	cbz	r0, 800eece <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800ee96:	b510      	push	{r4, lr}
 800ee98:	b082      	sub	sp, #8
 800ee9a:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800ee9c:	4b0f      	ldr	r3, [pc, #60]	; (800eedc <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	8893      	ldrh	r3, [r2, #4]
 800eea2:	3301      	adds	r3, #1
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800eea8:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800eeaa:	f000 fa2e 	bl	800f30a <LoRaMacSerializerJoinRequest>
 800eeae:	b980      	cbnz	r0, 800eed2 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800eeb0:	4623      	mov	r3, r4
 800eeb2:	f853 1b18 	ldr.w	r1, [r3], #24
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	2301      	movs	r3, #1
 800eeba:	2213      	movs	r2, #19
 800eebc:	f003 fa31 	bl	8012322 <SecureElementComputeAesCmac>
 800eec0:	b950      	cbnz	r0, 800eed8 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800eec2:	4620      	mov	r0, r4
 800eec4:	f000 fa21 	bl	800f30a <LoRaMacSerializerJoinRequest>
 800eec8:	b120      	cbz	r0, 800eed4 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800eeca:	2010      	movs	r0, #16
 800eecc:	e002      	b.n	800eed4 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eece:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800eed0:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800eed2:	2010      	movs	r0, #16
}
 800eed4:	b002      	add	sp, #8
 800eed6:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800eed8:	200e      	movs	r0, #14
 800eeda:	e7fb      	b.n	800eed4 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800eedc:	20003cdc 	.word	0x20003cdc

0800eee0 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d036      	beq.n	800ef52 <LoRaMacCryptoSecureMessage+0x72>
{
 800eee4:	b530      	push	{r4, r5, lr}
 800eee6:	b085      	sub	sp, #20
 800eee8:	4604      	mov	r4, r0
 800eeea:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800eeec:	4b1d      	ldr	r3, [pc, #116]	; (800ef64 <LoRaMacCryptoSecureMessage+0x84>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	4283      	cmp	r3, r0
 800eef4:	d82f      	bhi.n	800ef56 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800eef6:	f895 2020 	ldrb.w	r2, [r5, #32]
 800eefa:	b342      	cbz	r2, 800ef4e <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800eefc:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800eefe:	42a3      	cmp	r3, r4
 800ef00:	d209      	bcs.n	800ef16 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800ef02:	9401      	str	r4, [sp, #4]
 800ef04:	2300      	movs	r3, #0
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	68ab      	ldr	r3, [r5, #8]
 800ef0a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800ef0e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ef10:	f7ff fec3 	bl	800ec9a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ef14:	bb10      	cbnz	r0, 800ef5c <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ef16:	4628      	mov	r0, r5
 800ef18:	f000 fa2d 	bl	800f376 <LoRaMacSerializerData>
 800ef1c:	b9e8      	cbnz	r0, 800ef5a <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ef1e:	7929      	ldrb	r1, [r5, #4]
 800ef20:	3904      	subs	r1, #4
 800ef22:	462b      	mov	r3, r5
 800ef24:	f853 0b2c 	ldr.w	r0, [r3], #44
 800ef28:	9303      	str	r3, [sp, #12]
 800ef2a:	9402      	str	r4, [sp, #8]
 800ef2c:	68ab      	ldr	r3, [r5, #8]
 800ef2e:	9301      	str	r3, [sp, #4]
 800ef30:	2300      	movs	r3, #0
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	2202      	movs	r2, #2
 800ef36:	b289      	uxth	r1, r1
 800ef38:	f7ff fe4c 	bl	800ebd4 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ef3c:	b970      	cbnz	r0, 800ef5c <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ef3e:	4628      	mov	r0, r5
 800ef40:	f000 fa19 	bl	800f376 <LoRaMacSerializerData>
 800ef44:	b960      	cbnz	r0, 800ef60 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800ef46:	4b07      	ldr	r3, [pc, #28]	; (800ef64 <LoRaMacCryptoSecureMessage+0x84>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800ef4c:	e006      	b.n	800ef5c <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800ef4e:	2202      	movs	r2, #2
 800ef50:	e7d5      	b.n	800eefe <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ef52:	2009      	movs	r0, #9
}
 800ef54:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ef56:	2006      	movs	r0, #6
 800ef58:	e000      	b.n	800ef5c <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ef5a:	2010      	movs	r0, #16
}
 800ef5c:	b005      	add	sp, #20
 800ef5e:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ef60:	2010      	movs	r0, #16
 800ef62:	e7fb      	b.n	800ef5c <LoRaMacCryptoSecureMessage+0x7c>
 800ef64:	20003cdc 	.word	0x20003cdc

0800ef68 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800ef68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef6c:	b087      	sub	sp, #28
 800ef6e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800ef70:	2e00      	cmp	r6, #0
 800ef72:	d049      	beq.n	800f008 <LoRaMacCryptoUnsecureMessage+0xa0>
 800ef74:	4605      	mov	r5, r0
 800ef76:	4688      	mov	r8, r1
 800ef78:	4617      	mov	r7, r2
 800ef7a:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	4610      	mov	r0, r2
 800ef80:	f7ff fdde 	bl	800eb40 <CheckFCntDown>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d041      	beq.n	800f00c <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ef88:	4630      	mov	r0, r6
 800ef8a:	f000 f95f 	bl	800f24c <LoRaMacParserData>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d141      	bne.n	800f016 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800ef92:	a905      	add	r1, sp, #20
 800ef94:	4628      	mov	r0, r5
 800ef96:	f7ff fd8f 	bl	800eab8 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d136      	bne.n	800f00e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800efa0:	9b05      	ldr	r3, [sp, #20]
 800efa2:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800efa6:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800efa8:	68b3      	ldr	r3, [r6, #8]
 800efaa:	4543      	cmp	r3, r8
 800efac:	d135      	bne.n	800f01a <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800efae:	7b33      	ldrb	r3, [r6, #12]
 800efb0:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800efb4:	491a      	ldr	r1, [pc, #104]	; (800f020 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800efb6:	6809      	ldr	r1, [r1, #0]
 800efb8:	7889      	ldrb	r1, [r1, #2]
 800efba:	b901      	cbnz	r1, 800efbe <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800efbc:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800efbe:	7931      	ldrb	r1, [r6, #4]
 800efc0:	3904      	subs	r1, #4
 800efc2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800efc4:	9003      	str	r0, [sp, #12]
 800efc6:	9402      	str	r4, [sp, #8]
 800efc8:	f8cd 8004 	str.w	r8, [sp, #4]
 800efcc:	2001      	movs	r0, #1
 800efce:	9000      	str	r0, [sp, #0]
 800efd0:	b289      	uxth	r1, r1
 800efd2:	6830      	ldr	r0, [r6, #0]
 800efd4:	f7ff febd 	bl	800ed52 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800efd8:	4605      	mov	r5, r0
 800efda:	b9c0      	cbnz	r0, 800f00e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800efdc:	f896 3020 	ldrb.w	r3, [r6, #32]
 800efe0:	b90b      	cbnz	r3, 800efe6 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800efe2:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800efe6:	9401      	str	r4, [sp, #4]
 800efe8:	2301      	movs	r3, #1
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	4643      	mov	r3, r8
 800efee:	464a      	mov	r2, r9
 800eff0:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800eff4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800eff6:	f7ff fe50 	bl	800ec9a <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800effa:	4605      	mov	r5, r0
 800effc:	b938      	cbnz	r0, 800f00e <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800effe:	4621      	mov	r1, r4
 800f000:	4638      	mov	r0, r7
 800f002:	f7ff fdb5 	bl	800eb70 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800f006:	e002      	b.n	800f00e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f008:	2509      	movs	r5, #9
 800f00a:	e000      	b.n	800f00e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800f00c:	2506      	movs	r5, #6
}
 800f00e:	4628      	mov	r0, r5
 800f010:	b007      	add	sp, #28
 800f012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800f016:	250f      	movs	r5, #15
 800f018:	e7f9      	b.n	800f00e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800f01a:	2502      	movs	r5, #2
 800f01c:	e7f7      	b.n	800f00e <LoRaMacCryptoUnsecureMessage+0xa6>
 800f01e:	bf00      	nop
 800f020:	20003cdc 	.word	0x20003cdc

0800f024 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800f024:	b9b1      	cbnz	r1, 800f054 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800f026:	b500      	push	{lr}
 800f028:	b085      	sub	sp, #20
 800f02a:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800f02c:	2300      	movs	r3, #0
 800f02e:	9300      	str	r3, [sp, #0]
 800f030:	9301      	str	r3, [sp, #4]
 800f032:	9302      	str	r3, [sp, #8]
 800f034:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800f036:	2801      	cmp	r0, #1
 800f038:	d008      	beq.n	800f04c <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800f03a:	2204      	movs	r2, #4
 800f03c:	4661      	mov	r1, ip
 800f03e:	4668      	mov	r0, sp
 800f040:	f003 fa0e 	bl	8012460 <SecureElementDeriveAndStoreKey>
 800f044:	b940      	cbnz	r0, 800f058 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f046:	b005      	add	sp, #20
 800f048:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800f04c:	2320      	movs	r3, #32
 800f04e:	f88d 3000 	strb.w	r3, [sp]
 800f052:	e7f2      	b.n	800f03a <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800f054:	200a      	movs	r0, #10
}
 800f056:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f058:	200e      	movs	r0, #14
 800f05a:	e7f4      	b.n	800f046 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800f05c <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800f05c:	2804      	cmp	r0, #4
 800f05e:	d001      	beq.n	800f064 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800f060:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f062:	4770      	bx	lr
{
 800f064:	b500      	push	{lr}
 800f066:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800f068:	2300      	movs	r3, #0
 800f06a:	9300      	str	r3, [sp, #0]
 800f06c:	9301      	str	r3, [sp, #4]
 800f06e:	9302      	str	r3, [sp, #8]
 800f070:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800f072:	227f      	movs	r2, #127	; 0x7f
 800f074:	4601      	mov	r1, r0
 800f076:	4668      	mov	r0, sp
 800f078:	f003 f9f2 	bl	8012460 <SecureElementDeriveAndStoreKey>
 800f07c:	b910      	cbnz	r0, 800f084 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800f07e:	b005      	add	sp, #20
 800f080:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f084:	200e      	movs	r0, #14
 800f086:	e7fa      	b.n	800f07e <LoRaMacCryptoDeriveMcKEKey+0x22>

0800f088 <LoRaMacCryptoSetKey>:
{
 800f088:	b510      	push	{r4, lr}
 800f08a:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800f08c:	f003 f9a6 	bl	80123dc <SecureElementSetKey>
 800f090:	b978      	cbnz	r0, 800f0b2 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800f092:	b104      	cbz	r4, 800f096 <LoRaMacCryptoSetKey+0xe>
}
 800f094:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800f096:	4b09      	ldr	r3, [pc, #36]	; (800f0bc <LoRaMacCryptoSetKey+0x34>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4621      	mov	r1, r4
 800f09c:	7898      	ldrb	r0, [r3, #2]
 800f09e:	f7ff ffc1 	bl	800f024 <LoRaMacCryptoDeriveMcRootKey>
 800f0a2:	b940      	cbnz	r0, 800f0b6 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800f0a4:	2004      	movs	r0, #4
 800f0a6:	f7ff ffd9 	bl	800f05c <LoRaMacCryptoDeriveMcKEKey>
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	d0f2      	beq.n	800f094 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f0ae:	200e      	movs	r0, #14
 800f0b0:	e7f0      	b.n	800f094 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f0b2:	200e      	movs	r0, #14
 800f0b4:	e7ee      	b.n	800f094 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f0b6:	200e      	movs	r0, #14
 800f0b8:	e7ec      	b.n	800f094 <LoRaMacCryptoSetKey+0xc>
 800f0ba:	bf00      	nop
 800f0bc:	20003cdc 	.word	0x20003cdc

0800f0c0 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800f0c0:	2a00      	cmp	r2, #0
 800f0c2:	d064      	beq.n	800f18e <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800f0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c6:	b08f      	sub	sp, #60	; 0x3c
 800f0c8:	4607      	mov	r7, r0
 800f0ca:	460d      	mov	r5, r1
 800f0cc:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800f0ce:	2900      	cmp	r1, #0
 800f0d0:	d05f      	beq.n	800f192 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800f0d2:	2600      	movs	r6, #0
 800f0d4:	9605      	str	r6, [sp, #20]
 800f0d6:	221d      	movs	r2, #29
 800f0d8:	4631      	mov	r1, r6
 800f0da:	a806      	add	r0, sp, #24
 800f0dc:	f005 fe2c 	bl	8014d38 <memset>
    uint8_t versionMinor         = 0;
 800f0e0:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800f0e4:	4b2f      	ldr	r3, [pc, #188]	; (800f1a4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800f0ea:	f10d 0313 	add.w	r3, sp, #19
 800f0ee:	9302      	str	r3, [sp, #8]
 800f0f0:	ab05      	add	r3, sp, #20
 800f0f2:	9301      	str	r3, [sp, #4]
 800f0f4:	7923      	ldrb	r3, [r4, #4]
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	6823      	ldr	r3, [r4, #0]
 800f0fa:	4632      	mov	r2, r6
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	4638      	mov	r0, r7
 800f100:	f003 f9ce 	bl	80124a0 <SecureElementProcessJoinAccept>
 800f104:	2800      	cmp	r0, #0
 800f106:	d146      	bne.n	800f196 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800f108:	7922      	ldrb	r2, [r4, #4]
 800f10a:	a905      	add	r1, sp, #20
 800f10c:	6820      	ldr	r0, [r4, #0]
 800f10e:	f003 fa60 	bl	80125d2 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800f112:	4620      	mov	r0, r4
 800f114:	f000 f848 	bl	800f1a8 <LoRaMacParserJoinAccept>
 800f118:	2800      	cmp	r0, #0
 800f11a:	d13f      	bne.n	800f19c <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800f11c:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800f11e:	79e3      	ldrb	r3, [r4, #7]
 800f120:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800f124:	7a23      	ldrb	r3, [r4, #8]
 800f126:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800f12a:	4b1e      	ldr	r3, [pc, #120]	; (800f1a4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	689a      	ldr	r2, [r3, #8]
 800f130:	42aa      	cmp	r2, r5
 800f132:	d035      	beq.n	800f1a0 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800f134:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800f136:	2100      	movs	r1, #0
 800f138:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800f13c:	f7ff ff72 	bl	800f024 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f140:	bb50      	cbnz	r0, 800f198 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800f142:	2004      	movs	r0, #4
 800f144:	f7ff ff8a 	bl	800f05c <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f148:	bb30      	cbnz	r0, 800f198 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800f14a:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800f14c:	7aa2      	ldrb	r2, [r4, #10]
 800f14e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800f152:	7ae4      	ldrb	r4, [r4, #11]
 800f154:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800f158:	4633      	mov	r3, r6
 800f15a:	4622      	mov	r2, r4
 800f15c:	4629      	mov	r1, r5
 800f15e:	2003      	movs	r0, #3
 800f160:	f7ff fd64 	bl	800ec2c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f164:	b9c0      	cbnz	r0, 800f198 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800f166:	4633      	mov	r3, r6
 800f168:	4622      	mov	r2, r4
 800f16a:	4629      	mov	r1, r5
 800f16c:	2002      	movs	r0, #2
 800f16e:	f7ff fd5d 	bl	800ec2c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f172:	b988      	cbnz	r0, 800f198 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800f174:	4b0b      	ldr	r3, [pc, #44]	; (800f1a4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800f17c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800f17e:	2200      	movs	r2, #0
 800f180:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800f182:	f04f 32ff 	mov.w	r2, #4294967295
 800f186:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800f188:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800f18a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800f18c:	e004      	b.n	800f198 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f18e:	2009      	movs	r0, #9
}
 800f190:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f192:	2009      	movs	r0, #9
 800f194:	e000      	b.n	800f198 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f196:	200e      	movs	r0, #14
}
 800f198:	b00f      	add	sp, #60	; 0x3c
 800f19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800f19c:	200f      	movs	r0, #15
 800f19e:	e7fb      	b.n	800f198 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800f1a0:	2003      	movs	r0, #3
 800f1a2:	e7f9      	b.n	800f198 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800f1a4:	20003cdc 	.word	0x20003cdc

0800f1a8 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d049      	beq.n	800f240 <LoRaMacParserJoinAccept+0x98>
{
 800f1ac:	b510      	push	{r4, lr}
 800f1ae:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f1b0:	6801      	ldr	r1, [r0, #0]
 800f1b2:	2900      	cmp	r1, #0
 800f1b4:	d046      	beq.n	800f244 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800f1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1ba:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800f1bc:	2203      	movs	r2, #3
 800f1be:	3006      	adds	r0, #6
 800f1c0:	f003 fa07 	bl	80125d2 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f850 1b09 	ldr.w	r1, [r0], #9
 800f1ca:	2203      	movs	r2, #3
 800f1cc:	3104      	adds	r1, #4
 800f1ce:	f003 fa00 	bl	80125d2 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800f1d2:	6821      	ldr	r1, [r4, #0]
 800f1d4:	79cb      	ldrb	r3, [r1, #7]
 800f1d6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800f1d8:	7a0a      	ldrb	r2, [r1, #8]
 800f1da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f1de:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800f1e0:	7a4a      	ldrb	r2, [r1, #9]
 800f1e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1e6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800f1e8:	7a8a      	ldrb	r2, [r1, #10]
 800f1ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f1ee:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800f1f0:	7acb      	ldrb	r3, [r1, #11]
 800f1f2:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800f1f4:	7b0b      	ldrb	r3, [r1, #12]
 800f1f6:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800f1f8:	7923      	ldrb	r3, [r4, #4]
 800f1fa:	2b21      	cmp	r3, #33	; 0x21
 800f1fc:	d018      	beq.n	800f230 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800f1fe:	2b11      	cmp	r3, #17
 800f200:	dc22      	bgt.n	800f248 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800f202:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800f204:	6821      	ldr	r1, [r4, #0]
 800f206:	f102 0c01 	add.w	ip, r2, #1
 800f20a:	5c8b      	ldrb	r3, [r1, r2]
 800f20c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800f20e:	1c90      	adds	r0, r2, #2
 800f210:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800f214:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800f218:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800f21a:	3203      	adds	r2, #3
 800f21c:	5c08      	ldrb	r0, [r1, r0]
 800f21e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f222:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800f224:	5c8a      	ldrb	r2, [r1, r2]
 800f226:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f22a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800f22c:	2000      	movs	r0, #0
}
 800f22e:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800f230:	2210      	movs	r2, #16
 800f232:	310d      	adds	r1, #13
 800f234:	f104 0012 	add.w	r0, r4, #18
 800f238:	f003 f9cb 	bl	80125d2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800f23c:	221d      	movs	r2, #29
 800f23e:	e7e1      	b.n	800f204 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800f240:	2002      	movs	r0, #2
}
 800f242:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800f244:	2002      	movs	r0, #2
 800f246:	e7f2      	b.n	800f22e <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800f248:	2001      	movs	r0, #1
 800f24a:	e7f0      	b.n	800f22e <LoRaMacParserJoinAccept+0x86>

0800f24c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f24c:	2800      	cmp	r0, #0
 800f24e:	d058      	beq.n	800f302 <LoRaMacParserData+0xb6>
{
 800f250:	b510      	push	{r4, lr}
 800f252:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f254:	6801      	ldr	r1, [r0, #0]
 800f256:	2900      	cmp	r1, #0
 800f258:	d055      	beq.n	800f306 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800f25a:	780b      	ldrb	r3, [r1, #0]
 800f25c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800f25e:	784b      	ldrb	r3, [r1, #1]
 800f260:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800f262:	788a      	ldrb	r2, [r1, #2]
 800f264:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f268:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800f26a:	78ca      	ldrb	r2, [r1, #3]
 800f26c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f270:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800f272:	790a      	ldrb	r2, [r1, #4]
 800f274:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f278:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800f27a:	794b      	ldrb	r3, [r1, #5]
 800f27c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800f27e:	798b      	ldrb	r3, [r1, #6]
 800f280:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800f282:	79ca      	ldrb	r2, [r1, #7]
 800f284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f288:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800f28a:	7b02      	ldrb	r2, [r0, #12]
 800f28c:	f002 020f 	and.w	r2, r2, #15
 800f290:	3108      	adds	r1, #8
 800f292:	3010      	adds	r0, #16
 800f294:	f003 f99d 	bl	80125d2 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f298:	7b23      	ldrb	r3, [r4, #12]
 800f29a:	f003 030f 	and.w	r3, r3, #15
 800f29e:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800f2a8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800f2ac:	7922      	ldrb	r2, [r4, #4]
 800f2ae:	1a11      	subs	r1, r2, r0
 800f2b0:	2904      	cmp	r1, #4
 800f2b2:	dc16      	bgt.n	800f2e2 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800f2b4:	6822      	ldr	r2, [r4, #0]
 800f2b6:	7923      	ldrb	r3, [r4, #4]
 800f2b8:	441a      	add	r2, r3
 800f2ba:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800f2be:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800f2c0:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800f2c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f2c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800f2ca:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800f2ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f2d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800f2d4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800f2d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f2dc:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800f2de:	2000      	movs	r0, #0
}
 800f2e0:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800f2e2:	6821      	ldr	r1, [r4, #0]
 800f2e4:	3309      	adds	r3, #9
 800f2e6:	5c08      	ldrb	r0, [r1, r0]
 800f2e8:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800f2ec:	1ad2      	subs	r2, r2, r3
 800f2ee:	b2d2      	uxtb	r2, r2
 800f2f0:	3a04      	subs	r2, #4
 800f2f2:	b2d2      	uxtb	r2, r2
 800f2f4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800f2f8:	4419      	add	r1, r3
 800f2fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f2fc:	f003 f969 	bl	80125d2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800f300:	e7d8      	b.n	800f2b4 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800f302:	2002      	movs	r0, #2
}
 800f304:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800f306:	2002      	movs	r0, #2
 800f308:	e7ea      	b.n	800f2e0 <LoRaMacParserData+0x94>

0800f30a <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f30a:	b370      	cbz	r0, 800f36a <LoRaMacSerializerJoinRequest+0x60>
{
 800f30c:	b510      	push	{r4, lr}
 800f30e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f310:	6803      	ldr	r3, [r0, #0]
 800f312:	b363      	cbz	r3, 800f36e <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800f314:	7902      	ldrb	r2, [r0, #4]
 800f316:	2a16      	cmp	r2, #22
 800f318:	d92b      	bls.n	800f372 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800f31a:	7942      	ldrb	r2, [r0, #5]
 800f31c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f31e:	4601      	mov	r1, r0
 800f320:	f851 0b06 	ldr.w	r0, [r1], #6
 800f324:	2208      	movs	r2, #8
 800f326:	3001      	adds	r0, #1
 800f328:	f003 f95e 	bl	80125e8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800f32c:	4621      	mov	r1, r4
 800f32e:	f851 0b0e 	ldr.w	r0, [r1], #14
 800f332:	2208      	movs	r2, #8
 800f334:	3009      	adds	r0, #9
 800f336:	f003 f957 	bl	80125e8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800f33a:	8ae2      	ldrh	r2, [r4, #22]
 800f33c:	6823      	ldr	r3, [r4, #0]
 800f33e:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800f340:	8ae3      	ldrh	r3, [r4, #22]
 800f342:	6822      	ldr	r2, [r4, #0]
 800f344:	0a1b      	lsrs	r3, r3, #8
 800f346:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800f348:	69a2      	ldr	r2, [r4, #24]
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800f34e:	69a3      	ldr	r3, [r4, #24]
 800f350:	0a1b      	lsrs	r3, r3, #8
 800f352:	6822      	ldr	r2, [r4, #0]
 800f354:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800f356:	8b62      	ldrh	r2, [r4, #26]
 800f358:	6823      	ldr	r3, [r4, #0]
 800f35a:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800f35c:	7ee2      	ldrb	r2, [r4, #27]
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800f362:	2317      	movs	r3, #23
 800f364:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800f366:	2000      	movs	r0, #0
}
 800f368:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f36a:	2001      	movs	r0, #1
}
 800f36c:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f36e:	2001      	movs	r0, #1
 800f370:	e7fa      	b.n	800f368 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800f372:	2002      	movs	r0, #2
 800f374:	e7f8      	b.n	800f368 <LoRaMacSerializerJoinRequest+0x5e>

0800f376 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f376:	2800      	cmp	r0, #0
 800f378:	d066      	beq.n	800f448 <LoRaMacSerializerData+0xd2>
{
 800f37a:	b538      	push	{r3, r4, r5, lr}
 800f37c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f37e:	6801      	ldr	r1, [r0, #0]
 800f380:	2900      	cmp	r1, #0
 800f382:	d063      	beq.n	800f44c <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f384:	7b02      	ldrb	r2, [r0, #12]
 800f386:	f002 020f 	and.w	r2, r2, #15
 800f38a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800f38e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f392:	b10b      	cbz	r3, 800f398 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800f394:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800f398:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800f39a:	3304      	adds	r3, #4
 800f39c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800f39e:	7922      	ldrb	r2, [r4, #4]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d355      	bcc.n	800f450 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800f3a4:	7963      	ldrb	r3, [r4, #5]
 800f3a6:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800f3a8:	68a2      	ldr	r2, [r4, #8]
 800f3aa:	6823      	ldr	r3, [r4, #0]
 800f3ac:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800f3ae:	68a3      	ldr	r3, [r4, #8]
 800f3b0:	0a1b      	lsrs	r3, r3, #8
 800f3b2:	6822      	ldr	r2, [r4, #0]
 800f3b4:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800f3b6:	8962      	ldrh	r2, [r4, #10]
 800f3b8:	6823      	ldr	r3, [r4, #0]
 800f3ba:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800f3bc:	7ae2      	ldrb	r2, [r4, #11]
 800f3be:	6823      	ldr	r3, [r4, #0]
 800f3c0:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800f3c2:	6823      	ldr	r3, [r4, #0]
 800f3c4:	7b22      	ldrb	r2, [r4, #12]
 800f3c6:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800f3c8:	89e2      	ldrh	r2, [r4, #14]
 800f3ca:	6823      	ldr	r3, [r4, #0]
 800f3cc:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800f3ce:	89e3      	ldrh	r3, [r4, #14]
 800f3d0:	6822      	ldr	r2, [r4, #0]
 800f3d2:	0a1b      	lsrs	r3, r3, #8
 800f3d4:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	f851 0b10 	ldr.w	r0, [r1], #16
 800f3dc:	7b22      	ldrb	r2, [r4, #12]
 800f3de:	f002 020f 	and.w	r2, r2, #15
 800f3e2:	3008      	adds	r0, #8
 800f3e4:	f003 f8f5 	bl	80125d2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f3e8:	7b23      	ldrb	r3, [r4, #12]
 800f3ea:	f003 030f 	and.w	r3, r3, #15
 800f3ee:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800f3f2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800f3f6:	b12a      	cbz	r2, 800f404 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800f3f8:	6822      	ldr	r2, [r4, #0]
 800f3fa:	f894 1020 	ldrb.w	r1, [r4, #32]
 800f3fe:	5551      	strb	r1, [r2, r5]
 800f400:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800f404:	6820      	ldr	r0, [r4, #0]
 800f406:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800f40a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f40c:	4428      	add	r0, r5
 800f40e:	f003 f8e0 	bl	80125d2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800f412:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f416:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800f418:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f41a:	6821      	ldr	r1, [r4, #0]
 800f41c:	1c5a      	adds	r2, r3, #1
 800f41e:	b292      	uxth	r2, r2
 800f420:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800f422:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f424:	0a08      	lsrs	r0, r1, #8
 800f426:	6825      	ldr	r5, [r4, #0]
 800f428:	1c99      	adds	r1, r3, #2
 800f42a:	b289      	uxth	r1, r1
 800f42c:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800f42e:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800f430:	6820      	ldr	r0, [r4, #0]
 800f432:	1cda      	adds	r2, r3, #3
 800f434:	b292      	uxth	r2, r2
 800f436:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800f438:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800f43c:	6821      	ldr	r1, [r4, #0]
 800f43e:	3304      	adds	r3, #4
 800f440:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800f442:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800f444:	2000      	movs	r0, #0
}
 800f446:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f448:	2001      	movs	r0, #1
}
 800f44a:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f44c:	2001      	movs	r0, #1
 800f44e:	e7fa      	b.n	800f446 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800f450:	2002      	movs	r0, #2
 800f452:	e7f8      	b.n	800f446 <LoRaMacSerializerData+0xd0>

0800f454 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800f454:	4b02      	ldr	r3, [pc, #8]	; (800f460 <NvmDataMgmtEvent+0xc>)
 800f456:	881a      	ldrh	r2, [r3, #0]
 800f458:	4310      	orrs	r0, r2
 800f45a:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop
 800f460:	20003ce0 	.word	0x20003ce0

0800f464 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800f464:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800f466:	4b06      	ldr	r3, [pc, #24]	; (800f480 <NvmDataMgmtStoreBegin+0x1c>)
 800f468:	881b      	ldrh	r3, [r3, #0]
 800f46a:	b11b      	cbz	r3, 800f474 <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800f46c:	f7fe f914 	bl	800d698 <LoRaMacStop>
 800f470:	b918      	cbnz	r0, 800f47a <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f472:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800f474:	f06f 0001 	mvn.w	r0, #1
 800f478:	e7fb      	b.n	800f472 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800f47a:	f06f 0002 	mvn.w	r0, #2
 800f47e:	e7f8      	b.n	800f472 <NvmDataMgmtStoreBegin+0xe>
 800f480:	20003ce0 	.word	0x20003ce0

0800f484 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800f484:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f486:	2400      	movs	r4, #0
 800f488:	4b02      	ldr	r3, [pc, #8]	; (800f494 <NvmDataMgmtStoreEnd+0x10>)
 800f48a:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800f48c:	f7fe f8fc 	bl	800d688 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f490:	4620      	mov	r0, r4
 800f492:	bd10      	pop	{r4, pc}
 800f494:	20003ce0 	.word	0x20003ce0

0800f498 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800f498:	2805      	cmp	r0, #5
 800f49a:	d005      	beq.n	800f4a8 <RegionIsActive+0x10>
 800f49c:	2808      	cmp	r0, #8
 800f49e:	d001      	beq.n	800f4a4 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800f4a0:	2000      	movs	r0, #0
        }
    }
}
 800f4a2:	4770      	bx	lr
    switch( region )
 800f4a4:	2001      	movs	r0, #1
 800f4a6:	4770      	bx	lr
 800f4a8:	2001      	movs	r0, #1
 800f4aa:	4770      	bx	lr

0800f4ac <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800f4ac:	b500      	push	{lr}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	9200      	str	r2, [sp, #0]
    switch( region )
 800f4b8:	2b05      	cmp	r3, #5
 800f4ba:	d004      	beq.n	800f4c6 <RegionGetPhyParam+0x1a>
 800f4bc:	2b08      	cmp	r3, #8
 800f4be:	d009      	beq.n	800f4d4 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800f4c0:	9b00      	ldr	r3, [sp, #0]
 800f4c2:	9301      	str	r3, [sp, #4]
 800f4c4:	e002      	b.n	800f4cc <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800f4c6:	f000 fdeb 	bl	80100a0 <RegionEU868GetPhyParam>
 800f4ca:	9001      	str	r0, [sp, #4]
        }
    }
}
 800f4cc:	9801      	ldr	r0, [sp, #4]
 800f4ce:	b003      	add	sp, #12
 800f4d0:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800f4d4:	f001 fbd6 	bl	8010c84 <RegionUS915GetPhyParam>
 800f4d8:	9001      	str	r0, [sp, #4]
 800f4da:	e7f7      	b.n	800f4cc <RegionGetPhyParam+0x20>

0800f4dc <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800f4dc:	b508      	push	{r3, lr}
 800f4de:	4603      	mov	r3, r0
 800f4e0:	4608      	mov	r0, r1
    switch( region )
 800f4e2:	2b05      	cmp	r3, #5
 800f4e4:	d002      	beq.n	800f4ec <RegionSetBandTxDone+0x10>
 800f4e6:	2b08      	cmp	r3, #8
 800f4e8:	d003      	beq.n	800f4f2 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800f4ea:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800f4ec:	f000 fe94 	bl	8010218 <RegionEU868SetBandTxDone>
 800f4f0:	e7fb      	b.n	800f4ea <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800f4f2:	f001 fc9d 	bl	8010e30 <RegionUS915SetBandTxDone>
 800f4f6:	e7f8      	b.n	800f4ea <RegionSetBandTxDone+0xe>

0800f4f8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800f4f8:	b508      	push	{r3, lr}
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	4608      	mov	r0, r1
    switch( region )
 800f4fe:	2b05      	cmp	r3, #5
 800f500:	d002      	beq.n	800f508 <RegionInitDefaults+0x10>
 800f502:	2b08      	cmp	r3, #8
 800f504:	d003      	beq.n	800f50e <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800f506:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800f508:	f000 fea4 	bl	8010254 <RegionEU868InitDefaults>
 800f50c:	e7fb      	b.n	800f506 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800f50e:	f001 fcad 	bl	8010e6c <RegionUS915InitDefaults>
}
 800f512:	e7f8      	b.n	800f506 <RegionInitDefaults+0xe>

0800f514 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800f514:	b508      	push	{r3, lr}
 800f516:	4603      	mov	r3, r0
 800f518:	4608      	mov	r0, r1
 800f51a:	4611      	mov	r1, r2
    switch( region )
 800f51c:	2b05      	cmp	r3, #5
 800f51e:	d003      	beq.n	800f528 <RegionVerify+0x14>
 800f520:	2b08      	cmp	r3, #8
 800f522:	d004      	beq.n	800f52e <RegionVerify+0x1a>
 800f524:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800f526:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800f528:	f000 ff00 	bl	801032c <RegionEU868Verify>
 800f52c:	e7fb      	b.n	800f526 <RegionVerify+0x12>
        US915_VERIFY( );
 800f52e:	f001 fd41 	bl	8010fb4 <RegionUS915Verify>
 800f532:	e7f8      	b.n	800f526 <RegionVerify+0x12>

0800f534 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800f534:	b508      	push	{r3, lr}
 800f536:	4603      	mov	r3, r0
 800f538:	4608      	mov	r0, r1
    switch( region )
 800f53a:	2b05      	cmp	r3, #5
 800f53c:	d002      	beq.n	800f544 <RegionApplyCFList+0x10>
 800f53e:	2b08      	cmp	r3, #8
 800f540:	d003      	beq.n	800f54a <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800f542:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800f544:	f001 fac0 	bl	8010ac8 <RegionEU868ApplyCFList>
 800f548:	e7fb      	b.n	800f542 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800f54a:	f001 fd6d 	bl	8011028 <RegionUS915ApplyCFList>
}
 800f54e:	e7f8      	b.n	800f542 <RegionApplyCFList+0xe>

0800f550 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800f550:	b508      	push	{r3, lr}
 800f552:	4603      	mov	r3, r0
 800f554:	4608      	mov	r0, r1
    switch( region )
 800f556:	2b05      	cmp	r3, #5
 800f558:	d003      	beq.n	800f562 <RegionChanMaskSet+0x12>
 800f55a:	2b08      	cmp	r3, #8
 800f55c:	d004      	beq.n	800f568 <RegionChanMaskSet+0x18>
 800f55e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800f560:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800f562:	f000 ff29 	bl	80103b8 <RegionEU868ChanMaskSet>
 800f566:	e7fb      	b.n	800f560 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800f568:	f001 fd9c 	bl	80110a4 <RegionUS915ChanMaskSet>
 800f56c:	e7f8      	b.n	800f560 <RegionChanMaskSet+0x10>

0800f56e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f56e:	b508      	push	{r3, lr}
 800f570:	4684      	mov	ip, r0
 800f572:	4608      	mov	r0, r1
 800f574:	4611      	mov	r1, r2
 800f576:	461a      	mov	r2, r3
    switch( region )
 800f578:	f1bc 0f05 	cmp.w	ip, #5
 800f57c:	d003      	beq.n	800f586 <RegionComputeRxWindowParameters+0x18>
 800f57e:	f1bc 0f08 	cmp.w	ip, #8
 800f582:	d004      	beq.n	800f58e <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800f584:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800f586:	9b02      	ldr	r3, [sp, #8]
 800f588:	f000 ff34 	bl	80103f4 <RegionEU868ComputeRxWindowParameters>
 800f58c:	e7fa      	b.n	800f584 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800f58e:	9b02      	ldr	r3, [sp, #8]
 800f590:	f001 fdca 	bl	8011128 <RegionUS915ComputeRxWindowParameters>
}
 800f594:	e7f6      	b.n	800f584 <RegionComputeRxWindowParameters+0x16>

0800f596 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f596:	b508      	push	{r3, lr}
 800f598:	4603      	mov	r3, r0
 800f59a:	4608      	mov	r0, r1
 800f59c:	4611      	mov	r1, r2
    switch( region )
 800f59e:	2b05      	cmp	r3, #5
 800f5a0:	d003      	beq.n	800f5aa <RegionRxConfig+0x14>
 800f5a2:	2b08      	cmp	r3, #8
 800f5a4:	d004      	beq.n	800f5b0 <RegionRxConfig+0x1a>
 800f5a6:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800f5a8:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800f5aa:	f000 ff59 	bl	8010460 <RegionEU868RxConfig>
 800f5ae:	e7fb      	b.n	800f5a8 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800f5b0:	f001 fde8 	bl	8011184 <RegionUS915RxConfig>
 800f5b4:	e7f8      	b.n	800f5a8 <RegionRxConfig+0x12>

0800f5b6 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f5b6:	b508      	push	{r3, lr}
 800f5b8:	4684      	mov	ip, r0
 800f5ba:	4608      	mov	r0, r1
 800f5bc:	4611      	mov	r1, r2
 800f5be:	461a      	mov	r2, r3
    switch( region )
 800f5c0:	f1bc 0f05 	cmp.w	ip, #5
 800f5c4:	d004      	beq.n	800f5d0 <RegionTxConfig+0x1a>
 800f5c6:	f1bc 0f08 	cmp.w	ip, #8
 800f5ca:	d004      	beq.n	800f5d6 <RegionTxConfig+0x20>
 800f5cc:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800f5ce:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800f5d0:	f000 ffca 	bl	8010568 <RegionEU868TxConfig>
 800f5d4:	e7fb      	b.n	800f5ce <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800f5d6:	f001 fe2f 	bl	8011238 <RegionUS915TxConfig>
 800f5da:	e7f8      	b.n	800f5ce <RegionTxConfig+0x18>

0800f5dc <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800f5dc:	b500      	push	{lr}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	4684      	mov	ip, r0
 800f5e2:	4608      	mov	r0, r1
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	461a      	mov	r2, r3
    switch( region )
 800f5e8:	f1bc 0f05 	cmp.w	ip, #5
 800f5ec:	d006      	beq.n	800f5fc <RegionLinkAdrReq+0x20>
 800f5ee:	f1bc 0f08 	cmp.w	ip, #8
 800f5f2:	d009      	beq.n	800f608 <RegionLinkAdrReq+0x2c>
 800f5f4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f5f6:	b003      	add	sp, #12
 800f5f8:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800f5fc:	9b05      	ldr	r3, [sp, #20]
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	9b04      	ldr	r3, [sp, #16]
 800f602:	f001 f849 	bl	8010698 <RegionEU868LinkAdrReq>
 800f606:	e7f6      	b.n	800f5f6 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800f608:	9b05      	ldr	r3, [sp, #20]
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	9b04      	ldr	r3, [sp, #16]
 800f60e:	f001 fe8d 	bl	801132c <RegionUS915LinkAdrReq>
 800f612:	e7f0      	b.n	800f5f6 <RegionLinkAdrReq+0x1a>

0800f614 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f614:	b508      	push	{r3, lr}
 800f616:	4603      	mov	r3, r0
 800f618:	4608      	mov	r0, r1
    switch( region )
 800f61a:	2b05      	cmp	r3, #5
 800f61c:	d003      	beq.n	800f626 <RegionRxParamSetupReq+0x12>
 800f61e:	2b08      	cmp	r3, #8
 800f620:	d004      	beq.n	800f62c <RegionRxParamSetupReq+0x18>
 800f622:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f624:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800f626:	f001 f8fb 	bl	8010820 <RegionEU868RxParamSetupReq>
 800f62a:	e7fb      	b.n	800f624 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800f62c:	f001 ffc0 	bl	80115b0 <RegionUS915RxParamSetupReq>
 800f630:	e7f8      	b.n	800f624 <RegionRxParamSetupReq+0x10>

0800f632 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800f632:	b508      	push	{r3, lr}
 800f634:	4603      	mov	r3, r0
 800f636:	4608      	mov	r0, r1
    switch( region )
 800f638:	2b05      	cmp	r3, #5
 800f63a:	d003      	beq.n	800f644 <RegionNewChannelReq+0x12>
 800f63c:	2b08      	cmp	r3, #8
 800f63e:	d004      	beq.n	800f64a <RegionNewChannelReq+0x18>
 800f640:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f642:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800f644:	f001 fa81 	bl	8010b4a <RegionEU868NewChannelReq>
 800f648:	e7fb      	b.n	800f642 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800f64a:	f001 ffdc 	bl	8011606 <RegionUS915NewChannelReq>
 800f64e:	e7f8      	b.n	800f642 <RegionNewChannelReq+0x10>

0800f650 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800f650:	b508      	push	{r3, lr}
 800f652:	4603      	mov	r3, r0
 800f654:	4608      	mov	r0, r1
    switch( region )
 800f656:	2b05      	cmp	r3, #5
 800f658:	d003      	beq.n	800f662 <RegionTxParamSetupReq+0x12>
 800f65a:	2b08      	cmp	r3, #8
 800f65c:	d004      	beq.n	800f668 <RegionTxParamSetupReq+0x18>
 800f65e:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f660:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800f662:	f001 f901 	bl	8010868 <RegionEU868TxParamSetupReq>
 800f666:	e7fb      	b.n	800f660 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800f668:	f001 ffd0 	bl	801160c <RegionUS915TxParamSetupReq>
 800f66c:	e7f8      	b.n	800f660 <RegionTxParamSetupReq+0x10>

0800f66e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800f66e:	b508      	push	{r3, lr}
 800f670:	4603      	mov	r3, r0
 800f672:	4608      	mov	r0, r1
    switch( region )
 800f674:	2b05      	cmp	r3, #5
 800f676:	d003      	beq.n	800f680 <RegionDlChannelReq+0x12>
 800f678:	2b08      	cmp	r3, #8
 800f67a:	d004      	beq.n	800f686 <RegionDlChannelReq+0x18>
 800f67c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f67e:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800f680:	f001 f8f6 	bl	8010870 <RegionEU868DlChannelReq>
 800f684:	e7fb      	b.n	800f67e <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800f686:	f001 ffc4 	bl	8011612 <RegionUS915DlChannelReq>
 800f68a:	e7f8      	b.n	800f67e <RegionDlChannelReq+0x10>

0800f68c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800f68c:	b508      	push	{r3, lr}
 800f68e:	4603      	mov	r3, r0
 800f690:	4608      	mov	r0, r1
 800f692:	4611      	mov	r1, r2
    switch( region )
 800f694:	2b05      	cmp	r3, #5
 800f696:	d003      	beq.n	800f6a0 <RegionAlternateDr+0x14>
 800f698:	2b08      	cmp	r3, #8
 800f69a:	d004      	beq.n	800f6a6 <RegionAlternateDr+0x1a>
 800f69c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f69e:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800f6a0:	f001 f90e 	bl	80108c0 <RegionEU868AlternateDr>
 800f6a4:	e7fb      	b.n	800f69e <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800f6a6:	f001 ffb7 	bl	8011618 <RegionUS915AlternateDr>
 800f6aa:	e7f8      	b.n	800f69e <RegionAlternateDr+0x12>

0800f6ac <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f6ac:	b508      	push	{r3, lr}
 800f6ae:	4684      	mov	ip, r0
 800f6b0:	4608      	mov	r0, r1
 800f6b2:	4611      	mov	r1, r2
 800f6b4:	461a      	mov	r2, r3
    switch( region )
 800f6b6:	f1bc 0f05 	cmp.w	ip, #5
 800f6ba:	d004      	beq.n	800f6c6 <RegionNextChannel+0x1a>
 800f6bc:	f1bc 0f08 	cmp.w	ip, #8
 800f6c0:	d005      	beq.n	800f6ce <RegionNextChannel+0x22>
 800f6c2:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800f6c4:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800f6c6:	9b02      	ldr	r3, [sp, #8]
 800f6c8:	f001 f8fc 	bl	80108c4 <RegionEU868NextChannel>
 800f6cc:	e7fa      	b.n	800f6c4 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800f6ce:	9b02      	ldr	r3, [sp, #8]
 800f6d0:	f001 ffc4 	bl	801165c <RegionUS915NextChannel>
 800f6d4:	e7f6      	b.n	800f6c4 <RegionNextChannel+0x18>

0800f6d6 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800f6d6:	b508      	push	{r3, lr}
 800f6d8:	4684      	mov	ip, r0
 800f6da:	4608      	mov	r0, r1
 800f6dc:	4611      	mov	r1, r2
 800f6de:	461a      	mov	r2, r3
    switch( region )
 800f6e0:	f1bc 0f05 	cmp.w	ip, #5
 800f6e4:	d004      	beq.n	800f6f0 <RegionApplyDrOffset+0x1a>
 800f6e6:	f1bc 0f08 	cmp.w	ip, #8
 800f6ea:	d004      	beq.n	800f6f6 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800f6ec:	b2c8      	uxtb	r0, r1
 800f6ee:	e001      	b.n	800f6f4 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800f6f0:	f001 fa56 	bl	8010ba0 <RegionEU868ApplyDrOffset>
        }
    }
}
 800f6f4:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800f6f6:	f002 f85f 	bl	80117b8 <RegionUS915ApplyDrOffset>
 800f6fa:	e7fb      	b.n	800f6f4 <RegionApplyDrOffset+0x1e>

0800f6fc <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800f6fc:	4800      	ldr	r0, [pc, #0]	; (800f700 <RegionGetVersion+0x4>)
 800f6fe:	4770      	bx	lr
 800f700:	02010001 	.word	0x02010001

0800f704 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800f704:	468c      	mov	ip, r1
 800f706:	b1a9      	cbz	r1, 800f734 <FindAvailable125kHzChannels+0x30>
 800f708:	b1b2      	cbz	r2, 800f738 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800f70a:	2300      	movs	r3, #0
 800f70c:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800f70e:	e001      	b.n	800f714 <FindAvailable125kHzChannels+0x10>
 800f710:	3301      	adds	r3, #1
 800f712:	b2db      	uxtb	r3, r3
 800f714:	2b07      	cmp	r3, #7
 800f716:	d80b      	bhi.n	800f730 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800f718:	fa40 f103 	asr.w	r1, r0, r3
 800f71c:	f011 0f01 	tst.w	r1, #1
 800f720:	d0f6      	beq.n	800f710 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800f722:	7811      	ldrb	r1, [r2, #0]
 800f724:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800f728:	7811      	ldrb	r1, [r2, #0]
 800f72a:	3101      	adds	r1, #1
 800f72c:	7011      	strb	r1, [r2, #0]
 800f72e:	e7ef      	b.n	800f710 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800f730:	2000      	movs	r0, #0
 800f732:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f734:	2003      	movs	r0, #3
 800f736:	4770      	bx	lr
 800f738:	2003      	movs	r0, #3
}
 800f73a:	4770      	bx	lr

0800f73c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800f73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f73e:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800f740:	2300      	movs	r3, #0
 800f742:	9302      	str	r3, [sp, #8]
 800f744:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800f746:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800f74a:	2800      	cmp	r0, #0
 800f74c:	d03e      	beq.n	800f7cc <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800f74e:	460d      	mov	r5, r1
 800f750:	4617      	mov	r7, r2
 800f752:	4606      	mov	r6, r0
 800f754:	2900      	cmp	r1, #0
 800f756:	d03b      	beq.n	800f7d0 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800f758:	2a00      	cmp	r2, #0
 800f75a:	d03b      	beq.n	800f7d4 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800f75c:	780c      	ldrb	r4, [r1, #0]
 800f75e:	e017      	b.n	800f790 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800f760:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800f764:	0a00      	lsrs	r0, r0, #8
 800f766:	e019      	b.n	800f79c <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800f768:	3901      	subs	r1, #1
 800f76a:	2000      	movs	r0, #0
 800f76c:	f002 ff24 	bl	80125b8 <randr>
 800f770:	f100 0310 	add.w	r3, r0, #16
 800f774:	eb0d 0003 	add.w	r0, sp, r3
 800f778:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800f77c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f780:	703b      	strb	r3, [r7, #0]
 800f782:	e016      	b.n	800f7b2 <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800f784:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f788:	b9cb      	cbnz	r3, 800f7be <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800f78a:	782a      	ldrb	r2, [r5, #0]
 800f78c:	42a2      	cmp	r2, r4
 800f78e:	d016      	beq.n	800f7be <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800f790:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800f792:	f014 0f01 	tst.w	r4, #1
 800f796:	d1e3      	bne.n	800f760 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800f798:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800f79c:	f10d 0207 	add.w	r2, sp, #7
 800f7a0:	a902      	add	r1, sp, #8
 800f7a2:	f7ff ffaf 	bl	800f704 <FindAvailable125kHzChannels>
 800f7a6:	2803      	cmp	r0, #3
 800f7a8:	d00b      	beq.n	800f7c2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800f7aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f7ae:	2900      	cmp	r1, #0
 800f7b0:	d1da      	bne.n	800f768 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800f7b2:	3401      	adds	r4, #1
 800f7b4:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800f7b6:	2c07      	cmp	r4, #7
 800f7b8:	d9e4      	bls.n	800f784 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800f7ba:	2400      	movs	r4, #0
 800f7bc:	e7e2      	b.n	800f784 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800f7be:	b913      	cbnz	r3, 800f7c6 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800f7c0:	2003      	movs	r0, #3
}
 800f7c2:	b005      	add	sp, #20
 800f7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800f7c6:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	e7fa      	b.n	800f7c2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f7cc:	2003      	movs	r0, #3
 800f7ce:	e7f8      	b.n	800f7c2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800f7d0:	2003      	movs	r0, #3
 800f7d2:	e7f6      	b.n	800f7c2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800f7d4:	2003      	movs	r0, #3
 800f7d6:	e7f4      	b.n	800f7c2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800f7d8 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800f7d8:	fb02 1000 	mla	r0, r2, r0, r1
 800f7dc:	4770      	bx	lr

0800f7de <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800f7de:	b082      	sub	sp, #8
 800f7e0:	f10d 0c08 	add.w	ip, sp, #8
 800f7e4:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800f7e8:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800f7ea:	b971      	cbnz	r1, 800f80a <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800f7f2:	d306      	bcc.n	800f802 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800f7f4:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d80a      	bhi.n	800f812 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800f7fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f800:	e000      	b.n	800f804 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800f802:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800f804:	4298      	cmp	r0, r3
 800f806:	bf38      	it	cc
 800f808:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800f80a:	b900      	cbnz	r0, 800f80e <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800f80c:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800f80e:	b002      	add	sp, #8
 800f810:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800f812:	f242 7310 	movw	r3, #10000	; 0x2710
 800f816:	e7f5      	b.n	800f804 <GetDutyCycle+0x26>

0800f818 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800f818:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800f81a:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800f81c:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800f81e:	e001      	b.n	800f824 <CountChannels+0xc>
 800f820:	3301      	adds	r3, #1
 800f822:	b2db      	uxtb	r3, r3
 800f824:	428b      	cmp	r3, r1
 800f826:	d207      	bcs.n	800f838 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800f828:	2201      	movs	r2, #1
 800f82a:	409a      	lsls	r2, r3
 800f82c:	ea32 020c 	bics.w	r2, r2, ip
 800f830:	d1f6      	bne.n	800f820 <CountChannels+0x8>
        {
            nbActiveBits++;
 800f832:	3001      	adds	r0, #1
 800f834:	b2c0      	uxtb	r0, r0
 800f836:	e7f3      	b.n	800f820 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800f838:	4770      	bx	lr
	...

0800f83c <SetMaxTimeCredits>:
{
 800f83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f840:	b089      	sub	sp, #36	; 0x24
 800f842:	4604      	mov	r4, r0
 800f844:	460e      	mov	r6, r1
 800f846:	ad02      	add	r5, sp, #8
 800f848:	e885 000c 	stmia.w	r5, {r2, r3}
 800f84c:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800f850:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800f854:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f858:	f004 ff26 	bl	80146a8 <SysTimeToMs>
 800f85c:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800f85e:	2300      	movs	r3, #0
 800f860:	9304      	str	r3, [sp, #16]
 800f862:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800f864:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f868:	4631      	mov	r1, r6
 800f86a:	4620      	mov	r0, r4
 800f86c:	f7ff ffb7 	bl	800f7de <GetDutyCycle>
 800f870:	4605      	mov	r5, r0
    if( joined == false )
 800f872:	2e00      	cmp	r6, #0
 800f874:	d14c      	bne.n	800f910 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800f876:	2864      	cmp	r0, #100	; 0x64
 800f878:	d025      	beq.n	800f8c6 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800f87a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f87e:	d025      	beq.n	800f8cc <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800f880:	4e27      	ldr	r6, [pc, #156]	; (800f920 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800f882:	68a1      	ldr	r1, [r4, #8]
 800f884:	a806      	add	r0, sp, #24
 800f886:	f004 ff2f 	bl	80146e8 <SysTimeFromMs>
 800f88a:	9b07      	ldr	r3, [sp, #28]
 800f88c:	9300      	str	r3, [sp, #0]
 800f88e:	9b06      	ldr	r3, [sp, #24]
 800f890:	aa02      	add	r2, sp, #8
 800f892:	ca06      	ldmia	r2, {r1, r2}
 800f894:	a804      	add	r0, sp, #16
 800f896:	f004 fe8e 	bl	80145b6 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800f89a:	f1b8 0f00 	cmp.w	r8, #0
 800f89e:	d102      	bne.n	800f8a6 <SetMaxTimeCredits+0x6a>
 800f8a0:	f1b9 0f00 	cmp.w	r9, #0
 800f8a4:	d002      	beq.n	800f8ac <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800f8a6:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800f8a8:	42b3      	cmp	r3, r6
 800f8aa:	d012      	beq.n	800f8d2 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800f8ac:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800f8ae:	9b02      	ldr	r3, [sp, #8]
 800f8b0:	4a1c      	ldr	r2, [pc, #112]	; (800f924 <SetMaxTimeCredits+0xe8>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d812      	bhi.n	800f8dc <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800f8b6:	6863      	ldr	r3, [r4, #4]
 800f8b8:	b903      	cbnz	r3, 800f8bc <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800f8ba:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800f8bc:	6126      	str	r6, [r4, #16]
}
 800f8be:	4628      	mov	r0, r5
 800f8c0:	b009      	add	sp, #36	; 0x24
 800f8c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800f8c6:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800f8c8:	4e17      	ldr	r6, [pc, #92]	; (800f928 <SetMaxTimeCredits+0xec>)
 800f8ca:	e7da      	b.n	800f882 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800f8cc:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800f8ce:	4e17      	ldr	r6, [pc, #92]	; (800f92c <SetMaxTimeCredits+0xf0>)
 800f8d0:	e7d7      	b.n	800f882 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800f8d2:	9a04      	ldr	r2, [sp, #16]
 800f8d4:	4b16      	ldr	r3, [pc, #88]	; (800f930 <SetMaxTimeCredits+0xf4>)
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d9ed      	bls.n	800f8b6 <SetMaxTimeCredits+0x7a>
 800f8da:	e7e7      	b.n	800f8ac <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800f8dc:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800f8e0:	3b30      	subs	r3, #48	; 0x30
 800f8e2:	4a14      	ldr	r2, [pc, #80]	; (800f934 <SetMaxTimeCredits+0xf8>)
 800f8e4:	fba2 2303 	umull	r2, r3, r2, r3
 800f8e8:	0c1b      	lsrs	r3, r3, #16
 800f8ea:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800f8ec:	4a12      	ldr	r2, [pc, #72]	; (800f938 <SetMaxTimeCredits+0xfc>)
 800f8ee:	fb02 f303 	mul.w	r3, r2, r3
 800f8f2:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800f8f4:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800f8f8:	3330      	adds	r3, #48	; 0x30
 800f8fa:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800f902:	ab04      	add	r3, sp, #16
 800f904:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f908:	f004 fece 	bl	80146a8 <SysTimeToMs>
 800f90c:	60a0      	str	r0, [r4, #8]
 800f90e:	e7d2      	b.n	800f8b6 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800f910:	f1b8 0f00 	cmp.w	r8, #0
 800f914:	d102      	bne.n	800f91c <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800f916:	4e04      	ldr	r6, [pc, #16]	; (800f928 <SetMaxTimeCredits+0xec>)
 800f918:	60e6      	str	r6, [r4, #12]
 800f91a:	e7cc      	b.n	800f8b6 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800f91c:	4e02      	ldr	r6, [pc, #8]	; (800f928 <SetMaxTimeCredits+0xec>)
 800f91e:	e7ca      	b.n	800f8b6 <SetMaxTimeCredits+0x7a>
 800f920:	02932e00 	.word	0x02932e00
 800f924:	0001ec2f 	.word	0x0001ec2f
 800f928:	001b7740 	.word	0x001b7740
 800f92c:	0112a880 	.word	0x0112a880
 800f930:	0001517f 	.word	0x0001517f
 800f934:	c22e4507 	.word	0xc22e4507
 800f938:	00015180 	.word	0x00015180

0800f93c <UpdateTimeCredits>:
{
 800f93c:	b570      	push	{r4, r5, r6, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	4604      	mov	r4, r0
 800f942:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800f944:	9301      	str	r3, [sp, #4]
 800f946:	9200      	str	r2, [sp, #0]
 800f948:	ab06      	add	r3, sp, #24
 800f94a:	cb0c      	ldmia	r3, {r2, r3}
 800f94c:	f7ff ff76 	bl	800f83c <SetMaxTimeCredits>
 800f950:	4605      	mov	r5, r0
    if( joined == true )
 800f952:	b94e      	cbnz	r6, 800f968 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800f954:	68e2      	ldr	r2, [r4, #12]
 800f956:	6923      	ldr	r3, [r4, #16]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d900      	bls.n	800f95e <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800f95c:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800f95e:	9b08      	ldr	r3, [sp, #32]
 800f960:	6063      	str	r3, [r4, #4]
}
 800f962:	4628      	mov	r0, r5
 800f964:	b002      	add	sp, #8
 800f966:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800f968:	6860      	ldr	r0, [r4, #4]
 800f96a:	f004 ff1d 	bl	80147a8 <UTIL_TIMER_GetElapsedTime>
 800f96e:	68e3      	ldr	r3, [r4, #12]
 800f970:	4403      	add	r3, r0
 800f972:	60e3      	str	r3, [r4, #12]
 800f974:	e7ee      	b.n	800f954 <UpdateTimeCredits+0x18>

0800f976 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800f976:	4288      	cmp	r0, r1
 800f978:	db03      	blt.n	800f982 <RegionCommonValueInRange+0xc>
 800f97a:	4290      	cmp	r0, r2
 800f97c:	dd03      	ble.n	800f986 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800f97e:	2000      	movs	r0, #0
 800f980:	4770      	bx	lr
 800f982:	2000      	movs	r0, #0
 800f984:	4770      	bx	lr
        return 1;
 800f986:	2001      	movs	r0, #1
}
 800f988:	4770      	bx	lr

0800f98a <RegionCommonChanVerifyDr>:
{
 800f98a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f98e:	4682      	mov	sl, r0
 800f990:	460e      	mov	r6, r1
 800f992:	4690      	mov	r8, r2
 800f994:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800f998:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800f99c:	4619      	mov	r1, r3
 800f99e:	4640      	mov	r0, r8
 800f9a0:	f7ff ffe9 	bl	800f976 <RegionCommonValueInRange>
 800f9a4:	b338      	cbz	r0, 800f9f6 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800f9a6:	2500      	movs	r5, #0
 800f9a8:	462f      	mov	r7, r5
 800f9aa:	e01e      	b.n	800f9ea <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800f9ac:	3401      	adds	r4, #1
 800f9ae:	b2e4      	uxtb	r4, r4
 800f9b0:	2c0f      	cmp	r4, #15
 800f9b2:	d816      	bhi.n	800f9e2 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800f9b4:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800f9b8:	4123      	asrs	r3, r4
 800f9ba:	f013 0f01 	tst.w	r3, #1
 800f9be:	d0f5      	beq.n	800f9ac <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800f9c0:	193b      	adds	r3, r7, r4
 800f9c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f9c6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800f9ca:	7a19      	ldrb	r1, [r3, #8]
 800f9cc:	090a      	lsrs	r2, r1, #4
 800f9ce:	f001 010f 	and.w	r1, r1, #15
 800f9d2:	4640      	mov	r0, r8
 800f9d4:	f7ff ffcf 	bl	800f976 <RegionCommonValueInRange>
 800f9d8:	2801      	cmp	r0, #1
 800f9da:	d1e7      	bne.n	800f9ac <RegionCommonChanVerifyDr+0x22>
                    return true;
 800f9dc:	2001      	movs	r0, #1
}
 800f9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	b2ff      	uxtb	r7, r7
 800f9e6:	3501      	adds	r5, #1
 800f9e8:	b2ed      	uxtb	r5, r5
 800f9ea:	4557      	cmp	r7, sl
 800f9ec:	d201      	bcs.n	800f9f2 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800f9ee:	2400      	movs	r4, #0
 800f9f0:	e7de      	b.n	800f9b0 <RegionCommonChanVerifyDr+0x26>
    return false;
 800f9f2:	2000      	movs	r0, #0
 800f9f4:	e7f3      	b.n	800f9de <RegionCommonChanVerifyDr+0x54>
        return false;
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	e7f1      	b.n	800f9de <RegionCommonChanVerifyDr+0x54>

0800f9fa <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800f9fa:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800f9fe:	0913      	lsrs	r3, r2, #4
 800fa00:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800fa04:	d30e      	bcc.n	800fa24 <RegionCommonChanDisable+0x2a>
 800fa06:	4291      	cmp	r1, r2
 800fa08:	d20e      	bcs.n	800fa28 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800fa0a:	f001 010f 	and.w	r1, r1, #15
 800fa0e:	2301      	movs	r3, #1
 800fa10:	fa03 f101 	lsl.w	r1, r3, r1
 800fa14:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800fa18:	ea22 0101 	bic.w	r1, r2, r1
 800fa1c:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800fa20:	4618      	mov	r0, r3
 800fa22:	4770      	bx	lr
        return false;
 800fa24:	2000      	movs	r0, #0
 800fa26:	4770      	bx	lr
 800fa28:	2000      	movs	r0, #0
}
 800fa2a:	4770      	bx	lr

0800fa2c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800fa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800fa2e:	b188      	cbz	r0, 800fa54 <RegionCommonCountChannels+0x28>
 800fa30:	460c      	mov	r4, r1
 800fa32:	4616      	mov	r6, r2
 800fa34:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800fa36:	2500      	movs	r5, #0
 800fa38:	e008      	b.n	800fa4c <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800fa3a:	2110      	movs	r1, #16
 800fa3c:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800fa40:	f7ff feea 	bl	800f818 <CountChannels>
 800fa44:	4405      	add	r5, r0
 800fa46:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800fa48:	3401      	adds	r4, #1
 800fa4a:	b2e4      	uxtb	r4, r4
 800fa4c:	42b4      	cmp	r4, r6
 800fa4e:	d3f4      	bcc.n	800fa3a <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800fa50:	4628      	mov	r0, r5
 800fa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800fa54:	2500      	movs	r5, #0
 800fa56:	e7fb      	b.n	800fa50 <RegionCommonCountChannels+0x24>

0800fa58 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800fa58:	4684      	mov	ip, r0
 800fa5a:	b158      	cbz	r0, 800fa74 <RegionCommonChanMaskCopy+0x1c>
 800fa5c:	b109      	cbz	r1, 800fa62 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800fa5e:	2300      	movs	r3, #0
 800fa60:	e006      	b.n	800fa70 <RegionCommonChanMaskCopy+0x18>
 800fa62:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800fa64:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fa68:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	b2db      	uxtb	r3, r3
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d3f7      	bcc.n	800fa64 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800fa74:	4770      	bx	lr

0800fa76 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800fa76:	b082      	sub	sp, #8
 800fa78:	b538      	push	{r3, r4, r5, lr}
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	460d      	mov	r5, r1
 800fa7e:	4611      	mov	r1, r2
 800fa80:	aa04      	add	r2, sp, #16
 800fa82:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800fa86:	ca0c      	ldmia	r2, {r2, r3}
 800fa88:	f7ff fea9 	bl	800f7de <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800fa8c:	68e3      	ldr	r3, [r4, #12]
 800fa8e:	fb05 f000 	mul.w	r0, r5, r0
 800fa92:	4283      	cmp	r3, r0
 800fa94:	d905      	bls.n	800faa2 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800fa96:	1a18      	subs	r0, r3, r0
 800fa98:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800fa9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa9e:	b002      	add	sp, #8
 800faa0:	4770      	bx	lr
        band->TimeCredits = 0;
 800faa2:	2300      	movs	r3, #0
 800faa4:	60e3      	str	r3, [r4, #12]
}
 800faa6:	e7f8      	b.n	800fa9a <RegionCommonSetBandTxDone+0x24>

0800faa8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800faa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	b089      	sub	sp, #36	; 0x24
 800faae:	4607      	mov	r7, r0
 800fab0:	468b      	mov	fp, r1
 800fab2:	4691      	mov	r9, r2
 800fab4:	4698      	mov	r8, r3
 800fab6:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800faba:	f004 fe6b 	bl	8014794 <UTIL_TIMER_GetCurrentTime>
 800fabe:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800fac0:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800fac2:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800fac4:	f04f 33ff 	mov.w	r3, #4294967295
 800fac8:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800faca:	e005      	b.n	800fad8 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800facc:	2301      	movs	r3, #1
 800face:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800fad0:	441e      	add	r6, r3
 800fad2:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800fad4:	3401      	adds	r4, #1
 800fad6:	b2e4      	uxtb	r4, r4
 800fad8:	454c      	cmp	r4, r9
 800fada:	d25d      	bcs.n	800fb98 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800fadc:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800fae0:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800fae4:	9b04      	ldr	r3, [sp, #16]
 800fae6:	9302      	str	r3, [sp, #8]
 800fae8:	ab13      	add	r3, sp, #76	; 0x4c
 800faea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800faee:	e88d 0003 	stmia.w	sp, {r0, r1}
 800faf2:	4653      	mov	r3, sl
 800faf4:	4642      	mov	r2, r8
 800faf6:	4639      	mov	r1, r7
 800faf8:	4628      	mov	r0, r5
 800fafa:	f7ff ff1f 	bl	800f93c <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800fafe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb00:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800fb04:	68ea      	ldr	r2, [r5, #12]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d8e0      	bhi.n	800facc <RegionCommonUpdateBandTimeOff+0x24>
 800fb0a:	f1b8 0f00 	cmp.w	r8, #0
 800fb0e:	d101      	bne.n	800fb14 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800fb10:	2f00      	cmp	r7, #0
 800fb12:	d1db      	bne.n	800facc <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800fb14:	2100      	movs	r1, #0
 800fb16:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800fb18:	6929      	ldr	r1, [r5, #16]
 800fb1a:	4299      	cmp	r1, r3
 800fb1c:	d907      	bls.n	800fb2e <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800fb1e:	1a9b      	subs	r3, r3, r2
 800fb20:	9a05      	ldr	r2, [sp, #20]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	bf28      	it	cs
 800fb26:	461a      	movcs	r2, r3
 800fb28:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800fb2a:	3601      	adds	r6, #1
 800fb2c:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800fb2e:	2f00      	cmp	r7, #0
 800fb30:	d1d0      	bne.n	800fad4 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800fb32:	2300      	movs	r3, #0
 800fb34:	9306      	str	r3, [sp, #24]
 800fb36:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800fb3a:	2864      	cmp	r0, #100	; 0x64
 800fb3c:	d024      	beq.n	800fb88 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800fb3e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800fb42:	d025      	beq.n	800fb90 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800fb44:	4b19      	ldr	r3, [pc, #100]	; (800fbac <RegionCommonUpdateBandTimeOff+0x104>)
 800fb46:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800fb48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb4a:	4a18      	ldr	r2, [pc, #96]	; (800fbac <RegionCommonUpdateBandTimeOff+0x104>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d90c      	bls.n	800fb6a <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800fb50:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800fb54:	3b30      	subs	r3, #48	; 0x30
 800fb56:	4a16      	ldr	r2, [pc, #88]	; (800fbb0 <RegionCommonUpdateBandTimeOff+0x108>)
 800fb58:	fba2 2303 	umull	r2, r3, r2, r3
 800fb5c:	0c1b      	lsrs	r3, r3, #16
 800fb5e:	4a15      	ldr	r2, [pc, #84]	; (800fbb4 <RegionCommonUpdateBandTimeOff+0x10c>)
 800fb60:	fb03 2202 	mla	r2, r3, r2, r2
 800fb64:	9b06      	ldr	r3, [sp, #24]
 800fb66:	4413      	add	r3, r2
 800fb68:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800fb6a:	ad06      	add	r5, sp, #24
 800fb6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb6e:	9300      	str	r3, [sp, #0]
 800fb70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb72:	e895 0006 	ldmia.w	r5, {r1, r2}
 800fb76:	4628      	mov	r0, r5
 800fb78:	f004 fd1d 	bl	80145b6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800fb7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fb80:	f004 fd92 	bl	80146a8 <SysTimeToMs>
 800fb84:	9005      	str	r0, [sp, #20]
 800fb86:	e7a5      	b.n	800fad4 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800fb88:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800fb8c:	9306      	str	r3, [sp, #24]
 800fb8e:	e7db      	b.n	800fb48 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800fb90:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800fb94:	9306      	str	r3, [sp, #24]
 800fb96:	e7d7      	b.n	800fb48 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800fb98:	b11e      	cbz	r6, 800fba2 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800fb9a:	9805      	ldr	r0, [sp, #20]
 800fb9c:	b009      	add	sp, #36	; 0x24
 800fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800fba2:	f04f 33ff 	mov.w	r3, #4294967295
 800fba6:	9305      	str	r3, [sp, #20]
 800fba8:	e7f7      	b.n	800fb9a <RegionCommonUpdateBandTimeOff+0xf2>
 800fbaa:	bf00      	nop
 800fbac:	0001ec30 	.word	0x0001ec30
 800fbb0:	c22e4507 	.word	0xc22e4507
 800fbb4:	00015180 	.word	0x00015180

0800fbb8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800fbb8:	7803      	ldrb	r3, [r0, #0]
 800fbba:	2b03      	cmp	r3, #3
 800fbbc:	d001      	beq.n	800fbc2 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800fbbe:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800fbc0:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800fbc2:	7842      	ldrb	r2, [r0, #1]
 800fbc4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fbc8:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800fbca:	f003 030f 	and.w	r3, r3, #15
 800fbce:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800fbd0:	0913      	lsrs	r3, r2, #4
 800fbd2:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800fbd4:	7883      	ldrb	r3, [r0, #2]
 800fbd6:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800fbd8:	78c2      	ldrb	r2, [r0, #3]
 800fbda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fbde:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800fbe0:	7903      	ldrb	r3, [r0, #4]
 800fbe2:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800fbe4:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800fbe8:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800fbea:	f003 030f 	and.w	r3, r3, #15
 800fbee:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800fbf0:	2005      	movs	r0, #5
 800fbf2:	4770      	bx	lr

0800fbf4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800fbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf8:	b085      	sub	sp, #20
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	4688      	mov	r8, r1
 800fbfe:	4617      	mov	r7, r2
 800fc00:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800fc02:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800fc04:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800fc08:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800fc0c:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800fc10:	7943      	ldrb	r3, [r0, #5]
 800fc12:	b92b      	cbnz	r3, 800fc20 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800fc14:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800fc18:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800fc1c:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800fc20:	b355      	cbz	r5, 800fc78 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800fc22:	f1ba 0f0f 	cmp.w	sl, #15
 800fc26:	d114      	bne.n	800fc52 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800fc28:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800fc2c:	f1b9 0f0f 	cmp.w	r9, #15
 800fc30:	d020      	beq.n	800fc74 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800fc32:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800fc36:	9303      	str	r3, [sp, #12]
 800fc38:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800fc3c:	461c      	mov	r4, r3
 800fc3e:	4619      	mov	r1, r3
 800fc40:	4648      	mov	r0, r9
 800fc42:	f7ff fe98 	bl	800f976 <RegionCommonValueInRange>
 800fc46:	b9b8      	cbnz	r0, 800fc78 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800fc48:	454c      	cmp	r4, r9
 800fc4a:	dc21      	bgt.n	800fc90 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800fc4c:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800fc50:	e012      	b.n	800fc78 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800fc52:	69a3      	ldr	r3, [r4, #24]
 800fc54:	9301      	str	r3, [sp, #4]
 800fc56:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800fc60:	4652      	mov	r2, sl
 800fc62:	6921      	ldr	r1, [r4, #16]
 800fc64:	7b20      	ldrb	r0, [r4, #12]
 800fc66:	f7ff fe90 	bl	800f98a <RegionCommonChanVerifyDr>
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d1de      	bne.n	800fc2c <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800fc6e:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800fc72:	e7db      	b.n	800fc2c <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800fc74:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800fc78:	2d07      	cmp	r5, #7
 800fc7a:	d00c      	beq.n	800fc96 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800fc7c:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800fc80:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800fc84:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800fc88:	4628      	mov	r0, r5
 800fc8a:	b005      	add	sp, #20
 800fc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800fc90:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fc94:	e7f0      	b.n	800fc78 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800fc96:	f1bb 0f00 	cmp.w	fp, #0
 800fc9a:	d1ef      	bne.n	800fc7c <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800fc9c:	f04f 0b01 	mov.w	fp, #1
 800fca0:	e7ec      	b.n	800fc7c <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800fca4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800fca4:	4b02      	ldr	r3, [pc, #8]	; (800fcb0 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800fca6:	fa03 f000 	lsl.w	r0, r3, r0
}
 800fcaa:	fbb0 f0f1 	udiv	r0, r0, r1
 800fcae:	4770      	bx	lr
 800fcb0:	000f4240 	.word	0x000f4240

0800fcb4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800fcb4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800fcb8:	fbb3 f0f0 	udiv	r0, r3, r0
 800fcbc:	4770      	bx	lr
	...

0800fcc0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800fcc0:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800fcc2:	f1a1 0c04 	sub.w	ip, r1, #4
 800fcc6:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800fcca:	fb0e f202 	mul.w	r2, lr, r2
 800fcce:	fb00 220c 	mla	r2, r0, ip, r2
 800fcd2:	0052      	lsls	r2, r2, #1
 800fcd4:	d021      	beq.n	800fd1a <RegionCommonComputeRxWindowParameters+0x5a>
 800fcd6:	4402      	add	r2, r0
 800fcd8:	3a01      	subs	r2, #1
 800fcda:	fbb2 f2f0 	udiv	r2, r2, r0
 800fcde:	4291      	cmp	r1, r2
 800fce0:	bf38      	it	cc
 800fce2:	4611      	movcc	r1, r2
 800fce4:	9a01      	ldr	r2, [sp, #4]
 800fce6:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800fce8:	0082      	lsls	r2, r0, #2
 800fcea:	fb00 f101 	mul.w	r1, r0, r1
 800fcee:	b1b9      	cbz	r1, 800fd20 <RegionCommonComputeRxWindowParameters+0x60>
 800fcf0:	3101      	adds	r1, #1
 800fcf2:	0849      	lsrs	r1, r1, #1
 800fcf4:	1a51      	subs	r1, r2, r1
 800fcf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fcfa:	fb02 1313 	mls	r3, r2, r3, r1
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	dd10      	ble.n	800fd24 <RegionCommonComputeRxWindowParameters+0x64>
 800fd02:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800fd06:	4a0b      	ldr	r2, [pc, #44]	; (800fd34 <RegionCommonComputeRxWindowParameters+0x74>)
 800fd08:	fb82 1203 	smull	r1, r2, r2, r3
 800fd0c:	17db      	asrs	r3, r3, #31
 800fd0e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800fd12:	9a02      	ldr	r2, [sp, #8]
 800fd14:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800fd16:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800fd1a:	fbb2 f2f0 	udiv	r2, r2, r0
 800fd1e:	e7de      	b.n	800fcde <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800fd20:	0849      	lsrs	r1, r1, #1
 800fd22:	e7e7      	b.n	800fcf4 <RegionCommonComputeRxWindowParameters+0x34>
 800fd24:	4a03      	ldr	r2, [pc, #12]	; (800fd34 <RegionCommonComputeRxWindowParameters+0x74>)
 800fd26:	fb82 1203 	smull	r1, r2, r2, r3
 800fd2a:	17db      	asrs	r3, r3, #31
 800fd2c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800fd30:	e7ef      	b.n	800fd12 <RegionCommonComputeRxWindowParameters+0x52>
 800fd32:	bf00      	nop
 800fd34:	10624dd3 	.word	0x10624dd3

0800fd38 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	460d      	mov	r5, r1
 800fd3c:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800fd3e:	0040      	lsls	r0, r0, #1
 800fd40:	f7f0 fd48 	bl	80007d4 <__aeabi_ui2f>
 800fd44:	4601      	mov	r1, r0
 800fd46:	4628      	mov	r0, r5
 800fd48:	f7f0 fc92 	bl	8000670 <__aeabi_fsub>
 800fd4c:	4621      	mov	r1, r4
 800fd4e:	f7f0 fc8f 	bl	8000670 <__aeabi_fsub>
 800fd52:	f7f0 fb81 	bl	8000458 <__aeabi_f2d>
 800fd56:	f004 fff7 	bl	8014d48 <floor>
 800fd5a:	f7f0 fc5d 	bl	8000618 <__aeabi_d2iz>

    return phyTxPower;
}
 800fd5e:	b240      	sxtb	r0, r0
 800fd60:	bd38      	pop	{r3, r4, r5, pc}

0800fd62 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800fd62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd66:	b083      	sub	sp, #12
 800fd68:	4605      	mov	r5, r0
 800fd6a:	468b      	mov	fp, r1
 800fd6c:	9200      	str	r2, [sp, #0]
 800fd6e:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800fd70:	2600      	movs	r6, #0
 800fd72:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800fd74:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800fd76:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800fd78:	e04a      	b.n	800fe10 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800fd7a:	7a3a      	ldrb	r2, [r7, #8]
 800fd7c:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800fd80:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800fd84:	b252      	sxtb	r2, r2
 800fd86:	b249      	sxtb	r1, r1
 800fd88:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800fd8c:	f7ff fdf3 	bl	800f976 <RegionCommonValueInRange>
 800fd90:	b178      	cbz	r0, 800fdb2 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800fd92:	68ea      	ldr	r2, [r5, #12]
 800fd94:	7a7b      	ldrb	r3, [r7, #9]
 800fd96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fd9a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd9e:	7d1b      	ldrb	r3, [r3, #20]
 800fda0:	b35b      	cbz	r3, 800fdfa <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800fda2:	f109 0301 	add.w	r3, r9, #1
 800fda6:	eb08 0204 	add.w	r2, r8, r4
 800fdaa:	f80b 2009 	strb.w	r2, [fp, r9]
 800fdae:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800fdb2:	3401      	adds	r4, #1
 800fdb4:	b2e4      	uxtb	r4, r4
 800fdb6:	2c0f      	cmp	r4, #15
 800fdb8:	d824      	bhi.n	800fe04 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800fdba:	686b      	ldr	r3, [r5, #4]
 800fdbc:	0072      	lsls	r2, r6, #1
 800fdbe:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800fdc2:	4123      	asrs	r3, r4
 800fdc4:	f013 0f01 	tst.w	r3, #1
 800fdc8:	d0f3      	beq.n	800fdb2 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800fdca:	68a8      	ldr	r0, [r5, #8]
 800fdcc:	eb08 0304 	add.w	r3, r8, r4
 800fdd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fdd4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800fdd8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d0e8      	beq.n	800fdb2 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800fde0:	782b      	ldrb	r3, [r5, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d1c9      	bne.n	800fd7a <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800fde6:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d0c6      	beq.n	800fd7a <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800fdec:	5a9b      	ldrh	r3, [r3, r2]
 800fdee:	fa43 f104 	asr.w	r1, r3, r4
 800fdf2:	f011 0f01 	tst.w	r1, #1
 800fdf6:	d1c0      	bne.n	800fd7a <RegionCommonCountNbOfEnabledChannels+0x18>
 800fdf8:	e7db      	b.n	800fdb2 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800fdfa:	f10a 0a01 	add.w	sl, sl, #1
 800fdfe:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800fe02:	e7d6      	b.n	800fdb2 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800fe04:	f108 0810 	add.w	r8, r8, #16
 800fe08:	fa5f f888 	uxtb.w	r8, r8
 800fe0c:	3601      	adds	r6, #1
 800fe0e:	b2f6      	uxtb	r6, r6
 800fe10:	fa1f f388 	uxth.w	r3, r8
 800fe14:	8a2a      	ldrh	r2, [r5, #16]
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d201      	bcs.n	800fe1e <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800fe1a:	2400      	movs	r4, #0
 800fe1c:	e7cb      	b.n	800fdb6 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800fe1e:	9b00      	ldr	r3, [sp, #0]
 800fe20:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800fe24:	9b01      	ldr	r3, [sp, #4]
 800fe26:	f883 a000 	strb.w	sl, [r3]
}
 800fe2a:	b003      	add	sp, #12
 800fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe30 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800fe30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe34:	b085      	sub	sp, #20
 800fe36:	4604      	mov	r4, r0
 800fe38:	460f      	mov	r7, r1
 800fe3a:	4616      	mov	r6, r2
 800fe3c:	461d      	mov	r5, r3
 800fe3e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800fe42:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800fe46:	6840      	ldr	r0, [r0, #4]
 800fe48:	f004 fcae 	bl	80147a8 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800fe4c:	6823      	ldr	r3, [r4, #0]
 800fe4e:	1a1b      	subs	r3, r3, r0
 800fe50:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800fe54:	2301      	movs	r3, #1
 800fe56:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800fe5e:	6863      	ldr	r3, [r4, #4]
 800fe60:	b113      	cbz	r3, 800fe68 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800fe62:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800fe64:	4283      	cmp	r3, r0
 800fe66:	d81e      	bhi.n	800fea6 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800fe6c:	69e3      	ldr	r3, [r4, #28]
 800fe6e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800fe72:	781f      	ldrb	r7, [r3, #0]
 800fe74:	69a3      	ldr	r3, [r4, #24]
 800fe76:	9303      	str	r3, [sp, #12]
 800fe78:	ab01      	add	r3, sp, #4
 800fe7a:	f104 020c 	add.w	r2, r4, #12
 800fe7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe82:	e883 0003 	stmia.w	r3, {r0, r1}
 800fe86:	7d23      	ldrb	r3, [r4, #20]
 800fe88:	9300      	str	r3, [sp, #0]
 800fe8a:	7a23      	ldrb	r3, [r4, #8]
 800fe8c:	7a62      	ldrb	r2, [r4, #9]
 800fe8e:	4661      	mov	r1, ip
 800fe90:	4638      	mov	r0, r7
 800fe92:	f7ff fe09 	bl	800faa8 <RegionCommonUpdateBandTimeOff>
 800fe96:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800fe9a:	4643      	mov	r3, r8
 800fe9c:	462a      	mov	r2, r5
 800fe9e:	4631      	mov	r1, r6
 800fea0:	69e0      	ldr	r0, [r4, #28]
 800fea2:	f7ff ff5e 	bl	800fd62 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800fea6:	782b      	ldrb	r3, [r5, #0]
 800fea8:	b923      	cbnz	r3, 800feb4 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800feaa:	f898 3000 	ldrb.w	r3, [r8]
 800feae:	b13b      	cbz	r3, 800fec0 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800feb0:	200b      	movs	r0, #11
 800feb2:	e002      	b.n	800feba <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800feb4:	2000      	movs	r0, #0
 800feb6:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800feba:	b005      	add	sp, #20
 800febc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800fec0:	200c      	movs	r0, #12
 800fec2:	e7fa      	b.n	800feba <RegionCommonIdentifyChannels+0x8a>

0800fec4 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800feca:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800fece:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800fed2:	42a6      	cmp	r6, r4
 800fed4:	d011      	beq.n	800fefa <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800fed6:	3c01      	subs	r4, #1
 800fed8:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800feda:	42a6      	cmp	r6, r4
 800fedc:	d00e      	beq.n	800fefc <RegionCommonGetNextLowerTxDr+0x38>
 800fede:	68ab      	ldr	r3, [r5, #8]
 800fee0:	9301      	str	r3, [sp, #4]
 800fee2:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800fee6:	9300      	str	r3, [sp, #0]
 800fee8:	4633      	mov	r3, r6
 800feea:	4622      	mov	r2, r4
 800feec:	6869      	ldr	r1, [r5, #4]
 800feee:	78e8      	ldrb	r0, [r5, #3]
 800fef0:	f7ff fd4b 	bl	800f98a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d0ee      	beq.n	800fed6 <RegionCommonGetNextLowerTxDr+0x12>
 800fef8:	e000      	b.n	800fefc <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800fefa:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800fefc:	4620      	mov	r0, r4
 800fefe:	b002      	add	sp, #8
 800ff00:	bd70      	pop	{r4, r5, r6, pc}

0800ff02 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800ff02:	4288      	cmp	r0, r1
 800ff04:	bfb8      	it	lt
 800ff06:	4608      	movlt	r0, r1
 800ff08:	4770      	bx	lr
	...

0800ff0c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800ff0c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800ff10:	4a05      	ldr	r2, [pc, #20]	; (800ff28 <RegionCommonGetBandwidth+0x1c>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d004      	beq.n	800ff20 <RegionCommonGetBandwidth+0x14>
 800ff16:	4a05      	ldr	r2, [pc, #20]	; (800ff2c <RegionCommonGetBandwidth+0x20>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d103      	bne.n	800ff24 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800ff1c:	2002      	movs	r0, #2
 800ff1e:	4770      	bx	lr
            return 1;
 800ff20:	2001      	movs	r0, #1
 800ff22:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800ff24:	2000      	movs	r0, #0
    }
}
 800ff26:	4770      	bx	lr
 800ff28:	0003d090 	.word	0x0003d090
 800ff2c:	0007a120 	.word	0x0007a120

0800ff30 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800ff30:	b500      	push	{lr}
 800ff32:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800ff34:	2805      	cmp	r0, #5
 800ff36:	d80e      	bhi.n	800ff56 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800ff38:	9202      	str	r2, [sp, #8]
 800ff3a:	9101      	str	r1, [sp, #4]
 800ff3c:	4b0a      	ldr	r3, [pc, #40]	; (800ff68 <RegionCommonRxConfigPrint+0x38>)
 800ff3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ff42:	9300      	str	r3, [sp, #0]
 800ff44:	4b09      	ldr	r3, [pc, #36]	; (800ff6c <RegionCommonRxConfigPrint+0x3c>)
 800ff46:	2201      	movs	r2, #1
 800ff48:	2100      	movs	r1, #0
 800ff4a:	2002      	movs	r0, #2
 800ff4c:	f004 f9ea 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800ff50:	b005      	add	sp, #20
 800ff52:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800ff56:	9201      	str	r2, [sp, #4]
 800ff58:	9100      	str	r1, [sp, #0]
 800ff5a:	4b05      	ldr	r3, [pc, #20]	; (800ff70 <RegionCommonRxConfigPrint+0x40>)
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	2100      	movs	r1, #0
 800ff60:	2002      	movs	r0, #2
 800ff62:	f004 f9df 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 800ff66:	e7f3      	b.n	800ff50 <RegionCommonRxConfigPrint+0x20>
 800ff68:	080156cc 	.word	0x080156cc
 800ff6c:	08015664 	.word	0x08015664
 800ff70:	08015684 	.word	0x08015684

0800ff74 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800ff74:	b500      	push	{lr}
 800ff76:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800ff78:	9101      	str	r1, [sp, #4]
 800ff7a:	9000      	str	r0, [sp, #0]
 800ff7c:	4b04      	ldr	r3, [pc, #16]	; (800ff90 <RegionCommonTxConfigPrint+0x1c>)
 800ff7e:	2201      	movs	r2, #1
 800ff80:	2100      	movs	r1, #0
 800ff82:	2002      	movs	r0, #2
 800ff84:	f004 f9ce 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 800ff88:	b003      	add	sp, #12
 800ff8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff8e:	bf00      	nop
 800ff90:	080156a0 	.word	0x080156a0

0800ff94 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800ff94:	b538      	push	{r3, r4, r5, lr}
 800ff96:	4604      	mov	r4, r0
 800ff98:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800ff9a:	4b1b      	ldr	r3, [pc, #108]	; (8010008 <VerifyRfFreq+0x74>)
 800ff9c:	6a1b      	ldr	r3, [r3, #32]
 800ff9e:	4798      	blx	r3
 800ffa0:	b130      	cbz	r0, 800ffb0 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800ffa2:	4b1a      	ldr	r3, [pc, #104]	; (801000c <VerifyRfFreq+0x78>)
 800ffa4:	4423      	add	r3, r4
 800ffa6:	4a1a      	ldr	r2, [pc, #104]	; (8010010 <VerifyRfFreq+0x7c>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d802      	bhi.n	800ffb2 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800ffac:	2302      	movs	r3, #2
 800ffae:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800ffb0:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800ffb2:	4b18      	ldr	r3, [pc, #96]	; (8010014 <VerifyRfFreq+0x80>)
 800ffb4:	4423      	add	r3, r4
 800ffb6:	4a18      	ldr	r2, [pc, #96]	; (8010018 <VerifyRfFreq+0x84>)
 800ffb8:	4293      	cmp	r3, r2
 800ffba:	d802      	bhi.n	800ffc2 <VerifyRfFreq+0x2e>
        *band = 0;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	702b      	strb	r3, [r5, #0]
 800ffc0:	e7f6      	b.n	800ffb0 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800ffc2:	4b16      	ldr	r3, [pc, #88]	; (801001c <VerifyRfFreq+0x88>)
 800ffc4:	4423      	add	r3, r4
 800ffc6:	4a16      	ldr	r2, [pc, #88]	; (8010020 <VerifyRfFreq+0x8c>)
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d802      	bhi.n	800ffd2 <VerifyRfFreq+0x3e>
        *band = 1;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	702b      	strb	r3, [r5, #0]
 800ffd0:	e7ee      	b.n	800ffb0 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800ffd2:	4b14      	ldr	r3, [pc, #80]	; (8010024 <VerifyRfFreq+0x90>)
 800ffd4:	4423      	add	r3, r4
 800ffd6:	4a14      	ldr	r2, [pc, #80]	; (8010028 <VerifyRfFreq+0x94>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d802      	bhi.n	800ffe2 <VerifyRfFreq+0x4e>
        *band = 5;
 800ffdc:	2305      	movs	r3, #5
 800ffde:	702b      	strb	r3, [r5, #0]
 800ffe0:	e7e6      	b.n	800ffb0 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800ffe2:	4b12      	ldr	r3, [pc, #72]	; (801002c <VerifyRfFreq+0x98>)
 800ffe4:	4423      	add	r3, r4
 800ffe6:	4a12      	ldr	r2, [pc, #72]	; (8010030 <VerifyRfFreq+0x9c>)
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d802      	bhi.n	800fff2 <VerifyRfFreq+0x5e>
        *band = 3;
 800ffec:	2303      	movs	r3, #3
 800ffee:	702b      	strb	r3, [r5, #0]
 800fff0:	e7de      	b.n	800ffb0 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800fff2:	4b10      	ldr	r3, [pc, #64]	; (8010034 <VerifyRfFreq+0xa0>)
 800fff4:	4423      	add	r3, r4
 800fff6:	4a10      	ldr	r2, [pc, #64]	; (8010038 <VerifyRfFreq+0xa4>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d802      	bhi.n	8010002 <VerifyRfFreq+0x6e>
        *band = 4;
 800fffc:	2304      	movs	r3, #4
 800fffe:	702b      	strb	r3, [r5, #0]
 8010000:	e7d6      	b.n	800ffb0 <VerifyRfFreq+0x1c>
        return false;
 8010002:	2000      	movs	r0, #0
 8010004:	e7d4      	b.n	800ffb0 <VerifyRfFreq+0x1c>
 8010006:	bf00      	nop
 8010008:	08015d04 	.word	0x08015d04
 801000c:	cc8faa40 	.word	0xcc8faa40
 8010010:	001e847f 	.word	0x001e847f
 8010014:	cc7125c0 	.word	0xcc7125c0
 8010018:	002dc6c0 	.word	0x002dc6c0
 801001c:	cc435eff 	.word	0xcc435eff
 8010020:	000927bf 	.word	0x000927bf
 8010024:	cc38b0a0 	.word	0xcc38b0a0
 8010028:	0007a120 	.word	0x0007a120
 801002c:	cc2e0240 	.word	0xcc2e0240
 8010030:	0003d090 	.word	0x0003d090
 8010034:	cc296e60 	.word	0xcc296e60
 8010038:	000493e0 	.word	0x000493e0

0801003c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801003c:	b570      	push	{r4, r5, r6, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	4605      	mov	r5, r0
 8010042:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 8010044:	4b13      	ldr	r3, [pc, #76]	; (8010094 <GetTimeOnAir+0x58>)
 8010046:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8010048:	4913      	ldr	r1, [pc, #76]	; (8010098 <GetTimeOnAir+0x5c>)
 801004a:	f7ff ff5f 	bl	800ff0c <RegionCommonGetBandwidth>
 801004e:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8010050:	2d07      	cmp	r5, #7
 8010052:	d00e      	beq.n	8010072 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8010054:	4b11      	ldr	r3, [pc, #68]	; (801009c <GetTimeOnAir+0x60>)
 8010056:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010058:	2001      	movs	r0, #1
 801005a:	9003      	str	r0, [sp, #12]
 801005c:	b2e4      	uxtb	r4, r4
 801005e:	9402      	str	r4, [sp, #8]
 8010060:	2300      	movs	r3, #0
 8010062:	9301      	str	r3, [sp, #4]
 8010064:	2308      	movs	r3, #8
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	4603      	mov	r3, r0
 801006a:	4632      	mov	r2, r6
 801006c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 801006e:	b004      	add	sp, #16
 8010070:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8010072:	4b0a      	ldr	r3, [pc, #40]	; (801009c <GetTimeOnAir+0x60>)
 8010074:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010076:	2301      	movs	r3, #1
 8010078:	9303      	str	r3, [sp, #12]
 801007a:	b2e4      	uxtb	r4, r4
 801007c:	9402      	str	r4, [sp, #8]
 801007e:	2000      	movs	r0, #0
 8010080:	9001      	str	r0, [sp, #4]
 8010082:	2305      	movs	r3, #5
 8010084:	9300      	str	r3, [sp, #0]
 8010086:	4603      	mov	r3, r0
 8010088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801008c:	fb06 f202 	mul.w	r2, r6, r2
 8010090:	47a8      	blx	r5
 8010092:	e7ec      	b.n	801006e <GetTimeOnAir+0x32>
 8010094:	08015704 	.word	0x08015704
 8010098:	080156e4 	.word	0x080156e4
 801009c:	08015d04 	.word	0x08015d04

080100a0 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80100a0:	b500      	push	{lr}
 80100a2:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 80100a4:	2300      	movs	r3, #0
 80100a6:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80100a8:	7803      	ldrb	r3, [r0, #0]
 80100aa:	3b0b      	subs	r3, #11
 80100ac:	2b2d      	cmp	r3, #45	; 0x2d
 80100ae:	d82f      	bhi.n	8010110 <RegionEU868GetPhyParam+0x70>
 80100b0:	e8df f003 	tbb	[pc, r3]
 80100b4:	3f393633 	.word	0x3f393633
 80100b8:	504c4845 	.word	0x504c4845
 80100bc:	2e5c5854 	.word	0x2e5c5854
 80100c0:	6e682e65 	.word	0x6e682e65
 80100c4:	2e2e7774 	.word	0x2e2e7774
 80100c8:	2e177f7b 	.word	0x2e177f7b
 80100cc:	2e2e2e2e 	.word	0x2e2e2e2e
 80100d0:	2e2e2e2e 	.word	0x2e2e2e2e
 80100d4:	2e2e2e2e 	.word	0x2e2e2e2e
 80100d8:	2e8c8582 	.word	0x2e8c8582
 80100dc:	2e928f2e 	.word	0x2e928f2e
 80100e0:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80100e2:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80100e6:	f88d 3004 	strb.w	r3, [sp, #4]
 80100ea:	2307      	movs	r3, #7
 80100ec:	f88d 3005 	strb.w	r3, [sp, #5]
 80100f0:	2300      	movs	r3, #0
 80100f2:	f88d 3006 	strb.w	r3, [sp, #6]
 80100f6:	2310      	movs	r3, #16
 80100f8:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80100fc:	4b3e      	ldr	r3, [pc, #248]	; (80101f8 <RegionEU868GetPhyParam+0x158>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010104:	9202      	str	r2, [sp, #8]
 8010106:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8010108:	a801      	add	r0, sp, #4
 801010a:	f7ff fedb 	bl	800fec4 <RegionCommonGetNextLowerTxDr>
 801010e:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8010110:	9804      	ldr	r0, [sp, #16]
 8010112:	9005      	str	r0, [sp, #20]
}
 8010114:	b007      	add	sp, #28
 8010116:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801011a:	2340      	movs	r3, #64	; 0x40
 801011c:	9304      	str	r3, [sp, #16]
            break;
 801011e:	e7f7      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8010120:	2320      	movs	r3, #32
 8010122:	9304      	str	r3, [sp, #16]
            break;
 8010124:	e7f4      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8010126:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801012a:	4a34      	ldr	r2, [pc, #208]	; (80101fc <RegionEU868GetPhyParam+0x15c>)
 801012c:	5cd3      	ldrb	r3, [r2, r3]
 801012e:	9304      	str	r3, [sp, #16]
            break;
 8010130:	e7ee      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8010132:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010136:	4a32      	ldr	r2, [pc, #200]	; (8010200 <RegionEU868GetPhyParam+0x160>)
 8010138:	5cd3      	ldrb	r3, [r2, r3]
 801013a:	9304      	str	r3, [sp, #16]
            break;
 801013c:	e7e8      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801013e:	2301      	movs	r3, #1
 8010140:	9304      	str	r3, [sp, #16]
            break;
 8010142:	e7e5      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8010144:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010148:	9304      	str	r3, [sp, #16]
            break;
 801014a:	e7e1      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801014c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010150:	9304      	str	r3, [sp, #16]
            break;
 8010152:	e7dd      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8010154:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010158:	9304      	str	r3, [sp, #16]
            break;
 801015a:	e7d9      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801015c:	f241 3388 	movw	r3, #5000	; 0x1388
 8010160:	9304      	str	r3, [sp, #16]
            break;
 8010162:	e7d5      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8010164:	f241 7370 	movw	r3, #6000	; 0x1770
 8010168:	9304      	str	r3, [sp, #16]
            break;
 801016a:	e7d1      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801016c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010170:	4824      	ldr	r0, [pc, #144]	; (8010204 <RegionEU868GetPhyParam+0x164>)
 8010172:	f002 fa21 	bl	80125b8 <randr>
 8010176:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801017a:	9004      	str	r0, [sp, #16]
            break;
 801017c:	e7c8      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801017e:	4b22      	ldr	r3, [pc, #136]	; (8010208 <RegionEU868GetPhyParam+0x168>)
 8010180:	9304      	str	r3, [sp, #16]
            break;
 8010182:	e7c5      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8010184:	4b1c      	ldr	r3, [pc, #112]	; (80101f8 <RegionEU868GetPhyParam+0x158>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801018c:	9304      	str	r3, [sp, #16]
            break;
 801018e:	e7bf      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8010190:	4b19      	ldr	r3, [pc, #100]	; (80101f8 <RegionEU868GetPhyParam+0x158>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8010198:	9304      	str	r3, [sp, #16]
            break;
 801019a:	e7b9      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801019c:	2310      	movs	r3, #16
 801019e:	9304      	str	r3, [sp, #16]
            break;
 80101a0:	e7b6      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 80101a2:	4b15      	ldr	r3, [pc, #84]	; (80101f8 <RegionEU868GetPhyParam+0x158>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	9304      	str	r3, [sp, #16]
            break;
 80101a8:	e7b2      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80101aa:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80101ae:	9304      	str	r3, [sp, #16]
            break;
 80101b0:	e7ae      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80101b2:	4b16      	ldr	r3, [pc, #88]	; (801020c <RegionEU868GetPhyParam+0x16c>)
 80101b4:	9304      	str	r3, [sp, #16]
            break;
 80101b6:	e7ab      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80101b8:	4b13      	ldr	r3, [pc, #76]	; (8010208 <RegionEU868GetPhyParam+0x168>)
 80101ba:	9304      	str	r3, [sp, #16]
            break;
 80101bc:	e7a8      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80101be:	2311      	movs	r3, #17
 80101c0:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80101c4:	2301      	movs	r3, #1
 80101c6:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 80101ca:	e7a1      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80101cc:	2303      	movs	r3, #3
 80101ce:	9304      	str	r3, [sp, #16]
            break;
 80101d0:	e79e      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80101d2:	4b0d      	ldr	r3, [pc, #52]	; (8010208 <RegionEU868GetPhyParam+0x168>)
 80101d4:	9304      	str	r3, [sp, #16]
            break;
 80101d6:	e79b      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80101d8:	2303      	movs	r3, #3
 80101da:	9304      	str	r3, [sp, #16]
            break;
 80101dc:	e798      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80101de:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80101e2:	4a0b      	ldr	r2, [pc, #44]	; (8010210 <RegionEU868GetPhyParam+0x170>)
 80101e4:	5cd3      	ldrb	r3, [r2, r3]
 80101e6:	9304      	str	r3, [sp, #16]
            break;
 80101e8:	e792      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80101ea:	490a      	ldr	r1, [pc, #40]	; (8010214 <RegionEU868GetPhyParam+0x174>)
 80101ec:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80101f0:	f7ff fe8c 	bl	800ff0c <RegionCommonGetBandwidth>
 80101f4:	9004      	str	r0, [sp, #16]
            break;
 80101f6:	e78b      	b.n	8010110 <RegionEU868GetPhyParam+0x70>
 80101f8:	20003ce8 	.word	0x20003ce8
 80101fc:	0801570c 	.word	0x0801570c
 8010200:	08015714 	.word	0x08015714
 8010204:	fffffc18 	.word	0xfffffc18
 8010208:	33d3e608 	.word	0x33d3e608
 801020c:	4009999a 	.word	0x4009999a
 8010210:	08015704 	.word	0x08015704
 8010214:	080156e4 	.word	0x080156e4

08010218 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010218:	b510      	push	{r4, lr}
 801021a:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801021c:	4b0b      	ldr	r3, [pc, #44]	; (801024c <RegionEU868SetBandTxDone+0x34>)
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	7803      	ldrb	r3, [r0, #0]
 8010222:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010226:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801022a:	7a5b      	ldrb	r3, [r3, #9]
 801022c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8010230:	4b07      	ldr	r3, [pc, #28]	; (8010250 <RegionEU868SetBandTxDone+0x38>)
 8010232:	681c      	ldr	r4, [r3, #0]
 8010234:	6903      	ldr	r3, [r0, #16]
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	68c3      	ldr	r3, [r0, #12]
 801023a:	7842      	ldrb	r2, [r0, #1]
 801023c:	6881      	ldr	r1, [r0, #8]
 801023e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8010242:	f7ff fc18 	bl	800fa76 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8010246:	b002      	add	sp, #8
 8010248:	bd10      	pop	{r4, pc}
 801024a:	bf00      	nop
 801024c:	20003ce8 	.word	0x20003ce8
 8010250:	20003ce4 	.word	0x20003ce4

08010254 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8010254:	b530      	push	{r4, r5, lr}
 8010256:	b0a5      	sub	sp, #148	; 0x94
 8010258:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801025a:	2290      	movs	r2, #144	; 0x90
 801025c:	2100      	movs	r1, #0
 801025e:	4668      	mov	r0, sp
 8010260:	f004 fd6a 	bl	8014d38 <memset>
 8010264:	2364      	movs	r3, #100	; 0x64
 8010266:	f8ad 3000 	strh.w	r3, [sp]
 801026a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801026e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010272:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8010276:	210a      	movs	r1, #10
 8010278:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 801027c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8010280:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8010284:	7b23      	ldrb	r3, [r4, #12]
 8010286:	2b01      	cmp	r3, #1
 8010288:	d032      	beq.n	80102f0 <RegionEU868InitDefaults+0x9c>
 801028a:	2b02      	cmp	r3, #2
 801028c:	d03e      	beq.n	801030c <RegionEU868InitDefaults+0xb8>
 801028e:	b10b      	cbz	r3, 8010294 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 8010290:	b025      	add	sp, #148	; 0x94
 8010292:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d0fa      	beq.n	8010290 <RegionEU868InitDefaults+0x3c>
 801029a:	6863      	ldr	r3, [r4, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d0f7      	beq.n	8010290 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80102a0:	4d1f      	ldr	r5, [pc, #124]	; (8010320 <RegionEU868InitDefaults+0xcc>)
 80102a2:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 80102a4:	68a0      	ldr	r0, [r4, #8]
 80102a6:	4b1f      	ldr	r3, [pc, #124]	; (8010324 <RegionEU868InitDefaults+0xd0>)
 80102a8:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80102aa:	2290      	movs	r2, #144	; 0x90
 80102ac:	4669      	mov	r1, sp
 80102ae:	f002 f990 	bl	80125d2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80102b2:	682c      	ldr	r4, [r5, #0]
 80102b4:	4b1c      	ldr	r3, [pc, #112]	; (8010328 <RegionEU868InitDefaults+0xd4>)
 80102b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80102be:	f104 0c0c 	add.w	ip, r4, #12
 80102c2:	f103 020c 	add.w	r2, r3, #12
 80102c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80102c8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80102cc:	f104 0c18 	add.w	ip, r4, #24
 80102d0:	3318      	adds	r3, #24
 80102d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102d6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80102da:	2307      	movs	r3, #7
 80102dc:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80102e0:	2201      	movs	r2, #1
 80102e2:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 80102e6:	f504 7058 	add.w	r0, r4, #864	; 0x360
 80102ea:	f7ff fbb5 	bl	800fa58 <RegionCommonChanMaskCopy>
            break;
 80102ee:	e7cf      	b.n	8010290 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80102f0:	4b0b      	ldr	r3, [pc, #44]	; (8010320 <RegionEU868InitDefaults+0xcc>)
 80102f2:	6818      	ldr	r0, [r3, #0]
 80102f4:	2300      	movs	r3, #0
 80102f6:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80102f8:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80102fa:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80102fc:	2201      	movs	r2, #1
 80102fe:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8010302:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010306:	f7ff fba7 	bl	800fa58 <RegionCommonChanMaskCopy>
            break;
 801030a:	e7c1      	b.n	8010290 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801030c:	4b04      	ldr	r3, [pc, #16]	; (8010320 <RegionEU868InitDefaults+0xcc>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8010314:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8010318:	430a      	orrs	r2, r1
 801031a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 801031e:	e7b7      	b.n	8010290 <RegionEU868InitDefaults+0x3c>
 8010320:	20003ce8 	.word	0x20003ce8
 8010324:	20003ce4 	.word	0x20003ce4
 8010328:	08014ea8 	.word	0x08014ea8

0801032c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801032c:	b500      	push	{lr}
 801032e:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8010330:	290f      	cmp	r1, #15
 8010332:	d83c      	bhi.n	80103ae <RegionEU868Verify+0x82>
 8010334:	e8df f001 	tbb	[pc, r1]
 8010338:	3b3b3b0a 	.word	0x3b3b3b0a
 801033c:	271d133b 	.word	0x271d133b
 8010340:	3b31313b 	.word	0x3b31313b
 8010344:	083b3b3b 	.word	0x083b3b3b
 8010348:	2001      	movs	r0, #1
 801034a:	e031      	b.n	80103b0 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 801034c:	2300      	movs	r3, #0
 801034e:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 8010352:	f10d 0107 	add.w	r1, sp, #7
 8010356:	6800      	ldr	r0, [r0, #0]
 8010358:	f7ff fe1c 	bl	800ff94 <VerifyRfFreq>
 801035c:	e028      	b.n	80103b0 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801035e:	2207      	movs	r2, #7
 8010360:	2100      	movs	r1, #0
 8010362:	f990 0000 	ldrsb.w	r0, [r0]
 8010366:	f7ff fb06 	bl	800f976 <RegionCommonValueInRange>
 801036a:	3800      	subs	r0, #0
 801036c:	bf18      	it	ne
 801036e:	2001      	movne	r0, #1
 8010370:	e01e      	b.n	80103b0 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8010372:	2205      	movs	r2, #5
 8010374:	2100      	movs	r1, #0
 8010376:	f990 0000 	ldrsb.w	r0, [r0]
 801037a:	f7ff fafc 	bl	800f976 <RegionCommonValueInRange>
 801037e:	3800      	subs	r0, #0
 8010380:	bf18      	it	ne
 8010382:	2001      	movne	r0, #1
 8010384:	e014      	b.n	80103b0 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8010386:	2207      	movs	r2, #7
 8010388:	2100      	movs	r1, #0
 801038a:	f990 0000 	ldrsb.w	r0, [r0]
 801038e:	f7ff faf2 	bl	800f976 <RegionCommonValueInRange>
 8010392:	3800      	subs	r0, #0
 8010394:	bf18      	it	ne
 8010396:	2001      	movne	r0, #1
 8010398:	e00a      	b.n	80103b0 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801039a:	2207      	movs	r2, #7
 801039c:	2100      	movs	r1, #0
 801039e:	f990 0000 	ldrsb.w	r0, [r0]
 80103a2:	f7ff fae8 	bl	800f976 <RegionCommonValueInRange>
 80103a6:	3800      	subs	r0, #0
 80103a8:	bf18      	it	ne
 80103aa:	2001      	movne	r0, #1
 80103ac:	e000      	b.n	80103b0 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 80103ae:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80103b0:	b003      	add	sp, #12
 80103b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080103b8 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80103b8:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80103ba:	7903      	ldrb	r3, [r0, #4]
 80103bc:	b11b      	cbz	r3, 80103c6 <RegionEU868ChanMaskSet+0xe>
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d00b      	beq.n	80103da <RegionEU868ChanMaskSet+0x22>
 80103c2:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 80103c4:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80103c6:	4b0a      	ldr	r3, [pc, #40]	; (80103f0 <RegionEU868ChanMaskSet+0x38>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2201      	movs	r2, #1
 80103cc:	6801      	ldr	r1, [r0, #0]
 80103ce:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80103d2:	f7ff fb41 	bl	800fa58 <RegionCommonChanMaskCopy>
    return true;
 80103d6:	2001      	movs	r0, #1
            break;
 80103d8:	e7f4      	b.n	80103c4 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80103da:	4b05      	ldr	r3, [pc, #20]	; (80103f0 <RegionEU868ChanMaskSet+0x38>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	2201      	movs	r2, #1
 80103e0:	6801      	ldr	r1, [r0, #0]
 80103e2:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80103e6:	f7ff fb37 	bl	800fa58 <RegionCommonChanMaskCopy>
    return true;
 80103ea:	2001      	movs	r0, #1
            break;
 80103ec:	e7ea      	b.n	80103c4 <RegionEU868ChanMaskSet+0xc>
 80103ee:	bf00      	nop
 80103f0:	20003ce8 	.word	0x20003ce8

080103f4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80103f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103f6:	b083      	sub	sp, #12
 80103f8:	460e      	mov	r6, r1
 80103fa:	4617      	mov	r7, r2
 80103fc:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80103fe:	2807      	cmp	r0, #7
 8010400:	bfa8      	it	ge
 8010402:	2007      	movge	r0, #7
 8010404:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8010406:	4913      	ldr	r1, [pc, #76]	; (8010454 <RegionEU868ComputeRxWindowParameters+0x60>)
 8010408:	f7ff fd80 	bl	800ff0c <RegionCommonGetBandwidth>
 801040c:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801040e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010412:	2b07      	cmp	r3, #7
 8010414:	d017      	beq.n	8010446 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8010416:	4a0f      	ldr	r2, [pc, #60]	; (8010454 <RegionEU868ComputeRxWindowParameters+0x60>)
 8010418:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801041c:	4a0e      	ldr	r2, [pc, #56]	; (8010458 <RegionEU868ComputeRxWindowParameters+0x64>)
 801041e:	5cd0      	ldrb	r0, [r2, r3]
 8010420:	f7ff fc40 	bl	800fca4 <RegionCommonComputeSymbolTimeLoRa>
 8010424:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8010426:	4b0d      	ldr	r3, [pc, #52]	; (801045c <RegionEU868ComputeRxWindowParameters+0x68>)
 8010428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801042a:	4798      	blx	r3
 801042c:	4603      	mov	r3, r0
 801042e:	f104 020c 	add.w	r2, r4, #12
 8010432:	9201      	str	r2, [sp, #4]
 8010434:	3408      	adds	r4, #8
 8010436:	9400      	str	r4, [sp, #0]
 8010438:	463a      	mov	r2, r7
 801043a:	4631      	mov	r1, r6
 801043c:	4628      	mov	r0, r5
 801043e:	f7ff fc3f 	bl	800fcc0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8010442:	b003      	add	sp, #12
 8010444:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8010446:	4a04      	ldr	r2, [pc, #16]	; (8010458 <RegionEU868ComputeRxWindowParameters+0x64>)
 8010448:	5cd0      	ldrb	r0, [r2, r3]
 801044a:	f7ff fc33 	bl	800fcb4 <RegionCommonComputeSymbolTimeFsk>
 801044e:	4605      	mov	r5, r0
 8010450:	e7e9      	b.n	8010426 <RegionEU868ComputeRxWindowParameters+0x32>
 8010452:	bf00      	nop
 8010454:	080156e4 	.word	0x080156e4
 8010458:	08015704 	.word	0x08015704
 801045c:	08015d04 	.word	0x08015d04

08010460 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010464:	b08a      	sub	sp, #40	; 0x28
 8010466:	4604      	mov	r4, r0
 8010468:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801046a:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801046e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8010472:	4b37      	ldr	r3, [pc, #220]	; (8010550 <RegionEU868RxConfig+0xf0>)
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	4798      	blx	r3
 8010478:	2800      	cmp	r0, #0
 801047a:	d167      	bne.n	801054c <RegionEU868RxConfig+0xec>
 801047c:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801047e:	7ce3      	ldrb	r3, [r4, #19]
 8010480:	b983      	cbnz	r3, 80104a4 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010482:	4b34      	ldr	r3, [pc, #208]	; (8010554 <RegionEU868RxConfig+0xf4>)
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	7823      	ldrb	r3, [r4, #0]
 8010488:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801048c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8010490:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010494:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010498:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801049c:	f1b8 0f00 	cmp.w	r8, #0
 80104a0:	d100      	bne.n	80104a4 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80104a2:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80104a4:	4b2c      	ldr	r3, [pc, #176]	; (8010558 <RegionEU868RxConfig+0xf8>)
 80104a6:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 80104aa:	4b29      	ldr	r3, [pc, #164]	; (8010550 <RegionEU868RxConfig+0xf0>)
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	4640      	mov	r0, r8
 80104b0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80104b2:	2d07      	cmp	r5, #7
 80104b4:	d02b      	beq.n	801050e <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80104b6:	4b26      	ldr	r3, [pc, #152]	; (8010550 <RegionEU868RxConfig+0xf0>)
 80104b8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80104bc:	7ca3      	ldrb	r3, [r4, #18]
 80104be:	9309      	str	r3, [sp, #36]	; 0x24
 80104c0:	2601      	movs	r6, #1
 80104c2:	9608      	str	r6, [sp, #32]
 80104c4:	2300      	movs	r3, #0
 80104c6:	9307      	str	r3, [sp, #28]
 80104c8:	9306      	str	r3, [sp, #24]
 80104ca:	9305      	str	r3, [sp, #20]
 80104cc:	9304      	str	r3, [sp, #16]
 80104ce:	9303      	str	r3, [sp, #12]
 80104d0:	8922      	ldrh	r2, [r4, #8]
 80104d2:	9202      	str	r2, [sp, #8]
 80104d4:	2208      	movs	r2, #8
 80104d6:	9201      	str	r2, [sp, #4]
 80104d8:	9300      	str	r3, [sp, #0]
 80104da:	4633      	mov	r3, r6
 80104dc:	464a      	mov	r2, r9
 80104de:	78a1      	ldrb	r1, [r4, #2]
 80104e0:	4630      	mov	r0, r6
 80104e2:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80104e4:	7c63      	ldrb	r3, [r4, #17]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d02d      	beq.n	8010546 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80104ea:	4b1c      	ldr	r3, [pc, #112]	; (801055c <RegionEU868RxConfig+0xfc>)
 80104ec:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80104ee:	4b18      	ldr	r3, [pc, #96]	; (8010550 <RegionEU868RxConfig+0xf0>)
 80104f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104f2:	310d      	adds	r1, #13
 80104f4:	b2c9      	uxtb	r1, r1
 80104f6:	4630      	mov	r0, r6
 80104f8:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80104fa:	462a      	mov	r2, r5
 80104fc:	4641      	mov	r1, r8
 80104fe:	7ce0      	ldrb	r0, [r4, #19]
 8010500:	f7ff fd16 	bl	800ff30 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8010504:	703d      	strb	r5, [r7, #0]
    return true;
 8010506:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8010508:	b00a      	add	sp, #40	; 0x28
 801050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801050e:	4b10      	ldr	r3, [pc, #64]	; (8010550 <RegionEU868RxConfig+0xf0>)
 8010510:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010514:	7ca3      	ldrb	r3, [r4, #18]
 8010516:	9309      	str	r3, [sp, #36]	; 0x24
 8010518:	2000      	movs	r0, #0
 801051a:	9008      	str	r0, [sp, #32]
 801051c:	9007      	str	r0, [sp, #28]
 801051e:	9006      	str	r0, [sp, #24]
 8010520:	2301      	movs	r3, #1
 8010522:	9305      	str	r3, [sp, #20]
 8010524:	9004      	str	r0, [sp, #16]
 8010526:	9003      	str	r0, [sp, #12]
 8010528:	8923      	ldrh	r3, [r4, #8]
 801052a:	9302      	str	r3, [sp, #8]
 801052c:	2305      	movs	r3, #5
 801052e:	9301      	str	r3, [sp, #4]
 8010530:	4b0b      	ldr	r3, [pc, #44]	; (8010560 <RegionEU868RxConfig+0x100>)
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	4603      	mov	r3, r0
 8010536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801053a:	fb02 f209 	mul.w	r2, r2, r9
 801053e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8010542:	47d0      	blx	sl
 8010544:	e7ce      	b.n	80104e4 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8010546:	4b07      	ldr	r3, [pc, #28]	; (8010564 <RegionEU868RxConfig+0x104>)
 8010548:	5d59      	ldrb	r1, [r3, r5]
 801054a:	e7d0      	b.n	80104ee <RegionEU868RxConfig+0x8e>
        return false;
 801054c:	2000      	movs	r0, #0
 801054e:	e7db      	b.n	8010508 <RegionEU868RxConfig+0xa8>
 8010550:	08015d04 	.word	0x08015d04
 8010554:	20003ce8 	.word	0x20003ce8
 8010558:	08015704 	.word	0x08015704
 801055c:	08015714 	.word	0x08015714
 8010560:	00014585 	.word	0x00014585
 8010564:	0801570c 	.word	0x0801570c

08010568 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	b08d      	sub	sp, #52	; 0x34
 801056e:	4604      	mov	r4, r0
 8010570:	460f      	mov	r7, r1
 8010572:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8010574:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010578:	4a42      	ldr	r2, [pc, #264]	; (8010684 <RegionEU868TxConfig+0x11c>)
 801057a:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801057e:	4d42      	ldr	r5, [pc, #264]	; (8010688 <RegionEU868TxConfig+0x120>)
 8010580:	682a      	ldr	r2, [r5, #0]
 8010582:	7803      	ldrb	r3, [r0, #0]
 8010584:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010588:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801058c:	7a5b      	ldrb	r3, [r3, #9]
 801058e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010592:	4a3e      	ldr	r2, [pc, #248]	; (801068c <RegionEU868TxConfig+0x124>)
 8010594:	6812      	ldr	r2, [r2, #0]
 8010596:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801059a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801059e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 80105a2:	f7ff fcae 	bl	800ff02 <RegionCommonLimitTxPower>
 80105a6:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80105a8:	4939      	ldr	r1, [pc, #228]	; (8010690 <RegionEU868TxConfig+0x128>)
 80105aa:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80105ae:	f7ff fcad 	bl	800ff0c <RegionCommonGetBandwidth>
 80105b2:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80105b4:	68a2      	ldr	r2, [r4, #8]
 80105b6:	6861      	ldr	r1, [r4, #4]
 80105b8:	4630      	mov	r0, r6
 80105ba:	f7ff fbbd 	bl	800fd38 <RegionCommonComputeTxPower>
 80105be:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80105c0:	4b34      	ldr	r3, [pc, #208]	; (8010694 <RegionEU868TxConfig+0x12c>)
 80105c2:	68da      	ldr	r2, [r3, #12]
 80105c4:	6829      	ldr	r1, [r5, #0]
 80105c6:	7823      	ldrb	r3, [r4, #0]
 80105c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80105cc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80105d0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80105d2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80105d6:	2b07      	cmp	r3, #7
 80105d8:	d031      	beq.n	801063e <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80105da:	4b2e      	ldr	r3, [pc, #184]	; (8010694 <RegionEU868TxConfig+0x12c>)
 80105dc:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80105e0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80105e4:	9308      	str	r3, [sp, #32]
 80105e6:	2200      	movs	r2, #0
 80105e8:	9207      	str	r2, [sp, #28]
 80105ea:	9206      	str	r2, [sp, #24]
 80105ec:	9205      	str	r2, [sp, #20]
 80105ee:	2501      	movs	r5, #1
 80105f0:	9504      	str	r5, [sp, #16]
 80105f2:	9203      	str	r2, [sp, #12]
 80105f4:	2308      	movs	r3, #8
 80105f6:	9302      	str	r3, [sp, #8]
 80105f8:	9501      	str	r5, [sp, #4]
 80105fa:	f8cd a000 	str.w	sl, [sp]
 80105fe:	464b      	mov	r3, r9
 8010600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010602:	4628      	mov	r0, r5
 8010604:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8010606:	4b20      	ldr	r3, [pc, #128]	; (8010688 <RegionEU868TxConfig+0x120>)
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	7823      	ldrb	r3, [r4, #0]
 801060c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010610:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8010614:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010618:	f7ff fcac 	bl	800ff74 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801061c:	89a1      	ldrh	r1, [r4, #12]
 801061e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010622:	f7ff fd0b 	bl	801003c <GetTimeOnAir>
 8010626:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801062a:	4b1a      	ldr	r3, [pc, #104]	; (8010694 <RegionEU868TxConfig+0x12c>)
 801062c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801062e:	7b21      	ldrb	r1, [r4, #12]
 8010630:	4628      	mov	r0, r5
 8010632:	4798      	blx	r3

    *txPower = txPowerLimited;
 8010634:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8010636:	2001      	movs	r0, #1
 8010638:	b00d      	add	sp, #52	; 0x34
 801063a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801063e:	4b15      	ldr	r3, [pc, #84]	; (8010694 <RegionEU868TxConfig+0x12c>)
 8010640:	69dd      	ldr	r5, [r3, #28]
 8010642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010646:	fb03 f30a 	mul.w	r3, r3, sl
 801064a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801064e:	9208      	str	r2, [sp, #32]
 8010650:	f04f 0b00 	mov.w	fp, #0
 8010654:	f8cd b01c 	str.w	fp, [sp, #28]
 8010658:	f8cd b018 	str.w	fp, [sp, #24]
 801065c:	f8cd b014 	str.w	fp, [sp, #20]
 8010660:	2201      	movs	r2, #1
 8010662:	9204      	str	r2, [sp, #16]
 8010664:	f8cd b00c 	str.w	fp, [sp, #12]
 8010668:	2205      	movs	r2, #5
 801066a:	9202      	str	r2, [sp, #8]
 801066c:	f8cd b004 	str.w	fp, [sp, #4]
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	464b      	mov	r3, r9
 8010674:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8010678:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801067a:	4658      	mov	r0, fp
 801067c:	47a8      	blx	r5
        modem = MODEM_FSK;
 801067e:	465d      	mov	r5, fp
 8010680:	e7c1      	b.n	8010606 <RegionEU868TxConfig+0x9e>
 8010682:	bf00      	nop
 8010684:	08015704 	.word	0x08015704
 8010688:	20003ce8 	.word	0x20003ce8
 801068c:	20003ce4 	.word	0x20003ce4
 8010690:	080156e4 	.word	0x080156e4
 8010694:	08015d04 	.word	0x08015d04

08010698 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801069c:	b08f      	sub	sp, #60	; 0x3c
 801069e:	4605      	mov	r5, r0
 80106a0:	4689      	mov	r9, r1
 80106a2:	4690      	mov	r8, r2
 80106a4:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80106a6:	2400      	movs	r4, #0
 80106a8:	940c      	str	r4, [sp, #48]	; 0x30
 80106aa:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 80106ae:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 80106b2:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80106b4:	e030      	b.n	8010718 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80106b6:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 80106ba:	2607      	movs	r6, #7
 80106bc:	e012      	b.n	80106e4 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80106be:	4a57      	ldr	r2, [pc, #348]	; (801081c <RegionEU868LinkAdrReq+0x184>)
 80106c0:	6812      	ldr	r2, [r2, #0]
 80106c2:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 80106c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80106ca:	b13a      	cbz	r2, 80106dc <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 80106cc:	2201      	movs	r2, #1
 80106ce:	fa02 f20c 	lsl.w	r2, r2, ip
 80106d2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80106d6:	430a      	orrs	r2, r1
 80106d8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80106dc:	f10c 0c01 	add.w	ip, ip, #1
 80106e0:	fa5f fc8c 	uxtb.w	ip, ip
 80106e4:	f1bc 0f0f 	cmp.w	ip, #15
 80106e8:	d816      	bhi.n	8010718 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 80106ea:	2b06      	cmp	r3, #6
 80106ec:	d0e7      	beq.n	80106be <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80106ee:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 80106f2:	fa4e fe0c 	asr.w	lr, lr, ip
 80106f6:	f01e 0f01 	tst.w	lr, #1
 80106fa:	d0ef      	beq.n	80106dc <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80106fc:	4a47      	ldr	r2, [pc, #284]	; (801081c <RegionEU868LinkAdrReq+0x184>)
 80106fe:	6812      	ldr	r2, [r2, #0]
 8010700:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8010704:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010708:	2a00      	cmp	r2, #0
 801070a:	d1e7      	bne.n	80106dc <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801070c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8010710:	e7e4      	b.n	80106dc <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 8010712:	2606      	movs	r6, #6
 8010714:	e000      	b.n	8010718 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 8010716:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010718:	7a2b      	ldrb	r3, [r5, #8]
 801071a:	42a3      	cmp	r3, r4
 801071c:	d918      	bls.n	8010750 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801071e:	6868      	ldr	r0, [r5, #4]
 8010720:	a90c      	add	r1, sp, #48	; 0x30
 8010722:	4420      	add	r0, r4
 8010724:	f7ff fa48 	bl	800fbb8 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8010728:	b190      	cbz	r0, 8010750 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 801072a:	4404      	add	r4, r0
 801072c:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 801072e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8010732:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8010736:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801073a:	b90b      	cbnz	r3, 8010740 <RegionEU868LinkAdrReq+0xa8>
 801073c:	2a00      	cmp	r2, #0
 801073e:	d0e8      	beq.n	8010712 <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8010740:	1e5a      	subs	r2, r3, #1
 8010742:	b2d2      	uxtb	r2, r2
 8010744:	2a04      	cmp	r2, #4
 8010746:	d9e6      	bls.n	8010716 <RegionEU868LinkAdrReq+0x7e>
 8010748:	2b06      	cmp	r3, #6
 801074a:	d9b4      	bls.n	80106b6 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 801074c:	2606      	movs	r6, #6
 801074e:	e7e3      	b.n	8010718 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010750:	2302      	movs	r3, #2
 8010752:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8010756:	7a6b      	ldrb	r3, [r5, #9]
 8010758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801075c:	a80a      	add	r0, sp, #40	; 0x28
 801075e:	f7ff fc9f 	bl	80100a0 <RegionEU868GetPhyParam>
 8010762:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 8010764:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8010768:	7aab      	ldrb	r3, [r5, #10]
 801076a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801076e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8010772:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8010776:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801077a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801077e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010782:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8010786:	f995 300b 	ldrsb.w	r3, [r5, #11]
 801078a:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801078e:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8010792:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8010796:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801079a:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801079e:	2310      	movs	r3, #16
 80107a0:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80107a4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80107a8:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80107aa:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80107ae:	2307      	movs	r3, #7
 80107b0:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80107b4:	4a19      	ldr	r2, [pc, #100]	; (801081c <RegionEU868LinkAdrReq+0x184>)
 80107b6:	6812      	ldr	r2, [r2, #0]
 80107b8:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80107ba:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80107be:	2300      	movs	r3, #0
 80107c0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80107c4:	682b      	ldr	r3, [r5, #0]
 80107c6:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80107c8:	ab0c      	add	r3, sp, #48	; 0x30
 80107ca:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80107ce:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 80107d2:	a801      	add	r0, sp, #4
 80107d4:	f7ff fa0e 	bl	800fbf4 <RegionCommonLinkAdrReqVerifyParams>
 80107d8:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80107da:	2807      	cmp	r0, #7
 80107dc:	d010      	beq.n	8010800 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80107de:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 80107e2:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 80107e6:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 80107ea:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 80107ee:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80107f2:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 80107f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80107f6:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 80107f8:	4628      	mov	r0, r5
 80107fa:	b00f      	add	sp, #60	; 0x3c
 80107fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8010800:	4e06      	ldr	r6, [pc, #24]	; (801081c <RegionEU868LinkAdrReq+0x184>)
 8010802:	6830      	ldr	r0, [r6, #0]
 8010804:	220c      	movs	r2, #12
 8010806:	2100      	movs	r1, #0
 8010808:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801080c:	f001 fef9 	bl	8012602 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8010810:	6833      	ldr	r3, [r6, #0]
 8010812:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8010816:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 801081a:	e7e0      	b.n	80107de <RegionEU868LinkAdrReq+0x146>
 801081c:	20003ce8 	.word	0x20003ce8

08010820 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8010820:	b530      	push	{r4, r5, lr}
 8010822:	b083      	sub	sp, #12
 8010824:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8010826:	2300      	movs	r3, #0
 8010828:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801082c:	f10d 0107 	add.w	r1, sp, #7
 8010830:	6840      	ldr	r0, [r0, #4]
 8010832:	f7ff fbaf 	bl	800ff94 <VerifyRfFreq>
 8010836:	b1a8      	cbz	r0, 8010864 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 8010838:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 801083a:	2207      	movs	r2, #7
 801083c:	2100      	movs	r1, #0
 801083e:	f994 0000 	ldrsb.w	r0, [r4]
 8010842:	f7ff f898 	bl	800f976 <RegionCommonValueInRange>
 8010846:	b908      	cbnz	r0, 801084c <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 8010848:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801084c:	2205      	movs	r2, #5
 801084e:	2100      	movs	r1, #0
 8010850:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010854:	f7ff f88f 	bl	800f976 <RegionCommonValueInRange>
 8010858:	b908      	cbnz	r0, 801085e <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801085a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 801085e:	4628      	mov	r0, r5
 8010860:	b003      	add	sp, #12
 8010862:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8010864:	2506      	movs	r5, #6
 8010866:	e7e8      	b.n	801083a <RegionEU868RxParamSetupReq+0x1a>

08010868 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8010868:	f04f 30ff 	mov.w	r0, #4294967295
 801086c:	4770      	bx	lr
	...

08010870 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8010870:	b510      	push	{r4, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8010876:	2300      	movs	r3, #0
 8010878:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801087c:	f10d 0107 	add.w	r1, sp, #7
 8010880:	6840      	ldr	r0, [r0, #4]
 8010882:	f7ff fb87 	bl	800ff94 <VerifyRfFreq>
 8010886:	b178      	cbz	r0, 80108a8 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 8010888:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801088a:	4b0c      	ldr	r3, [pc, #48]	; (80108bc <RegionEU868DlChannelReq+0x4c>)
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	7823      	ldrb	r3, [r4, #0]
 8010890:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010894:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8010898:	b909      	cbnz	r1, 801089e <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 801089a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801089e:	2803      	cmp	r0, #3
 80108a0:	d004      	beq.n	80108ac <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 80108a2:	b240      	sxtb	r0, r0
 80108a4:	b002      	add	sp, #8
 80108a6:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 80108a8:	2002      	movs	r0, #2
 80108aa:	e7ee      	b.n	801088a <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80108ac:	6861      	ldr	r1, [r4, #4]
 80108ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80108b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80108b6:	6059      	str	r1, [r3, #4]
 80108b8:	e7f3      	b.n	80108a2 <RegionEU868DlChannelReq+0x32>
 80108ba:	bf00      	nop
 80108bc:	20003ce8 	.word	0x20003ce8

080108c0 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 80108c0:	4770      	bx	lr
	...

080108c4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80108c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108c6:	b097      	sub	sp, #92	; 0x5c
 80108c8:	4604      	mov	r4, r0
 80108ca:	460f      	mov	r7, r1
 80108cc:	4616      	mov	r6, r2
 80108ce:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80108d0:	2100      	movs	r1, #0
 80108d2:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 80108d6:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80108da:	9111      	str	r1, [sp, #68]	; 0x44
 80108dc:	9112      	str	r1, [sp, #72]	; 0x48
 80108de:	9113      	str	r1, [sp, #76]	; 0x4c
 80108e0:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80108e2:	2307      	movs	r3, #7
 80108e4:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80108e8:	4b34      	ldr	r3, [pc, #208]	; (80109bc <RegionEU868NextChannel+0xf8>)
 80108ea:	6818      	ldr	r0, [r3, #0]
 80108ec:	2201      	movs	r2, #1
 80108ee:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80108f2:	f7ff f89b 	bl	800fa2c <RegionCommonCountChannels>
 80108f6:	b938      	cbnz	r0, 8010908 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80108f8:	4b30      	ldr	r3, [pc, #192]	; (80109bc <RegionEU868NextChannel+0xf8>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8010900:	f043 0307 	orr.w	r3, r3, #7
 8010904:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8010908:	7a63      	ldrb	r3, [r4, #9]
 801090a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801090e:	7a23      	ldrb	r3, [r4, #8]
 8010910:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8010914:	4b29      	ldr	r3, [pc, #164]	; (80109bc <RegionEU868NextChannel+0xf8>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f503 7258 	add.w	r2, r3, #864	; 0x360
 801091c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801091e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8010920:	4b27      	ldr	r3, [pc, #156]	; (80109c0 <RegionEU868NextChannel+0xfc>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8010926:	2310      	movs	r3, #16
 8010928:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 801092c:	f10d 030a 	add.w	r3, sp, #10
 8010930:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8010932:	6823      	ldr	r3, [r4, #0]
 8010934:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8010936:	6863      	ldr	r3, [r4, #4]
 8010938:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801093a:	7aa3      	ldrb	r3, [r4, #10]
 801093c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8010940:	2306      	movs	r3, #6
 8010942:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8010946:	ab0c      	add	r3, sp, #48	; 0x30
 8010948:	f104 020c 	add.w	r2, r4, #12
 801094c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010950:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8010954:	7d23      	ldrb	r3, [r4, #20]
 8010956:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801095a:	8ae1      	ldrh	r1, [r4, #22]
 801095c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8010960:	f7ff fb6c 	bl	801003c <GetTimeOnAir>
 8010964:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8010966:	ab03      	add	r3, sp, #12
 8010968:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801096a:	9601      	str	r6, [sp, #4]
 801096c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8010970:	9300      	str	r3, [sp, #0]
 8010972:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8010976:	aa11      	add	r2, sp, #68	; 0x44
 8010978:	4629      	mov	r1, r5
 801097a:	a809      	add	r0, sp, #36	; 0x24
 801097c:	f7ff fa58 	bl	800fe30 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8010980:	4604      	mov	r4, r0
 8010982:	b120      	cbz	r0, 801098e <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8010984:	280c      	cmp	r0, #12
 8010986:	d00f      	beq.n	80109a8 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8010988:	4620      	mov	r0, r4
 801098a:	b017      	add	sp, #92	; 0x5c
 801098c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801098e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8010992:	3901      	subs	r1, #1
 8010994:	f001 fe10 	bl	80125b8 <randr>
 8010998:	f100 0358 	add.w	r3, r0, #88	; 0x58
 801099c:	eb0d 0003 	add.w	r0, sp, r3
 80109a0:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 80109a4:	703b      	strb	r3, [r7, #0]
 80109a6:	e7ef      	b.n	8010988 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80109a8:	4b04      	ldr	r3, [pc, #16]	; (80109bc <RegionEU868NextChannel+0xf8>)
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 80109b0:	f043 0307 	orr.w	r3, r3, #7
 80109b4:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 80109b8:	e7e6      	b.n	8010988 <RegionEU868NextChannel+0xc4>
 80109ba:	bf00      	nop
 80109bc:	20003ce8 	.word	0x20003ce8
 80109c0:	20003ce4 	.word	0x20003ce4

080109c4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80109c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109c6:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80109c8:	2300      	movs	r3, #0
 80109ca:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 80109ce:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80109d0:	2d02      	cmp	r5, #2
 80109d2:	d94f      	bls.n	8010a74 <RegionEU868ChannelAdd+0xb0>
 80109d4:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80109d6:	2d0f      	cmp	r5, #15
 80109d8:	d84e      	bhi.n	8010a78 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80109da:	6803      	ldr	r3, [r0, #0]
 80109dc:	7a18      	ldrb	r0, [r3, #8]
 80109de:	f340 0003 	sbfx	r0, r0, #0, #4
 80109e2:	2207      	movs	r2, #7
 80109e4:	2100      	movs	r1, #0
 80109e6:	b240      	sxtb	r0, r0
 80109e8:	f7fe ffc5 	bl	800f976 <RegionCommonValueInRange>
 80109ec:	2800      	cmp	r0, #0
 80109ee:	d03d      	beq.n	8010a6c <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 80109f0:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	7a18      	ldrb	r0, [r3, #8]
 80109f6:	f340 1003 	sbfx	r0, r0, #4, #4
 80109fa:	2207      	movs	r2, #7
 80109fc:	2100      	movs	r1, #0
 80109fe:	b240      	sxtb	r0, r0
 8010a00:	f7fe ffb9 	bl	800f976 <RegionCommonValueInRange>
 8010a04:	b900      	cbnz	r0, 8010a08 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 8010a06:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8010a08:	6820      	ldr	r0, [r4, #0]
 8010a0a:	7a03      	ldrb	r3, [r0, #8]
 8010a0c:	f343 0203 	sbfx	r2, r3, #0, #4
 8010a10:	b252      	sxtb	r2, r2
 8010a12:	f343 1303 	sbfx	r3, r3, #4, #4
 8010a16:	b25b      	sxtb	r3, r3
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	dd00      	ble.n	8010a1e <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 8010a1c:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8010a1e:	f10d 0107 	add.w	r1, sp, #7
 8010a22:	6800      	ldr	r0, [r0, #0]
 8010a24:	f7ff fab6 	bl	800ff94 <VerifyRfFreq>
 8010a28:	b310      	cbz	r0, 8010a70 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 8010a2a:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8010a2c:	b106      	cbz	r6, 8010a30 <RegionEU868ChannelAdd+0x6c>
 8010a2e:	bb33      	cbnz	r3, 8010a7e <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8010a30:	bb3e      	cbnz	r6, 8010a82 <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8010a32:	bb43      	cbnz	r3, 8010a86 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8010a34:	4f15      	ldr	r7, [pc, #84]	; (8010a8c <RegionEU868ChannelAdd+0xc8>)
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	006e      	lsls	r6, r5, #1
 8010a3a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8010a3e:	220c      	movs	r2, #12
 8010a40:	6821      	ldr	r1, [r4, #0]
 8010a42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010a46:	f001 fdc4 	bl	80125d2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8010a4a:	683a      	ldr	r2, [r7, #0]
 8010a4c:	442e      	add	r6, r5
 8010a4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010a52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010a56:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8010a58:	2301      	movs	r3, #1
 8010a5a:	fa03 f505 	lsl.w	r5, r3, r5
 8010a5e:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8010a62:	431d      	orrs	r5, r3
 8010a64:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8010a68:	2000      	movs	r0, #0
 8010a6a:	e006      	b.n	8010a7a <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 8010a6c:	2601      	movs	r6, #1
 8010a6e:	e7c0      	b.n	80109f2 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 8010a70:	2301      	movs	r3, #1
 8010a72:	e7db      	b.n	8010a2c <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8010a74:	2006      	movs	r0, #6
 8010a76:	e000      	b.n	8010a7a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a78:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8010a7a:	b003      	add	sp, #12
 8010a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8010a7e:	2006      	movs	r0, #6
 8010a80:	e7fb      	b.n	8010a7a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8010a82:	2005      	movs	r0, #5
 8010a84:	e7f9      	b.n	8010a7a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8010a86:	2004      	movs	r0, #4
 8010a88:	e7f7      	b.n	8010a7a <RegionEU868ChannelAdd+0xb6>
 8010a8a:	bf00      	nop
 8010a8c:	20003ce8 	.word	0x20003ce8

08010a90 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8010a90:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8010a92:	2902      	cmp	r1, #2
 8010a94:	d801      	bhi.n	8010a9a <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 8010a96:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 8010a98:	4770      	bx	lr
{
 8010a9a:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8010a9c:	4b09      	ldr	r3, [pc, #36]	; (8010ac4 <RegionEU868ChannelsRemove+0x34>)
 8010a9e:	6818      	ldr	r0, [r3, #0]
 8010aa0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8010aa4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8010aa8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010aac:	2200      	movs	r2, #0
 8010aae:	f840 200c 	str.w	r2, [r0, ip]
 8010ab2:	605a      	str	r2, [r3, #4]
 8010ab4:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8010ab6:	2210      	movs	r2, #16
 8010ab8:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010abc:	f7fe ff9d 	bl	800f9fa <RegionCommonChanDisable>
}
 8010ac0:	bd08      	pop	{r3, pc}
 8010ac2:	bf00      	nop
 8010ac4:	20003ce8 	.word	0x20003ce8

08010ac8 <RegionEU868ApplyCFList>:
{
 8010ac8:	b570      	push	{r4, r5, r6, lr}
 8010aca:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8010acc:	2350      	movs	r3, #80	; 0x50
 8010ace:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8010ad2:	7a03      	ldrb	r3, [r0, #8]
 8010ad4:	2b10      	cmp	r3, #16
 8010ad6:	d136      	bne.n	8010b46 <RegionEU868ApplyCFList+0x7e>
 8010ad8:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 8010ada:	6843      	ldr	r3, [r0, #4]
 8010adc:	7bdd      	ldrb	r5, [r3, #15]
 8010ade:	2d00      	cmp	r5, #0
 8010ae0:	d131      	bne.n	8010b46 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8010ae2:	2403      	movs	r4, #3
 8010ae4:	e01b      	b.n	8010b1e <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8010ae6:	6872      	ldr	r2, [r6, #4]
 8010ae8:	5d53      	ldrb	r3, [r2, r5]
 8010aea:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8010aec:	442a      	add	r2, r5
 8010aee:	7851      	ldrb	r1, [r2, #1]
 8010af0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8010af4:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8010af6:	7892      	ldrb	r2, [r2, #2]
 8010af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010afc:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 8010afe:	2264      	movs	r2, #100	; 0x64
 8010b00:	fb02 f303 	mul.w	r3, r2, r3
 8010b04:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8010b06:	2300      	movs	r3, #0
 8010b08:	9304      	str	r3, [sp, #16]
 8010b0a:	e011      	b.n	8010b30 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 8010b0c:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 8010b10:	4668      	mov	r0, sp
 8010b12:	f7ff ffbd 	bl	8010a90 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8010b16:	3503      	adds	r5, #3
 8010b18:	b2ed      	uxtb	r5, r5
 8010b1a:	3401      	adds	r4, #1
 8010b1c:	b2e4      	uxtb	r4, r4
 8010b1e:	2c0f      	cmp	r4, #15
 8010b20:	d811      	bhi.n	8010b46 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8010b22:	2c07      	cmp	r4, #7
 8010b24:	d9df      	bls.n	8010ae6 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8010b26:	2300      	movs	r3, #0
 8010b28:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8010b2a:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8010b2e:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8010b30:	9b03      	ldr	r3, [sp, #12]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d0ea      	beq.n	8010b0c <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 8010b36:	ab03      	add	r3, sp, #12
 8010b38:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8010b3a:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 8010b3e:	a801      	add	r0, sp, #4
 8010b40:	f7ff ff40 	bl	80109c4 <RegionEU868ChannelAdd>
 8010b44:	e7e7      	b.n	8010b16 <RegionEU868ApplyCFList+0x4e>
}
 8010b46:	b006      	add	sp, #24
 8010b48:	bd70      	pop	{r4, r5, r6, pc}

08010b4a <RegionEU868NewChannelReq>:
{
 8010b4a:	b500      	push	{lr}
 8010b4c:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8010b4e:	6803      	ldr	r3, [r0, #0]
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	b952      	cbnz	r2, 8010b6a <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8010b54:	7903      	ldrb	r3, [r0, #4]
 8010b56:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8010b5a:	a801      	add	r0, sp, #4
 8010b5c:	f7ff ff98 	bl	8010a90 <RegionEU868ChannelsRemove>
 8010b60:	b1d0      	cbz	r0, 8010b98 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 8010b62:	2003      	movs	r0, #3
}
 8010b64:	b005      	add	sp, #20
 8010b66:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8010b6a:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8010b6c:	7903      	ldrb	r3, [r0, #4]
 8010b6e:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8010b72:	a802      	add	r0, sp, #8
 8010b74:	f7ff ff26 	bl	80109c4 <RegionEU868ChannelAdd>
 8010b78:	2806      	cmp	r0, #6
 8010b7a:	d80b      	bhi.n	8010b94 <RegionEU868NewChannelReq+0x4a>
 8010b7c:	e8df f000 	tbb	[pc, r0]
 8010b80:	0a0a0a04 	.word	0x0a0a0a04
 8010b84:	060e      	.short	0x060e
 8010b86:	08          	.byte	0x08
 8010b87:	00          	.byte	0x00
 8010b88:	2003      	movs	r0, #3
 8010b8a:	e7eb      	b.n	8010b64 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 8010b8c:	2001      	movs	r0, #1
                break;
 8010b8e:	e7e9      	b.n	8010b64 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8010b90:	2000      	movs	r0, #0
                break;
 8010b92:	e7e7      	b.n	8010b64 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8010b94:	2000      	movs	r0, #0
                break;
 8010b96:	e7e5      	b.n	8010b64 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 8010b98:	2000      	movs	r0, #0
 8010b9a:	e7e3      	b.n	8010b64 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 8010b9c:	2002      	movs	r0, #2
 8010b9e:	e7e1      	b.n	8010b64 <RegionEU868NewChannelReq+0x1a>

08010ba0 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8010ba0:	1a88      	subs	r0, r1, r2
 8010ba2:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	db01      	blt.n	8010bac <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 8010ba8:	b2c0      	uxtb	r0, r0
 8010baa:	4770      	bx	lr
        datarate = DR_0;
 8010bac:	2000      	movs	r0, #0
 8010bae:	e7fb      	b.n	8010ba8 <RegionEU868ApplyDrOffset+0x8>

08010bb0 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 8010bb0:	b510      	push	{r4, lr}
 8010bb2:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8010bb4:	4b10      	ldr	r3, [pc, #64]	; (8010bf8 <VerifyRfFreq+0x48>)
 8010bb6:	6a1b      	ldr	r3, [r3, #32]
 8010bb8:	4798      	blx	r3
 8010bba:	b1c8      	cbz	r0, 8010bf0 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8010bbc:	4b0f      	ldr	r3, [pc, #60]	; (8010bfc <VerifyRfFreq+0x4c>)
 8010bbe:	4423      	add	r3, r4
 8010bc0:	4a0f      	ldr	r2, [pc, #60]	; (8010c00 <VerifyRfFreq+0x50>)
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d813      	bhi.n	8010bee <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8010bc6:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 8010bca:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 8010bce:	f202 7245 	addw	r2, r2, #1861	; 0x745
 8010bd2:	fba2 1203 	umull	r1, r2, r2, r3
 8010bd6:	0c92      	lsrs	r2, r2, #18
 8010bd8:	490a      	ldr	r1, [pc, #40]	; (8010c04 <VerifyRfFreq+0x54>)
 8010bda:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8010bde:	b942      	cbnz	r2, 8010bf2 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8010be0:	4b09      	ldr	r3, [pc, #36]	; (8010c08 <VerifyRfFreq+0x58>)
 8010be2:	4423      	add	r3, r4
 8010be4:	4a09      	ldr	r2, [pc, #36]	; (8010c0c <VerifyRfFreq+0x5c>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d902      	bls.n	8010bf0 <VerifyRfFreq+0x40>
    {
        return false;
 8010bea:	2000      	movs	r0, #0
 8010bec:	e000      	b.n	8010bf0 <VerifyRfFreq+0x40>
        return false;
 8010bee:	2000      	movs	r0, #0
    }
    return true;
}
 8010bf0:	bd10      	pop	{r4, pc}
        return false;
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	e7fc      	b.n	8010bf0 <VerifyRfFreq+0x40>
 8010bf6:	bf00      	nop
 8010bf8:	08015d04 	.word	0x08015d04
 8010bfc:	c8f78f60 	.word	0xc8f78f60
 8010c00:	00401640 	.word	0x00401640
 8010c04:	000927c0 	.word	0x000927c0
 8010c08:	ca37fea0 	.word	0xca37fea0
 8010c0c:	01808580 	.word	0x01808580

08010c10 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8010c10:	b570      	push	{r4, r5, r6, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 8010c16:	4b0a      	ldr	r3, [pc, #40]	; (8010c40 <GetTimeOnAir+0x30>)
 8010c18:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8010c1a:	490a      	ldr	r1, [pc, #40]	; (8010c44 <GetTimeOnAir+0x34>)
 8010c1c:	f7ff f976 	bl	800ff0c <RegionCommonGetBandwidth>
 8010c20:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8010c22:	4b09      	ldr	r3, [pc, #36]	; (8010c48 <GetTimeOnAir+0x38>)
 8010c24:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010c26:	2001      	movs	r0, #1
 8010c28:	9003      	str	r0, [sp, #12]
 8010c2a:	b2e4      	uxtb	r4, r4
 8010c2c:	9402      	str	r4, [sp, #8]
 8010c2e:	2200      	movs	r2, #0
 8010c30:	9201      	str	r2, [sp, #4]
 8010c32:	2208      	movs	r2, #8
 8010c34:	9200      	str	r2, [sp, #0]
 8010c36:	4603      	mov	r3, r0
 8010c38:	4632      	mov	r2, r6
 8010c3a:	47a8      	blx	r5
}
 8010c3c:	b004      	add	sp, #16
 8010c3e:	bd70      	pop	{r4, r5, r6, pc}
 8010c40:	08015770 	.word	0x08015770
 8010c44:	0801571c 	.word	0x0801571c
 8010c48:	08015d04 	.word	0x08015d04

08010c4c <LimitTxPower>:
{
 8010c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c4e:	4606      	mov	r6, r0
 8010c50:	4615      	mov	r5, r2
 8010c52:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8010c54:	f7ff f955 	bl	800ff02 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8010c58:	2d04      	cmp	r5, #4
 8010c5a:	d105      	bne.n	8010c68 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8010c5c:	4634      	mov	r4, r6
 8010c5e:	2e02      	cmp	r6, #2
 8010c60:	bfb8      	it	lt
 8010c62:	2402      	movlt	r4, #2
}
 8010c64:	4620      	mov	r0, r4
 8010c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c68:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8010c6a:	2204      	movs	r2, #4
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	4638      	mov	r0, r7
 8010c70:	f7fe fedc 	bl	800fa2c <RegionCommonCountChannels>
 8010c74:	2831      	cmp	r0, #49	; 0x31
 8010c76:	d8f5      	bhi.n	8010c64 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8010c78:	4634      	mov	r4, r6
 8010c7a:	2e05      	cmp	r6, #5
 8010c7c:	bfb8      	it	lt
 8010c7e:	2405      	movlt	r4, #5
 8010c80:	e7f0      	b.n	8010c64 <LimitTxPower+0x18>
	...

08010c84 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8010c84:	b500      	push	{lr}
 8010c86:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8010c88:	2300      	movs	r3, #0
 8010c8a:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8010c8c:	7803      	ldrb	r3, [r0, #0]
 8010c8e:	3b01      	subs	r3, #1
 8010c90:	2b37      	cmp	r3, #55	; 0x37
 8010c92:	d81f      	bhi.n	8010cd4 <RegionUS915GetPhyParam+0x50>
 8010c94:	e8df f003 	tbb	[pc, r3]
 8010c98:	1e1e1e1c 	.word	0x1e1e1e1c
 8010c9c:	1e1e1e1e 	.word	0x1e1e1e1e
 8010ca0:	3e3b1e1e 	.word	0x3e3b1e1e
 8010ca4:	4d1e4741 	.word	0x4d1e4741
 8010ca8:	5d595551 	.word	0x5d595551
 8010cac:	6d6a1e61 	.word	0x6d6a1e61
 8010cb0:	7f7c7670 	.word	0x7f7c7670
 8010cb4:	86831e1e 	.word	0x86831e1e
 8010cb8:	1e1e1e23 	.word	0x1e1e1e23
 8010cbc:	1e1e1e1e 	.word	0x1e1e1e1e
 8010cc0:	1e1e1e1e 	.word	0x1e1e1e1e
 8010cc4:	90891e1e 	.word	0x90891e1e
 8010cc8:	a01e9d9a 	.word	0xa01e9d9a
 8010ccc:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8010cd0:	2308      	movs	r3, #8
 8010cd2:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8010cd4:	9804      	ldr	r0, [sp, #16]
 8010cd6:	9005      	str	r0, [sp, #20]
}
 8010cd8:	b007      	add	sp, #28
 8010cda:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8010cde:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010ce2:	f88d 3004 	strb.w	r3, [sp, #4]
 8010ce6:	2304      	movs	r3, #4
 8010ce8:	f88d 3005 	strb.w	r3, [sp, #5]
 8010cec:	2300      	movs	r3, #0
 8010cee:	f88d 3006 	strb.w	r3, [sp, #6]
 8010cf2:	2348      	movs	r3, #72	; 0x48
 8010cf4:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8010cf8:	4b44      	ldr	r3, [pc, #272]	; (8010e0c <RegionUS915GetPhyParam+0x188>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010d00:	9202      	str	r2, [sp, #8]
 8010d02:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8010d04:	a801      	add	r0, sp, #4
 8010d06:	f7ff f8dd 	bl	800fec4 <RegionCommonGetNextLowerTxDr>
 8010d0a:	9004      	str	r0, [sp, #16]
            break;
 8010d0c:	e7e2      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8010d0e:	2340      	movs	r3, #64	; 0x40
 8010d10:	9304      	str	r3, [sp, #16]
            break;
 8010d12:	e7df      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8010d14:	2320      	movs	r3, #32
 8010d16:	9304      	str	r3, [sp, #16]
            break;
 8010d18:	e7dc      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8010d1a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010d1e:	4a3c      	ldr	r2, [pc, #240]	; (8010e10 <RegionUS915GetPhyParam+0x18c>)
 8010d20:	5cd3      	ldrb	r3, [r2, r3]
 8010d22:	9304      	str	r3, [sp, #16]
            break;
 8010d24:	e7d6      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8010d26:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010d2a:	4a3a      	ldr	r2, [pc, #232]	; (8010e14 <RegionUS915GetPhyParam+0x190>)
 8010d2c:	5cd3      	ldrb	r3, [r2, r3]
 8010d2e:	9304      	str	r3, [sp, #16]
            break;
 8010d30:	e7d0      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 8010d32:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010d36:	9304      	str	r3, [sp, #16]
            break;
 8010d38:	e7cc      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8010d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010d3e:	9304      	str	r3, [sp, #16]
            break;
 8010d40:	e7c8      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8010d42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010d46:	9304      	str	r3, [sp, #16]
            break;
 8010d48:	e7c4      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8010d4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8010d4e:	9304      	str	r3, [sp, #16]
            break;
 8010d50:	e7c0      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8010d52:	f241 7370 	movw	r3, #6000	; 0x1770
 8010d56:	9304      	str	r3, [sp, #16]
            break;
 8010d58:	e7bc      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8010d5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010d5e:	482e      	ldr	r0, [pc, #184]	; (8010e18 <RegionUS915GetPhyParam+0x194>)
 8010d60:	f001 fc2a 	bl	80125b8 <randr>
 8010d64:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8010d68:	9004      	str	r0, [sp, #16]
            break;
 8010d6a:	e7b3      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8010d6c:	4b2b      	ldr	r3, [pc, #172]	; (8010e1c <RegionUS915GetPhyParam+0x198>)
 8010d6e:	9304      	str	r3, [sp, #16]
            break;
 8010d70:	e7b0      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 8010d72:	2308      	movs	r3, #8
 8010d74:	9304      	str	r3, [sp, #16]
            break;
 8010d76:	e7ad      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8010d78:	4b24      	ldr	r3, [pc, #144]	; (8010e0c <RegionUS915GetPhyParam+0x188>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010d80:	9304      	str	r3, [sp, #16]
            break;
 8010d82:	e7a7      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8010d84:	4b21      	ldr	r3, [pc, #132]	; (8010e0c <RegionUS915GetPhyParam+0x188>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8010d8c:	9304      	str	r3, [sp, #16]
            break;
 8010d8e:	e7a1      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8010d90:	2348      	movs	r3, #72	; 0x48
 8010d92:	9304      	str	r3, [sp, #16]
            break;
 8010d94:	e79e      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8010d96:	4b1d      	ldr	r3, [pc, #116]	; (8010e0c <RegionUS915GetPhyParam+0x188>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	9304      	str	r3, [sp, #16]
            break;
 8010d9c:	e79a      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8010d9e:	4b20      	ldr	r3, [pc, #128]	; (8010e20 <RegionUS915GetPhyParam+0x19c>)
 8010da0:	9304      	str	r3, [sp, #16]
            break;
 8010da2:	e797      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 8010da4:	2300      	movs	r3, #0
 8010da6:	9304      	str	r3, [sp, #16]
            break;
 8010da8:	e794      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8010daa:	4a1e      	ldr	r2, [pc, #120]	; (8010e24 <RegionUS915GetPhyParam+0x1a0>)
 8010dac:	491b      	ldr	r1, [pc, #108]	; (8010e1c <RegionUS915GetPhyParam+0x198>)
 8010dae:	7900      	ldrb	r0, [r0, #4]
 8010db0:	f7fe fd12 	bl	800f7d8 <RegionBaseUSCalcDownlinkFrequency>
 8010db4:	9004      	str	r0, [sp, #16]
            break;
 8010db6:	e78d      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8010db8:	2317      	movs	r3, #23
 8010dba:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8010dbe:	2304      	movs	r3, #4
 8010dc0:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8010dc4:	2303      	movs	r3, #3
 8010dc6:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8010dca:	e783      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8010dcc:	2308      	movs	r3, #8
 8010dce:	9304      	str	r3, [sp, #16]
            break;
 8010dd0:	e780      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8010dd2:	2308      	movs	r3, #8
 8010dd4:	9304      	str	r3, [sp, #16]
            break;
 8010dd6:	e77d      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8010dd8:	4a12      	ldr	r2, [pc, #72]	; (8010e24 <RegionUS915GetPhyParam+0x1a0>)
 8010dda:	4910      	ldr	r1, [pc, #64]	; (8010e1c <RegionUS915GetPhyParam+0x198>)
 8010ddc:	7900      	ldrb	r0, [r0, #4]
 8010dde:	f7fe fcfb 	bl	800f7d8 <RegionBaseUSCalcDownlinkFrequency>
 8010de2:	9004      	str	r0, [sp, #16]
            break;
 8010de4:	e776      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8010de6:	2308      	movs	r3, #8
 8010de8:	9304      	str	r3, [sp, #16]
            break;
 8010dea:	e773      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8010dec:	2308      	movs	r3, #8
 8010dee:	9304      	str	r3, [sp, #16]
            break;
 8010df0:	e770      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8010df2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010df6:	4a0c      	ldr	r2, [pc, #48]	; (8010e28 <RegionUS915GetPhyParam+0x1a4>)
 8010df8:	5cd3      	ldrb	r3, [r2, r3]
 8010dfa:	9304      	str	r3, [sp, #16]
            break;
 8010dfc:	e76a      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8010dfe:	490b      	ldr	r1, [pc, #44]	; (8010e2c <RegionUS915GetPhyParam+0x1a8>)
 8010e00:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8010e04:	f7ff f882 	bl	800ff0c <RegionCommonGetBandwidth>
 8010e08:	9004      	str	r0, [sp, #16]
            break;
 8010e0a:	e763      	b.n	8010cd4 <RegionUS915GetPhyParam+0x50>
 8010e0c:	20003cf4 	.word	0x20003cf4
 8010e10:	08015790 	.word	0x08015790
 8010e14:	08015780 	.word	0x08015780
 8010e18:	fffffc18 	.word	0xfffffc18
 8010e1c:	370870a0 	.word	0x370870a0
 8010e20:	4200999a 	.word	0x4200999a
 8010e24:	000927c0 	.word	0x000927c0
 8010e28:	08015770 	.word	0x08015770
 8010e2c:	0801571c 	.word	0x0801571c

08010e30 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010e30:	b510      	push	{r4, lr}
 8010e32:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8010e34:	4b0b      	ldr	r3, [pc, #44]	; (8010e64 <RegionUS915SetBandTxDone+0x34>)
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	7803      	ldrb	r3, [r0, #0]
 8010e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010e3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e42:	7a5b      	ldrb	r3, [r3, #9]
 8010e44:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8010e48:	4b07      	ldr	r3, [pc, #28]	; (8010e68 <RegionUS915SetBandTxDone+0x38>)
 8010e4a:	681c      	ldr	r4, [r3, #0]
 8010e4c:	6903      	ldr	r3, [r0, #16]
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	68c3      	ldr	r3, [r0, #12]
 8010e52:	7842      	ldrb	r2, [r0, #1]
 8010e54:	6881      	ldr	r1, [r0, #8]
 8010e56:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8010e5a:	f7fe fe0c 	bl	800fa76 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8010e5e:	b002      	add	sp, #8
 8010e60:	bd10      	pop	{r4, pc}
 8010e62:	bf00      	nop
 8010e64:	20003cf4 	.word	0x20003cf4
 8010e68:	20003cec 	.word	0x20003cec

08010e6c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8010e6c:	b510      	push	{r4, lr}
 8010e6e:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8010e70:	2301      	movs	r3, #1
 8010e72:	f8ad 3000 	strh.w	r3, [sp]
 8010e76:	2300      	movs	r3, #0
 8010e78:	f88d 3002 	strb.w	r3, [sp, #2]
 8010e7c:	9301      	str	r3, [sp, #4]
 8010e7e:	9302      	str	r3, [sp, #8]
 8010e80:	9303      	str	r3, [sp, #12]
 8010e82:	9304      	str	r3, [sp, #16]
 8010e84:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8010e88:	7b04      	ldrb	r4, [r0, #12]
 8010e8a:	b174      	cbz	r4, 8010eaa <RegionUS915InitDefaults+0x3e>
 8010e8c:	3c01      	subs	r4, #1
 8010e8e:	b2e4      	uxtb	r4, r4
 8010e90:	2c01      	cmp	r4, #1
 8010e92:	d87e      	bhi.n	8010f92 <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010e94:	4b40      	ldr	r3, [pc, #256]	; (8010f98 <RegionUS915InitDefaults+0x12c>)
 8010e96:	6818      	ldr	r0, [r3, #0]
 8010e98:	2206      	movs	r2, #6
 8010e9a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8010e9e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010ea2:	f7fe fdd9 	bl	800fa58 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	e071      	b.n	8010f8e <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8010eaa:	6803      	ldr	r3, [r0, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d070      	beq.n	8010f92 <RegionUS915InitDefaults+0x126>
 8010eb0:	6842      	ldr	r2, [r0, #4]
 8010eb2:	2a00      	cmp	r2, #0
 8010eb4:	d06d      	beq.n	8010f92 <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8010eb6:	4939      	ldr	r1, [pc, #228]	; (8010f9c <RegionUS915InitDefaults+0x130>)
 8010eb8:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8010eba:	4937      	ldr	r1, [pc, #220]	; (8010f98 <RegionUS915InitDefaults+0x12c>)
 8010ebc:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 8010ebe:	6880      	ldr	r0, [r0, #8]
 8010ec0:	4a37      	ldr	r2, [pc, #220]	; (8010fa0 <RegionUS915InitDefaults+0x134>)
 8010ec2:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8010ec8:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8010eca:	2218      	movs	r2, #24
 8010ecc:	4669      	mov	r1, sp
 8010ece:	f001 fb80 	bl	80125d2 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8010ed2:	e011      	b.n	8010ef8 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8010ed4:	4b30      	ldr	r3, [pc, #192]	; (8010f98 <RegionUS915InitDefaults+0x12c>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4932      	ldr	r1, [pc, #200]	; (8010fa4 <RegionUS915InitDefaults+0x138>)
 8010eda:	4a33      	ldr	r2, [pc, #204]	; (8010fa8 <RegionUS915InitDefaults+0x13c>)
 8010edc:	fb01 2204 	mla	r2, r1, r4, r2
 8010ee0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010ee4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8010ee8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8010eec:	2230      	movs	r2, #48	; 0x30
 8010eee:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8010ef4:	3401      	adds	r4, #1
 8010ef6:	b2e4      	uxtb	r4, r4
 8010ef8:	2c3f      	cmp	r4, #63	; 0x3f
 8010efa:	d9eb      	bls.n	8010ed4 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8010efc:	2340      	movs	r3, #64	; 0x40
 8010efe:	2b47      	cmp	r3, #71	; 0x47
 8010f00:	d814      	bhi.n	8010f2c <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8010f02:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 8010f06:	4a24      	ldr	r2, [pc, #144]	; (8010f98 <RegionUS915InitDefaults+0x12c>)
 8010f08:	6812      	ldr	r2, [r2, #0]
 8010f0a:	4c28      	ldr	r4, [pc, #160]	; (8010fac <RegionUS915InitDefaults+0x140>)
 8010f0c:	4928      	ldr	r1, [pc, #160]	; (8010fb0 <RegionUS915InitDefaults+0x144>)
 8010f0e:	fb04 1100 	mla	r1, r4, r0, r1
 8010f12:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8010f16:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8010f1a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8010f1e:	2144      	movs	r1, #68	; 0x44
 8010f20:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8010f22:	2100      	movs	r1, #0
 8010f24:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8010f26:	3301      	adds	r3, #1
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	e7e8      	b.n	8010efe <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8010f2c:	4c1a      	ldr	r4, [pc, #104]	; (8010f98 <RegionUS915InitDefaults+0x12c>)
 8010f2e:	6820      	ldr	r0, [r4, #0]
 8010f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f34:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8010f38:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8010f3c:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8010f40:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8010f44:	23ff      	movs	r3, #255	; 0xff
 8010f46:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010f50:	2206      	movs	r2, #6
 8010f52:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8010f56:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010f5a:	f7fe fd7d 	bl	800fa58 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8010f5e:	6821      	ldr	r1, [r4, #0]
 8010f60:	2206      	movs	r2, #6
 8010f62:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8010f66:	4b0d      	ldr	r3, [pc, #52]	; (8010f9c <RegionUS915InitDefaults+0x130>)
 8010f68:	6818      	ldr	r0, [r3, #0]
 8010f6a:	f7fe fd75 	bl	800fa58 <RegionCommonChanMaskCopy>
            break;
 8010f6e:	e010      	b.n	8010f92 <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8010f70:	4a0a      	ldr	r2, [pc, #40]	; (8010f9c <RegionUS915InitDefaults+0x130>)
 8010f72:	6811      	ldr	r1, [r2, #0]
 8010f74:	4a08      	ldr	r2, [pc, #32]	; (8010f98 <RegionUS915InitDefaults+0x12c>)
 8010f76:	6812      	ldr	r2, [r2, #0]
 8010f78:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8010f7c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8010f80:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010f84:	4002      	ands	r2, r0
 8010f86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	2b05      	cmp	r3, #5
 8010f90:	d9ee      	bls.n	8010f70 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 8010f92:	b006      	add	sp, #24
 8010f94:	bd10      	pop	{r4, pc}
 8010f96:	bf00      	nop
 8010f98:	20003cf4 	.word	0x20003cf4
 8010f9c:	20003cf0 	.word	0x20003cf0
 8010fa0:	20003cec 	.word	0x20003cec
 8010fa4:	00030d40 	.word	0x00030d40
 8010fa8:	35c80160 	.word	0x35c80160
 8010fac:	00186a00 	.word	0x00186a00
 8010fb0:	35d2afc0 	.word	0x35d2afc0

08010fb4 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010fb4:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 8010fb6:	290a      	cmp	r1, #10
 8010fb8:	d833      	bhi.n	8011022 <RegionUS915Verify+0x6e>
 8010fba:	e8df f001 	tbb	[pc, r1]
 8010fbe:	3206      	.short	0x3206
 8010fc0:	0a323232 	.word	0x0a323232
 8010fc4:	28321e14 	.word	0x28321e14
 8010fc8:	28          	.byte	0x28
 8010fc9:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8010fca:	6800      	ldr	r0, [r0, #0]
 8010fcc:	f7ff fdf0 	bl	8010bb0 <VerifyRfFreq>
 8010fd0:	e028      	b.n	8011024 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8010fd2:	2204      	movs	r2, #4
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	f990 0000 	ldrsb.w	r0, [r0]
 8010fda:	f7fe fccc 	bl	800f976 <RegionCommonValueInRange>
 8010fde:	3800      	subs	r0, #0
 8010fe0:	bf18      	it	ne
 8010fe2:	2001      	movne	r0, #1
 8010fe4:	e01e      	b.n	8011024 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8010fe6:	2205      	movs	r2, #5
 8010fe8:	2100      	movs	r1, #0
 8010fea:	f990 0000 	ldrsb.w	r0, [r0]
 8010fee:	f7fe fcc2 	bl	800f976 <RegionCommonValueInRange>
 8010ff2:	3800      	subs	r0, #0
 8010ff4:	bf18      	it	ne
 8010ff6:	2001      	movne	r0, #1
 8010ff8:	e014      	b.n	8011024 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8010ffa:	220d      	movs	r2, #13
 8010ffc:	2108      	movs	r1, #8
 8010ffe:	f990 0000 	ldrsb.w	r0, [r0]
 8011002:	f7fe fcb8 	bl	800f976 <RegionCommonValueInRange>
 8011006:	3800      	subs	r0, #0
 8011008:	bf18      	it	ne
 801100a:	2001      	movne	r0, #1
 801100c:	e00a      	b.n	8011024 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801100e:	220e      	movs	r2, #14
 8011010:	2100      	movs	r1, #0
 8011012:	f990 0000 	ldrsb.w	r0, [r0]
 8011016:	f7fe fcae 	bl	800f976 <RegionCommonValueInRange>
 801101a:	3800      	subs	r0, #0
 801101c:	bf18      	it	ne
 801101e:	2001      	movne	r0, #1
 8011020:	e000      	b.n	8011024 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 8011022:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8011024:	bd08      	pop	{r3, pc}
	...

08011028 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8011028:	7a03      	ldrb	r3, [r0, #8]
 801102a:	2b10      	cmp	r3, #16
 801102c:	d134      	bne.n	8011098 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801102e:	6843      	ldr	r3, [r0, #4]
 8011030:	7bdb      	ldrb	r3, [r3, #15]
 8011032:	2b01      	cmp	r3, #1
 8011034:	d130      	bne.n	8011098 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8011036:	2200      	movs	r2, #0
 8011038:	4613      	mov	r3, r2
 801103a:	2a04      	cmp	r2, #4
 801103c:	d82b      	bhi.n	8011096 <RegionUS915ApplyCFList+0x6e>
{
 801103e:	b530      	push	{r4, r5, lr}
 8011040:	e010      	b.n	8011064 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8011042:	4916      	ldr	r1, [pc, #88]	; (801109c <RegionUS915ApplyCFList+0x74>)
 8011044:	680d      	ldr	r5, [r1, #0]
 8011046:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 801104a:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 801104e:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 8011052:	4021      	ands	r1, r4
 8011054:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8011058:	3301      	adds	r3, #1
 801105a:	b2db      	uxtb	r3, r3
 801105c:	3202      	adds	r2, #2
 801105e:	b2d2      	uxtb	r2, r2
 8011060:	2b04      	cmp	r3, #4
 8011062:	d817      	bhi.n	8011094 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8011064:	6841      	ldr	r1, [r0, #4]
 8011066:	4c0e      	ldr	r4, [pc, #56]	; (80110a0 <RegionUS915ApplyCFList+0x78>)
 8011068:	6824      	ldr	r4, [r4, #0]
 801106a:	469c      	mov	ip, r3
 801106c:	5c89      	ldrb	r1, [r1, r2]
 801106e:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 8011072:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8011076:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801107a:	4496      	add	lr, r2
 801107c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8011080:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 8011084:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8011088:	2b04      	cmp	r3, #4
 801108a:	d1da      	bne.n	8011042 <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801108c:	b2c9      	uxtb	r1, r1
 801108e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 8011092:	e7d6      	b.n	8011042 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 8011094:	bd30      	pop	{r4, r5, pc}
 8011096:	4770      	bx	lr
 8011098:	4770      	bx	lr
 801109a:	bf00      	nop
 801109c:	20003cf0 	.word	0x20003cf0
 80110a0:	20003cf4 	.word	0x20003cf4

080110a4 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80110a4:	b570      	push	{r4, r5, r6, lr}
 80110a6:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80110a8:	2204      	movs	r2, #4
 80110aa:	2100      	movs	r1, #0
 80110ac:	6800      	ldr	r0, [r0, #0]
 80110ae:	f7fe fcbd 	bl	800fa2c <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80110b2:	2801      	cmp	r0, #1
 80110b4:	d031      	beq.n	801111a <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 80110b6:	792c      	ldrb	r4, [r5, #4]
 80110b8:	b11c      	cbz	r4, 80110c2 <RegionUS915ChanMaskSet+0x1e>
 80110ba:	2c01      	cmp	r4, #1
 80110bc:	d023      	beq.n	8011106 <RegionUS915ChanMaskSet+0x62>
 80110be:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80110c0:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80110c2:	4e17      	ldr	r6, [pc, #92]	; (8011120 <RegionUS915ChanMaskSet+0x7c>)
 80110c4:	6830      	ldr	r0, [r6, #0]
 80110c6:	2206      	movs	r2, #6
 80110c8:	6829      	ldr	r1, [r5, #0]
 80110ca:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80110ce:	f7fe fcc3 	bl	800fa58 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80110d2:	6830      	ldr	r0, [r6, #0]
 80110d4:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 80110d8:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80110dc:	2300      	movs	r3, #0
 80110de:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80110e2:	e00c      	b.n	80110fe <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80110e4:	4b0f      	ldr	r3, [pc, #60]	; (8011124 <RegionUS915ChanMaskSet+0x80>)
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 80110ec:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80110f0:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 80110f4:	400b      	ands	r3, r1
 80110f6:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80110fa:	3401      	adds	r4, #1
 80110fc:	b2e4      	uxtb	r4, r4
 80110fe:	2c05      	cmp	r4, #5
 8011100:	d9f0      	bls.n	80110e4 <RegionUS915ChanMaskSet+0x40>
    return true;
 8011102:	2001      	movs	r0, #1
 8011104:	e7dc      	b.n	80110c0 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8011106:	4b06      	ldr	r3, [pc, #24]	; (8011120 <RegionUS915ChanMaskSet+0x7c>)
 8011108:	6818      	ldr	r0, [r3, #0]
 801110a:	2206      	movs	r2, #6
 801110c:	6829      	ldr	r1, [r5, #0]
 801110e:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 8011112:	f7fe fca1 	bl	800fa58 <RegionCommonChanMaskCopy>
    return true;
 8011116:	2001      	movs	r0, #1
            break;
 8011118:	e7d2      	b.n	80110c0 <RegionUS915ChanMaskSet+0x1c>
        return false;
 801111a:	2000      	movs	r0, #0
 801111c:	e7d0      	b.n	80110c0 <RegionUS915ChanMaskSet+0x1c>
 801111e:	bf00      	nop
 8011120:	20003cf4 	.word	0x20003cf4
 8011124:	20003cf0 	.word	0x20003cf0

08011128 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801112a:	b083      	sub	sp, #12
 801112c:	460e      	mov	r6, r1
 801112e:	4617      	mov	r7, r2
 8011130:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8011132:	280d      	cmp	r0, #13
 8011134:	bfa8      	it	ge
 8011136:	200d      	movge	r0, #13
 8011138:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801113a:	4d0f      	ldr	r5, [pc, #60]	; (8011178 <RegionUS915ComputeRxWindowParameters+0x50>)
 801113c:	4629      	mov	r1, r5
 801113e:	f7fe fee5 	bl	800ff0c <RegionCommonGetBandwidth>
 8011142:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8011144:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8011148:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801114c:	4a0b      	ldr	r2, [pc, #44]	; (801117c <RegionUS915ComputeRxWindowParameters+0x54>)
 801114e:	5cd0      	ldrb	r0, [r2, r3]
 8011150:	f7fe fda8 	bl	800fca4 <RegionCommonComputeSymbolTimeLoRa>
 8011154:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8011156:	4b0a      	ldr	r3, [pc, #40]	; (8011180 <RegionUS915ComputeRxWindowParameters+0x58>)
 8011158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801115a:	4798      	blx	r3
 801115c:	4603      	mov	r3, r0
 801115e:	f104 020c 	add.w	r2, r4, #12
 8011162:	9201      	str	r2, [sp, #4]
 8011164:	3408      	adds	r4, #8
 8011166:	9400      	str	r4, [sp, #0]
 8011168:	463a      	mov	r2, r7
 801116a:	4631      	mov	r1, r6
 801116c:	4628      	mov	r0, r5
 801116e:	f7fe fda7 	bl	800fcc0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8011172:	b003      	add	sp, #12
 8011174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011176:	bf00      	nop
 8011178:	0801571c 	.word	0x0801571c
 801117c:	08015770 	.word	0x08015770
 8011180:	08015d04 	.word	0x08015d04

08011184 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011188:	b08b      	sub	sp, #44	; 0x2c
 801118a:	4604      	mov	r4, r0
 801118c:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801118e:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8011192:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8011194:	4b22      	ldr	r3, [pc, #136]	; (8011220 <RegionUS915RxConfig+0x9c>)
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	4798      	blx	r3
 801119a:	2800      	cmp	r0, #0
 801119c:	d13d      	bne.n	801121a <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801119e:	7ce3      	ldrb	r3, [r4, #19]
 80111a0:	b933      	cbnz	r3, 80111b0 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 80111a2:	7827      	ldrb	r7, [r4, #0]
 80111a4:	f007 0307 	and.w	r3, r7, #7
 80111a8:	4a1e      	ldr	r2, [pc, #120]	; (8011224 <RegionUS915RxConfig+0xa0>)
 80111aa:	4f1f      	ldr	r7, [pc, #124]	; (8011228 <RegionUS915RxConfig+0xa4>)
 80111ac:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80111b0:	4b1e      	ldr	r3, [pc, #120]	; (801122c <RegionUS915RxConfig+0xa8>)
 80111b2:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 80111b6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8011220 <RegionUS915RxConfig+0x9c>
 80111ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111be:	4638      	mov	r0, r7
 80111c0:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80111c2:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80111c6:	7ca3      	ldrb	r3, [r4, #18]
 80111c8:	9309      	str	r3, [sp, #36]	; 0x24
 80111ca:	2001      	movs	r0, #1
 80111cc:	9008      	str	r0, [sp, #32]
 80111ce:	2200      	movs	r2, #0
 80111d0:	9207      	str	r2, [sp, #28]
 80111d2:	9206      	str	r2, [sp, #24]
 80111d4:	9205      	str	r2, [sp, #20]
 80111d6:	9204      	str	r2, [sp, #16]
 80111d8:	9203      	str	r2, [sp, #12]
 80111da:	8923      	ldrh	r3, [r4, #8]
 80111dc:	9302      	str	r3, [sp, #8]
 80111de:	2308      	movs	r3, #8
 80111e0:	9301      	str	r3, [sp, #4]
 80111e2:	9200      	str	r2, [sp, #0]
 80111e4:	4603      	mov	r3, r0
 80111e6:	464a      	mov	r2, r9
 80111e8:	78a1      	ldrb	r1, [r4, #2]
 80111ea:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80111ec:	7c63      	ldrb	r3, [r4, #17]
 80111ee:	b18b      	cbz	r3, 8011214 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80111f0:	4b0f      	ldr	r3, [pc, #60]	; (8011230 <RegionUS915RxConfig+0xac>)
 80111f2:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80111f4:	4b0a      	ldr	r3, [pc, #40]	; (8011220 <RegionUS915RxConfig+0x9c>)
 80111f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111f8:	310d      	adds	r1, #13
 80111fa:	b2c9      	uxtb	r1, r1
 80111fc:	2001      	movs	r0, #1
 80111fe:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8011200:	4632      	mov	r2, r6
 8011202:	4639      	mov	r1, r7
 8011204:	7ce0      	ldrb	r0, [r4, #19]
 8011206:	f7fe fe93 	bl	800ff30 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801120a:	702e      	strb	r6, [r5, #0]
    return true;
 801120c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801120e:	b00b      	add	sp, #44	; 0x2c
 8011210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8011214:	4b07      	ldr	r3, [pc, #28]	; (8011234 <RegionUS915RxConfig+0xb0>)
 8011216:	5d99      	ldrb	r1, [r3, r6]
 8011218:	e7ec      	b.n	80111f4 <RegionUS915RxConfig+0x70>
        return false;
 801121a:	2000      	movs	r0, #0
 801121c:	e7f7      	b.n	801120e <RegionUS915RxConfig+0x8a>
 801121e:	bf00      	nop
 8011220:	08015d04 	.word	0x08015d04
 8011224:	000927c0 	.word	0x000927c0
 8011228:	370870a0 	.word	0x370870a0
 801122c:	08015770 	.word	0x08015770
 8011230:	08015780 	.word	0x08015780
 8011234:	08015790 	.word	0x08015790

08011238 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801123c:	b08d      	sub	sp, #52	; 0x34
 801123e:	4604      	mov	r4, r0
 8011240:	468b      	mov	fp, r1
 8011242:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8011244:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8011248:	4b32      	ldr	r3, [pc, #200]	; (8011314 <RegionUS915TxConfig+0xdc>)
 801124a:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801124e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8011318 <RegionUS915TxConfig+0xe0>
 8011252:	f8d9 3000 	ldr.w	r3, [r9]
 8011256:	7801      	ldrb	r1, [r0, #0]
 8011258:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801125c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8011260:	7a49      	ldrb	r1, [r1, #9]
 8011262:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011266:	482d      	ldr	r0, [pc, #180]	; (801131c <RegionUS915TxConfig+0xe4>)
 8011268:	6800      	ldr	r0, [r0, #0]
 801126a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801126e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8011272:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8011276:	f994 0002 	ldrsb.w	r0, [r4, #2]
 801127a:	f7ff fce7 	bl	8010c4c <LimitTxPower>
 801127e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8011280:	4927      	ldr	r1, [pc, #156]	; (8011320 <RegionUS915TxConfig+0xe8>)
 8011282:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011286:	f7fe fe41 	bl	800ff0c <RegionCommonGetBandwidth>
 801128a:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801128c:	2200      	movs	r2, #0
 801128e:	4925      	ldr	r1, [pc, #148]	; (8011324 <RegionUS915TxConfig+0xec>)
 8011290:	4630      	mov	r0, r6
 8011292:	f7fe fd51 	bl	800fd38 <RegionCommonComputeTxPower>
 8011296:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8011298:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8011328 <RegionUS915TxConfig+0xf0>
 801129c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80112a0:	f8d9 1000 	ldr.w	r1, [r9]
 80112a4:	7823      	ldrb	r3, [r4, #0]
 80112a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80112aa:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80112ae:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80112b0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80112b4:	9308      	str	r3, [sp, #32]
 80112b6:	2200      	movs	r2, #0
 80112b8:	9207      	str	r2, [sp, #28]
 80112ba:	9206      	str	r2, [sp, #24]
 80112bc:	9205      	str	r2, [sp, #20]
 80112be:	2501      	movs	r5, #1
 80112c0:	9504      	str	r5, [sp, #16]
 80112c2:	9203      	str	r2, [sp, #12]
 80112c4:	2308      	movs	r3, #8
 80112c6:	9302      	str	r3, [sp, #8]
 80112c8:	9501      	str	r5, [sp, #4]
 80112ca:	f8cd a000 	str.w	sl, [sp]
 80112ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80112d2:	4628      	mov	r0, r5
 80112d4:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 80112d8:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80112da:	f8d9 2000 	ldr.w	r2, [r9]
 80112de:	7823      	ldrb	r3, [r4, #0]
 80112e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80112e4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80112e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80112ec:	f7fe fe42 	bl	800ff74 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80112f0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80112f4:	7b21      	ldrb	r1, [r4, #12]
 80112f6:	4628      	mov	r0, r5
 80112f8:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80112fa:	89a1      	ldrh	r1, [r4, #12]
 80112fc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011300:	f7ff fc86 	bl	8010c10 <GetTimeOnAir>
 8011304:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 8011306:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 801130a:	4628      	mov	r0, r5
 801130c:	b00d      	add	sp, #52	; 0x34
 801130e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011312:	bf00      	nop
 8011314:	08015770 	.word	0x08015770
 8011318:	20003cf4 	.word	0x20003cf4
 801131c:	20003cec 	.word	0x20003cec
 8011320:	0801571c 	.word	0x0801571c
 8011324:	41f00000 	.word	0x41f00000
 8011328:	08015d04 	.word	0x08015d04

0801132c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801132c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011330:	b091      	sub	sp, #68	; 0x44
 8011332:	4605      	mov	r5, r0
 8011334:	4688      	mov	r8, r1
 8011336:	4617      	mov	r7, r2
 8011338:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801133a:	2400      	movs	r4, #0
 801133c:	940e      	str	r4, [sp, #56]	; 0x38
 801133e:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8011342:	940b      	str	r4, [sp, #44]	; 0x2c
 8011344:	940c      	str	r4, [sp, #48]	; 0x30
 8011346:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8011348:	4b97      	ldr	r3, [pc, #604]	; (80115a8 <RegionUS915LinkAdrReq+0x27c>)
 801134a:	6819      	ldr	r1, [r3, #0]
 801134c:	2206      	movs	r2, #6
 801134e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8011352:	a80b      	add	r0, sp, #44	; 0x2c
 8011354:	f7fe fb80 	bl	800fa58 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011358:	e00d      	b.n	8011376 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801135a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801135e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 8011362:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 8011366:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 801136a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801136e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8011372:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011376:	7a2b      	ldrb	r3, [r5, #8]
 8011378:	42a3      	cmp	r3, r4
 801137a:	f240 8081 	bls.w	8011480 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801137e:	6868      	ldr	r0, [r5, #4]
 8011380:	a90e      	add	r1, sp, #56	; 0x38
 8011382:	4420      	add	r0, r4
 8011384:	f7fe fc18 	bl	800fbb8 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8011388:	2800      	cmp	r0, #0
 801138a:	d079      	beq.n	8011480 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 801138c:	4404      	add	r4, r0
 801138e:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 8011390:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 8011394:	f1bc 0f06 	cmp.w	ip, #6
 8011398:	d0df      	beq.n	801135a <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801139a:	f1bc 0f07 	cmp.w	ip, #7
 801139e:	d00a      	beq.n	80113b6 <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 80113a0:	f1bc 0f05 	cmp.w	ip, #5
 80113a4:	d068      	beq.n	8011478 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 80113a6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80113aa:	aa10      	add	r2, sp, #64	; 0x40
 80113ac:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80113b0:	f82c 3c14 	strh.w	r3, [ip, #-20]
 80113b4:	e7df      	b.n	8011376 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 80113b6:	2300      	movs	r3, #0
 80113b8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 80113bc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 80113c0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 80113c4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80113c8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80113cc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80113d0:	e7d1      	b.n	8011376 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 80113d2:	aa10      	add	r2, sp, #64	; 0x40
 80113d4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80113d8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80113dc:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80113e0:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80113e4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80113e8:	4313      	orrs	r3, r2
 80113ea:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 80113ee:	3101      	adds	r1, #1
 80113f0:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 80113f2:	f10c 0c01 	add.w	ip, ip, #1
 80113f6:	fa5f fc8c 	uxtb.w	ip, ip
 80113fa:	f1bc 0f07 	cmp.w	ip, #7
 80113fe:	d8ba      	bhi.n	8011376 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8011400:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8011404:	2301      	movs	r3, #1
 8011406:	fa03 f30c 	lsl.w	r3, r3, ip
 801140a:	421a      	tst	r2, r3
 801140c:	d011      	beq.n	8011432 <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 801140e:	f01c 0f01 	tst.w	ip, #1
 8011412:	d1de      	bne.n	80113d2 <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 8011414:	aa10      	add	r2, sp, #64	; 0x40
 8011416:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 801141a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801141e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8011422:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8011426:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801142a:	4313      	orrs	r3, r2
 801142c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011430:	e7df      	b.n	80113f2 <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 8011432:	f01c 0f01 	tst.w	ip, #1
 8011436:	d10f      	bne.n	8011458 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 8011438:	aa10      	add	r2, sp, #64	; 0x40
 801143a:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 801143e:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8011446:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 801144a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801144e:	ea22 0303 	bic.w	r3, r2, r3
 8011452:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011456:	e7cc      	b.n	80113f2 <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8011458:	aa10      	add	r2, sp, #64	; 0x40
 801145a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801145e:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8011462:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8011466:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801146a:	ea22 0303 	bic.w	r3, r2, r3
 801146e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 8011472:	3101      	adds	r1, #1
 8011474:	b2c9      	uxtb	r1, r1
 8011476:	e7bc      	b.n	80113f2 <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 8011478:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 801147c:	4661      	mov	r1, ip
 801147e:	e7bc      	b.n	80113fa <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8011480:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011484:	2b03      	cmp	r3, #3
 8011486:	dd58      	ble.n	801153a <RegionUS915LinkAdrReq+0x20e>
 8011488:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801148c:	2302      	movs	r3, #2
 801148e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8011492:	7a6b      	ldrb	r3, [r5, #9]
 8011494:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8011498:	a809      	add	r0, sp, #36	; 0x24
 801149a:	f7ff fbf3 	bl	8010c84 <RegionUS915GetPhyParam>
 801149e:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 80114a0:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80114a4:	7aab      	ldrb	r3, [r5, #10]
 80114a6:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80114aa:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 80114ae:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80114b2:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 80114b6:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80114ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80114be:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80114c2:	f995 300b 	ldrsb.w	r3, [r5, #11]
 80114c6:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80114ca:	f995 300c 	ldrsb.w	r3, [r5, #12]
 80114ce:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80114d2:	f995 300d 	ldrsb.w	r3, [r5, #13]
 80114d6:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 80114da:	2348      	movs	r3, #72	; 0x48
 80114dc:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80114e0:	ab0b      	add	r3, sp, #44	; 0x2c
 80114e2:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80114e4:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 80114e8:	2304      	movs	r3, #4
 80114ea:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80114ee:	4b2e      	ldr	r3, [pc, #184]	; (80115a8 <RegionUS915LinkAdrReq+0x27c>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80114f4:	230e      	movs	r3, #14
 80114f6:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80114fa:	2300      	movs	r3, #0
 80114fc:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8011500:	682b      	ldr	r3, [r5, #0]
 8011502:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011504:	ab0e      	add	r3, sp, #56	; 0x38
 8011506:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 801150a:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 801150e:	4668      	mov	r0, sp
 8011510:	f7fe fb70 	bl	800fbf4 <RegionCommonLinkAdrReqVerifyParams>
 8011514:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011516:	2807      	cmp	r0, #7
 8011518:	d01c      	beq.n	8011554 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801151a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801151e:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 8011522:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8011526:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8011528:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 801152c:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 801152e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011530:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 8011532:	4628      	mov	r0, r5
 8011534:	b011      	add	sp, #68	; 0x44
 8011536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801153a:	2204      	movs	r2, #4
 801153c:	2100      	movs	r1, #0
 801153e:	a80b      	add	r0, sp, #44	; 0x2c
 8011540:	f7fe fa74 	bl	800fa2c <RegionCommonCountChannels>
 8011544:	2801      	cmp	r0, #1
 8011546:	d902      	bls.n	801154e <RegionUS915LinkAdrReq+0x222>
 8011548:	f04f 0907 	mov.w	r9, #7
 801154c:	e79e      	b.n	801148c <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 801154e:	f04f 0906 	mov.w	r9, #6
 8011552:	e79b      	b.n	801148c <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8011554:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80115a8 <RegionUS915LinkAdrReq+0x27c>
 8011558:	f8d9 0000 	ldr.w	r0, [r9]
 801155c:	2206      	movs	r2, #6
 801155e:	a90b      	add	r1, sp, #44	; 0x2c
 8011560:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011564:	f7fe fa78 	bl	800fa58 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8011568:	4b10      	ldr	r3, [pc, #64]	; (80115ac <RegionUS915LinkAdrReq+0x280>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	f8d9 2000 	ldr.w	r2, [r9]
 8011570:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 8011574:	8818      	ldrh	r0, [r3, #0]
 8011576:	4001      	ands	r1, r0
 8011578:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801157a:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 801157e:	8858      	ldrh	r0, [r3, #2]
 8011580:	4001      	ands	r1, r0
 8011582:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8011584:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 8011588:	8898      	ldrh	r0, [r3, #4]
 801158a:	4001      	ands	r1, r0
 801158c:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801158e:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 8011592:	88d8      	ldrh	r0, [r3, #6]
 8011594:	4001      	ands	r1, r0
 8011596:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8011598:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 801159c:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801159e:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 80115a2:	815a      	strh	r2, [r3, #10]
 80115a4:	e7b9      	b.n	801151a <RegionUS915LinkAdrReq+0x1ee>
 80115a6:	bf00      	nop
 80115a8:	20003cf4 	.word	0x20003cf4
 80115ac:	20003cf0 	.word	0x20003cf0

080115b0 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80115b0:	b538      	push	{r3, r4, r5, lr}
 80115b2:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80115b4:	6840      	ldr	r0, [r0, #4]
 80115b6:	f7ff fafb 	bl	8010bb0 <VerifyRfFreq>
 80115ba:	b310      	cbz	r0, 8011602 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 80115bc:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 80115be:	220d      	movs	r2, #13
 80115c0:	2108      	movs	r1, #8
 80115c2:	f994 0000 	ldrsb.w	r0, [r4]
 80115c6:	f7fe f9d6 	bl	800f976 <RegionCommonValueInRange>
 80115ca:	b908      	cbnz	r0, 80115d0 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 80115cc:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80115d0:	2207      	movs	r2, #7
 80115d2:	2105      	movs	r1, #5
 80115d4:	f994 0000 	ldrsb.w	r0, [r4]
 80115d8:	f7fe f9cd 	bl	800f976 <RegionCommonValueInRange>
 80115dc:	2801      	cmp	r0, #1
 80115de:	d003      	beq.n	80115e8 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80115e0:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80115e4:	2b0d      	cmp	r3, #13
 80115e6:	dd01      	ble.n	80115ec <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 80115e8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80115ec:	2203      	movs	r2, #3
 80115ee:	2100      	movs	r1, #0
 80115f0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80115f4:	f7fe f9bf 	bl	800f976 <RegionCommonValueInRange>
 80115f8:	b908      	cbnz	r0, 80115fe <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80115fa:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 80115fe:	4628      	mov	r0, r5
 8011600:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8011602:	2506      	movs	r5, #6
 8011604:	e7db      	b.n	80115be <RegionUS915RxParamSetupReq+0xe>

08011606 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 8011606:	f04f 30ff 	mov.w	r0, #4294967295
 801160a:	4770      	bx	lr

0801160c <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 801160c:	f04f 30ff 	mov.w	r0, #4294967295
 8011610:	4770      	bx	lr

08011612 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 8011612:	f04f 30ff 	mov.w	r0, #4294967295
 8011616:	4770      	bx	lr

08011618 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8011618:	b999      	cbnz	r1, 8011642 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801161a:	4b0e      	ldr	r3, [pc, #56]	; (8011654 <RegionUS915AlternateDr+0x3c>)
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	7b53      	ldrb	r3, [r2, #13]
 8011620:	3301      	adds	r3, #1
 8011622:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8011624:	4b0b      	ldr	r3, [pc, #44]	; (8011654 <RegionUS915AlternateDr+0x3c>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	7b5a      	ldrb	r2, [r3, #13]
 801162a:	4b0b      	ldr	r3, [pc, #44]	; (8011658 <RegionUS915AlternateDr+0x40>)
 801162c:	fba3 1302 	umull	r1, r3, r3, r2
 8011630:	085b      	lsrs	r3, r3, #1
 8011632:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8011636:	1ad3      	subs	r3, r2, r3
 8011638:	f013 0fff 	tst.w	r3, #255	; 0xff
 801163c:	d007      	beq.n	801164e <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 801163e:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 8011640:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 8011642:	4b04      	ldr	r3, [pc, #16]	; (8011654 <RegionUS915AlternateDr+0x3c>)
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	7b53      	ldrb	r3, [r2, #13]
 8011648:	3b01      	subs	r3, #1
 801164a:	7353      	strb	r3, [r2, #13]
 801164c:	e7ea      	b.n	8011624 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 801164e:	2004      	movs	r0, #4
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop
 8011654:	20003cf0 	.word	0x20003cf0
 8011658:	38e38e39 	.word	0x38e38e39

0801165c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801165c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011660:	b0a4      	sub	sp, #144	; 0x90
 8011662:	4604      	mov	r4, r0
 8011664:	460e      	mov	r6, r1
 8011666:	4690      	mov	r8, r2
 8011668:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801166a:	2500      	movs	r5, #0
 801166c:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8011670:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8011674:	9511      	str	r5, [sp, #68]	; 0x44
 8011676:	2244      	movs	r2, #68	; 0x44
 8011678:	4629      	mov	r1, r5
 801167a:	a812      	add	r0, sp, #72	; 0x48
 801167c:	f003 fb5c 	bl	8014d38 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8011680:	2204      	movs	r2, #4
 8011682:	4629      	mov	r1, r5
 8011684:	4b49      	ldr	r3, [pc, #292]	; (80117ac <RegionUS915NextChannel+0x150>)
 8011686:	6818      	ldr	r0, [r3, #0]
 8011688:	f7fe f9d0 	bl	800fa2c <RegionCommonCountChannels>
 801168c:	2800      	cmp	r0, #0
 801168e:	d052      	beq.n	8011736 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8011690:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8011694:	2b03      	cmp	r3, #3
 8011696:	dd08      	ble.n	80116aa <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8011698:	4b44      	ldr	r3, [pc, #272]	; (80117ac <RegionUS915NextChannel+0x150>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	7a1a      	ldrb	r2, [r3, #8]
 801169e:	b922      	cbnz	r2, 80116aa <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80116a0:	4a43      	ldr	r2, [pc, #268]	; (80117b0 <RegionUS915NextChannel+0x154>)
 80116a2:	6812      	ldr	r2, [r2, #0]
 80116a4:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 80116a8:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80116aa:	7a63      	ldrb	r3, [r4, #9]
 80116ac:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80116b0:	7a23      	ldrb	r3, [r4, #8]
 80116b2:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 80116b6:	4b3d      	ldr	r3, [pc, #244]	; (80117ac <RegionUS915NextChannel+0x150>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80116bc:	4b3c      	ldr	r3, [pc, #240]	; (80117b0 <RegionUS915NextChannel+0x154>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80116c2:	4b3c      	ldr	r3, [pc, #240]	; (80117b4 <RegionUS915NextChannel+0x158>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 80116c8:	2348      	movs	r3, #72	; 0x48
 80116ca:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 80116ce:	2300      	movs	r3, #0
 80116d0:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80116d2:	6823      	ldr	r3, [r4, #0]
 80116d4:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80116d6:	6863      	ldr	r3, [r4, #4]
 80116d8:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80116da:	7aa3      	ldrb	r3, [r4, #10]
 80116dc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80116e0:	2301      	movs	r3, #1
 80116e2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80116e6:	ab03      	add	r3, sp, #12
 80116e8:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80116ea:	ab0c      	add	r3, sp, #48	; 0x30
 80116ec:	f104 020c 	add.w	r2, r4, #12
 80116f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116f4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80116f8:	7d23      	ldrb	r3, [r4, #20]
 80116fa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80116fe:	8ae1      	ldrh	r1, [r4, #22]
 8011700:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011704:	f7ff fa84 	bl	8010c10 <GetTimeOnAir>
 8011708:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801170a:	f8cd 8004 	str.w	r8, [sp, #4]
 801170e:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8011712:	9300      	str	r3, [sp, #0]
 8011714:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 8011718:	aa11      	add	r2, sp, #68	; 0x44
 801171a:	4639      	mov	r1, r7
 801171c:	a809      	add	r0, sp, #36	; 0x24
 801171e:	f7fe fb87 	bl	800fe30 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8011722:	4605      	mov	r5, r0
 8011724:	2800      	cmp	r0, #0
 8011726:	d13c      	bne.n	80117a2 <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 8011728:	7a63      	ldrb	r3, [r4, #9]
 801172a:	b98b      	cbnz	r3, 8011750 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801172c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8011730:	b1db      	cbz	r3, 801176a <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8011732:	4603      	mov	r3, r0
 8011734:	e026      	b.n	8011784 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8011736:	4d1d      	ldr	r5, [pc, #116]	; (80117ac <RegionUS915NextChannel+0x150>)
 8011738:	4b1d      	ldr	r3, [pc, #116]	; (80117b0 <RegionUS915NextChannel+0x154>)
 801173a:	6819      	ldr	r1, [r3, #0]
 801173c:	2204      	movs	r2, #4
 801173e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8011742:	6828      	ldr	r0, [r5, #0]
 8011744:	f7fe f988 	bl	800fa58 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8011748:	682b      	ldr	r3, [r5, #0]
 801174a:	2200      	movs	r2, #0
 801174c:	731a      	strb	r2, [r3, #12]
 801174e:	e79f      	b.n	8011690 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011750:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 8011754:	3901      	subs	r1, #1
 8011756:	f000 ff2f 	bl	80125b8 <randr>
 801175a:	f100 0390 	add.w	r3, r0, #144	; 0x90
 801175e:	eb0d 0003 	add.w	r0, sp, r3
 8011762:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 8011766:	7033      	strb	r3, [r6, #0]
 8011768:	e015      	b.n	8011796 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801176a:	4b10      	ldr	r3, [pc, #64]	; (80117ac <RegionUS915NextChannel+0x150>)
 801176c:	6818      	ldr	r0, [r3, #0]
 801176e:	4632      	mov	r2, r6
 8011770:	f100 010c 	add.w	r1, r0, #12
 8011774:	f7fd ffe2 	bl	800f73c <RegionBaseUSComputeNext125kHzJoinChannel>
 8011778:	2803      	cmp	r0, #3
 801177a:	d10c      	bne.n	8011796 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801177c:	4605      	mov	r5, r0
 801177e:	e010      	b.n	80117a2 <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8011780:	3301      	adds	r3, #1
 8011782:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8011784:	4a09      	ldr	r2, [pc, #36]	; (80117ac <RegionUS915NextChannel+0x150>)
 8011786:	6812      	ldr	r2, [r2, #0]
 8011788:	7a10      	ldrb	r0, [r2, #8]
 801178a:	4118      	asrs	r0, r3
 801178c:	f010 0f01 	tst.w	r0, #1
 8011790:	d0f6      	beq.n	8011780 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 8011792:	3340      	adds	r3, #64	; 0x40
 8011794:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8011796:	2248      	movs	r2, #72	; 0x48
 8011798:	7831      	ldrb	r1, [r6, #0]
 801179a:	4b04      	ldr	r3, [pc, #16]	; (80117ac <RegionUS915NextChannel+0x150>)
 801179c:	6818      	ldr	r0, [r3, #0]
 801179e:	f7fe f92c 	bl	800f9fa <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 80117a2:	4628      	mov	r0, r5
 80117a4:	b024      	add	sp, #144	; 0x90
 80117a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117aa:	bf00      	nop
 80117ac:	20003cf0 	.word	0x20003cf0
 80117b0:	20003cf4 	.word	0x20003cf4
 80117b4:	20003cec 	.word	0x20003cec

080117b8 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80117b8:	4b04      	ldr	r3, [pc, #16]	; (80117cc <RegionUS915ApplyDrOffset+0x14>)
 80117ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80117be:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 80117c0:	2800      	cmp	r0, #0
 80117c2:	db01      	blt.n	80117c8 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 80117c4:	b2c0      	uxtb	r0, r0
 80117c6:	4770      	bx	lr
        datarate = DR_0;
 80117c8:	2000      	movs	r0, #0
 80117ca:	e7fb      	b.n	80117c4 <RegionUS915ApplyDrOffset+0xc>
 80117cc:	0801575c 	.word	0x0801575c

080117d0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80117d0:	b510      	push	{r4, lr}
 80117d2:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 80117d4:	2210      	movs	r2, #16
 80117d6:	2100      	movs	r1, #0
 80117d8:	30f1      	adds	r0, #241	; 0xf1
 80117da:	f000 ff12 	bl	8012602 <memset1>
    ctx->M_n = 0;
 80117de:	2100      	movs	r1, #0
 80117e0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80117e4:	22f0      	movs	r2, #240	; 0xf0
 80117e6:	4620      	mov	r0, r4
 80117e8:	f000 ff0b 	bl	8012602 <memset1>
}
 80117ec:	bd10      	pop	{r4, pc}

080117ee <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80117ee:	b508      	push	{r3, lr}
 80117f0:	4602      	mov	r2, r0
 80117f2:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80117f4:	2110      	movs	r1, #16
 80117f6:	f000 fb3b 	bl	8011e70 <lorawan_aes_set_key>
}
 80117fa:	bd08      	pop	{r3, pc}

080117fc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 80117fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011800:	b084      	sub	sp, #16
 8011802:	4604      	mov	r4, r0
 8011804:	460d      	mov	r5, r1
 8011806:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8011808:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 801180c:	2b00      	cmp	r3, #0
 801180e:	d054      	beq.n	80118ba <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8011810:	f1c3 0810 	rsb	r8, r3, #16
 8011814:	4647      	mov	r7, r8
 8011816:	4590      	cmp	r8, r2
 8011818:	bf28      	it	cs
 801181a:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 801181c:	f200 1001 	addw	r0, r0, #257	; 0x101
 8011820:	b2ba      	uxth	r2, r7
 8011822:	4418      	add	r0, r3
 8011824:	f000 fed5 	bl	80125d2 <memcpy1>
        ctx->M_n += mlen;
 8011828:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 801182c:	443b      	add	r3, r7
 801182e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8011832:	2b0f      	cmp	r3, #15
 8011834:	d94d      	bls.n	80118d2 <AES_CMAC_Update+0xd6>
 8011836:	45b0      	cmp	r8, r6
 8011838:	d24b      	bcs.n	80118d2 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 801183a:	2300      	movs	r3, #0
 801183c:	e008      	b.n	8011850 <AES_CMAC_Update+0x54>
 801183e:	18e2      	adds	r2, r4, r3
 8011840:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 8011844:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8011848:	4041      	eors	r1, r0
 801184a:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 801184e:	3301      	adds	r3, #1
 8011850:	2b0f      	cmp	r3, #15
 8011852:	ddf4      	ble.n	801183e <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8011854:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 8011858:	2210      	movs	r2, #16
 801185a:	4641      	mov	r1, r8
 801185c:	4668      	mov	r0, sp
 801185e:	f000 feb8 	bl	80125d2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8011862:	4622      	mov	r2, r4
 8011864:	4669      	mov	r1, sp
 8011866:	4668      	mov	r0, sp
 8011868:	f000 fb84 	bl	8011f74 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801186c:	2210      	movs	r2, #16
 801186e:	4669      	mov	r1, sp
 8011870:	4640      	mov	r0, r8
 8011872:	f000 feae 	bl	80125d2 <memcpy1>

        data += mlen;
 8011876:	443d      	add	r5, r7
        len -= mlen;
 8011878:	1bf6      	subs	r6, r6, r7
 801187a:	e01e      	b.n	80118ba <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 801187c:	eb04 0e03 	add.w	lr, r4, r3
 8011880:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 8011884:	5cea      	ldrb	r2, [r5, r3]
 8011886:	ea8c 0c02 	eor.w	ip, ip, r2
 801188a:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 801188e:	3301      	adds	r3, #1
 8011890:	2b0f      	cmp	r3, #15
 8011892:	ddf3      	ble.n	801187c <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8011894:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 8011898:	2210      	movs	r2, #16
 801189a:	4639      	mov	r1, r7
 801189c:	4668      	mov	r0, sp
 801189e:	f000 fe98 	bl	80125d2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80118a2:	4622      	mov	r2, r4
 80118a4:	4669      	mov	r1, sp
 80118a6:	4668      	mov	r0, sp
 80118a8:	f000 fb64 	bl	8011f74 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80118ac:	2210      	movs	r2, #16
 80118ae:	4669      	mov	r1, sp
 80118b0:	4638      	mov	r0, r7
 80118b2:	f000 fe8e 	bl	80125d2 <memcpy1>

        data += 16;
 80118b6:	3510      	adds	r5, #16
        len -= 16;
 80118b8:	3e10      	subs	r6, #16
    while( len > 16 )
 80118ba:	2e10      	cmp	r6, #16
 80118bc:	d901      	bls.n	80118c2 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 80118be:	2300      	movs	r3, #0
 80118c0:	e7e6      	b.n	8011890 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80118c2:	b2b2      	uxth	r2, r6
 80118c4:	4629      	mov	r1, r5
 80118c6:	f204 1001 	addw	r0, r4, #257	; 0x101
 80118ca:	f000 fe82 	bl	80125d2 <memcpy1>
    ctx->M_n = len;
 80118ce:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 80118d2:	b004      	add	sp, #16
 80118d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080118d8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80118d8:	b530      	push	{r4, r5, lr}
 80118da:	b089      	sub	sp, #36	; 0x24
 80118dc:	4605      	mov	r5, r0
 80118de:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80118e0:	2210      	movs	r2, #16
 80118e2:	2100      	movs	r1, #0
 80118e4:	eb0d 0002 	add.w	r0, sp, r2
 80118e8:	f000 fe8b 	bl	8012602 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80118ec:	4622      	mov	r2, r4
 80118ee:	a904      	add	r1, sp, #16
 80118f0:	4608      	mov	r0, r1
 80118f2:	f000 fb3f 	bl	8011f74 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80118f6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	db01      	blt.n	8011902 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 80118fe:	2300      	movs	r3, #0
 8011900:	e030      	b.n	8011964 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 8011902:	2300      	movs	r3, #0
 8011904:	2b0e      	cmp	r3, #14
 8011906:	dc11      	bgt.n	801192c <AES_CMAC_Final+0x54>
 8011908:	f103 0220 	add.w	r2, r3, #32
 801190c:	eb0d 0102 	add.w	r1, sp, r2
 8011910:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8011914:	3301      	adds	r3, #1
 8011916:	f103 0220 	add.w	r2, r3, #32
 801191a:	446a      	add	r2, sp
 801191c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8011920:	09d2      	lsrs	r2, r2, #7
 8011922:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8011926:	f801 2c10 	strb.w	r2, [r1, #-16]
 801192a:	e7eb      	b.n	8011904 <AES_CMAC_Final+0x2c>
 801192c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011930:	005b      	lsls	r3, r3, #1
 8011932:	b2db      	uxtb	r3, r3
 8011934:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 8011938:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 801193c:	f88d 301f 	strb.w	r3, [sp, #31]
 8011940:	e017      	b.n	8011972 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 8011942:	f103 0220 	add.w	r2, r3, #32
 8011946:	eb0d 0102 	add.w	r1, sp, r2
 801194a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801194e:	3301      	adds	r3, #1
 8011950:	f103 0220 	add.w	r2, r3, #32
 8011954:	446a      	add	r2, sp
 8011956:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801195a:	09d2      	lsrs	r2, r2, #7
 801195c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8011960:	f801 2c10 	strb.w	r2, [r1, #-16]
 8011964:	2b0e      	cmp	r3, #14
 8011966:	ddec      	ble.n	8011942 <AES_CMAC_Final+0x6a>
 8011968:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801196c:	005b      	lsls	r3, r3, #1
 801196e:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8011972:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8011976:	2810      	cmp	r0, #16
 8011978:	d014      	beq.n	80119a4 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 801197a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801197e:	2b00      	cmp	r3, #0
 8011980:	db30      	blt.n	80119e4 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8011982:	2300      	movs	r3, #0
 8011984:	e041      	b.n	8011a0a <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 8011986:	18e1      	adds	r1, r4, r3
 8011988:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801198c:	f103 0020 	add.w	r0, r3, #32
 8011990:	4468      	add	r0, sp
 8011992:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8011996:	4042      	eors	r2, r0
 8011998:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801199c:	3301      	adds	r3, #1
 801199e:	2b0f      	cmp	r3, #15
 80119a0:	ddf1      	ble.n	8011986 <AES_CMAC_Final+0xae>
 80119a2:	e059      	b.n	8011a58 <AES_CMAC_Final+0x180>
 80119a4:	2300      	movs	r3, #0
 80119a6:	e7fa      	b.n	801199e <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 80119a8:	f103 0220 	add.w	r2, r3, #32
 80119ac:	eb0d 0102 	add.w	r1, sp, r2
 80119b0:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80119b4:	3301      	adds	r3, #1
 80119b6:	f103 0220 	add.w	r2, r3, #32
 80119ba:	446a      	add	r2, sp
 80119bc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80119c0:	09d2      	lsrs	r2, r2, #7
 80119c2:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80119c6:	f801 2c10 	strb.w	r2, [r1, #-16]
 80119ca:	2b0e      	cmp	r3, #14
 80119cc:	ddec      	ble.n	80119a8 <AES_CMAC_Final+0xd0>
 80119ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80119d2:	005b      	lsls	r3, r3, #1
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 80119da:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80119de:	f88d 301f 	strb.w	r3, [sp, #31]
 80119e2:	e019      	b.n	8011a18 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 80119e4:	2300      	movs	r3, #0
 80119e6:	e7f0      	b.n	80119ca <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 80119e8:	f103 0220 	add.w	r2, r3, #32
 80119ec:	eb0d 0102 	add.w	r1, sp, r2
 80119f0:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80119f4:	3301      	adds	r3, #1
 80119f6:	f103 0220 	add.w	r2, r3, #32
 80119fa:	446a      	add	r2, sp
 80119fc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8011a00:	09d2      	lsrs	r2, r2, #7
 8011a02:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8011a06:	f801 2c10 	strb.w	r2, [r1, #-16]
 8011a0a:	2b0e      	cmp	r3, #14
 8011a0c:	ddec      	ble.n	80119e8 <AES_CMAC_Final+0x110>
 8011a0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011a12:	005b      	lsls	r3, r3, #1
 8011a14:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8011a18:	4420      	add	r0, r4
 8011a1a:	2380      	movs	r3, #128	; 0x80
 8011a1c:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8011a20:	e003      	b.n	8011a2a <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 8011a22:	4423      	add	r3, r4
 8011a24:	2200      	movs	r2, #0
 8011a26:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8011a2a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8011a2e:	3301      	adds	r3, #1
 8011a30:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8011a34:	2b0f      	cmp	r3, #15
 8011a36:	d9f4      	bls.n	8011a22 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 8011a38:	2300      	movs	r3, #0
 8011a3a:	e00b      	b.n	8011a54 <AES_CMAC_Final+0x17c>
 8011a3c:	18e1      	adds	r1, r4, r3
 8011a3e:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8011a42:	f103 0020 	add.w	r0, r3, #32
 8011a46:	4468      	add	r0, sp
 8011a48:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8011a4c:	4042      	eors	r2, r0
 8011a4e:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8011a52:	3301      	adds	r3, #1
 8011a54:	2b0f      	cmp	r3, #15
 8011a56:	ddf1      	ble.n	8011a3c <AES_CMAC_Final+0x164>
 8011a58:	2300      	movs	r3, #0
 8011a5a:	e009      	b.n	8011a70 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8011a5c:	18e2      	adds	r2, r4, r3
 8011a5e:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 8011a62:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8011a66:	ea8c 0c01 	eor.w	ip, ip, r1
 8011a6a:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 8011a6e:	3301      	adds	r3, #1
 8011a70:	2b0f      	cmp	r3, #15
 8011a72:	ddf3      	ble.n	8011a5c <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8011a74:	2210      	movs	r2, #16
 8011a76:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8011a7a:	4668      	mov	r0, sp
 8011a7c:	f000 fda9 	bl	80125d2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8011a80:	4622      	mov	r2, r4
 8011a82:	4629      	mov	r1, r5
 8011a84:	4668      	mov	r0, sp
 8011a86:	f000 fa75 	bl	8011f74 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8011a8a:	2210      	movs	r2, #16
 8011a8c:	2100      	movs	r1, #0
 8011a8e:	eb0d 0002 	add.w	r0, sp, r2
 8011a92:	f000 fdb6 	bl	8012602 <memset1>
}
 8011a96:	b009      	add	sp, #36	; 0x24
 8011a98:	bd30      	pop	{r4, r5, pc}

08011a9a <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8011a9a:	780b      	ldrb	r3, [r1, #0]
 8011a9c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8011a9e:	784b      	ldrb	r3, [r1, #1]
 8011aa0:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8011aa2:	788b      	ldrb	r3, [r1, #2]
 8011aa4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8011aa6:	78cb      	ldrb	r3, [r1, #3]
 8011aa8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8011aaa:	790b      	ldrb	r3, [r1, #4]
 8011aac:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8011aae:	794b      	ldrb	r3, [r1, #5]
 8011ab0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8011ab2:	798b      	ldrb	r3, [r1, #6]
 8011ab4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8011ab6:	79cb      	ldrb	r3, [r1, #7]
 8011ab8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8011aba:	7a0b      	ldrb	r3, [r1, #8]
 8011abc:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8011abe:	7a4b      	ldrb	r3, [r1, #9]
 8011ac0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8011ac2:	7a8b      	ldrb	r3, [r1, #10]
 8011ac4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8011ac6:	7acb      	ldrb	r3, [r1, #11]
 8011ac8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8011aca:	7b0b      	ldrb	r3, [r1, #12]
 8011acc:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8011ace:	7b4b      	ldrb	r3, [r1, #13]
 8011ad0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8011ad2:	7b8b      	ldrb	r3, [r1, #14]
 8011ad4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8011ad6:	7bcb      	ldrb	r3, [r1, #15]
 8011ad8:	73c3      	strb	r3, [r0, #15]
#endif
}
 8011ada:	4770      	bx	lr

08011adc <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8011adc:	e004      	b.n	8011ae8 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8011ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ae2:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	1e53      	subs	r3, r2, #1
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	2a00      	cmp	r2, #0
 8011aee:	d1f6      	bne.n	8011ade <copy_block_nn+0x2>
}
 8011af0:	4770      	bx	lr

08011af2 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8011af2:	780b      	ldrb	r3, [r1, #0]
 8011af4:	7802      	ldrb	r2, [r0, #0]
 8011af6:	4053      	eors	r3, r2
 8011af8:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8011afa:	784b      	ldrb	r3, [r1, #1]
 8011afc:	7842      	ldrb	r2, [r0, #1]
 8011afe:	4053      	eors	r3, r2
 8011b00:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8011b02:	788b      	ldrb	r3, [r1, #2]
 8011b04:	7882      	ldrb	r2, [r0, #2]
 8011b06:	4053      	eors	r3, r2
 8011b08:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8011b0a:	78cb      	ldrb	r3, [r1, #3]
 8011b0c:	78c2      	ldrb	r2, [r0, #3]
 8011b0e:	4053      	eors	r3, r2
 8011b10:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8011b12:	790b      	ldrb	r3, [r1, #4]
 8011b14:	7902      	ldrb	r2, [r0, #4]
 8011b16:	4053      	eors	r3, r2
 8011b18:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8011b1a:	794b      	ldrb	r3, [r1, #5]
 8011b1c:	7942      	ldrb	r2, [r0, #5]
 8011b1e:	4053      	eors	r3, r2
 8011b20:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8011b22:	798b      	ldrb	r3, [r1, #6]
 8011b24:	7982      	ldrb	r2, [r0, #6]
 8011b26:	4053      	eors	r3, r2
 8011b28:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8011b2a:	79cb      	ldrb	r3, [r1, #7]
 8011b2c:	79c2      	ldrb	r2, [r0, #7]
 8011b2e:	4053      	eors	r3, r2
 8011b30:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8011b32:	7a0b      	ldrb	r3, [r1, #8]
 8011b34:	7a02      	ldrb	r2, [r0, #8]
 8011b36:	4053      	eors	r3, r2
 8011b38:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8011b3a:	7a4b      	ldrb	r3, [r1, #9]
 8011b3c:	7a42      	ldrb	r2, [r0, #9]
 8011b3e:	4053      	eors	r3, r2
 8011b40:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8011b42:	7a8b      	ldrb	r3, [r1, #10]
 8011b44:	7a82      	ldrb	r2, [r0, #10]
 8011b46:	4053      	eors	r3, r2
 8011b48:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8011b4a:	7acb      	ldrb	r3, [r1, #11]
 8011b4c:	7ac2      	ldrb	r2, [r0, #11]
 8011b4e:	4053      	eors	r3, r2
 8011b50:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8011b52:	7b0b      	ldrb	r3, [r1, #12]
 8011b54:	7b02      	ldrb	r2, [r0, #12]
 8011b56:	4053      	eors	r3, r2
 8011b58:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8011b5a:	7b4b      	ldrb	r3, [r1, #13]
 8011b5c:	7b42      	ldrb	r2, [r0, #13]
 8011b5e:	4053      	eors	r3, r2
 8011b60:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8011b62:	7b8b      	ldrb	r3, [r1, #14]
 8011b64:	7b82      	ldrb	r2, [r0, #14]
 8011b66:	4053      	eors	r3, r2
 8011b68:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8011b6a:	7bcb      	ldrb	r3, [r1, #15]
 8011b6c:	7bc2      	ldrb	r2, [r0, #15]
 8011b6e:	4053      	eors	r3, r2
 8011b70:	73c3      	strb	r3, [r0, #15]
#endif
}
 8011b72:	4770      	bx	lr

08011b74 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8011b74:	780b      	ldrb	r3, [r1, #0]
 8011b76:	f892 c000 	ldrb.w	ip, [r2]
 8011b7a:	ea83 030c 	eor.w	r3, r3, ip
 8011b7e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8011b80:	784b      	ldrb	r3, [r1, #1]
 8011b82:	f892 c001 	ldrb.w	ip, [r2, #1]
 8011b86:	ea83 030c 	eor.w	r3, r3, ip
 8011b8a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8011b8c:	788b      	ldrb	r3, [r1, #2]
 8011b8e:	f892 c002 	ldrb.w	ip, [r2, #2]
 8011b92:	ea83 030c 	eor.w	r3, r3, ip
 8011b96:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8011b98:	78cb      	ldrb	r3, [r1, #3]
 8011b9a:	f892 c003 	ldrb.w	ip, [r2, #3]
 8011b9e:	ea83 030c 	eor.w	r3, r3, ip
 8011ba2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8011ba4:	790b      	ldrb	r3, [r1, #4]
 8011ba6:	f892 c004 	ldrb.w	ip, [r2, #4]
 8011baa:	ea83 030c 	eor.w	r3, r3, ip
 8011bae:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8011bb0:	794b      	ldrb	r3, [r1, #5]
 8011bb2:	f892 c005 	ldrb.w	ip, [r2, #5]
 8011bb6:	ea83 030c 	eor.w	r3, r3, ip
 8011bba:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8011bbc:	798b      	ldrb	r3, [r1, #6]
 8011bbe:	f892 c006 	ldrb.w	ip, [r2, #6]
 8011bc2:	ea83 030c 	eor.w	r3, r3, ip
 8011bc6:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8011bc8:	79cb      	ldrb	r3, [r1, #7]
 8011bca:	f892 c007 	ldrb.w	ip, [r2, #7]
 8011bce:	ea83 030c 	eor.w	r3, r3, ip
 8011bd2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8011bd4:	7a0b      	ldrb	r3, [r1, #8]
 8011bd6:	f892 c008 	ldrb.w	ip, [r2, #8]
 8011bda:	ea83 030c 	eor.w	r3, r3, ip
 8011bde:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8011be0:	7a4b      	ldrb	r3, [r1, #9]
 8011be2:	f892 c009 	ldrb.w	ip, [r2, #9]
 8011be6:	ea83 030c 	eor.w	r3, r3, ip
 8011bea:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8011bec:	7a8b      	ldrb	r3, [r1, #10]
 8011bee:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8011bf2:	ea83 030c 	eor.w	r3, r3, ip
 8011bf6:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8011bf8:	7acb      	ldrb	r3, [r1, #11]
 8011bfa:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8011bfe:	ea83 030c 	eor.w	r3, r3, ip
 8011c02:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8011c04:	7b0b      	ldrb	r3, [r1, #12]
 8011c06:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8011c0a:	ea83 030c 	eor.w	r3, r3, ip
 8011c0e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8011c10:	7b4b      	ldrb	r3, [r1, #13]
 8011c12:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8011c16:	ea83 030c 	eor.w	r3, r3, ip
 8011c1a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8011c1c:	7b8b      	ldrb	r3, [r1, #14]
 8011c1e:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8011c22:	ea83 030c 	eor.w	r3, r3, ip
 8011c26:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8011c28:	7bcb      	ldrb	r3, [r1, #15]
 8011c2a:	7bd2      	ldrb	r2, [r2, #15]
 8011c2c:	4053      	eors	r3, r2
 8011c2e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8011c30:	4770      	bx	lr

08011c32 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8011c32:	b508      	push	{r3, lr}
    xor_block(d, k);
 8011c34:	f7ff ff5d 	bl	8011af2 <xor_block>
}
 8011c38:	bd08      	pop	{r3, pc}
	...

08011c3c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8011c3c:	7802      	ldrb	r2, [r0, #0]
 8011c3e:	4b18      	ldr	r3, [pc, #96]	; (8011ca0 <shift_sub_rows+0x64>)
 8011c40:	5c9a      	ldrb	r2, [r3, r2]
 8011c42:	7002      	strb	r2, [r0, #0]
 8011c44:	7902      	ldrb	r2, [r0, #4]
 8011c46:	5c9a      	ldrb	r2, [r3, r2]
 8011c48:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8011c4a:	7a02      	ldrb	r2, [r0, #8]
 8011c4c:	5c9a      	ldrb	r2, [r3, r2]
 8011c4e:	7202      	strb	r2, [r0, #8]
 8011c50:	7b02      	ldrb	r2, [r0, #12]
 8011c52:	5c9a      	ldrb	r2, [r3, r2]
 8011c54:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8011c56:	7842      	ldrb	r2, [r0, #1]
 8011c58:	7941      	ldrb	r1, [r0, #5]
 8011c5a:	5c59      	ldrb	r1, [r3, r1]
 8011c5c:	7041      	strb	r1, [r0, #1]
 8011c5e:	7a41      	ldrb	r1, [r0, #9]
 8011c60:	5c59      	ldrb	r1, [r3, r1]
 8011c62:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8011c64:	7b41      	ldrb	r1, [r0, #13]
 8011c66:	5c59      	ldrb	r1, [r3, r1]
 8011c68:	7241      	strb	r1, [r0, #9]
 8011c6a:	5c9a      	ldrb	r2, [r3, r2]
 8011c6c:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8011c6e:	7882      	ldrb	r2, [r0, #2]
 8011c70:	7a81      	ldrb	r1, [r0, #10]
 8011c72:	5c59      	ldrb	r1, [r3, r1]
 8011c74:	7081      	strb	r1, [r0, #2]
 8011c76:	5c9a      	ldrb	r2, [r3, r2]
 8011c78:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8011c7a:	7982      	ldrb	r2, [r0, #6]
 8011c7c:	7b81      	ldrb	r1, [r0, #14]
 8011c7e:	5c59      	ldrb	r1, [r3, r1]
 8011c80:	7181      	strb	r1, [r0, #6]
 8011c82:	5c9a      	ldrb	r2, [r3, r2]
 8011c84:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8011c86:	7bc2      	ldrb	r2, [r0, #15]
 8011c88:	7ac1      	ldrb	r1, [r0, #11]
 8011c8a:	5c59      	ldrb	r1, [r3, r1]
 8011c8c:	73c1      	strb	r1, [r0, #15]
 8011c8e:	79c1      	ldrb	r1, [r0, #7]
 8011c90:	5c59      	ldrb	r1, [r3, r1]
 8011c92:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8011c94:	78c1      	ldrb	r1, [r0, #3]
 8011c96:	5c59      	ldrb	r1, [r3, r1]
 8011c98:	71c1      	strb	r1, [r0, #7]
 8011c9a:	5c9b      	ldrb	r3, [r3, r2]
 8011c9c:	70c3      	strb	r3, [r0, #3]
}
 8011c9e:	4770      	bx	lr
 8011ca0:	080159a0 	.word	0x080159a0

08011ca4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8011ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ca8:	b084      	sub	sp, #16
 8011caa:	4604      	mov	r4, r0
    block_copy(st, dt);
 8011cac:	4601      	mov	r1, r0
 8011cae:	4668      	mov	r0, sp
 8011cb0:	f7ff fef3 	bl	8011a9a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8011cb4:	f89d c000 	ldrb.w	ip, [sp]
 8011cb8:	4b6a      	ldr	r3, [pc, #424]	; (8011e64 <mix_sub_columns+0x1c0>)
 8011cba:	f813 000c 	ldrb.w	r0, [r3, ip]
 8011cbe:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011cc2:	4a69      	ldr	r2, [pc, #420]	; (8011e68 <mix_sub_columns+0x1c4>)
 8011cc4:	f812 9008 	ldrb.w	r9, [r2, r8]
 8011cc8:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8011ccc:	4967      	ldr	r1, [pc, #412]	; (8011e6c <mix_sub_columns+0x1c8>)
 8011cce:	f811 500e 	ldrb.w	r5, [r1, lr]
 8011cd2:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8011cd6:	5dce      	ldrb	r6, [r1, r7]
 8011cd8:	ea80 0009 	eor.w	r0, r0, r9
 8011cdc:	4068      	eors	r0, r5
 8011cde:	4070      	eors	r0, r6
 8011ce0:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8011ce2:	f811 000c 	ldrb.w	r0, [r1, ip]
 8011ce6:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011cea:	f812 900e 	ldrb.w	r9, [r2, lr]
 8011cee:	ea80 0a0a 	eor.w	sl, r0, sl
 8011cf2:	ea89 090a 	eor.w	r9, r9, sl
 8011cf6:	ea86 0609 	eor.w	r6, r6, r9
 8011cfa:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8011cfc:	f811 8008 	ldrb.w	r8, [r1, r8]
 8011d00:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8011d04:	5dd6      	ldrb	r6, [r2, r7]
 8011d06:	ea80 0008 	eor.w	r0, r0, r8
 8011d0a:	ea8e 0000 	eor.w	r0, lr, r0
 8011d0e:	4070      	eors	r0, r6
 8011d10:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8011d12:	f812 600c 	ldrb.w	r6, [r2, ip]
 8011d16:	5dd8      	ldrb	r0, [r3, r7]
 8011d18:	ea86 0608 	eor.w	r6, r6, r8
 8011d1c:	4075      	eors	r5, r6
 8011d1e:	4045      	eors	r5, r0
 8011d20:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8011d22:	f89d c004 	ldrb.w	ip, [sp, #4]
 8011d26:	f813 000c 	ldrb.w	r0, [r3, ip]
 8011d2a:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8011d2e:	f812 9008 	ldrb.w	r9, [r2, r8]
 8011d32:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8011d36:	f811 500e 	ldrb.w	r5, [r1, lr]
 8011d3a:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8011d3e:	5dce      	ldrb	r6, [r1, r7]
 8011d40:	ea80 0009 	eor.w	r0, r0, r9
 8011d44:	4068      	eors	r0, r5
 8011d46:	4070      	eors	r0, r6
 8011d48:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8011d4a:	f811 000c 	ldrb.w	r0, [r1, ip]
 8011d4e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011d52:	f812 900e 	ldrb.w	r9, [r2, lr]
 8011d56:	ea80 0a0a 	eor.w	sl, r0, sl
 8011d5a:	ea89 090a 	eor.w	r9, r9, sl
 8011d5e:	ea86 0609 	eor.w	r6, r6, r9
 8011d62:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8011d64:	f811 8008 	ldrb.w	r8, [r1, r8]
 8011d68:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8011d6c:	5dd6      	ldrb	r6, [r2, r7]
 8011d6e:	ea80 0008 	eor.w	r0, r0, r8
 8011d72:	ea8e 0000 	eor.w	r0, lr, r0
 8011d76:	4070      	eors	r0, r6
 8011d78:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8011d7a:	f812 600c 	ldrb.w	r6, [r2, ip]
 8011d7e:	5dd8      	ldrb	r0, [r3, r7]
 8011d80:	ea86 0608 	eor.w	r6, r6, r8
 8011d84:	4075      	eors	r5, r6
 8011d86:	4045      	eors	r5, r0
 8011d88:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8011d8a:	f89d c008 	ldrb.w	ip, [sp, #8]
 8011d8e:	f813 000c 	ldrb.w	r0, [r3, ip]
 8011d92:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8011d96:	f812 9008 	ldrb.w	r9, [r2, r8]
 8011d9a:	f89d e002 	ldrb.w	lr, [sp, #2]
 8011d9e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8011da2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8011da6:	5dce      	ldrb	r6, [r1, r7]
 8011da8:	ea80 0009 	eor.w	r0, r0, r9
 8011dac:	4068      	eors	r0, r5
 8011dae:	4070      	eors	r0, r6
 8011db0:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8011db2:	f811 000c 	ldrb.w	r0, [r1, ip]
 8011db6:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011dba:	f812 900e 	ldrb.w	r9, [r2, lr]
 8011dbe:	ea80 0a0a 	eor.w	sl, r0, sl
 8011dc2:	ea89 090a 	eor.w	r9, r9, sl
 8011dc6:	ea86 0609 	eor.w	r6, r6, r9
 8011dca:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8011dcc:	f811 8008 	ldrb.w	r8, [r1, r8]
 8011dd0:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8011dd4:	5dd6      	ldrb	r6, [r2, r7]
 8011dd6:	ea80 0008 	eor.w	r0, r0, r8
 8011dda:	ea8e 0000 	eor.w	r0, lr, r0
 8011dde:	4070      	eors	r0, r6
 8011de0:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8011de2:	f812 600c 	ldrb.w	r6, [r2, ip]
 8011de6:	5dd8      	ldrb	r0, [r3, r7]
 8011de8:	ea86 0608 	eor.w	r6, r6, r8
 8011dec:	4075      	eors	r5, r6
 8011dee:	4045      	eors	r5, r0
 8011df0:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8011df2:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8011df6:	5d98      	ldrb	r0, [r3, r6]
 8011df8:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8011dfc:	f812 9008 	ldrb.w	r9, [r2, r8]
 8011e00:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8011e04:	f811 c007 	ldrb.w	ip, [r1, r7]
 8011e08:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8011e0c:	f811 e005 	ldrb.w	lr, [r1, r5]
 8011e10:	ea80 0009 	eor.w	r0, r0, r9
 8011e14:	ea8c 0000 	eor.w	r0, ip, r0
 8011e18:	ea8e 0000 	eor.w	r0, lr, r0
 8011e1c:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8011e1e:	5d88      	ldrb	r0, [r1, r6]
 8011e20:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011e24:	f812 9007 	ldrb.w	r9, [r2, r7]
 8011e28:	ea80 0a0a 	eor.w	sl, r0, sl
 8011e2c:	ea89 090a 	eor.w	r9, r9, sl
 8011e30:	ea8e 0e09 	eor.w	lr, lr, r9
 8011e34:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8011e38:	f811 1008 	ldrb.w	r1, [r1, r8]
 8011e3c:	f813 e007 	ldrb.w	lr, [r3, r7]
 8011e40:	5d57      	ldrb	r7, [r2, r5]
 8011e42:	4048      	eors	r0, r1
 8011e44:	ea8e 0000 	eor.w	r0, lr, r0
 8011e48:	4078      	eors	r0, r7
 8011e4a:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8011e4c:	5d92      	ldrb	r2, [r2, r6]
 8011e4e:	5d5b      	ldrb	r3, [r3, r5]
 8011e50:	4051      	eors	r1, r2
 8011e52:	ea8c 0c01 	eor.w	ip, ip, r1
 8011e56:	ea83 0c0c 	eor.w	ip, r3, ip
 8011e5a:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 8011e5e:	b004      	add	sp, #16
 8011e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e64:	080157a0 	.word	0x080157a0
 8011e68:	080158a0 	.word	0x080158a0
 8011e6c:	080159a0 	.word	0x080159a0

08011e70 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8011e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e74:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8011e76:	f1a1 0310 	sub.w	r3, r1, #16
 8011e7a:	b2da      	uxtb	r2, r3
 8011e7c:	2a10      	cmp	r2, #16
 8011e7e:	d807      	bhi.n	8011e90 <lorawan_aes_set_key+0x20>
 8011e80:	460d      	mov	r5, r1
 8011e82:	2301      	movs	r3, #1
 8011e84:	4093      	lsls	r3, r2
 8011e86:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8011e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011e8e:	b92b      	cbnz	r3, 8011e9c <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8011e90:	2300      	movs	r3, #0
 8011e92:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8011e96:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8011e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8011e9c:	460a      	mov	r2, r1
 8011e9e:	4601      	mov	r1, r0
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f7ff fe1b 	bl	8011adc <copy_block_nn>
    hi = (keylen + 28) << 2;
 8011ea6:	f105 031c 	add.w	r3, r5, #28
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8011eb2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8011eb6:	3b01      	subs	r3, #1
 8011eb8:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8011ebc:	462b      	mov	r3, r5
 8011ebe:	f04f 0c01 	mov.w	ip, #1
 8011ec2:	e023      	b.n	8011f0c <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 8011ec4:	2d18      	cmp	r5, #24
 8011ec6:	d901      	bls.n	8011ecc <lorawan_aes_set_key+0x5c>
 8011ec8:	2a10      	cmp	r2, #16
 8011eca:	d047      	beq.n	8011f5c <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 8011ecc:	1b5a      	subs	r2, r3, r5
 8011ece:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8011ed0:	f814 9002 	ldrb.w	r9, [r4, r2]
 8011ed4:	ea89 0808 	eor.w	r8, r9, r8
 8011ed8:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8011edc:	f102 0801 	add.w	r8, r2, #1
 8011ee0:	f814 8008 	ldrb.w	r8, [r4, r8]
 8011ee4:	f100 0901 	add.w	r9, r0, #1
 8011ee8:	ea88 0707 	eor.w	r7, r8, r7
 8011eec:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8011ef0:	1c97      	adds	r7, r2, #2
 8011ef2:	5de7      	ldrb	r7, [r4, r7]
 8011ef4:	f100 0802 	add.w	r8, r0, #2
 8011ef8:	407e      	eors	r6, r7
 8011efa:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8011efe:	3203      	adds	r2, #3
 8011f00:	5ca6      	ldrb	r6, [r4, r2]
 8011f02:	1cc2      	adds	r2, r0, #3
 8011f04:	4071      	eors	r1, r6
 8011f06:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8011f08:	3304      	adds	r3, #4
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	4573      	cmp	r3, lr
 8011f0e:	d22c      	bcs.n	8011f6a <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8011f10:	4618      	mov	r0, r3
 8011f12:	1f1a      	subs	r2, r3, #4
 8011f14:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8011f18:	1eda      	subs	r2, r3, #3
 8011f1a:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8011f1c:	1e9a      	subs	r2, r3, #2
 8011f1e:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8011f20:	1e5a      	subs	r2, r3, #1
 8011f22:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8011f24:	fbb3 f2f5 	udiv	r2, r3, r5
 8011f28:	fb05 3212 	mls	r2, r5, r2, r3
 8011f2c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8011f30:	d1c8      	bne.n	8011ec4 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 8011f32:	4a0f      	ldr	r2, [pc, #60]	; (8011f70 <lorawan_aes_set_key+0x100>)
 8011f34:	f812 9007 	ldrb.w	r9, [r2, r7]
 8011f38:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8011f3c:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8011f3e:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8011f40:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8011f44:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8011f48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011f4c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8011f50:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 8011f54:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 8011f58:	46c8      	mov	r8, r9
 8011f5a:	e7b7      	b.n	8011ecc <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 8011f5c:	4a04      	ldr	r2, [pc, #16]	; (8011f70 <lorawan_aes_set_key+0x100>)
 8011f5e:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8011f62:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8011f64:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8011f66:	5c51      	ldrb	r1, [r2, r1]
 8011f68:	e7b0      	b.n	8011ecc <lorawan_aes_set_key+0x5c>
    return 0;
 8011f6a:	2000      	movs	r0, #0
 8011f6c:	e794      	b.n	8011e98 <lorawan_aes_set_key+0x28>
 8011f6e:	bf00      	nop
 8011f70:	080159a0 	.word	0x080159a0

08011f74 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8011f74:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8011f78:	b31b      	cbz	r3, 8011fc2 <lorawan_aes_encrypt+0x4e>
{
 8011f7a:	b570      	push	{r4, r5, r6, lr}
 8011f7c:	b084      	sub	sp, #16
 8011f7e:	460e      	mov	r6, r1
 8011f80:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8011f82:	4601      	mov	r1, r0
 8011f84:	4668      	mov	r0, sp
 8011f86:	f7ff fdf5 	bl	8011b74 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8011f8a:	2401      	movs	r4, #1
 8011f8c:	e009      	b.n	8011fa2 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8011f8e:	4668      	mov	r0, sp
 8011f90:	f7ff fe88 	bl	8011ca4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8011f94:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8011f98:	4668      	mov	r0, sp
 8011f9a:	f7ff fe4a 	bl	8011c32 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8011f9e:	3401      	adds	r4, #1
 8011fa0:	b2e4      	uxtb	r4, r4
 8011fa2:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8011fa6:	42a3      	cmp	r3, r4
 8011fa8:	d8f1      	bhi.n	8011f8e <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8011faa:	4668      	mov	r0, sp
 8011fac:	f7ff fe46 	bl	8011c3c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8011fb0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8011fb4:	4669      	mov	r1, sp
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f7ff fddc 	bl	8011b74 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8011fbc:	2000      	movs	r0, #0
}
 8011fbe:	b004      	add	sp, #16
 8011fc0:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8011fc2:	20ff      	movs	r0, #255	; 0xff
}
 8011fc4:	4770      	bx	lr
	...

08011fc8 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011fc8:	2300      	movs	r3, #0
 8011fca:	2b09      	cmp	r3, #9
 8011fcc:	d817      	bhi.n	8011ffe <GetKeyByID+0x36>
{
 8011fce:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8011fd0:	4a0c      	ldr	r2, [pc, #48]	; (8012004 <GetKeyByID+0x3c>)
 8011fd2:	6814      	ldr	r4, [r2, #0]
 8011fd4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8011fd8:	4422      	add	r2, r4
 8011fda:	7c12      	ldrb	r2, [r2, #16]
 8011fdc:	4282      	cmp	r2, r0
 8011fde:	d006      	beq.n	8011fee <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	2b09      	cmp	r3, #9
 8011fe6:	d9f3      	bls.n	8011fd0 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011fe8:	2003      	movs	r0, #3
}
 8011fea:	bc10      	pop	{r4}
 8011fec:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8011fee:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8011ff2:	f10c 0c10 	add.w	ip, ip, #16
 8011ff6:	4464      	add	r4, ip
 8011ff8:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8011ffa:	2000      	movs	r0, #0
 8011ffc:	e7f5      	b.n	8011fea <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011ffe:	2003      	movs	r0, #3
}
 8012000:	4770      	bx	lr
 8012002:	bf00      	nop
 8012004:	20003cf8 	.word	0x20003cf8

08012008 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8012008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801200c:	b0cc      	sub	sp, #304	; 0x130
 801200e:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8012010:	b3a9      	cbz	r1, 801207e <ComputeCmac+0x76>
 8012012:	4605      	mov	r5, r0
 8012014:	4617      	mov	r7, r2
 8012016:	461c      	mov	r4, r3
 8012018:	4688      	mov	r8, r1
 801201a:	b396      	cbz	r6, 8012082 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 801201c:	a802      	add	r0, sp, #8
 801201e:	f7ff fbd7 	bl	80117d0 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8012022:	a901      	add	r1, sp, #4
 8012024:	4620      	mov	r0, r4
 8012026:	f7ff ffcf 	bl	8011fc8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 801202a:	4604      	mov	r4, r0
 801202c:	b118      	cbz	r0, 8012036 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 801202e:	4620      	mov	r0, r4
 8012030:	b04c      	add	sp, #304	; 0x130
 8012032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8012036:	9901      	ldr	r1, [sp, #4]
 8012038:	3101      	adds	r1, #1
 801203a:	a802      	add	r0, sp, #8
 801203c:	f7ff fbd7 	bl	80117ee <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8012040:	b125      	cbz	r5, 801204c <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8012042:	2210      	movs	r2, #16
 8012044:	4629      	mov	r1, r5
 8012046:	a802      	add	r0, sp, #8
 8012048:	f7ff fbd8 	bl	80117fc <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 801204c:	463a      	mov	r2, r7
 801204e:	4641      	mov	r1, r8
 8012050:	a802      	add	r0, sp, #8
 8012052:	f7ff fbd3 	bl	80117fc <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8012056:	a902      	add	r1, sp, #8
 8012058:	a848      	add	r0, sp, #288	; 0x120
 801205a:	f7ff fc3d 	bl	80118d8 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 801205e:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8012062:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8012066:	041b      	lsls	r3, r3, #16
 8012068:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801206c:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8012070:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 8012074:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8012078:	4313      	orrs	r3, r2
 801207a:	6033      	str	r3, [r6, #0]
 801207c:	e7d7      	b.n	801202e <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 801207e:	2402      	movs	r4, #2
 8012080:	e7d5      	b.n	801202e <ComputeCmac+0x26>
 8012082:	2402      	movs	r4, #2
 8012084:	e7d3      	b.n	801202e <ComputeCmac+0x26>
	...

08012088 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 8012088:	b168      	cbz	r0, 80120a6 <SecureElementInit+0x1e>
{
 801208a:	b510      	push	{r4, lr}
 801208c:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 801208e:	4a08      	ldr	r2, [pc, #32]	; (80120b0 <SecureElementInit+0x28>)
 8012090:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8012092:	22c0      	movs	r2, #192	; 0xc0
 8012094:	4907      	ldr	r1, [pc, #28]	; (80120b4 <SecureElementInit+0x2c>)
 8012096:	f000 fa9c 	bl	80125d2 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 801209a:	b134      	cbz	r4, 80120aa <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 801209c:	4b04      	ldr	r3, [pc, #16]	; (80120b0 <SecureElementInit+0x28>)
 801209e:	6818      	ldr	r0, [r3, #0]
 80120a0:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 80120a2:	2000      	movs	r0, #0
}
 80120a4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80120a6:	2002      	movs	r0, #2
}
 80120a8:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 80120aa:	2000      	movs	r0, #0
 80120ac:	e7fa      	b.n	80120a4 <SecureElementInit+0x1c>
 80120ae:	bf00      	nop
 80120b0:	20003cf8 	.word	0x20003cf8
 80120b4:	0803e500 	.word	0x0803e500

080120b8 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80120b8:	2300      	movs	r3, #0
 80120ba:	2b09      	cmp	r3, #9
 80120bc:	d817      	bhi.n	80120ee <SecureElementGetKeyByID+0x36>
{
 80120be:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 80120c0:	4a0c      	ldr	r2, [pc, #48]	; (80120f4 <SecureElementGetKeyByID+0x3c>)
 80120c2:	6814      	ldr	r4, [r2, #0]
 80120c4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80120c8:	4422      	add	r2, r4
 80120ca:	7c12      	ldrb	r2, [r2, #16]
 80120cc:	4282      	cmp	r2, r0
 80120ce:	d006      	beq.n	80120de <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80120d0:	3301      	adds	r3, #1
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	2b09      	cmp	r3, #9
 80120d6:	d9f3      	bls.n	80120c0 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80120d8:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 80120da:	bc10      	pop	{r4}
 80120dc:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 80120de:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 80120e2:	f10c 0c10 	add.w	ip, ip, #16
 80120e6:	4464      	add	r4, ip
 80120e8:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80120ea:	2000      	movs	r0, #0
 80120ec:	e7f5      	b.n	80120da <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80120ee:	2003      	movs	r0, #3
}
 80120f0:	4770      	bx	lr
 80120f2:	bf00      	nop
 80120f4:	20003cf8 	.word	0x20003cf8

080120f8 <PrintKey>:
{
 80120f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120fc:	b095      	sub	sp, #84	; 0x54
 80120fe:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8012100:	a913      	add	r1, sp, #76	; 0x4c
 8012102:	f7ff ffd9 	bl	80120b8 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 8012106:	2800      	cmp	r0, #0
 8012108:	d154      	bne.n	80121b4 <PrintKey+0xbc>
        if (key == APP_KEY)
 801210a:	b1b4      	cbz	r4, 801213a <PrintKey+0x42>
        else if (key == NWK_KEY)
 801210c:	2c01      	cmp	r4, #1
 801210e:	d054      	beq.n	80121ba <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 8012110:	2c03      	cmp	r4, #3
 8012112:	d059      	beq.n	80121c8 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 8012114:	2c02      	cmp	r4, #2
 8012116:	d05e      	beq.n	80121d6 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 8012118:	2c04      	cmp	r4, #4
 801211a:	d063      	beq.n	80121e4 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 801211c:	2c7f      	cmp	r4, #127	; 0x7f
 801211e:	d068      	beq.n	80121f2 <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 8012120:	2c80      	cmp	r4, #128	; 0x80
 8012122:	d06d      	beq.n	8012200 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 8012124:	2c81      	cmp	r4, #129	; 0x81
 8012126:	d072      	beq.n	801220e <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 8012128:	2c82      	cmp	r4, #130	; 0x82
 801212a:	d10c      	bne.n	8012146 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 801212c:	4b3b      	ldr	r3, [pc, #236]	; (801221c <PrintKey+0x124>)
 801212e:	2200      	movs	r2, #0
 8012130:	4611      	mov	r1, r2
 8012132:	2002      	movs	r0, #2
 8012134:	f002 f8f6 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 8012138:	e005      	b.n	8012146 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 801213a:	4b39      	ldr	r3, [pc, #228]	; (8012220 <PrintKey+0x128>)
 801213c:	2200      	movs	r2, #0
 801213e:	4611      	mov	r1, r2
 8012140:	2002      	movs	r0, #2
 8012142:	f002 f8ef 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012146:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012148:	785a      	ldrb	r2, [r3, #1]
 801214a:	9210      	str	r2, [sp, #64]	; 0x40
 801214c:	7899      	ldrb	r1, [r3, #2]
 801214e:	9111      	str	r1, [sp, #68]	; 0x44
 8012150:	78da      	ldrb	r2, [r3, #3]
 8012152:	7919      	ldrb	r1, [r3, #4]
 8012154:	7958      	ldrb	r0, [r3, #5]
 8012156:	799c      	ldrb	r4, [r3, #6]
 8012158:	79dd      	ldrb	r5, [r3, #7]
 801215a:	7a1e      	ldrb	r6, [r3, #8]
 801215c:	7a5f      	ldrb	r7, [r3, #9]
 801215e:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8012162:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8012166:	f893 800c 	ldrb.w	r8, [r3, #12]
 801216a:	f893 900d 	ldrb.w	r9, [r3, #13]
 801216e:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8012172:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8012176:	7c1b      	ldrb	r3, [r3, #16]
 8012178:	930f      	str	r3, [sp, #60]	; 0x3c
 801217a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801217e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012182:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012186:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801218a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 801218e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8012192:	9708      	str	r7, [sp, #32]
 8012194:	9607      	str	r6, [sp, #28]
 8012196:	9506      	str	r5, [sp, #24]
 8012198:	9405      	str	r4, [sp, #20]
 801219a:	9004      	str	r0, [sp, #16]
 801219c:	9103      	str	r1, [sp, #12]
 801219e:	9202      	str	r2, [sp, #8]
 80121a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80121a2:	9101      	str	r1, [sp, #4]
 80121a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80121a6:	9200      	str	r2, [sp, #0]
 80121a8:	4b1e      	ldr	r3, [pc, #120]	; (8012224 <PrintKey+0x12c>)
 80121aa:	2200      	movs	r2, #0
 80121ac:	4611      	mov	r1, r2
 80121ae:	2002      	movs	r0, #2
 80121b0:	f002 f8b8 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 80121b4:	b015      	add	sp, #84	; 0x54
 80121b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 80121ba:	4b1b      	ldr	r3, [pc, #108]	; (8012228 <PrintKey+0x130>)
 80121bc:	2200      	movs	r2, #0
 80121be:	4611      	mov	r1, r2
 80121c0:	2002      	movs	r0, #2
 80121c2:	f002 f8af 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 80121c6:	e7be      	b.n	8012146 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 80121c8:	4b18      	ldr	r3, [pc, #96]	; (801222c <PrintKey+0x134>)
 80121ca:	2200      	movs	r2, #0
 80121cc:	4611      	mov	r1, r2
 80121ce:	2002      	movs	r0, #2
 80121d0:	f002 f8a8 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 80121d4:	e7b7      	b.n	8012146 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 80121d6:	4b16      	ldr	r3, [pc, #88]	; (8012230 <PrintKey+0x138>)
 80121d8:	2200      	movs	r2, #0
 80121da:	4611      	mov	r1, r2
 80121dc:	2002      	movs	r0, #2
 80121de:	f002 f8a1 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 80121e2:	e7b0      	b.n	8012146 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 80121e4:	4b13      	ldr	r3, [pc, #76]	; (8012234 <PrintKey+0x13c>)
 80121e6:	2200      	movs	r2, #0
 80121e8:	4611      	mov	r1, r2
 80121ea:	2002      	movs	r0, #2
 80121ec:	f002 f89a 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 80121f0:	e7a9      	b.n	8012146 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 80121f2:	4b11      	ldr	r3, [pc, #68]	; (8012238 <PrintKey+0x140>)
 80121f4:	2200      	movs	r2, #0
 80121f6:	4611      	mov	r1, r2
 80121f8:	2002      	movs	r0, #2
 80121fa:	f002 f893 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 80121fe:	e7a2      	b.n	8012146 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 8012200:	4b0e      	ldr	r3, [pc, #56]	; (801223c <PrintKey+0x144>)
 8012202:	2200      	movs	r2, #0
 8012204:	4611      	mov	r1, r2
 8012206:	2002      	movs	r0, #2
 8012208:	f002 f88c 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 801220c:	e79b      	b.n	8012146 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 801220e:	4b0c      	ldr	r3, [pc, #48]	; (8012240 <PrintKey+0x148>)
 8012210:	2200      	movs	r2, #0
 8012212:	4611      	mov	r1, r2
 8012214:	2002      	movs	r0, #2
 8012216:	f002 f885 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 801221a:	e794      	b.n	8012146 <PrintKey+0x4e>
 801221c:	08015b60 	.word	0x08015b60
 8012220:	08015aa0 	.word	0x08015aa0
 8012224:	08015b78 	.word	0x08015b78
 8012228:	08015ab8 	.word	0x08015ab8
 801222c:	08015ad0 	.word	0x08015ad0
 8012230:	08015ae8 	.word	0x08015ae8
 8012234:	08015b00 	.word	0x08015b00
 8012238:	08015b18 	.word	0x08015b18
 801223c:	08015b30 	.word	0x08015b30
 8012240:	08015b48 	.word	0x08015b48

08012244 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 8012244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012246:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8012248:	4b28      	ldr	r3, [pc, #160]	; (80122ec <SecureElementPrintKeys+0xa8>)
 801224a:	2200      	movs	r2, #0
 801224c:	4611      	mov	r1, r2
 801224e:	2002      	movs	r0, #2
 8012250:	f002 f868 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8012254:	2000      	movs	r0, #0
 8012256:	f7ff ff4f 	bl	80120f8 <PrintKey>
    PrintKey(NWK_KEY);
 801225a:	2001      	movs	r0, #1
 801225c:	f7ff ff4c 	bl	80120f8 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8012260:	4b23      	ldr	r3, [pc, #140]	; (80122f0 <SecureElementPrintKeys+0xac>)
 8012262:	2200      	movs	r2, #0
 8012264:	4611      	mov	r1, r2
 8012266:	2002      	movs	r0, #2
 8012268:	f002 f85c 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 801226c:	2003      	movs	r0, #3
 801226e:	f7ff ff43 	bl	80120f8 <PrintKey>
    PrintKey(NWK_S_KEY);
 8012272:	2002      	movs	r0, #2
 8012274:	f7ff ff40 	bl	80120f8 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 8012278:	4b1e      	ldr	r3, [pc, #120]	; (80122f4 <SecureElementPrintKeys+0xb0>)
 801227a:	2200      	movs	r2, #0
 801227c:	4611      	mov	r1, r2
 801227e:	2002      	movs	r0, #2
 8012280:	f002 f850 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012284:	4c1c      	ldr	r4, [pc, #112]	; (80122f8 <SecureElementPrintKeys+0xb4>)
 8012286:	6823      	ldr	r3, [r4, #0]
 8012288:	781a      	ldrb	r2, [r3, #0]
 801228a:	7859      	ldrb	r1, [r3, #1]
 801228c:	7898      	ldrb	r0, [r3, #2]
 801228e:	78dd      	ldrb	r5, [r3, #3]
 8012290:	791e      	ldrb	r6, [r3, #4]
 8012292:	795f      	ldrb	r7, [r3, #5]
 8012294:	f893 c006 	ldrb.w	ip, [r3, #6]
 8012298:	79db      	ldrb	r3, [r3, #7]
 801229a:	9307      	str	r3, [sp, #28]
 801229c:	f8cd c018 	str.w	ip, [sp, #24]
 80122a0:	9705      	str	r7, [sp, #20]
 80122a2:	9604      	str	r6, [sp, #16]
 80122a4:	9503      	str	r5, [sp, #12]
 80122a6:	9002      	str	r0, [sp, #8]
 80122a8:	9101      	str	r1, [sp, #4]
 80122aa:	9200      	str	r2, [sp, #0]
 80122ac:	4b13      	ldr	r3, [pc, #76]	; (80122fc <SecureElementPrintKeys+0xb8>)
 80122ae:	2200      	movs	r2, #0
 80122b0:	4611      	mov	r1, r2
 80122b2:	2002      	movs	r0, #2
 80122b4:	f002 f836 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80122b8:	6823      	ldr	r3, [r4, #0]
 80122ba:	7a1a      	ldrb	r2, [r3, #8]
 80122bc:	7a59      	ldrb	r1, [r3, #9]
 80122be:	7a98      	ldrb	r0, [r3, #10]
 80122c0:	7adc      	ldrb	r4, [r3, #11]
 80122c2:	7b1d      	ldrb	r5, [r3, #12]
 80122c4:	7b5e      	ldrb	r6, [r3, #13]
 80122c6:	7b9f      	ldrb	r7, [r3, #14]
 80122c8:	7bdb      	ldrb	r3, [r3, #15]
 80122ca:	9307      	str	r3, [sp, #28]
 80122cc:	9706      	str	r7, [sp, #24]
 80122ce:	9605      	str	r6, [sp, #20]
 80122d0:	9504      	str	r5, [sp, #16]
 80122d2:	9403      	str	r4, [sp, #12]
 80122d4:	9002      	str	r0, [sp, #8]
 80122d6:	9101      	str	r1, [sp, #4]
 80122d8:	9200      	str	r2, [sp, #0]
 80122da:	4b09      	ldr	r3, [pc, #36]	; (8012300 <SecureElementPrintKeys+0xbc>)
 80122dc:	2200      	movs	r2, #0
 80122de:	4611      	mov	r1, r2
 80122e0:	2002      	movs	r0, #2
 80122e2:	f002 f81f 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 80122e6:	2000      	movs	r0, #0
 80122e8:	b009      	add	sp, #36	; 0x24
 80122ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122ec:	08015bcc 	.word	0x08015bcc
 80122f0:	08015be4 	.word	0x08015be4
 80122f4:	08015bfc 	.word	0x08015bfc
 80122f8:	20003cf8 	.word	0x20003cf8
 80122fc:	08015c14 	.word	0x08015c14
 8012300:	08015c54 	.word	0x08015c54

08012304 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 8012304:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 8012306:	2004      	movs	r0, #4
 8012308:	f7ff fef6 	bl	80120f8 <PrintKey>
    PrintKey(MC_KE_KEY);
 801230c:	207f      	movs	r0, #127	; 0x7f
 801230e:	f7ff fef3 	bl	80120f8 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 8012312:	2002      	movs	r0, #2
 8012314:	f7ff fef0 	bl	80120f8 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 8012318:	2003      	movs	r0, #3
 801231a:	f7ff feed 	bl	80120f8 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 801231e:	2000      	movs	r0, #0
 8012320:	bd08      	pop	{r3, pc}

08012322 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8012322:	2b7e      	cmp	r3, #126	; 0x7e
 8012324:	d80a      	bhi.n	801233c <SecureElementComputeAesCmac+0x1a>
{
 8012326:	b500      	push	{lr}
 8012328:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 801232a:	f8dd c010 	ldr.w	ip, [sp, #16]
 801232e:	f8cd c000 	str.w	ip, [sp]
 8012332:	f7ff fe69 	bl	8012008 <ComputeCmac>
}
 8012336:	b003      	add	sp, #12
 8012338:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801233c:	2003      	movs	r0, #3
}
 801233e:	4770      	bx	lr

08012340 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8012340:	b190      	cbz	r0, 8012368 <SecureElementVerifyAesCmac+0x28>
{
 8012342:	b510      	push	{r4, lr}
 8012344:	b084      	sub	sp, #16
 8012346:	468c      	mov	ip, r1
 8012348:	4614      	mov	r4, r2
 801234a:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 801234c:	2000      	movs	r0, #0
 801234e:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8012350:	aa03      	add	r2, sp, #12
 8012352:	9200      	str	r2, [sp, #0]
 8012354:	4662      	mov	r2, ip
 8012356:	f7ff fe57 	bl	8012008 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 801235a:	b918      	cbnz	r0, 8012364 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 801235c:	9b03      	ldr	r3, [sp, #12]
 801235e:	42a3      	cmp	r3, r4
 8012360:	d000      	beq.n	8012364 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8012362:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8012364:	b004      	add	sp, #16
 8012366:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012368:	2002      	movs	r0, #2
}
 801236a:	4770      	bx	lr

0801236c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 801236c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012370:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 8012372:	b350      	cbz	r0, 80123ca <SecureElementAesEncrypt+0x5e>
 8012374:	460c      	mov	r4, r1
 8012376:	4615      	mov	r5, r2
 8012378:	461e      	mov	r6, r3
 801237a:	4607      	mov	r7, r0
 801237c:	b343      	cbz	r3, 80123d0 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 801237e:	f011 0f0f 	tst.w	r1, #15
 8012382:	d128      	bne.n	80123d6 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8012384:	22f0      	movs	r2, #240	; 0xf0
 8012386:	2100      	movs	r1, #0
 8012388:	a801      	add	r0, sp, #4
 801238a:	f000 f93a 	bl	8012602 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801238e:	4669      	mov	r1, sp
 8012390:	4628      	mov	r0, r5
 8012392:	f7ff fe19 	bl	8011fc8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012396:	4680      	mov	r8, r0
 8012398:	b118      	cbz	r0, 80123a2 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 801239a:	4640      	mov	r0, r8
 801239c:	b03e      	add	sp, #248	; 0xf8
 801239e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 80123a2:	aa01      	add	r2, sp, #4
 80123a4:	2110      	movs	r1, #16
 80123a6:	9800      	ldr	r0, [sp, #0]
 80123a8:	3001      	adds	r0, #1
 80123aa:	f7ff fd61 	bl	8011e70 <lorawan_aes_set_key>
        uint8_t block = 0;
 80123ae:	4645      	mov	r5, r8
        while( size != 0 )
 80123b0:	e008      	b.n	80123c4 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80123b2:	aa01      	add	r2, sp, #4
 80123b4:	1971      	adds	r1, r6, r5
 80123b6:	1978      	adds	r0, r7, r5
 80123b8:	f7ff fddc 	bl	8011f74 <lorawan_aes_encrypt>
            block = block + 16;
 80123bc:	3510      	adds	r5, #16
 80123be:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 80123c0:	3c10      	subs	r4, #16
 80123c2:	b2a4      	uxth	r4, r4
        while( size != 0 )
 80123c4:	2c00      	cmp	r4, #0
 80123c6:	d1f4      	bne.n	80123b2 <SecureElementAesEncrypt+0x46>
 80123c8:	e7e7      	b.n	801239a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 80123ca:	f04f 0802 	mov.w	r8, #2
 80123ce:	e7e4      	b.n	801239a <SecureElementAesEncrypt+0x2e>
 80123d0:	f04f 0802 	mov.w	r8, #2
 80123d4:	e7e1      	b.n	801239a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80123d6:	f04f 0805 	mov.w	r8, #5
 80123da:	e7de      	b.n	801239a <SecureElementAesEncrypt+0x2e>

080123dc <SecureElementSetKey>:
{
 80123dc:	b530      	push	{r4, r5, lr}
 80123de:	b085      	sub	sp, #20
    if( key == NULL )
 80123e0:	2900      	cmp	r1, #0
 80123e2:	d038      	beq.n	8012456 <SecureElementSetKey+0x7a>
 80123e4:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80123e6:	2300      	movs	r3, #0
 80123e8:	2b09      	cmp	r3, #9
 80123ea:	d830      	bhi.n	801244e <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80123ec:	4a1b      	ldr	r2, [pc, #108]	; (801245c <SecureElementSetKey+0x80>)
 80123ee:	6811      	ldr	r1, [r2, #0]
 80123f0:	461c      	mov	r4, r3
 80123f2:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80123f6:	440a      	add	r2, r1
 80123f8:	7c12      	ldrb	r2, [r2, #16]
 80123fa:	4282      	cmp	r2, r0
 80123fc:	d002      	beq.n	8012404 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80123fe:	3301      	adds	r3, #1
 8012400:	b2db      	uxtb	r3, r3
 8012402:	e7f1      	b.n	80123e8 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 8012404:	2880      	cmp	r0, #128	; 0x80
 8012406:	d00a      	beq.n	801241e <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8012408:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801240c:	3310      	adds	r3, #16
 801240e:	440b      	add	r3, r1
 8012410:	2210      	movs	r2, #16
 8012412:	4661      	mov	r1, ip
 8012414:	1c58      	adds	r0, r3, #1
 8012416:	f000 f8dc 	bl	80125d2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 801241a:	2500      	movs	r5, #0
 801241c:	e018      	b.n	8012450 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 801241e:	2300      	movs	r3, #0
 8012420:	9300      	str	r3, [sp, #0]
 8012422:	9301      	str	r3, [sp, #4]
 8012424:	9302      	str	r3, [sp, #8]
 8012426:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8012428:	466b      	mov	r3, sp
 801242a:	227f      	movs	r2, #127	; 0x7f
 801242c:	2110      	movs	r1, #16
 801242e:	4660      	mov	r0, ip
 8012430:	f7ff ff9c 	bl	801236c <SecureElementAesEncrypt>
 8012434:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8012436:	4b09      	ldr	r3, [pc, #36]	; (801245c <SecureElementSetKey+0x80>)
 8012438:	6818      	ldr	r0, [r3, #0]
 801243a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801243e:	3410      	adds	r4, #16
 8012440:	4420      	add	r0, r4
 8012442:	2210      	movs	r2, #16
 8012444:	4669      	mov	r1, sp
 8012446:	3001      	adds	r0, #1
 8012448:	f000 f8c3 	bl	80125d2 <memcpy1>
                return retval;
 801244c:	e000      	b.n	8012450 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801244e:	2503      	movs	r5, #3
}
 8012450:	4628      	mov	r0, r5
 8012452:	b005      	add	sp, #20
 8012454:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012456:	2502      	movs	r5, #2
 8012458:	e7fa      	b.n	8012450 <SecureElementSetKey+0x74>
 801245a:	bf00      	nop
 801245c:	20003cf8 	.word	0x20003cf8

08012460 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8012460:	b1d0      	cbz	r0, 8012498 <SecureElementDeriveAndStoreKey+0x38>
{
 8012462:	b510      	push	{r4, lr}
 8012464:	b084      	sub	sp, #16
 8012466:	4614      	mov	r4, r2
 8012468:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 801246a:	2a7f      	cmp	r2, #127	; 0x7f
 801246c:	d101      	bne.n	8012472 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 801246e:	2904      	cmp	r1, #4
 8012470:	d114      	bne.n	801249c <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8012472:	2300      	movs	r3, #0
 8012474:	9300      	str	r3, [sp, #0]
 8012476:	9301      	str	r3, [sp, #4]
 8012478:	9302      	str	r3, [sp, #8]
 801247a:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 801247c:	466b      	mov	r3, sp
 801247e:	460a      	mov	r2, r1
 8012480:	2110      	movs	r1, #16
 8012482:	4660      	mov	r0, ip
 8012484:	f7ff ff72 	bl	801236c <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012488:	b108      	cbz	r0, 801248e <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 801248a:	b004      	add	sp, #16
 801248c:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 801248e:	4669      	mov	r1, sp
 8012490:	4620      	mov	r0, r4
 8012492:	f7ff ffa3 	bl	80123dc <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012496:	e7f8      	b.n	801248a <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8012498:	2002      	movs	r0, #2
}
 801249a:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801249c:	2003      	movs	r0, #3
 801249e:	e7f4      	b.n	801248a <SecureElementDeriveAndStoreKey+0x2a>

080124a0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 80124a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124a4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80124a8:	9d07      	ldr	r5, [sp, #28]
 80124aa:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80124ac:	b37b      	cbz	r3, 801250e <SecureElementProcessJoinAccept+0x6e>
 80124ae:	4698      	mov	r8, r3
 80124b0:	b37d      	cbz	r5, 8012512 <SecureElementProcessJoinAccept+0x72>
 80124b2:	b386      	cbz	r6, 8012516 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80124b4:	2c21      	cmp	r4, #33	; 0x21
 80124b6:	d830      	bhi.n	801251a <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80124b8:	b2a7      	uxth	r7, r4
 80124ba:	463a      	mov	r2, r7
 80124bc:	4619      	mov	r1, r3
 80124be:	4628      	mov	r0, r5
 80124c0:	f000 f887 	bl	80125d2 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80124c4:	1e79      	subs	r1, r7, #1
 80124c6:	1c6b      	adds	r3, r5, #1
 80124c8:	2201      	movs	r2, #1
 80124ca:	b289      	uxth	r1, r1
 80124cc:	eb08 0002 	add.w	r0, r8, r2
 80124d0:	f7ff ff4c 	bl	801236c <SecureElementAesEncrypt>
 80124d4:	bb20      	cbnz	r0, 8012520 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 80124d6:	7aeb      	ldrb	r3, [r5, #11]
 80124d8:	09db      	lsrs	r3, r3, #7
 80124da:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 80124dc:	442c      	add	r4, r5
 80124de:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 80124e2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80124e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 80124ea:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80124ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 80124f2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80124f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 80124fa:	b99b      	cbnz	r3, 8012524 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80124fc:	1f39      	subs	r1, r7, #4
 80124fe:	2301      	movs	r3, #1
 8012500:	b289      	uxth	r1, r1
 8012502:	4628      	mov	r0, r5
 8012504:	f7ff ff1c 	bl	8012340 <SecureElementVerifyAesCmac>
 8012508:	b140      	cbz	r0, 801251c <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801250a:	2001      	movs	r0, #1
 801250c:	e006      	b.n	801251c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 801250e:	2002      	movs	r0, #2
 8012510:	e004      	b.n	801251c <SecureElementProcessJoinAccept+0x7c>
 8012512:	2002      	movs	r0, #2
 8012514:	e002      	b.n	801251c <SecureElementProcessJoinAccept+0x7c>
 8012516:	2002      	movs	r0, #2
 8012518:	e000      	b.n	801251c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801251a:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 801251c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8012520:	2007      	movs	r0, #7
 8012522:	e7fb      	b.n	801251c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8012524:	2004      	movs	r0, #4
 8012526:	e7f9      	b.n	801251c <SecureElementProcessJoinAccept+0x7c>

08012528 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 8012528:	b140      	cbz	r0, 801253c <SecureElementSetDevEui+0x14>
{
 801252a:	b508      	push	{r3, lr}
 801252c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 801252e:	2208      	movs	r2, #8
 8012530:	4b03      	ldr	r3, [pc, #12]	; (8012540 <SecureElementSetDevEui+0x18>)
 8012532:	6818      	ldr	r0, [r3, #0]
 8012534:	f000 f84d 	bl	80125d2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012538:	2000      	movs	r0, #0
}
 801253a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801253c:	2002      	movs	r0, #2
}
 801253e:	4770      	bx	lr
 8012540:	20003cf8 	.word	0x20003cf8

08012544 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 8012544:	4b01      	ldr	r3, [pc, #4]	; (801254c <SecureElementGetDevEui+0x8>)
 8012546:	6818      	ldr	r0, [r3, #0]
 8012548:	4770      	bx	lr
 801254a:	bf00      	nop
 801254c:	20003cf8 	.word	0x20003cf8

08012550 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8012550:	b148      	cbz	r0, 8012566 <SecureElementSetJoinEui+0x16>
{
 8012552:	b508      	push	{r3, lr}
 8012554:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8012556:	4b05      	ldr	r3, [pc, #20]	; (801256c <SecureElementSetJoinEui+0x1c>)
 8012558:	6818      	ldr	r0, [r3, #0]
 801255a:	2208      	movs	r2, #8
 801255c:	4410      	add	r0, r2
 801255e:	f000 f838 	bl	80125d2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012562:	2000      	movs	r0, #0
}
 8012564:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012566:	2002      	movs	r0, #2
}
 8012568:	4770      	bx	lr
 801256a:	bf00      	nop
 801256c:	20003cf8 	.word	0x20003cf8

08012570 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8012570:	4b01      	ldr	r3, [pc, #4]	; (8012578 <SecureElementGetJoinEui+0x8>)
 8012572:	6818      	ldr	r0, [r3, #0]
}
 8012574:	3008      	adds	r0, #8
 8012576:	4770      	bx	lr
 8012578:	20003cf8 	.word	0x20003cf8

0801257c <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801257c:	4b09      	ldr	r3, [pc, #36]	; (80125a4 <rand1+0x28>)
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	4909      	ldr	r1, [pc, #36]	; (80125a8 <rand1+0x2c>)
 8012582:	f243 0039 	movw	r0, #12345	; 0x3039
 8012586:	fb01 0002 	mla	r0, r1, r2, r0
 801258a:	6018      	str	r0, [r3, #0]
 801258c:	2303      	movs	r3, #3
 801258e:	fba3 2300 	umull	r2, r3, r3, r0
 8012592:	1ac2      	subs	r2, r0, r3
 8012594:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012598:	0f9b      	lsrs	r3, r3, #30
 801259a:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 801259e:	1ac0      	subs	r0, r0, r3
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	20000110 	.word	0x20000110
 80125a8:	41c64e6d 	.word	0x41c64e6d

080125ac <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80125ac:	4b01      	ldr	r3, [pc, #4]	; (80125b4 <srand1+0x8>)
 80125ae:	6018      	str	r0, [r3, #0]
}
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop
 80125b4:	20000110 	.word	0x20000110

080125b8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80125b8:	b538      	push	{r3, r4, r5, lr}
 80125ba:	4605      	mov	r5, r0
 80125bc:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80125be:	f7ff ffdd 	bl	801257c <rand1>
 80125c2:	1b61      	subs	r1, r4, r5
 80125c4:	3101      	adds	r1, #1
 80125c6:	fb90 f3f1 	sdiv	r3, r0, r1
 80125ca:	fb01 0013 	mls	r0, r1, r3, r0
}
 80125ce:	4428      	add	r0, r5
 80125d0:	bd38      	pop	{r3, r4, r5, pc}

080125d2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 80125d2:	e004      	b.n	80125de <memcpy1+0xc>
    {
        *dst++ = *src++;
 80125d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125d8:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 80125dc:	461a      	mov	r2, r3
 80125de:	1e53      	subs	r3, r2, #1
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	2a00      	cmp	r2, #0
 80125e4:	d1f6      	bne.n	80125d4 <memcpy1+0x2>
    }
}
 80125e6:	4770      	bx	lr

080125e8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 80125e8:	1e53      	subs	r3, r2, #1
 80125ea:	4418      	add	r0, r3
    while( size-- )
 80125ec:	e004      	b.n	80125f8 <memcpyr+0x10>
    {
        *dst-- = *src++;
 80125ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125f2:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 80125f6:	461a      	mov	r2, r3
 80125f8:	1e53      	subs	r3, r2, #1
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	2a00      	cmp	r2, #0
 80125fe:	d1f6      	bne.n	80125ee <memcpyr+0x6>
    }
}
 8012600:	4770      	bx	lr

08012602 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8012602:	e002      	b.n	801260a <memset1+0x8>
    {
        *dst++ = value;
 8012604:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8012608:	461a      	mov	r2, r3
 801260a:	1e53      	subs	r3, r2, #1
 801260c:	b29b      	uxth	r3, r3
 801260e:	2a00      	cmp	r2, #0
 8012610:	d1f8      	bne.n	8012604 <memset1+0x2>
    }
}
 8012612:	4770      	bx	lr

08012614 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8012614:	b1f0      	cbz	r0, 8012654 <Crc32+0x40>
{
 8012616:	b510      	push	{r4, lr}
 8012618:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 801261a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 801261e:	f04f 30ff 	mov.w	r0, #4294967295
 8012622:	e00e      	b.n	8012642 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8012624:	f340 0c00 	sbfx	ip, r0, #0, #1
 8012628:	4a0b      	ldr	r2, [pc, #44]	; (8012658 <Crc32+0x44>)
 801262a:	ea0c 0202 	and.w	r2, ip, r2
 801262e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8012632:	3301      	adds	r3, #1
 8012634:	b29b      	uxth	r3, r3
 8012636:	2b07      	cmp	r3, #7
 8012638:	d9f4      	bls.n	8012624 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 801263a:	f10e 0e01 	add.w	lr, lr, #1
 801263e:	fa1f fe8e 	uxth.w	lr, lr
 8012642:	458e      	cmp	lr, r1
 8012644:	d204      	bcs.n	8012650 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8012646:	f814 300e 	ldrb.w	r3, [r4, lr]
 801264a:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 801264c:	2300      	movs	r3, #0
 801264e:	e7f2      	b.n	8012636 <Crc32+0x22>
        }
    }

    return ~crc;
 8012650:	43c0      	mvns	r0, r0
}
 8012652:	bd10      	pop	{r4, pc}
        return 0;
 8012654:	2000      	movs	r0, #0
}
 8012656:	4770      	bx	lr
 8012658:	edb88320 	.word	0xedb88320

0801265c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 801265c:	2001      	movs	r0, #1
 801265e:	4770      	bx	lr

08012660 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8012660:	280a      	cmp	r0, #10
 8012662:	d807      	bhi.n	8012674 <RadioGetLoRaBandwidthInHz+0x14>
 8012664:	e8df f000 	tbb	[pc, r0]
 8012668:	17110b20 	.word	0x17110b20
 801266c:	061e1c1a 	.word	0x061e1c1a
 8012670:	0e08      	.short	0x0e08
 8012672:	14          	.byte	0x14
 8012673:	00          	.byte	0x00
 8012674:	2000      	movs	r0, #0
 8012676:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8012678:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 801267c:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801267e:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8012682:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8012684:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8012688:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801268a:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 801268e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8012690:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8012694:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8012696:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 801269a:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801269c:	4804      	ldr	r0, [pc, #16]	; (80126b0 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 801269e:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80126a0:	4804      	ldr	r0, [pc, #16]	; (80126b4 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 80126a2:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80126a4:	4804      	ldr	r0, [pc, #16]	; (80126b8 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 80126a6:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 80126a8:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	0001e848 	.word	0x0001e848
 80126b4:	0003d090 	.word	0x0003d090
 80126b8:	0007a120 	.word	0x0007a120

080126bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80126bc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80126c0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80126c2:	b953      	cbnz	r3, 80126da <RadioGetGfskTimeOnAirNumerator+0x1e>
 80126c4:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 80126c6:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80126c8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80126ca:	b141      	cbz	r1, 80126de <RadioGetGfskTimeOnAirNumerator+0x22>
 80126cc:	2302      	movs	r3, #2
 80126ce:	f89d 0000 	ldrb.w	r0, [sp]
 80126d2:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 80126d4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80126d8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80126da:	2000      	movs	r0, #0
 80126dc:	e7f3      	b.n	80126c6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80126de:	2300      	movs	r3, #0
 80126e0:	e7f5      	b.n	80126ce <RadioGetGfskTimeOnAirNumerator+0x12>

080126e2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80126e2:	b570      	push	{r4, r5, r6, lr}
 80126e4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80126e8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 80126ec:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80126ee:	f1a1 0c05 	sub.w	ip, r1, #5
 80126f2:	f1bc 0f01 	cmp.w	ip, #1
 80126f6:	d932      	bls.n	801275e <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80126f8:	b918      	cbnz	r0, 8012702 <RadioGetLoRaTimeOnAirNumerator+0x20>
 80126fa:	f1a1 060b 	sub.w	r6, r1, #11
 80126fe:	2e01      	cmp	r6, #1
 8012700:	d935      	bls.n	801276e <RadioGetLoRaTimeOnAirNumerator+0x8c>
 8012702:	2801      	cmp	r0, #1
 8012704:	d02f      	beq.n	8012766 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8012706:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8012708:	f89d e014 	ldrb.w	lr, [sp, #20]
 801270c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8012710:	b38d      	cbz	r5, 8012776 <RadioGetLoRaTimeOnAirNumerator+0x94>
 8012712:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8012716:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8012718:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 801271a:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 801271e:	b36c      	cbz	r4, 801277c <RadioGetLoRaTimeOnAirNumerator+0x9a>
 8012720:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8012724:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8012726:	2906      	cmp	r1, #6
 8012728:	d904      	bls.n	8012734 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 801272a:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 801272e:	b10e      	cbz	r6, 8012734 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8012730:	1e88      	subs	r0, r1, #2
 8012732:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8012734:	f1bc 0f00 	cmp.w	ip, #0
 8012738:	db23      	blt.n	8012782 <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801273a:	4484      	add	ip, r0
 801273c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012740:	fb9c fcf0 	sdiv	ip, ip, r0
 8012744:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8012748:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 801274c:	2906      	cmp	r1, #6
 801274e:	d801      	bhi.n	8012754 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 8012750:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8012754:	0080      	lsls	r0, r0, #2
 8012756:	3001      	adds	r0, #1
 8012758:	3902      	subs	r1, #2
}
 801275a:	4088      	lsls	r0, r1
 801275c:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 801275e:	2b0b      	cmp	r3, #11
 8012760:	d8ca      	bhi.n	80126f8 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8012762:	230c      	movs	r3, #12
 8012764:	e7c8      	b.n	80126f8 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012766:	290c      	cmp	r1, #12
 8012768:	d003      	beq.n	8012772 <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 801276a:	2600      	movs	r6, #0
 801276c:	e7cc      	b.n	8012708 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 801276e:	2601      	movs	r6, #1
 8012770:	e7ca      	b.n	8012708 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8012772:	2601      	movs	r6, #1
 8012774:	e7c8      	b.n	8012708 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8012776:	f04f 0c00 	mov.w	ip, #0
 801277a:	e7cc      	b.n	8012716 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 801277c:	f04f 0c14 	mov.w	ip, #20
 8012780:	e7d0      	b.n	8012724 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8012782:	f04f 0c00 	mov.w	ip, #0
 8012786:	e7d8      	b.n	801273a <RadioGetLoRaTimeOnAirNumerator+0x58>

08012788 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8012788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801278a:	b085      	sub	sp, #20
 801278c:	460e      	mov	r6, r1
 801278e:	4615      	mov	r5, r2
 8012790:	4619      	mov	r1, r3
 8012792:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012796:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801279a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801279e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 80127a2:	b148      	cbz	r0, 80127b8 <RadioTimeOnAir+0x30>
 80127a4:	2801      	cmp	r0, #1
 80127a6:	d012      	beq.n	80127ce <RadioTimeOnAir+0x46>
 80127a8:	2501      	movs	r5, #1
 80127aa:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80127ac:	442c      	add	r4, r5
 80127ae:	1e60      	subs	r0, r4, #1
}
 80127b0:	fbb0 f0f5 	udiv	r0, r0, r5
 80127b4:	b005      	add	sp, #20
 80127b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80127b8:	f8cd c004 	str.w	ip, [sp, #4]
 80127bc:	9700      	str	r7, [sp, #0]
 80127be:	4628      	mov	r0, r5
 80127c0:	f7ff ff7c 	bl	80126bc <RadioGetGfskTimeOnAirNumerator>
 80127c4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80127c8:	fb00 f404 	mul.w	r4, r0, r4
        break;
 80127cc:	e7ee      	b.n	80127ac <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80127ce:	f8cd c008 	str.w	ip, [sp, #8]
 80127d2:	9701      	str	r7, [sp, #4]
 80127d4:	9300      	str	r3, [sp, #0]
 80127d6:	4613      	mov	r3, r2
 80127d8:	460a      	mov	r2, r1
 80127da:	4629      	mov	r1, r5
 80127dc:	4630      	mov	r0, r6
 80127de:	f7ff ff80 	bl	80126e2 <RadioGetLoRaTimeOnAirNumerator>
 80127e2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80127e6:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80127ea:	4b03      	ldr	r3, [pc, #12]	; (80127f8 <RadioTimeOnAir+0x70>)
 80127ec:	5d98      	ldrb	r0, [r3, r6]
 80127ee:	f7ff ff37 	bl	8012660 <RadioGetLoRaBandwidthInHz>
 80127f2:	4605      	mov	r5, r0
        break;
 80127f4:	e7da      	b.n	80127ac <RadioTimeOnAir+0x24>
 80127f6:	bf00      	nop
 80127f8:	08015d00 	.word	0x08015d00

080127fc <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 80127fc:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80127fe:	4b05      	ldr	r3, [pc, #20]	; (8012814 <RadioOnTxTimeoutProcess+0x18>)
 8012800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012804:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8012806:	4b04      	ldr	r3, [pc, #16]	; (8012818 <RadioOnTxTimeoutProcess+0x1c>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	b113      	cbz	r3, 8012812 <RadioOnTxTimeoutProcess+0x16>
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	b103      	cbz	r3, 8012812 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8012810:	4798      	blx	r3
    }
}
 8012812:	bd08      	pop	{r3, pc}
 8012814:	48000400 	.word	0x48000400
 8012818:	20003dfc 	.word	0x20003dfc

0801281c <RadioOnTxTimeoutIrq>:
{
 801281c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 801281e:	f7ff ffed 	bl	80127fc <RadioOnTxTimeoutProcess>
}
 8012822:	bd08      	pop	{r3, pc}

08012824 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8012824:	b508      	push	{r3, lr}
 8012826:	4b05      	ldr	r3, [pc, #20]	; (801283c <RadioOnRxTimeoutProcess+0x18>)
 8012828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801282c:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801282e:	4b04      	ldr	r3, [pc, #16]	; (8012840 <RadioOnRxTimeoutProcess+0x1c>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	b113      	cbz	r3, 801283a <RadioOnRxTimeoutProcess+0x16>
 8012834:	68db      	ldr	r3, [r3, #12]
 8012836:	b103      	cbz	r3, 801283a <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8012838:	4798      	blx	r3
    }
}
 801283a:	bd08      	pop	{r3, pc}
 801283c:	48000400 	.word	0x48000400
 8012840:	20003dfc 	.word	0x20003dfc

08012844 <RadioOnRxTimeoutIrq>:
{
 8012844:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8012846:	f7ff ffed 	bl	8012824 <RadioOnRxTimeoutProcess>
}
 801284a:	bd08      	pop	{r3, pc}

0801284c <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801284c:	f04f 30ff 	mov.w	r0, #4294967295
 8012850:	4770      	bx	lr

08012852 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8012852:	f04f 30ff 	mov.w	r0, #4294967295
 8012856:	4770      	bx	lr

08012858 <RadioTxCw>:
{
 8012858:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801285a:	f001 fbab 	bl	8013fb4 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801285e:	2101      	movs	r1, #1
 8012860:	f001 fb94 	bl	8013f8c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8012864:	f000 feac 	bl	80135c0 <SUBGRF_SetTxContinuousWave>
}
 8012868:	bd08      	pop	{r3, pc}
	...

0801286c <RadioSetRxDutyCycle>:
{
 801286c:	b570      	push	{r4, r5, r6, lr}
 801286e:	4604      	mov	r4, r0
 8012870:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8012872:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8012876:	4e09      	ldr	r6, [pc, #36]	; (801289c <RadioSetRxDutyCycle+0x30>)
 8012878:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801287a:	2300      	movs	r3, #0
 801287c:	461a      	mov	r2, r3
 801287e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012882:	4608      	mov	r0, r1
 8012884:	f000 ff47 	bl	8013716 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8012888:	2100      	movs	r1, #0
 801288a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801288e:	f001 fb7d 	bl	8013f8c <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8012892:	4629      	mov	r1, r5
 8012894:	4620      	mov	r0, r4
 8012896:	f000 fe63 	bl	8013560 <SUBGRF_SetRxDutyCycle>
}
 801289a:	bd70      	pop	{r4, r5, r6, pc}
 801289c:	20003e18 	.word	0x20003e18

080128a0 <RadioRxBoosted>:
{
 80128a0:	b538      	push	{r3, r4, r5, lr}
 80128a2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 80128a4:	f001 fc57 	bl	8014156 <RFW_Is_Init>
 80128a8:	2801      	cmp	r0, #1
 80128aa:	d019      	beq.n	80128e0 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80128ac:	2300      	movs	r3, #0
 80128ae:	461a      	mov	r2, r3
 80128b0:	f240 2162 	movw	r1, #610	; 0x262
 80128b4:	4608      	mov	r0, r1
 80128b6:	f000 ff2e 	bl	8013716 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80128ba:	b9a4      	cbnz	r4, 80128e6 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80128bc:	4c11      	ldr	r4, [pc, #68]	; (8012904 <RadioRxBoosted+0x64>)
 80128be:	2100      	movs	r1, #0
 80128c0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80128c2:	4b11      	ldr	r3, [pc, #68]	; (8012908 <RadioRxBoosted+0x68>)
 80128c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80128c8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80128ca:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80128ce:	f001 fb5d 	bl	8013f8c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80128d2:	7863      	ldrb	r3, [r4, #1]
 80128d4:	b183      	cbz	r3, 80128f8 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80128d6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80128da:	f000 ffef 	bl	80138bc <SUBGRF_SetRxBoosted>
}
 80128de:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 80128e0:	f001 fc41 	bl	8014166 <RFW_ReceiveInit>
 80128e4:	e7e9      	b.n	80128ba <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80128e6:	4d09      	ldr	r5, [pc, #36]	; (801290c <RadioRxBoosted+0x6c>)
 80128e8:	4621      	mov	r1, r4
 80128ea:	4628      	mov	r0, r5
 80128ec:	f002 f832 	bl	8014954 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80128f0:	4628      	mov	r0, r5
 80128f2:	f001 ffe9 	bl	80148c8 <UTIL_TIMER_Start>
 80128f6:	e7e1      	b.n	80128bc <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80128f8:	4b02      	ldr	r3, [pc, #8]	; (8012904 <RadioRxBoosted+0x64>)
 80128fa:	6898      	ldr	r0, [r3, #8]
 80128fc:	0180      	lsls	r0, r0, #6
 80128fe:	f000 ffdd 	bl	80138bc <SUBGRF_SetRxBoosted>
}
 8012902:	e7ec      	b.n	80128de <RadioRxBoosted+0x3e>
 8012904:	20003e18 	.word	0x20003e18
 8012908:	48000400 	.word	0x48000400
 801290c:	20003e00 	.word	0x20003e00

08012910 <RadioStandby>:
{
 8012910:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8012912:	2000      	movs	r0, #0
 8012914:	f000 fdd6 	bl	80134c4 <SUBGRF_SetStandby>
}
 8012918:	bd08      	pop	{r3, pc}

0801291a <RadioWrite>:
{
 801291a:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 801291c:	f000 ffbe 	bl	801389c <SUBGRF_WriteRegister>
}
 8012920:	bd08      	pop	{r3, pc}
	...

08012924 <RadioTxPrbs>:
{
 8012924:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8012926:	2101      	movs	r1, #1
 8012928:	4b07      	ldr	r3, [pc, #28]	; (8012948 <RadioTxPrbs+0x24>)
 801292a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801292e:	f001 fb2d 	bl	8013f8c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8012932:	212d      	movs	r1, #45	; 0x2d
 8012934:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8012938:	f7ff ffef 	bl	801291a <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 801293c:	f000 fe47 	bl	80135ce <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8012940:	4802      	ldr	r0, [pc, #8]	; (801294c <RadioTxPrbs+0x28>)
 8012942:	f000 fdd9 	bl	80134f8 <SUBGRF_SetTx>
}
 8012946:	bd08      	pop	{r3, pc}
 8012948:	20003e18 	.word	0x20003e18
 801294c:	000fffff 	.word	0x000fffff

08012950 <RadioRead>:
{
 8012950:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8012952:	f001 f895 	bl	8013a80 <SUBGRF_ReadRegister>
}
 8012956:	bd08      	pop	{r3, pc}

08012958 <RadioGetStatus>:
{
 8012958:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 801295a:	f000 fdad 	bl	80134b8 <SUBGRF_GetOperatingMode>
 801295e:	2805      	cmp	r0, #5
 8012960:	d007      	beq.n	8012972 <RadioGetStatus+0x1a>
 8012962:	2807      	cmp	r0, #7
 8012964:	d007      	beq.n	8012976 <RadioGetStatus+0x1e>
 8012966:	2804      	cmp	r0, #4
 8012968:	d001      	beq.n	801296e <RadioGetStatus+0x16>
            return RF_IDLE;
 801296a:	2000      	movs	r0, #0
}
 801296c:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 801296e:	2002      	movs	r0, #2
 8012970:	e7fc      	b.n	801296c <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8012972:	2001      	movs	r0, #1
 8012974:	e7fa      	b.n	801296c <RadioGetStatus+0x14>
            return RF_CAD;
 8012976:	2003      	movs	r0, #3
 8012978:	e7f8      	b.n	801296c <RadioGetStatus+0x14>
	...

0801297c <RadioIrqProcess>:
{
 801297c:	b530      	push	{r4, r5, lr}
 801297e:	b083      	sub	sp, #12
    uint8_t size = 0;
 8012980:	2300      	movs	r3, #0
 8012982:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8012986:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8012988:	4ba5      	ldr	r3, [pc, #660]	; (8012c20 <RadioIrqProcess+0x2a4>)
 801298a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801298e:	2b20      	cmp	r3, #32
 8012990:	d829      	bhi.n	80129e6 <RadioIrqProcess+0x6a>
 8012992:	b21a      	sxth	r2, r3
 8012994:	2a00      	cmp	r2, #0
 8012996:	f000 8140 	beq.w	8012c1a <RadioIrqProcess+0x29e>
 801299a:	3b01      	subs	r3, #1
 801299c:	2b1f      	cmp	r3, #31
 801299e:	f200 813c 	bhi.w	8012c1a <RadioIrqProcess+0x29e>
 80129a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80129a6:	0063      	.short	0x0063
 80129a8:	013a007f 	.word	0x013a007f
 80129ac:	013a00f7 	.word	0x013a00f7
 80129b0:	013a013a 	.word	0x013a013a
 80129b4:	013a0127 	.word	0x013a0127
 80129b8:	013a013a 	.word	0x013a013a
 80129bc:	013a013a 	.word	0x013a013a
 80129c0:	013a013a 	.word	0x013a013a
 80129c4:	013a0134 	.word	0x013a0134
 80129c8:	013a013a 	.word	0x013a013a
 80129cc:	013a013a 	.word	0x013a013a
 80129d0:	013a013a 	.word	0x013a013a
 80129d4:	013a013a 	.word	0x013a013a
 80129d8:	013a013a 	.word	0x013a013a
 80129dc:	013a013a 	.word	0x013a013a
 80129e0:	013a013a 	.word	0x013a013a
 80129e4:	0155      	.short	0x0155
 80129e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80129ea:	f000 80b3 	beq.w	8012b54 <RadioIrqProcess+0x1d8>
 80129ee:	d928      	bls.n	8012a42 <RadioIrqProcess+0xc6>
 80129f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129f4:	f040 8111 	bne.w	8012c1a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80129f8:	4b8a      	ldr	r3, [pc, #552]	; (8012c24 <RadioIrqProcess+0x2a8>)
 80129fa:	2201      	movs	r2, #1
 80129fc:	2100      	movs	r1, #0
 80129fe:	2002      	movs	r0, #2
 8012a00:	f001 fc90 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8012a04:	f000 fd58 	bl	80134b8 <SUBGRF_GetOperatingMode>
 8012a08:	2804      	cmp	r0, #4
 8012a0a:	f000 80b0 	beq.w	8012b6e <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8012a0e:	f000 fd53 	bl	80134b8 <SUBGRF_GetOperatingMode>
 8012a12:	2805      	cmp	r0, #5
 8012a14:	f040 8101 	bne.w	8012c1a <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8012a18:	4b83      	ldr	r3, [pc, #524]	; (8012c28 <RadioIrqProcess+0x2ac>)
 8012a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012a1e:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8012a20:	4882      	ldr	r0, [pc, #520]	; (8012c2c <RadioIrqProcess+0x2b0>)
 8012a22:	f001 fef7 	bl	8014814 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8012a26:	2000      	movs	r0, #0
 8012a28:	f000 fd4c 	bl	80134c4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8012a2c:	4b80      	ldr	r3, [pc, #512]	; (8012c30 <RadioIrqProcess+0x2b4>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f000 80f2 	beq.w	8012c1a <RadioIrqProcess+0x29e>
 8012a36:	68db      	ldr	r3, [r3, #12]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	f000 80ee 	beq.w	8012c1a <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8012a3e:	4798      	blx	r3
 8012a40:	e0eb      	b.n	8012c1a <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8012a42:	2b40      	cmp	r3, #64	; 0x40
 8012a44:	f000 811d 	beq.w	8012c82 <RadioIrqProcess+0x306>
 8012a48:	2b80      	cmp	r3, #128	; 0x80
 8012a4a:	f040 80e6 	bne.w	8012c1a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8012a4e:	2000      	movs	r0, #0
 8012a50:	f000 fd38 	bl	80134c4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8012a54:	4b76      	ldr	r3, [pc, #472]	; (8012c30 <RadioIrqProcess+0x2b4>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f000 80de 	beq.w	8012c1a <RadioIrqProcess+0x29e>
 8012a5e:	699b      	ldr	r3, [r3, #24]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	f000 80da 	beq.w	8012c1a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8012a66:	2000      	movs	r0, #0
 8012a68:	4798      	blx	r3
 8012a6a:	e0d6      	b.n	8012c1a <RadioIrqProcess+0x29e>
 8012a6c:	4b6e      	ldr	r3, [pc, #440]	; (8012c28 <RadioIrqProcess+0x2ac>)
 8012a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012a72:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8012a74:	486f      	ldr	r0, [pc, #444]	; (8012c34 <RadioIrqProcess+0x2b8>)
 8012a76:	f001 fecd 	bl	8014814 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8012a7a:	2000      	movs	r0, #0
 8012a7c:	f000 fd22 	bl	80134c4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8012a80:	f001 fb6b 	bl	801415a <RFW_Is_LongPacketModeEnabled>
 8012a84:	2801      	cmp	r0, #1
 8012a86:	d00a      	beq.n	8012a9e <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8012a88:	4b69      	ldr	r3, [pc, #420]	; (8012c30 <RadioIrqProcess+0x2b4>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	f000 80c4 	beq.w	8012c1a <RadioIrqProcess+0x29e>
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	f000 80c0 	beq.w	8012c1a <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8012a9a:	4798      	blx	r3
 8012a9c:	e0bd      	b.n	8012c1a <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8012a9e:	f001 fb65 	bl	801416c <RFW_DeInit_TxLongPacket>
 8012aa2:	e7f1      	b.n	8012a88 <RadioIrqProcess+0x10c>
 8012aa4:	4b60      	ldr	r3, [pc, #384]	; (8012c28 <RadioIrqProcess+0x2ac>)
 8012aa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012aaa:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8012aac:	485f      	ldr	r0, [pc, #380]	; (8012c2c <RadioIrqProcess+0x2b0>)
 8012aae:	f001 feb1 	bl	8014814 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8012ab2:	4b5b      	ldr	r3, [pc, #364]	; (8012c20 <RadioIrqProcess+0x2a4>)
 8012ab4:	785b      	ldrb	r3, [r3, #1]
 8012ab6:	b303      	cbz	r3, 8012afa <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8012ab8:	22ff      	movs	r2, #255	; 0xff
 8012aba:	f10d 0107 	add.w	r1, sp, #7
 8012abe:	485e      	ldr	r0, [pc, #376]	; (8012c38 <RadioIrqProcess+0x2bc>)
 8012ac0:	f001 fa4a 	bl	8013f58 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8012ac4:	485d      	ldr	r0, [pc, #372]	; (8012c3c <RadioIrqProcess+0x2c0>)
 8012ac6:	f000 fead 	bl	8013824 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8012aca:	4b59      	ldr	r3, [pc, #356]	; (8012c30 <RadioIrqProcess+0x2b4>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f000 80a3 	beq.w	8012c1a <RadioIrqProcess+0x29e>
 8012ad4:	689c      	ldr	r4, [r3, #8]
 8012ad6:	2c00      	cmp	r4, #0
 8012ad8:	f000 809f 	beq.w	8012c1a <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8012adc:	4b50      	ldr	r3, [pc, #320]	; (8012c20 <RadioIrqProcess+0x2a4>)
 8012ade:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d11d      	bne.n	8012b22 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8012ae6:	4a4e      	ldr	r2, [pc, #312]	; (8012c20 <RadioIrqProcess+0x2a4>)
 8012ae8:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8012aec:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8012af0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012af4:	4850      	ldr	r0, [pc, #320]	; (8012c38 <RadioIrqProcess+0x2bc>)
 8012af6:	47a0      	blx	r4
                break;
 8012af8:	e08f      	b.n	8012c1a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8012afa:	2000      	movs	r0, #0
 8012afc:	f000 fce2 	bl	80134c4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8012b00:	2100      	movs	r1, #0
 8012b02:	f640 1002 	movw	r0, #2306	; 0x902
 8012b06:	f000 fec9 	bl	801389c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8012b0a:	f640 1044 	movw	r0, #2372	; 0x944
 8012b0e:	f000 ffb7 	bl	8013a80 <SUBGRF_ReadRegister>
 8012b12:	f040 0102 	orr.w	r1, r0, #2
 8012b16:	b2c9      	uxtb	r1, r1
 8012b18:	f640 1044 	movw	r0, #2372	; 0x944
 8012b1c:	f000 febe 	bl	801389c <SUBGRF_WriteRegister>
 8012b20:	e7ca      	b.n	8012ab8 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8012b22:	4c3f      	ldr	r4, [pc, #252]	; (8012c20 <RadioIrqProcess+0x2a4>)
 8012b24:	4669      	mov	r1, sp
 8012b26:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012b28:	f001 faca 	bl	80140c0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8012b2c:	4b40      	ldr	r3, [pc, #256]	; (8012c30 <RadioIrqProcess+0x2b4>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	689d      	ldr	r5, [r3, #8]
 8012b32:	9b00      	ldr	r3, [sp, #0]
 8012b34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8012b38:	4a41      	ldr	r2, [pc, #260]	; (8012c40 <RadioIrqProcess+0x2c4>)
 8012b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8012b3e:	17db      	asrs	r3, r3, #31
 8012b40:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8012b44:	b25b      	sxtb	r3, r3
 8012b46:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8012b4a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012b4e:	483a      	ldr	r0, [pc, #232]	; (8012c38 <RadioIrqProcess+0x2bc>)
 8012b50:	47a8      	blx	r5
                break;
 8012b52:	e062      	b.n	8012c1a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8012b54:	2000      	movs	r0, #0
 8012b56:	f000 fcb5 	bl	80134c4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8012b5a:	4b35      	ldr	r3, [pc, #212]	; (8012c30 <RadioIrqProcess+0x2b4>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d05b      	beq.n	8012c1a <RadioIrqProcess+0x29e>
 8012b62:	699b      	ldr	r3, [r3, #24]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d058      	beq.n	8012c1a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8012b68:	2001      	movs	r0, #1
 8012b6a:	4798      	blx	r3
 8012b6c:	e055      	b.n	8012c1a <RadioIrqProcess+0x29e>
 8012b6e:	4b2e      	ldr	r3, [pc, #184]	; (8012c28 <RadioIrqProcess+0x2ac>)
 8012b70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012b74:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8012b76:	482f      	ldr	r0, [pc, #188]	; (8012c34 <RadioIrqProcess+0x2b8>)
 8012b78:	f001 fe4c 	bl	8014814 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	f000 fca1 	bl	80134c4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8012b82:	4b2b      	ldr	r3, [pc, #172]	; (8012c30 <RadioIrqProcess+0x2b4>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d047      	beq.n	8012c1a <RadioIrqProcess+0x29e>
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d044      	beq.n	8012c1a <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8012b90:	4798      	blx	r3
 8012b92:	e042      	b.n	8012c1a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8012b94:	4b2b      	ldr	r3, [pc, #172]	; (8012c44 <RadioIrqProcess+0x2c8>)
 8012b96:	2201      	movs	r2, #1
 8012b98:	2100      	movs	r1, #0
 8012b9a:	2002      	movs	r0, #2
 8012b9c:	f001 fbc2 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8012ba0:	4b1f      	ldr	r3, [pc, #124]	; (8012c20 <RadioIrqProcess+0x2a4>)
 8012ba2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012ba4:	b3c9      	cbz	r1, 8012c1a <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8012ba6:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8012baa:	f640 1003 	movw	r0, #2307	; 0x903
 8012bae:	f7ff feb4 	bl	801291a <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8012bb2:	4c1b      	ldr	r4, [pc, #108]	; (8012c20 <RadioIrqProcess+0x2a4>)
 8012bb4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8012bb8:	f640 1004 	movw	r0, #2308	; 0x904
 8012bbc:	f7ff fead 	bl	801291a <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8012bc0:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8012bc4:	f640 1005 	movw	r0, #2309	; 0x905
 8012bc8:	f7ff fea7 	bl	801291a <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8012bcc:	f640 1002 	movw	r0, #2306	; 0x902
 8012bd0:	f7ff febe 	bl	8012950 <RadioRead>
 8012bd4:	f040 0101 	orr.w	r1, r0, #1
 8012bd8:	b2c9      	uxtb	r1, r1
 8012bda:	f640 1002 	movw	r0, #2306	; 0x902
 8012bde:	f7ff fe9c 	bl	801291a <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8012be2:	2200      	movs	r2, #0
 8012be4:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8012be6:	4613      	mov	r3, r2
 8012be8:	f240 2162 	movw	r1, #610	; 0x262
 8012bec:	4608      	mov	r0, r1
 8012bee:	f000 fd92 	bl	8013716 <SUBGRF_SetDioIrqParams>
 8012bf2:	e012      	b.n	8012c1a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8012bf4:	4b14      	ldr	r3, [pc, #80]	; (8012c48 <RadioIrqProcess+0x2cc>)
 8012bf6:	2201      	movs	r2, #1
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	2002      	movs	r0, #2
 8012bfc:	f001 fb92 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8012c00:	f001 faa9 	bl	8014156 <RFW_Is_Init>
 8012c04:	2801      	cmp	r0, #1
 8012c06:	d108      	bne.n	8012c1a <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8012c08:	f001 fab1 	bl	801416e <RFW_ReceivePayload>
 8012c0c:	e005      	b.n	8012c1a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8012c0e:	4b0f      	ldr	r3, [pc, #60]	; (8012c4c <RadioIrqProcess+0x2d0>)
 8012c10:	2201      	movs	r2, #1
 8012c12:	2100      	movs	r1, #0
 8012c14:	2002      	movs	r0, #2
 8012c16:	f001 fb85 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
}
 8012c1a:	b003      	add	sp, #12
 8012c1c:	bd30      	pop	{r4, r5, pc}
 8012c1e:	bf00      	nop
 8012c20:	20003e18 	.word	0x20003e18
 8012c24:	08015c94 	.word	0x08015c94
 8012c28:	48000400 	.word	0x48000400
 8012c2c:	20003e00 	.word	0x20003e00
 8012c30:	20003dfc 	.word	0x20003dfc
 8012c34:	20003e74 	.word	0x20003e74
 8012c38:	20003cfc 	.word	0x20003cfc
 8012c3c:	20003e3c 	.word	0x20003e3c
 8012c40:	10624dd3 	.word	0x10624dd3
 8012c44:	08015ca8 	.word	0x08015ca8
 8012c48:	08015cb4 	.word	0x08015cb4
 8012c4c:	08015cc0 	.word	0x08015cc0
        TimerStop( &RxTimeoutTimer );
 8012c50:	4817      	ldr	r0, [pc, #92]	; (8012cb0 <RadioIrqProcess+0x334>)
 8012c52:	f001 fddf 	bl	8014814 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8012c56:	4b17      	ldr	r3, [pc, #92]	; (8012cb4 <RadioIrqProcess+0x338>)
 8012c58:	785b      	ldrb	r3, [r3, #1]
 8012c5a:	b173      	cbz	r3, 8012c7a <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8012c5c:	4b16      	ldr	r3, [pc, #88]	; (8012cb8 <RadioIrqProcess+0x33c>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d0da      	beq.n	8012c1a <RadioIrqProcess+0x29e>
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d0d7      	beq.n	8012c1a <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8012c6a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8012c6c:	4b13      	ldr	r3, [pc, #76]	; (8012cbc <RadioIrqProcess+0x340>)
 8012c6e:	2201      	movs	r2, #1
 8012c70:	2100      	movs	r1, #0
 8012c72:	2002      	movs	r0, #2
 8012c74:	f001 fb56 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
 8012c78:	e7cf      	b.n	8012c1a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8012c7a:	2000      	movs	r0, #0
 8012c7c:	f000 fc22 	bl	80134c4 <SUBGRF_SetStandby>
 8012c80:	e7ec      	b.n	8012c5c <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8012c82:	4b0f      	ldr	r3, [pc, #60]	; (8012cc0 <RadioIrqProcess+0x344>)
 8012c84:	2201      	movs	r2, #1
 8012c86:	2100      	movs	r1, #0
 8012c88:	2002      	movs	r0, #2
 8012c8a:	f001 fb4b 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8012c8e:	4b09      	ldr	r3, [pc, #36]	; (8012cb4 <RadioIrqProcess+0x338>)
 8012c90:	785b      	ldrb	r3, [r3, #1]
 8012c92:	b143      	cbz	r3, 8012ca6 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8012c94:	4b08      	ldr	r3, [pc, #32]	; (8012cb8 <RadioIrqProcess+0x33c>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d0be      	beq.n	8012c1a <RadioIrqProcess+0x29e>
 8012c9c:	691b      	ldr	r3, [r3, #16]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d0bb      	beq.n	8012c1a <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8012ca2:	4798      	blx	r3
}
 8012ca4:	e7b9      	b.n	8012c1a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8012ca6:	2000      	movs	r0, #0
 8012ca8:	f000 fc0c 	bl	80134c4 <SUBGRF_SetStandby>
 8012cac:	e7f2      	b.n	8012c94 <RadioIrqProcess+0x318>
 8012cae:	bf00      	nop
 8012cb0:	20003e00 	.word	0x20003e00
 8012cb4:	20003e18 	.word	0x20003e18
 8012cb8:	20003dfc 	.word	0x20003dfc
 8012cbc:	08015ccc 	.word	0x08015ccc
 8012cc0:	08015cd8 	.word	0x08015cd8

08012cc4 <RadioOnDioIrq>:
{
 8012cc4:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8012cc6:	4b03      	ldr	r3, [pc, #12]	; (8012cd4 <RadioOnDioIrq+0x10>)
 8012cc8:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8012ccc:	f7ff fe56 	bl	801297c <RadioIrqProcess>
}
 8012cd0:	bd08      	pop	{r3, pc}
 8012cd2:	bf00      	nop
 8012cd4:	20003e18 	.word	0x20003e18

08012cd8 <RadioGetWakeupTime>:
{
 8012cd8:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8012cda:	f001 f982 	bl	8013fe2 <SUBGRF_GetRadioWakeUpTime>
}
 8012cde:	3003      	adds	r0, #3
 8012ce0:	bd08      	pop	{r3, pc}
	...

08012ce4 <RadioSetMaxPayloadLength>:
{
 8012ce4:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8012ce6:	2801      	cmp	r0, #1
 8012ce8:	d004      	beq.n	8012cf4 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8012cea:	4b0a      	ldr	r3, [pc, #40]	; (8012d14 <RadioSetMaxPayloadLength+0x30>)
 8012cec:	7d5b      	ldrb	r3, [r3, #21]
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d008      	beq.n	8012d04 <RadioSetMaxPayloadLength+0x20>
}
 8012cf2:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8012cf4:	4b08      	ldr	r3, [pc, #32]	; (8012d18 <RadioSetMaxPayloadLength+0x34>)
 8012cf6:	7019      	strb	r1, [r3, #0]
 8012cf8:	4806      	ldr	r0, [pc, #24]	; (8012d14 <RadioSetMaxPayloadLength+0x30>)
 8012cfa:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012cfc:	300e      	adds	r0, #14
 8012cfe:	f001 f843 	bl	8013d88 <SUBGRF_SetPacketParams>
 8012d02:	e7f6      	b.n	8012cf2 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8012d04:	4b04      	ldr	r3, [pc, #16]	; (8012d18 <RadioSetMaxPayloadLength+0x34>)
 8012d06:	7019      	strb	r1, [r3, #0]
 8012d08:	4802      	ldr	r0, [pc, #8]	; (8012d14 <RadioSetMaxPayloadLength+0x30>)
 8012d0a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012d0c:	300e      	adds	r0, #14
 8012d0e:	f001 f83b 	bl	8013d88 <SUBGRF_SetPacketParams>
}
 8012d12:	e7ee      	b.n	8012cf2 <RadioSetMaxPayloadLength+0xe>
 8012d14:	20003e18 	.word	0x20003e18
 8012d18:	20000114 	.word	0x20000114

08012d1c <RadioReadRegisters>:
{
 8012d1c:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8012d1e:	f001 f8a5 	bl	8013e6c <SUBGRF_ReadRegisters>
}
 8012d22:	bd08      	pop	{r3, pc}

08012d24 <RadioWriteRegisters>:
{
 8012d24:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8012d26:	f000 ffed 	bl	8013d04 <SUBGRF_WriteRegisters>
}
 8012d2a:	bd08      	pop	{r3, pc}

08012d2c <RadioRssi>:
{
 8012d2c:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8012d2e:	f000 fd6b 	bl	8013808 <SUBGRF_GetRssiInst>
}
 8012d32:	b200      	sxth	r0, r0
 8012d34:	bd08      	pop	{r3, pc}
	...

08012d38 <RadioSetTxContinuousWave>:
{
 8012d38:	b538      	push	{r3, r4, r5, lr}
 8012d3a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8012d3c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8012d40:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8012d44:	f000 fd20 	bl	8013788 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8012d48:	4628      	mov	r0, r5
 8012d4a:	f001 f933 	bl	8013fb4 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8012d4e:	2101      	movs	r1, #1
 8012d50:	f001 f91c 	bl	8013f8c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8012d54:	f000 fc34 	bl	80135c0 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8012d58:	4d04      	ldr	r5, [pc, #16]	; (8012d6c <RadioSetTxContinuousWave+0x34>)
 8012d5a:	4621      	mov	r1, r4
 8012d5c:	4628      	mov	r0, r5
 8012d5e:	f001 fdf9 	bl	8014954 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8012d62:	4628      	mov	r0, r5
 8012d64:	f001 fdb0 	bl	80148c8 <UTIL_TIMER_Start>
}
 8012d68:	bd38      	pop	{r3, r4, r5, pc}
 8012d6a:	bf00      	nop
 8012d6c:	20003e74 	.word	0x20003e74

08012d70 <RadioSetChannel>:
{
 8012d70:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8012d72:	f000 fd09 	bl	8013788 <SUBGRF_SetRfFrequency>
}
 8012d76:	bd08      	pop	{r3, pc}

08012d78 <RadioStartCad>:
{
 8012d78:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8012d7a:	2100      	movs	r1, #0
 8012d7c:	4b07      	ldr	r3, [pc, #28]	; (8012d9c <RadioStartCad+0x24>)
 8012d7e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8012d82:	f001 f903 	bl	8013f8c <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8012d86:	2300      	movs	r3, #0
 8012d88:	461a      	mov	r2, r3
 8012d8a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012d8e:	4608      	mov	r0, r1
 8012d90:	f000 fcc1 	bl	8013716 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8012d94:	f000 fc08 	bl	80135a8 <SUBGRF_SetCad>
}
 8012d98:	bd08      	pop	{r3, pc}
 8012d9a:	bf00      	nop
 8012d9c:	20003e18 	.word	0x20003e18

08012da0 <RadioRx>:
{
 8012da0:	b538      	push	{r3, r4, r5, lr}
 8012da2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8012da4:	f001 f9d7 	bl	8014156 <RFW_Is_Init>
 8012da8:	2801      	cmp	r0, #1
 8012daa:	d019      	beq.n	8012de0 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8012dac:	2300      	movs	r3, #0
 8012dae:	461a      	mov	r2, r3
 8012db0:	f240 2162 	movw	r1, #610	; 0x262
 8012db4:	4608      	mov	r0, r1
 8012db6:	f000 fcae 	bl	8013716 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8012dba:	b9a4      	cbnz	r4, 8012de6 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8012dbc:	4c11      	ldr	r4, [pc, #68]	; (8012e04 <RadioRx+0x64>)
 8012dbe:	2100      	movs	r1, #0
 8012dc0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8012dc2:	4b11      	ldr	r3, [pc, #68]	; (8012e08 <RadioRx+0x68>)
 8012dc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012dc8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8012dca:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8012dce:	f001 f8dd 	bl	8013f8c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8012dd2:	7863      	ldrb	r3, [r4, #1]
 8012dd4:	b183      	cbz	r3, 8012df8 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8012dd6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012dda:	f000 fba7 	bl	801352c <SUBGRF_SetRx>
}
 8012dde:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8012de0:	f001 f9c1 	bl	8014166 <RFW_ReceiveInit>
 8012de4:	e7e9      	b.n	8012dba <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8012de6:	4d09      	ldr	r5, [pc, #36]	; (8012e0c <RadioRx+0x6c>)
 8012de8:	4621      	mov	r1, r4
 8012dea:	4628      	mov	r0, r5
 8012dec:	f001 fdb2 	bl	8014954 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8012df0:	4628      	mov	r0, r5
 8012df2:	f001 fd69 	bl	80148c8 <UTIL_TIMER_Start>
 8012df6:	e7e1      	b.n	8012dbc <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8012df8:	4b02      	ldr	r3, [pc, #8]	; (8012e04 <RadioRx+0x64>)
 8012dfa:	6898      	ldr	r0, [r3, #8]
 8012dfc:	0180      	lsls	r0, r0, #6
 8012dfe:	f000 fb95 	bl	801352c <SUBGRF_SetRx>
}
 8012e02:	e7ec      	b.n	8012dde <RadioRx+0x3e>
 8012e04:	20003e18 	.word	0x20003e18
 8012e08:	48000400 	.word	0x48000400
 8012e0c:	20003e00 	.word	0x20003e00

08012e10 <RadioSleep>:
{
 8012e10:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8012e12:	f04f 0004 	mov.w	r0, #4
 8012e16:	f000 fe8d 	bl	8013b34 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8012e1a:	2002      	movs	r0, #2
 8012e1c:	f7ee ff10 	bl	8001c40 <HAL_Delay>
}
 8012e20:	bd08      	pop	{r3, pc}
	...

08012e24 <RadioSend>:
{
 8012e24:	b570      	push	{r4, r5, r6, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	4605      	mov	r5, r0
 8012e2a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	461a      	mov	r2, r3
 8012e30:	f240 2101 	movw	r1, #513	; 0x201
 8012e34:	4608      	mov	r0, r1
 8012e36:	f000 fc6e 	bl	8013716 <SUBGRF_SetDioIrqParams>
 8012e3a:	4b3e      	ldr	r3, [pc, #248]	; (8012f34 <RadioSend+0x110>)
 8012e3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012e40:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8012e42:	4e3d      	ldr	r6, [pc, #244]	; (8012f38 <RadioSend+0x114>)
 8012e44:	2101      	movs	r1, #1
 8012e46:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8012e4a:	f001 f89f 	bl	8013f8c <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8012e4e:	7833      	ldrb	r3, [r6, #0]
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	d103      	bne.n	8012e5c <RadioSend+0x38>
 8012e54:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8012e58:	2b06      	cmp	r3, #6
 8012e5a:	d012      	beq.n	8012e82 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8012e5c:	f640 0089 	movw	r0, #2185	; 0x889
 8012e60:	f000 fe0e 	bl	8013a80 <SUBGRF_ReadRegister>
 8012e64:	f040 0104 	orr.w	r1, r0, #4
 8012e68:	b2c9      	uxtb	r1, r1
 8012e6a:	f640 0089 	movw	r0, #2185	; 0x889
 8012e6e:	f000 fd15 	bl	801389c <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 8012e72:	4b31      	ldr	r3, [pc, #196]	; (8012f38 <RadioSend+0x114>)
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	2b03      	cmp	r3, #3
 8012e78:	d818      	bhi.n	8012eac <RadioSend+0x88>
 8012e7a:	e8df f003 	tbb	[pc, r3]
 8012e7e:	0d22      	.short	0x0d22
 8012e80:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8012e82:	f640 0089 	movw	r0, #2185	; 0x889
 8012e86:	f000 fdfb 	bl	8013a80 <SUBGRF_ReadRegister>
 8012e8a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8012e8e:	f640 0089 	movw	r0, #2185	; 0x889
 8012e92:	f000 fd03 	bl	801389c <SUBGRF_WriteRegister>
 8012e96:	e7ec      	b.n	8012e72 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8012e98:	4827      	ldr	r0, [pc, #156]	; (8012f38 <RadioSend+0x114>)
 8012e9a:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012e9c:	300e      	adds	r0, #14
 8012e9e:	f000 ff73 	bl	8013d88 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	4621      	mov	r1, r4
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	f001 f83d 	bl	8013f26 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8012eac:	4c23      	ldr	r4, [pc, #140]	; (8012f3c <RadioSend+0x118>)
 8012eae:	4b22      	ldr	r3, [pc, #136]	; (8012f38 <RadioSend+0x114>)
 8012eb0:	6859      	ldr	r1, [r3, #4]
 8012eb2:	4620      	mov	r0, r4
 8012eb4:	f001 fd4e 	bl	8014954 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8012eb8:	4620      	mov	r0, r4
 8012eba:	f001 fd05 	bl	80148c8 <UTIL_TIMER_Start>
}
 8012ebe:	b002      	add	sp, #8
 8012ec0:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8012ec2:	f001 f948 	bl	8014156 <RFW_Is_Init>
 8012ec6:	2801      	cmp	r0, #1
 8012ec8:	d00a      	beq.n	8012ee0 <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8012eca:	481b      	ldr	r0, [pc, #108]	; (8012f38 <RadioSend+0x114>)
 8012ecc:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012ece:	300e      	adds	r0, #14
 8012ed0:	f000 ff5a 	bl	8013d88 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	4621      	mov	r1, r4
 8012ed8:	4628      	mov	r0, r5
 8012eda:	f001 f824 	bl	8013f26 <SUBGRF_SendPayload>
 8012ede:	e7e5      	b.n	8012eac <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8012ee0:	f10d 0207 	add.w	r2, sp, #7
 8012ee4:	4621      	mov	r1, r4
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	f001 f93a 	bl	8014160 <RFW_TransmitInit>
 8012eec:	b968      	cbnz	r0, 8012f0a <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8012eee:	4812      	ldr	r0, [pc, #72]	; (8012f38 <RadioSend+0x114>)
 8012ef0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012ef4:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012ef6:	300e      	adds	r0, #14
 8012ef8:	f000 ff46 	bl	8013d88 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8012efc:	2200      	movs	r2, #0
 8012efe:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012f02:	4628      	mov	r0, r5
 8012f04:	f001 f80f 	bl	8013f26 <SUBGRF_SendPayload>
 8012f08:	e7d0      	b.n	8012eac <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8012f0a:	4b0d      	ldr	r3, [pc, #52]	; (8012f40 <RadioSend+0x11c>)
 8012f0c:	2201      	movs	r2, #1
 8012f0e:	2100      	movs	r1, #0
 8012f10:	2002      	movs	r0, #2
 8012f12:	f001 fa07 	bl	8014324 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8012f16:	e7d2      	b.n	8012ebe <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8012f18:	4807      	ldr	r0, [pc, #28]	; (8012f38 <RadioSend+0x114>)
 8012f1a:	2302      	movs	r3, #2
 8012f1c:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8012f1e:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012f20:	300e      	adds	r0, #14
 8012f22:	f000 ff31 	bl	8013d88 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8012f26:	2200      	movs	r2, #0
 8012f28:	4621      	mov	r1, r4
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	f000 fffb 	bl	8013f26 <SUBGRF_SendPayload>
            break;
 8012f30:	e7bc      	b.n	8012eac <RadioSend+0x88>
 8012f32:	bf00      	nop
 8012f34:	48000400 	.word	0x48000400
 8012f38:	20003e18 	.word	0x20003e18
 8012f3c:	20003e74 	.word	0x20003e74
 8012f40:	08015ce8 	.word	0x08015ce8

08012f44 <RadioRandom>:
{
 8012f44:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8012f46:	2300      	movs	r3, #0
 8012f48:	461a      	mov	r2, r3
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f000 fbe2 	bl	8013716 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8012f52:	f000 ff9b 	bl	8013e8c <SUBGRF_GetRandom>
}
 8012f56:	bd08      	pop	{r3, pc}

08012f58 <RadioSetModem>:
{
 8012f58:	b510      	push	{r4, lr}
 8012f5a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8012f5c:	4b14      	ldr	r3, [pc, #80]	; (8012fb0 <RadioSetModem+0x58>)
 8012f5e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8012f60:	f001 f906 	bl	8014170 <RFW_SetRadioModem>
    switch( modem )
 8012f64:	2c01      	cmp	r4, #1
 8012f66:	d010      	beq.n	8012f8a <RadioSetModem+0x32>
 8012f68:	2c03      	cmp	r4, #3
 8012f6a:	d01a      	beq.n	8012fa2 <RadioSetModem+0x4a>
 8012f6c:	b134      	cbz	r4, 8012f7c <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8012f6e:	2003      	movs	r0, #3
 8012f70:	f000 fce4 	bl	801393c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8012f74:	4b0e      	ldr	r3, [pc, #56]	; (8012fb0 <RadioSetModem+0x58>)
 8012f76:	2200      	movs	r2, #0
 8012f78:	735a      	strb	r2, [r3, #13]
}
 8012f7a:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8012f7c:	2000      	movs	r0, #0
 8012f7e:	f000 fcdd 	bl	801393c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8012f82:	4b0b      	ldr	r3, [pc, #44]	; (8012fb0 <RadioSetModem+0x58>)
 8012f84:	2200      	movs	r2, #0
 8012f86:	735a      	strb	r2, [r3, #13]
        break;
 8012f88:	e7f7      	b.n	8012f7a <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8012f8a:	2001      	movs	r0, #1
 8012f8c:	f000 fcd6 	bl	801393c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8012f90:	4b07      	ldr	r3, [pc, #28]	; (8012fb0 <RadioSetModem+0x58>)
 8012f92:	7b5a      	ldrb	r2, [r3, #13]
 8012f94:	7b18      	ldrb	r0, [r3, #12]
 8012f96:	4282      	cmp	r2, r0
 8012f98:	d0ef      	beq.n	8012f7a <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8012f9a:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8012f9c:	f000 f80a 	bl	8012fb4 <RadioSetPublicNetwork>
 8012fa0:	e7eb      	b.n	8012f7a <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8012fa2:	2002      	movs	r0, #2
 8012fa4:	f000 fcca 	bl	801393c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8012fa8:	4b01      	ldr	r3, [pc, #4]	; (8012fb0 <RadioSetModem+0x58>)
 8012faa:	2200      	movs	r2, #0
 8012fac:	735a      	strb	r2, [r3, #13]
}
 8012fae:	e7e4      	b.n	8012f7a <RadioSetModem+0x22>
 8012fb0:	20003e18 	.word	0x20003e18

08012fb4 <RadioSetPublicNetwork>:
{
 8012fb4:	b510      	push	{r4, lr}
 8012fb6:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8012fb8:	4b0e      	ldr	r3, [pc, #56]	; (8012ff4 <RadioSetPublicNetwork+0x40>)
 8012fba:	7318      	strb	r0, [r3, #12]
 8012fbc:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8012fbe:	2001      	movs	r0, #1
 8012fc0:	f7ff ffca 	bl	8012f58 <RadioSetModem>
    if( enable == true )
 8012fc4:	b154      	cbz	r4, 8012fdc <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8012fc6:	2134      	movs	r1, #52	; 0x34
 8012fc8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8012fcc:	f000 fc66 	bl	801389c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8012fd0:	2144      	movs	r1, #68	; 0x44
 8012fd2:	f240 7041 	movw	r0, #1857	; 0x741
 8012fd6:	f000 fc61 	bl	801389c <SUBGRF_WriteRegister>
}
 8012fda:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8012fdc:	2114      	movs	r1, #20
 8012fde:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8012fe2:	f000 fc5b 	bl	801389c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8012fe6:	2124      	movs	r1, #36	; 0x24
 8012fe8:	f240 7041 	movw	r0, #1857	; 0x741
 8012fec:	f000 fc56 	bl	801389c <SUBGRF_WriteRegister>
}
 8012ff0:	e7f3      	b.n	8012fda <RadioSetPublicNetwork+0x26>
 8012ff2:	bf00      	nop
 8012ff4:	20003e18 	.word	0x20003e18

08012ff8 <RadioSetTxConfig>:
{
 8012ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ffc:	b083      	sub	sp, #12
 8012ffe:	4604      	mov	r4, r0
 8013000:	460e      	mov	r6, r1
 8013002:	4617      	mov	r7, r2
 8013004:	461d      	mov	r5, r3
 8013006:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 801300a:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 801300e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8013012:	f001 f89f 	bl	8014154 <RFW_DeInit>
    switch( modem )
 8013016:	b174      	cbz	r4, 8013036 <RadioSetTxConfig+0x3e>
 8013018:	2c01      	cmp	r4, #1
 801301a:	d053      	beq.n	80130c4 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801301c:	4630      	mov	r0, r6
 801301e:	f000 ffc9 	bl	8013fb4 <SUBGRF_SetRfTxPower>
 8013022:	4c51      	ldr	r4, [pc, #324]	; (8013168 <RadioSetTxConfig+0x170>)
 8013024:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8013028:	f001 f899 	bl	801415e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801302c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801302e:	6063      	str	r3, [r4, #4]
}
 8013030:	b003      	add	sp, #12
 8013032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8013036:	4c4c      	ldr	r4, [pc, #304]	; (8013168 <RadioSetTxConfig+0x170>)
 8013038:	f04f 0b00 	mov.w	fp, #0
 801303c:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8013040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013042:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8013044:	230b      	movs	r3, #11
 8013046:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801304a:	4628      	mov	r0, r5
 801304c:	f001 f820 	bl	8014090 <SUBGRF_GetFskBandwidthRegValue>
 8013050:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8013054:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8013056:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801305a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801305e:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8013062:	2304      	movs	r3, #4
 8013064:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8013066:	2318      	movs	r3, #24
 8013068:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801306a:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801306e:	f089 0901 	eor.w	r9, r9, #1
 8013072:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8013076:	f1ba 0f00 	cmp.w	sl, #0
 801307a:	d01f      	beq.n	80130bc <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801307c:	22f2      	movs	r2, #242	; 0xf2
 801307e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8013080:	4c39      	ldr	r4, [pc, #228]	; (8013168 <RadioSetTxConfig+0x170>)
 8013082:	2301      	movs	r3, #1
 8013084:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8013086:	f7ff fc43 	bl	8012910 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801308a:	2000      	movs	r0, #0
 801308c:	f7ff ff64 	bl	8012f58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013090:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013094:	f000 fc6c 	bl	8013970 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013098:	f104 000e 	add.w	r0, r4, #14
 801309c:	f000 fe74 	bl	8013d88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80130a0:	4a32      	ldr	r2, [pc, #200]	; (801316c <RadioSetTxConfig+0x174>)
 80130a2:	466b      	mov	r3, sp
 80130a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80130a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80130ac:	4618      	mov	r0, r3
 80130ae:	f000 fe39 	bl	8013d24 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80130b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80130b6:	f000 fd5d 	bl	8013b74 <SUBGRF_SetWhiteningSeed>
            break;
 80130ba:	e7af      	b.n	801301c <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80130bc:	4b2a      	ldr	r3, [pc, #168]	; (8013168 <RadioSetTxConfig+0x170>)
 80130be:	2201      	movs	r2, #1
 80130c0:	75da      	strb	r2, [r3, #23]
 80130c2:	e7dd      	b.n	8013080 <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80130c4:	4a28      	ldr	r2, [pc, #160]	; (8013168 <RadioSetTxConfig+0x170>)
 80130c6:	2301      	movs	r3, #1
 80130c8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80130cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80130ce:	b2db      	uxtb	r3, r3
 80130d0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80130d4:	4926      	ldr	r1, [pc, #152]	; (8013170 <RadioSetTxConfig+0x178>)
 80130d6:	5d49      	ldrb	r1, [r1, r5]
 80130d8:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80130dc:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80130e0:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80130e4:	b91d      	cbnz	r5, 80130ee <RadioSetTxConfig+0xf6>
 80130e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130e8:	3a0b      	subs	r2, #11
 80130ea:	2a01      	cmp	r2, #1
 80130ec:	d92c      	bls.n	8013148 <RadioSetTxConfig+0x150>
 80130ee:	2d01      	cmp	r5, #1
 80130f0:	d027      	beq.n	8013142 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80130f2:	4a1d      	ldr	r2, [pc, #116]	; (8013168 <RadioSetTxConfig+0x170>)
 80130f4:	2100      	movs	r1, #0
 80130f6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80130fa:	4a1b      	ldr	r2, [pc, #108]	; (8013168 <RadioSetTxConfig+0x170>)
 80130fc:	2101      	movs	r1, #1
 80130fe:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8013100:	3b05      	subs	r3, #5
 8013102:	b2db      	uxtb	r3, r3
 8013104:	428b      	cmp	r3, r1
 8013106:	d924      	bls.n	8013152 <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013108:	4b17      	ldr	r3, [pc, #92]	; (8013168 <RadioSetTxConfig+0x170>)
 801310a:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801310e:	4c16      	ldr	r4, [pc, #88]	; (8013168 <RadioSetTxConfig+0x170>)
 8013110:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8013114:	4b17      	ldr	r3, [pc, #92]	; (8013174 <RadioSetTxConfig+0x17c>)
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801311a:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801311e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013122:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8013126:	f7ff fbf3 	bl	8012910 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801312a:	2001      	movs	r0, #1
 801312c:	f7ff ff14 	bl	8012f58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013130:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013134:	f000 fc1c 	bl	8013970 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013138:	f104 000e 	add.w	r0, r4, #14
 801313c:	f000 fe24 	bl	8013d88 <SUBGRF_SetPacketParams>
            break;
 8013140:	e76c      	b.n	801301c <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013144:	2a0c      	cmp	r2, #12
 8013146:	d1d4      	bne.n	80130f2 <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8013148:	4a07      	ldr	r2, [pc, #28]	; (8013168 <RadioSetTxConfig+0x170>)
 801314a:	2101      	movs	r1, #1
 801314c:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8013150:	e7d3      	b.n	80130fa <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 8013152:	f1b8 0f0b 	cmp.w	r8, #11
 8013156:	d803      	bhi.n	8013160 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8013158:	4613      	mov	r3, r2
 801315a:	220c      	movs	r2, #12
 801315c:	839a      	strh	r2, [r3, #28]
 801315e:	e7d6      	b.n	801310e <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013160:	4b01      	ldr	r3, [pc, #4]	; (8013168 <RadioSetTxConfig+0x170>)
 8013162:	f8a3 801c 	strh.w	r8, [r3, #28]
 8013166:	e7d2      	b.n	801310e <RadioSetTxConfig+0x116>
 8013168:	20003e18 	.word	0x20003e18
 801316c:	08014ecc 	.word	0x08014ecc
 8013170:	08015d00 	.word	0x08015d00
 8013174:	20000114 	.word	0x20000114

08013178 <RadioSetRxConfig>:
{
 8013178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801317c:	b085      	sub	sp, #20
 801317e:	4604      	mov	r4, r0
 8013180:	460d      	mov	r5, r1
 8013182:	4616      	mov	r6, r2
 8013184:	9301      	str	r3, [sp, #4]
 8013186:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 801318a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801318e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8013192:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8013196:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 801319a:	4b6e      	ldr	r3, [pc, #440]	; (8013354 <RadioSetRxConfig+0x1dc>)
 801319c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80131a0:	f000 ffd8 	bl	8014154 <RFW_DeInit>
    if( rxContinuous == true )
 80131a4:	f1b8 0f00 	cmp.w	r8, #0
 80131a8:	d001      	beq.n	80131ae <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80131aa:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80131ae:	b14f      	cbz	r7, 80131c4 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 80131b0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80131b4:	4b68      	ldr	r3, [pc, #416]	; (8013358 <RadioSetRxConfig+0x1e0>)
 80131b6:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80131b8:	b144      	cbz	r4, 80131cc <RadioSetRxConfig+0x54>
 80131ba:	2c01      	cmp	r4, #1
 80131bc:	d057      	beq.n	801326e <RadioSetRxConfig+0xf6>
}
 80131be:	b005      	add	sp, #20
 80131c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 80131c4:	4b64      	ldr	r3, [pc, #400]	; (8013358 <RadioSetRxConfig+0x1e0>)
 80131c6:	22ff      	movs	r2, #255	; 0xff
 80131c8:	701a      	strb	r2, [r3, #0]
 80131ca:	e7f5      	b.n	80131b8 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80131cc:	2000      	movs	r0, #0
 80131ce:	f000 fa05 	bl	80135dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80131d2:	4c60      	ldr	r4, [pc, #384]	; (8013354 <RadioSetRxConfig+0x1dc>)
 80131d4:	f04f 0800 	mov.w	r8, #0
 80131d8:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80131dc:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80131de:	230b      	movs	r3, #11
 80131e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80131e4:	4628      	mov	r0, r5
 80131e6:	f000 ff53 	bl	8014090 <SUBGRF_GetFskBandwidthRegValue>
 80131ea:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80131ee:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80131f2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80131f6:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80131fa:	2304      	movs	r3, #4
 80131fc:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80131fe:	2318      	movs	r3, #24
 8013200:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8013202:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8013206:	f087 0701 	eor.w	r7, r7, #1
 801320a:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801320c:	4b52      	ldr	r3, [pc, #328]	; (8013358 <RadioSetRxConfig+0x1e0>)
 801320e:	781b      	ldrb	r3, [r3, #0]
 8013210:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8013212:	f1bb 0f00 	cmp.w	fp, #0
 8013216:	d026      	beq.n	8013266 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8013218:	22f2      	movs	r2, #242	; 0xf2
 801321a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801321c:	4c4d      	ldr	r4, [pc, #308]	; (8013354 <RadioSetRxConfig+0x1dc>)
 801321e:	2301      	movs	r3, #1
 8013220:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8013222:	f7ff fb75 	bl	8012910 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8013226:	2000      	movs	r0, #0
 8013228:	f7ff fe96 	bl	8012f58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801322c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013230:	f000 fb9e 	bl	8013970 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013234:	f104 000e 	add.w	r0, r4, #14
 8013238:	f000 fda6 	bl	8013d88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801323c:	4a47      	ldr	r2, [pc, #284]	; (801335c <RadioSetRxConfig+0x1e4>)
 801323e:	ab02      	add	r3, sp, #8
 8013240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013244:	e883 0003 	stmia.w	r3, {r0, r1}
 8013248:	4618      	mov	r0, r3
 801324a:	f000 fd6b 	bl	8013d24 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801324e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013252:	f000 fc8f 	bl	8013b74 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8013256:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801325a:	fb02 fa0a 	mul.w	sl, r2, sl
 801325e:	fbba f6f6 	udiv	r6, sl, r6
 8013262:	60a6      	str	r6, [r4, #8]
            break;
 8013264:	e7ab      	b.n	80131be <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8013266:	4b3b      	ldr	r3, [pc, #236]	; (8013354 <RadioSetRxConfig+0x1dc>)
 8013268:	2201      	movs	r2, #1
 801326a:	75da      	strb	r2, [r3, #23]
 801326c:	e7d6      	b.n	801321c <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801326e:	2000      	movs	r0, #0
 8013270:	f000 f9b4 	bl	80135dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8013274:	4a37      	ldr	r2, [pc, #220]	; (8013354 <RadioSetRxConfig+0x1dc>)
 8013276:	2301      	movs	r3, #1
 8013278:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801327c:	b2f3      	uxtb	r3, r6
 801327e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8013282:	4937      	ldr	r1, [pc, #220]	; (8013360 <RadioSetRxConfig+0x1e8>)
 8013284:	5d49      	ldrb	r1, [r1, r5]
 8013286:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801328a:	9901      	ldr	r1, [sp, #4]
 801328c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013290:	b91d      	cbnz	r5, 801329a <RadioSetRxConfig+0x122>
 8013292:	f1a6 020b 	sub.w	r2, r6, #11
 8013296:	2a01      	cmp	r2, #1
 8013298:	d941      	bls.n	801331e <RadioSetRxConfig+0x1a6>
 801329a:	2d01      	cmp	r5, #1
 801329c:	d03d      	beq.n	801331a <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801329e:	4a2d      	ldr	r2, [pc, #180]	; (8013354 <RadioSetRxConfig+0x1dc>)
 80132a0:	2100      	movs	r1, #0
 80132a2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80132a6:	4a2b      	ldr	r2, [pc, #172]	; (8013354 <RadioSetRxConfig+0x1dc>)
 80132a8:	2101      	movs	r1, #1
 80132aa:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80132ac:	3b05      	subs	r3, #5
 80132ae:	b2db      	uxtb	r3, r3
 80132b0:	428b      	cmp	r3, r1
 80132b2:	d939      	bls.n	8013328 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80132b4:	4b27      	ldr	r3, [pc, #156]	; (8013354 <RadioSetRxConfig+0x1dc>)
 80132b6:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80132ba:	4c26      	ldr	r4, [pc, #152]	; (8013354 <RadioSetRxConfig+0x1dc>)
 80132bc:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80132be:	4b26      	ldr	r3, [pc, #152]	; (8013358 <RadioSetRxConfig+0x1e0>)
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80132c4:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80132c8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80132cc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80132d0:	f7ff fb1e 	bl	8012910 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80132d4:	2001      	movs	r0, #1
 80132d6:	f7ff fe3f 	bl	8012f58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80132da:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80132de:	f000 fb47 	bl	8013970 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80132e2:	f104 000e 	add.w	r0, r4, #14
 80132e6:	f000 fd4f 	bl	8013d88 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80132ea:	fa5f f08a 	uxtb.w	r0, sl
 80132ee:	f000 fb03 	bl	80138f8 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80132f2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d021      	beq.n	801333e <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80132fa:	f240 7036 	movw	r0, #1846	; 0x736
 80132fe:	f000 fbbf 	bl	8013a80 <SUBGRF_ReadRegister>
 8013302:	f040 0104 	orr.w	r1, r0, #4
 8013306:	b2c9      	uxtb	r1, r1
 8013308:	f240 7036 	movw	r0, #1846	; 0x736
 801330c:	f000 fac6 	bl	801389c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8013310:	4b10      	ldr	r3, [pc, #64]	; (8013354 <RadioSetRxConfig+0x1dc>)
 8013312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013316:	609a      	str	r2, [r3, #8]
}
 8013318:	e751      	b.n	80131be <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801331a:	2e0c      	cmp	r6, #12
 801331c:	d1bf      	bne.n	801329e <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801331e:	4a0d      	ldr	r2, [pc, #52]	; (8013354 <RadioSetRxConfig+0x1dc>)
 8013320:	2101      	movs	r1, #1
 8013322:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8013326:	e7be      	b.n	80132a6 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8013328:	f1b9 0f0b 	cmp.w	r9, #11
 801332c:	d803      	bhi.n	8013336 <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801332e:	4613      	mov	r3, r2
 8013330:	220c      	movs	r2, #12
 8013332:	839a      	strh	r2, [r3, #28]
 8013334:	e7c1      	b.n	80132ba <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013336:	4b07      	ldr	r3, [pc, #28]	; (8013354 <RadioSetRxConfig+0x1dc>)
 8013338:	f8a3 901c 	strh.w	r9, [r3, #28]
 801333c:	e7bd      	b.n	80132ba <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801333e:	f240 7036 	movw	r0, #1846	; 0x736
 8013342:	f000 fb9d 	bl	8013a80 <SUBGRF_ReadRegister>
 8013346:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 801334a:	f240 7036 	movw	r0, #1846	; 0x736
 801334e:	f000 faa5 	bl	801389c <SUBGRF_WriteRegister>
 8013352:	e7dd      	b.n	8013310 <RadioSetRxConfig+0x198>
 8013354:	20003e18 	.word	0x20003e18
 8013358:	20000114 	.word	0x20000114
 801335c:	08014ecc 	.word	0x08014ecc
 8013360:	08015d00 	.word	0x08015d00

08013364 <RadioIsChannelFree>:
{
 8013364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013366:	b08b      	sub	sp, #44	; 0x2c
 8013368:	4604      	mov	r4, r0
 801336a:	460f      	mov	r7, r1
 801336c:	4616      	mov	r6, r2
 801336e:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8013370:	f7ff face 	bl	8012910 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8013374:	2000      	movs	r0, #0
 8013376:	f7ff fdef 	bl	8012f58 <RadioSetModem>
    RadioSetChannel( freq );
 801337a:	4620      	mov	r0, r4
 801337c:	f7ff fcf8 	bl	8012d70 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8013380:	2301      	movs	r3, #1
 8013382:	9309      	str	r3, [sp, #36]	; 0x24
 8013384:	2400      	movs	r4, #0
 8013386:	9408      	str	r4, [sp, #32]
 8013388:	9407      	str	r4, [sp, #28]
 801338a:	9406      	str	r4, [sp, #24]
 801338c:	9405      	str	r4, [sp, #20]
 801338e:	9404      	str	r4, [sp, #16]
 8013390:	9403      	str	r4, [sp, #12]
 8013392:	9402      	str	r4, [sp, #8]
 8013394:	2303      	movs	r3, #3
 8013396:	9301      	str	r3, [sp, #4]
 8013398:	9700      	str	r7, [sp, #0]
 801339a:	4623      	mov	r3, r4
 801339c:	f44f 7216 	mov.w	r2, #600	; 0x258
 80133a0:	4639      	mov	r1, r7
 80133a2:	4620      	mov	r0, r4
 80133a4:	f7ff fee8 	bl	8013178 <RadioSetRxConfig>
    RadioRx( 0 );
 80133a8:	4620      	mov	r0, r4
 80133aa:	f7ff fcf9 	bl	8012da0 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80133ae:	f7ff fc93 	bl	8012cd8 <RadioGetWakeupTime>
 80133b2:	f7ee fc45 	bl	8001c40 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80133b6:	f001 f9ed 	bl	8014794 <UTIL_TIMER_GetCurrentTime>
 80133ba:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80133bc:	4620      	mov	r0, r4
 80133be:	f001 f9f3 	bl	80147a8 <UTIL_TIMER_GetElapsedTime>
 80133c2:	42a8      	cmp	r0, r5
 80133c4:	d206      	bcs.n	80133d4 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80133c6:	2000      	movs	r0, #0
 80133c8:	f7ff fcb0 	bl	8012d2c <RadioRssi>
        if( rssi > rssiThresh )
 80133cc:	42b0      	cmp	r0, r6
 80133ce:	ddf5      	ble.n	80133bc <RadioIsChannelFree+0x58>
            status = false;
 80133d0:	2400      	movs	r4, #0
 80133d2:	e000      	b.n	80133d6 <RadioIsChannelFree+0x72>
    bool status = true;
 80133d4:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80133d6:	f7ff fa9b 	bl	8012910 <RadioStandby>
}
 80133da:	4620      	mov	r0, r4
 80133dc:	b00b      	add	sp, #44	; 0x2c
 80133de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080133e0 <RadioInit>:
{
 80133e0:	b570      	push	{r4, r5, r6, lr}
 80133e2:	b082      	sub	sp, #8
    RadioEvents = events;
 80133e4:	4b1d      	ldr	r3, [pc, #116]	; (801345c <RadioInit+0x7c>)
 80133e6:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 80133e8:	4d1d      	ldr	r5, [pc, #116]	; (8013460 <RadioInit+0x80>)
 80133ea:	2400      	movs	r4, #0
 80133ec:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 80133ee:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 80133f0:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80133f2:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 80133f4:	481b      	ldr	r0, [pc, #108]	; (8013464 <RadioInit+0x84>)
 80133f6:	f000 fb67 	bl	8013ac8 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 80133fa:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 80133fc:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 80133fe:	f000 f8fa 	bl	80135f6 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8013402:	4621      	mov	r1, r4
 8013404:	4620      	mov	r0, r4
 8013406:	f000 f9f1 	bl	80137ec <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801340a:	2204      	movs	r2, #4
 801340c:	4621      	mov	r1, r4
 801340e:	2001      	movs	r0, #1
 8013410:	f000 fbc9 	bl	8013ba6 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013414:	4623      	mov	r3, r4
 8013416:	4622      	mov	r2, r4
 8013418:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801341c:	4608      	mov	r0, r1
 801341e:	f000 f97a 	bl	8013716 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8013422:	f7ff fcf5 	bl	8012e10 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8013426:	4e10      	ldr	r6, [pc, #64]	; (8013468 <RadioInit+0x88>)
 8013428:	9400      	str	r4, [sp, #0]
 801342a:	4b10      	ldr	r3, [pc, #64]	; (801346c <RadioInit+0x8c>)
 801342c:	4622      	mov	r2, r4
 801342e:	f04f 31ff 	mov.w	r1, #4294967295
 8013432:	4630      	mov	r0, r6
 8013434:	f001 f990 	bl	8014758 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8013438:	4d0d      	ldr	r5, [pc, #52]	; (8013470 <RadioInit+0x90>)
 801343a:	9400      	str	r4, [sp, #0]
 801343c:	4b0d      	ldr	r3, [pc, #52]	; (8013474 <RadioInit+0x94>)
 801343e:	4622      	mov	r2, r4
 8013440:	f04f 31ff 	mov.w	r1, #4294967295
 8013444:	4628      	mov	r0, r5
 8013446:	f001 f987 	bl	8014758 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801344a:	4630      	mov	r0, r6
 801344c:	f001 f9e2 	bl	8014814 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8013450:	4628      	mov	r0, r5
 8013452:	f001 f9df 	bl	8014814 <UTIL_TIMER_Stop>
}
 8013456:	b002      	add	sp, #8
 8013458:	bd70      	pop	{r4, r5, r6, pc}
 801345a:	bf00      	nop
 801345c:	20003dfc 	.word	0x20003dfc
 8013460:	20003e18 	.word	0x20003e18
 8013464:	08012cc5 	.word	0x08012cc5
 8013468:	20003e74 	.word	0x20003e74
 801346c:	0801281d 	.word	0x0801281d
 8013470:	20003e00 	.word	0x20003e00
 8013474:	08012845 	.word	0x08012845

08013478 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8013478:	b510      	push	{r4, lr}
 801347a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801347c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013480:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8013482:	460a      	mov	r2, r1
 8013484:	4601      	mov	r1, r0
 8013486:	4803      	ldr	r0, [pc, #12]	; (8013494 <SUBGRF_WriteCommand+0x1c>)
 8013488:	f7f2 fcf0 	bl	8005e6c <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801348c:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8013490:	bd10      	pop	{r4, pc}
 8013492:	bf00      	nop
 8013494:	200002d8 	.word	0x200002d8

08013498 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8013498:	b510      	push	{r4, lr}
 801349a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801349c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80134a0:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80134a2:	460a      	mov	r2, r1
 80134a4:	4601      	mov	r1, r0
 80134a6:	4803      	ldr	r0, [pc, #12]	; (80134b4 <SUBGRF_ReadCommand+0x1c>)
 80134a8:	f7f2 fd36 	bl	8005f18 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134ac:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80134b0:	bd10      	pop	{r4, pc}
 80134b2:	bf00      	nop
 80134b4:	200002d8 	.word	0x200002d8

080134b8 <SUBGRF_GetOperatingMode>:
}
 80134b8:	4b01      	ldr	r3, [pc, #4]	; (80134c0 <SUBGRF_GetOperatingMode+0x8>)
 80134ba:	7818      	ldrb	r0, [r3, #0]
 80134bc:	4770      	bx	lr
 80134be:	bf00      	nop
 80134c0:	20003e92 	.word	0x20003e92

080134c4 <SUBGRF_SetStandby>:
{
 80134c4:	b500      	push	{lr}
 80134c6:	b083      	sub	sp, #12
 80134c8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80134cc:	2201      	movs	r2, #1
 80134ce:	f10d 0107 	add.w	r1, sp, #7
 80134d2:	2080      	movs	r0, #128	; 0x80
 80134d4:	f7ff ffd0 	bl	8013478 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80134d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80134dc:	b92b      	cbnz	r3, 80134ea <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80134de:	4b05      	ldr	r3, [pc, #20]	; (80134f4 <SUBGRF_SetStandby+0x30>)
 80134e0:	2201      	movs	r2, #1
 80134e2:	701a      	strb	r2, [r3, #0]
}
 80134e4:	b003      	add	sp, #12
 80134e6:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 80134ea:	4b02      	ldr	r3, [pc, #8]	; (80134f4 <SUBGRF_SetStandby+0x30>)
 80134ec:	2202      	movs	r2, #2
 80134ee:	701a      	strb	r2, [r3, #0]
}
 80134f0:	e7f8      	b.n	80134e4 <SUBGRF_SetStandby+0x20>
 80134f2:	bf00      	nop
 80134f4:	20003e92 	.word	0x20003e92

080134f8 <SUBGRF_SetTx>:
{
 80134f8:	b500      	push	{lr}
 80134fa:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80134fc:	4b0a      	ldr	r3, [pc, #40]	; (8013528 <SUBGRF_SetTx+0x30>)
 80134fe:	2204      	movs	r2, #4
 8013500:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013502:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013506:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801350a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801350e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8013512:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8013516:	2203      	movs	r2, #3
 8013518:	a901      	add	r1, sp, #4
 801351a:	2083      	movs	r0, #131	; 0x83
 801351c:	f7ff ffac 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013520:	b003      	add	sp, #12
 8013522:	f85d fb04 	ldr.w	pc, [sp], #4
 8013526:	bf00      	nop
 8013528:	20003e92 	.word	0x20003e92

0801352c <SUBGRF_SetRx>:
{
 801352c:	b500      	push	{lr}
 801352e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8013530:	4b0a      	ldr	r3, [pc, #40]	; (801355c <SUBGRF_SetRx+0x30>)
 8013532:	2205      	movs	r2, #5
 8013534:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013536:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801353a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801353e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013542:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8013546:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801354a:	2203      	movs	r2, #3
 801354c:	a901      	add	r1, sp, #4
 801354e:	2082      	movs	r0, #130	; 0x82
 8013550:	f7ff ff92 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013554:	b003      	add	sp, #12
 8013556:	f85d fb04 	ldr.w	pc, [sp], #4
 801355a:	bf00      	nop
 801355c:	20003e92 	.word	0x20003e92

08013560 <SUBGRF_SetRxDutyCycle>:
{
 8013560:	b500      	push	{lr}
 8013562:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8013564:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013568:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801356c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013570:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8013574:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8013578:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801357c:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8013580:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8013584:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8013588:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801358c:	2206      	movs	r2, #6
 801358e:	4669      	mov	r1, sp
 8013590:	2094      	movs	r0, #148	; 0x94
 8013592:	f7ff ff71 	bl	8013478 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8013596:	4b03      	ldr	r3, [pc, #12]	; (80135a4 <SUBGRF_SetRxDutyCycle+0x44>)
 8013598:	2206      	movs	r2, #6
 801359a:	701a      	strb	r2, [r3, #0]
}
 801359c:	b003      	add	sp, #12
 801359e:	f85d fb04 	ldr.w	pc, [sp], #4
 80135a2:	bf00      	nop
 80135a4:	20003e92 	.word	0x20003e92

080135a8 <SUBGRF_SetCad>:
{
 80135a8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80135aa:	2200      	movs	r2, #0
 80135ac:	4611      	mov	r1, r2
 80135ae:	20c5      	movs	r0, #197	; 0xc5
 80135b0:	f7ff ff62 	bl	8013478 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80135b4:	4b01      	ldr	r3, [pc, #4]	; (80135bc <SUBGRF_SetCad+0x14>)
 80135b6:	2207      	movs	r2, #7
 80135b8:	701a      	strb	r2, [r3, #0]
}
 80135ba:	bd08      	pop	{r3, pc}
 80135bc:	20003e92 	.word	0x20003e92

080135c0 <SUBGRF_SetTxContinuousWave>:
{
 80135c0:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80135c2:	2200      	movs	r2, #0
 80135c4:	4611      	mov	r1, r2
 80135c6:	20d1      	movs	r0, #209	; 0xd1
 80135c8:	f7ff ff56 	bl	8013478 <SUBGRF_WriteCommand>
}
 80135cc:	bd08      	pop	{r3, pc}

080135ce <SUBGRF_SetTxInfinitePreamble>:
{
 80135ce:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80135d0:	2200      	movs	r2, #0
 80135d2:	4611      	mov	r1, r2
 80135d4:	20d2      	movs	r0, #210	; 0xd2
 80135d6:	f7ff ff4f 	bl	8013478 <SUBGRF_WriteCommand>
}
 80135da:	bd08      	pop	{r3, pc}

080135dc <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80135dc:	b500      	push	{lr}
 80135de:	b083      	sub	sp, #12
 80135e0:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80135e4:	2201      	movs	r2, #1
 80135e6:	f10d 0107 	add.w	r1, sp, #7
 80135ea:	209f      	movs	r0, #159	; 0x9f
 80135ec:	f7ff ff44 	bl	8013478 <SUBGRF_WriteCommand>
}
 80135f0:	b003      	add	sp, #12
 80135f2:	f85d fb04 	ldr.w	pc, [sp], #4

080135f6 <SUBGRF_SetRegulatorMode>:
{
 80135f6:	b500      	push	{lr}
 80135f8:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80135fa:	f7ef fbcd 	bl	8002d98 <RBI_IsDCDC>
 80135fe:	2801      	cmp	r0, #1
 8013600:	d00b      	beq.n	801361a <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8013602:	2300      	movs	r3, #0
 8013604:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8013608:	2201      	movs	r2, #1
 801360a:	f10d 0107 	add.w	r1, sp, #7
 801360e:	2096      	movs	r0, #150	; 0x96
 8013610:	f7ff ff32 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013614:	b003      	add	sp, #12
 8013616:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 801361a:	2301      	movs	r3, #1
 801361c:	f88d 3007 	strb.w	r3, [sp, #7]
 8013620:	e7f2      	b.n	8013608 <SUBGRF_SetRegulatorMode+0x12>

08013622 <SUBGRF_Calibrate>:
{
 8013622:	b500      	push	{lr}
 8013624:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8013626:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801362a:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801362e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8013630:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8013634:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8013636:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801363a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801363c:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8013640:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8013642:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8013646:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8013648:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801364c:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801364e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8013652:	2201      	movs	r2, #1
 8013654:	f10d 0107 	add.w	r1, sp, #7
 8013658:	2089      	movs	r0, #137	; 0x89
 801365a:	f7ff ff0d 	bl	8013478 <SUBGRF_WriteCommand>
}
 801365e:	b003      	add	sp, #12
 8013660:	f85d fb04 	ldr.w	pc, [sp], #4

08013664 <SUBGRF_CalibrateImage>:
{
 8013664:	b500      	push	{lr}
 8013666:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8013668:	4b1c      	ldr	r3, [pc, #112]	; (80136dc <SUBGRF_CalibrateImage+0x78>)
 801366a:	4298      	cmp	r0, r3
 801366c:	d90d      	bls.n	801368a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 801366e:	23e1      	movs	r3, #225	; 0xe1
 8013670:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8013674:	23e9      	movs	r3, #233	; 0xe9
 8013676:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801367a:	2202      	movs	r2, #2
 801367c:	a901      	add	r1, sp, #4
 801367e:	2098      	movs	r0, #152	; 0x98
 8013680:	f7ff fefa 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013684:	b003      	add	sp, #12
 8013686:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 801368a:	4b15      	ldr	r3, [pc, #84]	; (80136e0 <SUBGRF_CalibrateImage+0x7c>)
 801368c:	4298      	cmp	r0, r3
 801368e:	d906      	bls.n	801369e <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8013690:	23d7      	movs	r3, #215	; 0xd7
 8013692:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8013696:	23db      	movs	r3, #219	; 0xdb
 8013698:	f88d 3005 	strb.w	r3, [sp, #5]
 801369c:	e7ed      	b.n	801367a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 801369e:	4b11      	ldr	r3, [pc, #68]	; (80136e4 <SUBGRF_CalibrateImage+0x80>)
 80136a0:	4298      	cmp	r0, r3
 80136a2:	d906      	bls.n	80136b2 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80136a4:	23c1      	movs	r3, #193	; 0xc1
 80136a6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80136aa:	23c5      	movs	r3, #197	; 0xc5
 80136ac:	f88d 3005 	strb.w	r3, [sp, #5]
 80136b0:	e7e3      	b.n	801367a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80136b2:	4b0d      	ldr	r3, [pc, #52]	; (80136e8 <SUBGRF_CalibrateImage+0x84>)
 80136b4:	4298      	cmp	r0, r3
 80136b6:	d906      	bls.n	80136c6 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80136b8:	2375      	movs	r3, #117	; 0x75
 80136ba:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80136be:	2381      	movs	r3, #129	; 0x81
 80136c0:	f88d 3005 	strb.w	r3, [sp, #5]
 80136c4:	e7d9      	b.n	801367a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80136c6:	4b09      	ldr	r3, [pc, #36]	; (80136ec <SUBGRF_CalibrateImage+0x88>)
 80136c8:	4298      	cmp	r0, r3
 80136ca:	d9d6      	bls.n	801367a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 80136cc:	236b      	movs	r3, #107	; 0x6b
 80136ce:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80136d2:	236f      	movs	r3, #111	; 0x6f
 80136d4:	f88d 3005 	strb.w	r3, [sp, #5]
 80136d8:	e7cf      	b.n	801367a <SUBGRF_CalibrateImage+0x16>
 80136da:	bf00      	nop
 80136dc:	35a4e900 	.word	0x35a4e900
 80136e0:	32a9f880 	.word	0x32a9f880
 80136e4:	2de54480 	.word	0x2de54480
 80136e8:	1b6b0b00 	.word	0x1b6b0b00
 80136ec:	1954fc40 	.word	0x1954fc40

080136f0 <SUBGRF_SetPaConfig>:
{
 80136f0:	b500      	push	{lr}
 80136f2:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 80136f4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 80136f8:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 80136fc:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8013700:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8013704:	2204      	movs	r2, #4
 8013706:	eb0d 0102 	add.w	r1, sp, r2
 801370a:	2095      	movs	r0, #149	; 0x95
 801370c:	f7ff feb4 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013710:	b003      	add	sp, #12
 8013712:	f85d fb04 	ldr.w	pc, [sp], #4

08013716 <SUBGRF_SetDioIrqParams>:
{
 8013716:	b500      	push	{lr}
 8013718:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801371a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801371e:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8013722:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8013726:	0a08      	lsrs	r0, r1, #8
 8013728:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801372c:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8013730:	0a11      	lsrs	r1, r2, #8
 8013732:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8013736:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801373a:	0a1a      	lsrs	r2, r3, #8
 801373c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8013740:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8013744:	2208      	movs	r2, #8
 8013746:	4669      	mov	r1, sp
 8013748:	4610      	mov	r0, r2
 801374a:	f7ff fe95 	bl	8013478 <SUBGRF_WriteCommand>
}
 801374e:	b003      	add	sp, #12
 8013750:	f85d fb04 	ldr.w	pc, [sp], #4

08013754 <SUBGRF_SetTcxoMode>:
{
 8013754:	b500      	push	{lr}
 8013756:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8013758:	f000 0007 	and.w	r0, r0, #7
 801375c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013760:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8013764:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8013768:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801376c:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8013770:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8013774:	2204      	movs	r2, #4
 8013776:	eb0d 0102 	add.w	r1, sp, r2
 801377a:	2097      	movs	r0, #151	; 0x97
 801377c:	f7ff fe7c 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013780:	b003      	add	sp, #12
 8013782:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013788 <SUBGRF_SetRfFrequency>:
{
 8013788:	b510      	push	{r4, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 801378e:	4b12      	ldr	r3, [pc, #72]	; (80137d8 <SUBGRF_SetRfFrequency+0x50>)
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	b1d3      	cbz	r3, 80137ca <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8013794:	4a11      	ldr	r2, [pc, #68]	; (80137dc <SUBGRF_SetRfFrequency+0x54>)
 8013796:	2300      	movs	r3, #0
 8013798:	0660      	lsls	r0, r4, #25
 801379a:	09e1      	lsrs	r1, r4, #7
 801379c:	f7ed fa08 	bl	8000bb0 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80137a0:	0e03      	lsrs	r3, r0, #24
 80137a2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80137a6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80137aa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80137ae:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80137b2:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80137b6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80137ba:	2204      	movs	r2, #4
 80137bc:	eb0d 0102 	add.w	r1, sp, r2
 80137c0:	2086      	movs	r0, #134	; 0x86
 80137c2:	f7ff fe59 	bl	8013478 <SUBGRF_WriteCommand>
}
 80137c6:	b002      	add	sp, #8
 80137c8:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80137ca:	f7ff ff4b 	bl	8013664 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80137ce:	4b02      	ldr	r3, [pc, #8]	; (80137d8 <SUBGRF_SetRfFrequency+0x50>)
 80137d0:	2201      	movs	r2, #1
 80137d2:	701a      	strb	r2, [r3, #0]
 80137d4:	e7de      	b.n	8013794 <SUBGRF_SetRfFrequency+0xc>
 80137d6:	bf00      	nop
 80137d8:	20003e90 	.word	0x20003e90
 80137dc:	01e84800 	.word	0x01e84800

080137e0 <SUBGRF_GetPacketType>:
}
 80137e0:	4b01      	ldr	r3, [pc, #4]	; (80137e8 <SUBGRF_GetPacketType+0x8>)
 80137e2:	7818      	ldrb	r0, [r3, #0]
 80137e4:	4770      	bx	lr
 80137e6:	bf00      	nop
 80137e8:	20003e93 	.word	0x20003e93

080137ec <SUBGRF_SetBufferBaseAddress>:
{
 80137ec:	b500      	push	{lr}
 80137ee:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 80137f0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 80137f4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80137f8:	2202      	movs	r2, #2
 80137fa:	a901      	add	r1, sp, #4
 80137fc:	208f      	movs	r0, #143	; 0x8f
 80137fe:	f7ff fe3b 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013802:	b003      	add	sp, #12
 8013804:	f85d fb04 	ldr.w	pc, [sp], #4

08013808 <SUBGRF_GetRssiInst>:
{
 8013808:	b500      	push	{lr}
 801380a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801380c:	2201      	movs	r2, #1
 801380e:	a901      	add	r1, sp, #4
 8013810:	2015      	movs	r0, #21
 8013812:	f7ff fe41 	bl	8013498 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8013816:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801381a:	4240      	negs	r0, r0
}
 801381c:	1040      	asrs	r0, r0, #1
 801381e:	b003      	add	sp, #12
 8013820:	f85d fb04 	ldr.w	pc, [sp], #4

08013824 <SUBGRF_GetPacketStatus>:
{
 8013824:	b510      	push	{r4, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801382a:	2203      	movs	r2, #3
 801382c:	a901      	add	r1, sp, #4
 801382e:	2014      	movs	r0, #20
 8013830:	f7ff fe32 	bl	8013498 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8013834:	f7ff ffd4 	bl	80137e0 <SUBGRF_GetPacketType>
 8013838:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 801383a:	b148      	cbz	r0, 8013850 <SUBGRF_GetPacketStatus+0x2c>
 801383c:	2801      	cmp	r0, #1
 801383e:	d018      	beq.n	8013872 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8013840:	2214      	movs	r2, #20
 8013842:	2100      	movs	r1, #0
 8013844:	4620      	mov	r0, r4
 8013846:	f000 fe8e 	bl	8014566 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801384a:	230f      	movs	r3, #15
 801384c:	7023      	strb	r3, [r4, #0]
}
 801384e:	e00e      	b.n	801386e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8013850:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013854:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8013856:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801385a:	425b      	negs	r3, r3
 801385c:	105b      	asrs	r3, r3, #1
 801385e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8013860:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013864:	425b      	negs	r3, r3
 8013866:	105b      	asrs	r3, r3, #1
 8013868:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801386a:	2300      	movs	r3, #0
 801386c:	60a3      	str	r3, [r4, #8]
}
 801386e:	b002      	add	sp, #8
 8013870:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8013872:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013876:	425b      	negs	r3, r3
 8013878:	105b      	asrs	r3, r3, #1
 801387a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801387c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8013880:	3302      	adds	r3, #2
 8013882:	109b      	asrs	r3, r3, #2
 8013884:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8013886:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801388a:	425b      	negs	r3, r3
 801388c:	105b      	asrs	r3, r3, #1
 801388e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8013890:	4b01      	ldr	r3, [pc, #4]	; (8013898 <SUBGRF_GetPacketStatus+0x74>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	6123      	str	r3, [r4, #16]
            break;
 8013896:	e7ea      	b.n	801386e <SUBGRF_GetPacketStatus+0x4a>
 8013898:	20003e8c 	.word	0x20003e8c

0801389c <SUBGRF_WriteRegister>:
{
 801389c:	b500      	push	{lr}
 801389e:	b083      	sub	sp, #12
 80138a0:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80138a4:	2301      	movs	r3, #1
 80138a6:	f10d 0207 	add.w	r2, sp, #7
 80138aa:	4601      	mov	r1, r0
 80138ac:	4802      	ldr	r0, [pc, #8]	; (80138b8 <SUBGRF_WriteRegister+0x1c>)
 80138ae:	f7f2 fa39 	bl	8005d24 <HAL_SUBGHZ_WriteRegisters>
}
 80138b2:	b003      	add	sp, #12
 80138b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80138b8:	200002d8 	.word	0x200002d8

080138bc <SUBGRF_SetRxBoosted>:
{
 80138bc:	b510      	push	{r4, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80138c2:	4b0c      	ldr	r3, [pc, #48]	; (80138f4 <SUBGRF_SetRxBoosted+0x38>)
 80138c4:	2205      	movs	r2, #5
 80138c6:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80138c8:	2197      	movs	r1, #151	; 0x97
 80138ca:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80138ce:	f7ff ffe5 	bl	801389c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80138d2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80138d6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80138da:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80138de:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80138e2:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80138e6:	2203      	movs	r2, #3
 80138e8:	a901      	add	r1, sp, #4
 80138ea:	2082      	movs	r0, #130	; 0x82
 80138ec:	f7ff fdc4 	bl	8013478 <SUBGRF_WriteCommand>
}
 80138f0:	b002      	add	sp, #8
 80138f2:	bd10      	pop	{r4, pc}
 80138f4:	20003e92 	.word	0x20003e92

080138f8 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80138f8:	b500      	push	{lr}
 80138fa:	b083      	sub	sp, #12
 80138fc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8013900:	2201      	movs	r2, #1
 8013902:	f10d 0107 	add.w	r1, sp, #7
 8013906:	20a0      	movs	r0, #160	; 0xa0
 8013908:	f7ff fdb6 	bl	8013478 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 801390c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013910:	2b3f      	cmp	r3, #63	; 0x3f
 8013912:	d90f      	bls.n	8013934 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8013914:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8013916:	2200      	movs	r2, #0
        while( mant > 31 )
 8013918:	e002      	b.n	8013920 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 801391a:	089b      	lsrs	r3, r3, #2
            exp++;
 801391c:	1c51      	adds	r1, r2, #1
 801391e:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8013920:	2b1f      	cmp	r3, #31
 8013922:	d8fa      	bhi.n	801391a <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8013924:	00d9      	lsls	r1, r3, #3
 8013926:	b2c9      	uxtb	r1, r1
 8013928:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801392a:	b2c9      	uxtb	r1, r1
 801392c:	f240 7006 	movw	r0, #1798	; 0x706
 8013930:	f7ff ffb4 	bl	801389c <SUBGRF_WriteRegister>
}
 8013934:	b003      	add	sp, #12
 8013936:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801393c <SUBGRF_SetPacketType>:
{
 801393c:	b500      	push	{lr}
 801393e:	b083      	sub	sp, #12
 8013940:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8013944:	b2c3      	uxtb	r3, r0
 8013946:	4a09      	ldr	r2, [pc, #36]	; (801396c <SUBGRF_SetPacketType+0x30>)
 8013948:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 801394a:	b143      	cbz	r3, 801395e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801394c:	2201      	movs	r2, #1
 801394e:	f10d 0107 	add.w	r1, sp, #7
 8013952:	208a      	movs	r0, #138	; 0x8a
 8013954:	f7ff fd90 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013958:	b003      	add	sp, #12
 801395a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801395e:	2100      	movs	r1, #0
 8013960:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8013964:	f7ff ff9a 	bl	801389c <SUBGRF_WriteRegister>
 8013968:	e7f0      	b.n	801394c <SUBGRF_SetPacketType+0x10>
 801396a:	bf00      	nop
 801396c:	20003e93 	.word	0x20003e93

08013970 <SUBGRF_SetModulationParams>:
{
 8013970:	b510      	push	{r4, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8013976:	4b3e      	ldr	r3, [pc, #248]	; (8013a70 <SUBGRF_SetModulationParams+0x100>)
 8013978:	e893 0003 	ldmia.w	r3, {r0, r1}
 801397c:	ab02      	add	r3, sp, #8
 801397e:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8013982:	7820      	ldrb	r0, [r4, #0]
 8013984:	4b3b      	ldr	r3, [pc, #236]	; (8013a74 <SUBGRF_SetModulationParams+0x104>)
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	4298      	cmp	r0, r3
 801398a:	d106      	bne.n	801399a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 801398c:	7823      	ldrb	r3, [r4, #0]
 801398e:	2b03      	cmp	r3, #3
 8013990:	d82c      	bhi.n	80139ec <SUBGRF_SetModulationParams+0x7c>
 8013992:	e8df f003 	tbb	[pc, r3]
 8013996:	4205      	.short	0x4205
 8013998:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801399a:	f7ff ffcf 	bl	801393c <SUBGRF_SetPacketType>
 801399e:	e7f5      	b.n	801398c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80139a0:	6862      	ldr	r2, [r4, #4]
 80139a2:	4b35      	ldr	r3, [pc, #212]	; (8013a78 <SUBGRF_SetModulationParams+0x108>)
 80139a4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80139a8:	0c1a      	lsrs	r2, r3, #16
 80139aa:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80139ae:	0a1a      	lsrs	r2, r3, #8
 80139b0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80139b4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80139b8:	7b23      	ldrb	r3, [r4, #12]
 80139ba:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80139be:	7b63      	ldrb	r3, [r4, #13]
 80139c0:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80139c4:	68a1      	ldr	r1, [r4, #8]
 80139c6:	4a2d      	ldr	r2, [pc, #180]	; (8013a7c <SUBGRF_SetModulationParams+0x10c>)
 80139c8:	2300      	movs	r3, #0
 80139ca:	0648      	lsls	r0, r1, #25
 80139cc:	09c9      	lsrs	r1, r1, #7
 80139ce:	f7ed f8ef 	bl	8000bb0 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80139d2:	0c03      	lsrs	r3, r0, #16
 80139d4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80139d8:	0a03      	lsrs	r3, r0, #8
 80139da:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80139de:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80139e2:	2208      	movs	r2, #8
 80139e4:	4669      	mov	r1, sp
 80139e6:	208b      	movs	r0, #139	; 0x8b
 80139e8:	f7ff fd46 	bl	8013478 <SUBGRF_WriteCommand>
}
 80139ec:	b002      	add	sp, #8
 80139ee:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80139f0:	6922      	ldr	r2, [r4, #16]
 80139f2:	4b21      	ldr	r3, [pc, #132]	; (8013a78 <SUBGRF_SetModulationParams+0x108>)
 80139f4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80139f8:	0c1a      	lsrs	r2, r3, #16
 80139fa:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80139fe:	0a1a      	lsrs	r2, r3, #8
 8013a00:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8013a04:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8013a08:	7d23      	ldrb	r3, [r4, #20]
 8013a0a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8013a0e:	2204      	movs	r2, #4
 8013a10:	4669      	mov	r1, sp
 8013a12:	208b      	movs	r0, #139	; 0x8b
 8013a14:	f7ff fd30 	bl	8013478 <SUBGRF_WriteCommand>
        break;
 8013a18:	e7e8      	b.n	80139ec <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8013a1a:	7e23      	ldrb	r3, [r4, #24]
 8013a1c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8013a20:	7e63      	ldrb	r3, [r4, #25]
 8013a22:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8013a26:	7ea3      	ldrb	r3, [r4, #26]
 8013a28:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8013a2c:	7ee3      	ldrb	r3, [r4, #27]
 8013a2e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8013a32:	2204      	movs	r2, #4
 8013a34:	4669      	mov	r1, sp
 8013a36:	208b      	movs	r0, #139	; 0x8b
 8013a38:	f7ff fd1e 	bl	8013478 <SUBGRF_WriteCommand>
        break;
 8013a3c:	e7d6      	b.n	80139ec <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8013a3e:	6862      	ldr	r2, [r4, #4]
 8013a40:	4b0d      	ldr	r3, [pc, #52]	; (8013a78 <SUBGRF_SetModulationParams+0x108>)
 8013a42:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8013a46:	0c1a      	lsrs	r2, r3, #16
 8013a48:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8013a4c:	0a1a      	lsrs	r2, r3, #8
 8013a4e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8013a52:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8013a56:	7b23      	ldrb	r3, [r4, #12]
 8013a58:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8013a5c:	7b63      	ldrb	r3, [r4, #13]
 8013a5e:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8013a62:	2205      	movs	r2, #5
 8013a64:	4669      	mov	r1, sp
 8013a66:	208b      	movs	r0, #139	; 0x8b
 8013a68:	f7ff fd06 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013a6c:	e7be      	b.n	80139ec <SUBGRF_SetModulationParams+0x7c>
 8013a6e:	bf00      	nop
 8013a70:	08014ed4 	.word	0x08014ed4
 8013a74:	20003e93 	.word	0x20003e93
 8013a78:	3d090000 	.word	0x3d090000
 8013a7c:	01e84800 	.word	0x01e84800

08013a80 <SUBGRF_ReadRegister>:
{
 8013a80:	b500      	push	{lr}
 8013a82:	b083      	sub	sp, #12
 8013a84:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8013a86:	2301      	movs	r3, #1
 8013a88:	f10d 0207 	add.w	r2, sp, #7
 8013a8c:	4803      	ldr	r0, [pc, #12]	; (8013a9c <SUBGRF_ReadRegister+0x1c>)
 8013a8e:	f7f2 f999 	bl	8005dc4 <HAL_SUBGHZ_ReadRegisters>
}
 8013a92:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013a96:	b003      	add	sp, #12
 8013a98:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a9c:	200002d8 	.word	0x200002d8

08013aa0 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8013aa0:	b510      	push	{r4, lr}
 8013aa2:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8013aa4:	f7ef f978 	bl	8002d98 <RBI_IsDCDC>
 8013aa8:	2801      	cmp	r0, #1
 8013aaa:	d000      	beq.n	8013aae <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8013aac:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8013aae:	f640 1023 	movw	r0, #2339	; 0x923
 8013ab2:	f7ff ffe5 	bl	8013a80 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8013ab6:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8013aba:	4321      	orrs	r1, r4
 8013abc:	f640 1023 	movw	r0, #2339	; 0x923
 8013ac0:	f7ff feec 	bl	801389c <SUBGRF_WriteRegister>
}
 8013ac4:	e7f2      	b.n	8013aac <Radio_SMPS_Set+0xc>
	...

08013ac8 <SUBGRF_Init>:
{
 8013ac8:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8013aca:	b108      	cbz	r0, 8013ad0 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8013acc:	4a16      	ldr	r2, [pc, #88]	; (8013b28 <SUBGRF_Init+0x60>)
 8013ace:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8013ad0:	f7ed ffb4 	bl	8001a3c <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8013ad4:	2002      	movs	r0, #2
 8013ad6:	f7ff ffe3 	bl	8013aa0 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8013ada:	2000      	movs	r0, #0
 8013adc:	4b13      	ldr	r3, [pc, #76]	; (8013b2c <SUBGRF_Init+0x64>)
 8013ade:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8013ae0:	f7ff fcf0 	bl	80134c4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8013ae4:	f7ef f954 	bl	8002d90 <RBI_IsTCXO>
 8013ae8:	2801      	cmp	r0, #1
 8013aea:	d00f      	beq.n	8013b0c <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8013aec:	2120      	movs	r1, #32
 8013aee:	f640 1011 	movw	r0, #2321	; 0x911
 8013af2:	f7ff fed3 	bl	801389c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8013af6:	2120      	movs	r1, #32
 8013af8:	f640 1012 	movw	r0, #2322	; 0x912
 8013afc:	f7ff fece 	bl	801389c <SUBGRF_WriteRegister>
    RBI_Init();
 8013b00:	f7ef f93a 	bl	8002d78 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8013b04:	4b0a      	ldr	r3, [pc, #40]	; (8013b30 <SUBGRF_Init+0x68>)
 8013b06:	2201      	movs	r2, #1
 8013b08:	701a      	strb	r2, [r3, #0]
}
 8013b0a:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8013b0c:	2140      	movs	r1, #64	; 0x40
 8013b0e:	f7ff fe21 	bl	8013754 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8013b12:	2100      	movs	r1, #0
 8013b14:	f640 1011 	movw	r0, #2321	; 0x911
 8013b18:	f7ff fec0 	bl	801389c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8013b1c:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8013b20:	f7ff fd7f 	bl	8013622 <SUBGRF_Calibrate>
 8013b24:	e7ec      	b.n	8013b00 <SUBGRF_Init+0x38>
 8013b26:	bf00      	nop
 8013b28:	20003e94 	.word	0x20003e94
 8013b2c:	20003e90 	.word	0x20003e90
 8013b30:	20003e92 	.word	0x20003e92

08013b34 <SUBGRF_SetSleep>:
{
 8013b34:	b510      	push	{r4, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8013b3a:	2000      	movs	r0, #0
 8013b3c:	f7ef f920 	bl	8002d80 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8013b40:	2002      	movs	r0, #2
 8013b42:	f7ff ffad 	bl	8013aa0 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8013b46:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8013b4a:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8013b4e:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8013b50:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8013b54:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8013b56:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	f10d 0107 	add.w	r1, sp, #7
 8013b60:	2084      	movs	r0, #132	; 0x84
 8013b62:	f7ff fc89 	bl	8013478 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8013b66:	4b02      	ldr	r3, [pc, #8]	; (8013b70 <SUBGRF_SetSleep+0x3c>)
 8013b68:	2200      	movs	r2, #0
 8013b6a:	701a      	strb	r2, [r3, #0]
}
 8013b6c:	b002      	add	sp, #8
 8013b6e:	bd10      	pop	{r4, pc}
 8013b70:	20003e92 	.word	0x20003e92

08013b74 <SUBGRF_SetWhiteningSeed>:
{
 8013b74:	b510      	push	{r4, lr}
 8013b76:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8013b78:	f7ff fe32 	bl	80137e0 <SUBGRF_GetPacketType>
 8013b7c:	b100      	cbz	r0, 8013b80 <SUBGRF_SetWhiteningSeed+0xc>
}
 8013b7e:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8013b80:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013b84:	f7ff ff7c 	bl	8013a80 <SUBGRF_ReadRegister>
 8013b88:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8013b8c:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8013b90:	4301      	orrs	r1, r0
 8013b92:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013b96:	f7ff fe81 	bl	801389c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8013b9a:	b2e1      	uxtb	r1, r4
 8013b9c:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8013ba0:	f7ff fe7c 	bl	801389c <SUBGRF_WriteRegister>
}
 8013ba4:	e7eb      	b.n	8013b7e <SUBGRF_SetWhiteningSeed+0xa>

08013ba6 <SUBGRF_SetTxParams>:
{
 8013ba6:	b570      	push	{r4, r5, r6, lr}
 8013ba8:	b082      	sub	sp, #8
 8013baa:	460c      	mov	r4, r1
 8013bac:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8013bae:	2801      	cmp	r0, #1
 8013bb0:	d035      	beq.n	8013c1e <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8013bb2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8013bb6:	f7ff ff63 	bl	8013a80 <SUBGRF_ReadRegister>
 8013bba:	f040 011e 	orr.w	r1, r0, #30
 8013bbe:	b2c9      	uxtb	r1, r1
 8013bc0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8013bc4:	f7ff fe6a 	bl	801389c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8013bc8:	2001      	movs	r0, #1
 8013bca:	f7ef f8e9 	bl	8002da0 <RBI_GetRFOMaxPowerConfig>
 8013bce:	4605      	mov	r5, r0
        if (power > max_power)
 8013bd0:	4284      	cmp	r4, r0
 8013bd2:	dd00      	ble.n	8013bd6 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8013bd4:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8013bd6:	2d14      	cmp	r5, #20
 8013bd8:	d054      	beq.n	8013c84 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8013bda:	2d11      	cmp	r5, #17
 8013bdc:	d05c      	beq.n	8013c98 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8013bde:	2d0e      	cmp	r5, #14
 8013be0:	d064      	beq.n	8013cac <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8013be2:	2301      	movs	r3, #1
 8013be4:	2200      	movs	r2, #0
 8013be6:	2107      	movs	r1, #7
 8013be8:	2004      	movs	r0, #4
 8013bea:	f7ff fd81 	bl	80136f0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8013bee:	1b64      	subs	r4, r4, r5
 8013bf0:	3416      	adds	r4, #22
 8013bf2:	b264      	sxtb	r4, r4
        if (power < -9)
 8013bf4:	f114 0f09 	cmn.w	r4, #9
 8013bf8:	da01      	bge.n	8013bfe <SUBGRF_SetTxParams+0x58>
            power = -9;
 8013bfa:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8013bfe:	2138      	movs	r1, #56	; 0x38
 8013c00:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8013c04:	f7ff fe4a 	bl	801389c <SUBGRF_WriteRegister>
    buf[0] = power;
 8013c08:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8013c0c:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8013c10:	2202      	movs	r2, #2
 8013c12:	a901      	add	r1, sp, #4
 8013c14:	208e      	movs	r0, #142	; 0x8e
 8013c16:	f7ff fc2f 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013c1a:	b002      	add	sp, #8
 8013c1c:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8013c1e:	2000      	movs	r0, #0
 8013c20:	f7ef f8be 	bl	8002da0 <RBI_GetRFOMaxPowerConfig>
 8013c24:	4605      	mov	r5, r0
        if (power >  max_power)
 8013c26:	4284      	cmp	r4, r0
 8013c28:	dd00      	ble.n	8013c2c <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8013c2a:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8013c2c:	2d0e      	cmp	r5, #14
 8013c2e:	d015      	beq.n	8013c5c <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8013c30:	2d0a      	cmp	r5, #10
 8013c32:	d01d      	beq.n	8013c70 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8013c34:	2301      	movs	r3, #1
 8013c36:	461a      	mov	r2, r3
 8013c38:	2100      	movs	r1, #0
 8013c3a:	2006      	movs	r0, #6
 8013c3c:	f7ff fd58 	bl	80136f0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8013c40:	1b64      	subs	r4, r4, r5
 8013c42:	340e      	adds	r4, #14
 8013c44:	b264      	sxtb	r4, r4
        if (power < -17)
 8013c46:	f114 0f11 	cmn.w	r4, #17
 8013c4a:	da01      	bge.n	8013c50 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8013c4c:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8013c50:	2118      	movs	r1, #24
 8013c52:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8013c56:	f7ff fe21 	bl	801389c <SUBGRF_WriteRegister>
 8013c5a:	e7d5      	b.n	8013c08 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	461a      	mov	r2, r3
 8013c60:	2100      	movs	r1, #0
 8013c62:	2004      	movs	r0, #4
 8013c64:	f7ff fd44 	bl	80136f0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8013c68:	1b64      	subs	r4, r4, r5
 8013c6a:	340e      	adds	r4, #14
 8013c6c:	b264      	sxtb	r4, r4
 8013c6e:	e7ea      	b.n	8013c46 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8013c70:	2301      	movs	r3, #1
 8013c72:	461a      	mov	r2, r3
 8013c74:	2100      	movs	r1, #0
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7ff fd3a 	bl	80136f0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8013c7c:	1b64      	subs	r4, r4, r5
 8013c7e:	340d      	adds	r4, #13
 8013c80:	b264      	sxtb	r4, r4
 8013c82:	e7e0      	b.n	8013c46 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8013c84:	2301      	movs	r3, #1
 8013c86:	2200      	movs	r2, #0
 8013c88:	2105      	movs	r1, #5
 8013c8a:	2003      	movs	r0, #3
 8013c8c:	f7ff fd30 	bl	80136f0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8013c90:	1b64      	subs	r4, r4, r5
 8013c92:	3416      	adds	r4, #22
 8013c94:	b264      	sxtb	r4, r4
 8013c96:	e7ad      	b.n	8013bf4 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8013c98:	2301      	movs	r3, #1
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	2103      	movs	r1, #3
 8013c9e:	2002      	movs	r0, #2
 8013ca0:	f7ff fd26 	bl	80136f0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8013ca4:	1b64      	subs	r4, r4, r5
 8013ca6:	3416      	adds	r4, #22
 8013ca8:	b264      	sxtb	r4, r4
 8013caa:	e7a3      	b.n	8013bf4 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8013cac:	2301      	movs	r3, #1
 8013cae:	2200      	movs	r2, #0
 8013cb0:	2102      	movs	r1, #2
 8013cb2:	4608      	mov	r0, r1
 8013cb4:	f7ff fd1c 	bl	80136f0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8013cb8:	1b64      	subs	r4, r4, r5
 8013cba:	340e      	adds	r4, #14
 8013cbc:	b264      	sxtb	r4, r4
 8013cbe:	e799      	b.n	8013bf4 <SUBGRF_SetTxParams+0x4e>

08013cc0 <SUBGRF_GetRxBufferStatus>:
{
 8013cc0:	b530      	push	{r4, r5, lr}
 8013cc2:	b083      	sub	sp, #12
 8013cc4:	4605      	mov	r5, r0
 8013cc6:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8013cc8:	2202      	movs	r2, #2
 8013cca:	a901      	add	r1, sp, #4
 8013ccc:	2013      	movs	r0, #19
 8013cce:	f7ff fbe3 	bl	8013498 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8013cd2:	f7ff fd85 	bl	80137e0 <SUBGRF_GetPacketType>
 8013cd6:	2801      	cmp	r0, #1
 8013cd8:	d007      	beq.n	8013cea <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8013cda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013cde:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8013ce0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013ce4:	7023      	strb	r3, [r4, #0]
}
 8013ce6:	b003      	add	sp, #12
 8013ce8:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8013cea:	4b05      	ldr	r3, [pc, #20]	; (8013d00 <SUBGRF_GetRxBufferStatus+0x40>)
 8013cec:	781b      	ldrb	r3, [r3, #0]
 8013cee:	b2db      	uxtb	r3, r3
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d1f2      	bne.n	8013cda <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8013cf4:	f240 7002 	movw	r0, #1794	; 0x702
 8013cf8:	f7ff fec2 	bl	8013a80 <SUBGRF_ReadRegister>
 8013cfc:	7028      	strb	r0, [r5, #0]
 8013cfe:	e7ef      	b.n	8013ce0 <SUBGRF_GetRxBufferStatus+0x20>
 8013d00:	20003e91 	.word	0x20003e91

08013d04 <SUBGRF_WriteRegisters>:
{
 8013d04:	b510      	push	{r4, lr}
 8013d06:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d08:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013d0c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8013d0e:	460a      	mov	r2, r1
 8013d10:	4601      	mov	r1, r0
 8013d12:	4803      	ldr	r0, [pc, #12]	; (8013d20 <SUBGRF_WriteRegisters+0x1c>)
 8013d14:	f7f2 f806 	bl	8005d24 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d18:	f384 8810 	msr	PRIMASK, r4
}
 8013d1c:	bd10      	pop	{r4, pc}
 8013d1e:	bf00      	nop
 8013d20:	200002d8 	.word	0x200002d8

08013d24 <SUBGRF_SetSyncWord>:
{
 8013d24:	b508      	push	{r3, lr}
 8013d26:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8013d28:	2208      	movs	r2, #8
 8013d2a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8013d2e:	f7ff ffe9 	bl	8013d04 <SUBGRF_WriteRegisters>
}
 8013d32:	2000      	movs	r0, #0
 8013d34:	bd08      	pop	{r3, pc}

08013d36 <SUBGRF_SetCrcSeed>:
{
 8013d36:	b500      	push	{lr}
 8013d38:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8013d3a:	0a03      	lsrs	r3, r0, #8
 8013d3c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8013d40:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8013d44:	f7ff fd4c 	bl	80137e0 <SUBGRF_GetPacketType>
 8013d48:	b110      	cbz	r0, 8013d50 <SUBGRF_SetCrcSeed+0x1a>
}
 8013d4a:	b003      	add	sp, #12
 8013d4c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8013d50:	2202      	movs	r2, #2
 8013d52:	a901      	add	r1, sp, #4
 8013d54:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8013d58:	f7ff ffd4 	bl	8013d04 <SUBGRF_WriteRegisters>
}
 8013d5c:	e7f5      	b.n	8013d4a <SUBGRF_SetCrcSeed+0x14>

08013d5e <SUBGRF_SetCrcPolynomial>:
{
 8013d5e:	b500      	push	{lr}
 8013d60:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8013d62:	0a03      	lsrs	r3, r0, #8
 8013d64:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8013d68:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8013d6c:	f7ff fd38 	bl	80137e0 <SUBGRF_GetPacketType>
 8013d70:	b110      	cbz	r0, 8013d78 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8013d72:	b003      	add	sp, #12
 8013d74:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8013d78:	2202      	movs	r2, #2
 8013d7a:	a901      	add	r1, sp, #4
 8013d7c:	f240 60be 	movw	r0, #1726	; 0x6be
 8013d80:	f7ff ffc0 	bl	8013d04 <SUBGRF_WriteRegisters>
}
 8013d84:	e7f5      	b.n	8013d72 <SUBGRF_SetCrcPolynomial+0x14>
	...

08013d88 <SUBGRF_SetPacketParams>:
{
 8013d88:	b510      	push	{r4, lr}
 8013d8a:	b084      	sub	sp, #16
 8013d8c:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8013d8e:	ab01      	add	r3, sp, #4
 8013d90:	4a33      	ldr	r2, [pc, #204]	; (8013e60 <SUBGRF_SetPacketParams+0xd8>)
 8013d92:	ca07      	ldmia	r2, {r0, r1, r2}
 8013d94:	c303      	stmia	r3!, {r0, r1}
 8013d96:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8013d98:	7820      	ldrb	r0, [r4, #0]
 8013d9a:	4b32      	ldr	r3, [pc, #200]	; (8013e64 <SUBGRF_SetPacketParams+0xdc>)
 8013d9c:	781b      	ldrb	r3, [r3, #0]
 8013d9e:	4298      	cmp	r0, r3
 8013da0:	d106      	bne.n	8013db0 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8013da2:	7823      	ldrb	r3, [r4, #0]
 8013da4:	2b03      	cmp	r3, #3
 8013da6:	d82a      	bhi.n	8013dfe <SUBGRF_SetPacketParams+0x76>
 8013da8:	e8df f003 	tbb	[pc, r3]
 8013dac:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8013db0:	f7ff fdc4 	bl	801393c <SUBGRF_SetPacketType>
 8013db4:	e7f5      	b.n	8013da2 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8013db6:	7a63      	ldrb	r3, [r4, #9]
 8013db8:	2bf1      	cmp	r3, #241	; 0xf1
 8013dba:	d022      	beq.n	8013e02 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8013dbc:	2bf2      	cmp	r3, #242	; 0xf2
 8013dbe:	d02a      	beq.n	8013e16 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8013dc0:	8862      	ldrh	r2, [r4, #2]
 8013dc2:	0a11      	lsrs	r1, r2, #8
 8013dc4:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8013dc8:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8013dcc:	7922      	ldrb	r2, [r4, #4]
 8013dce:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8013dd2:	7962      	ldrb	r2, [r4, #5]
 8013dd4:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8013dd8:	79a2      	ldrb	r2, [r4, #6]
 8013dda:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8013dde:	79e2      	ldrb	r2, [r4, #7]
 8013de0:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8013de4:	7a22      	ldrb	r2, [r4, #8]
 8013de6:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8013dea:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8013dee:	7aa3      	ldrb	r3, [r4, #10]
 8013df0:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8013df4:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8013df6:	a901      	add	r1, sp, #4
 8013df8:	208c      	movs	r0, #140	; 0x8c
 8013dfa:	f7ff fb3d 	bl	8013478 <SUBGRF_WriteCommand>
}
 8013dfe:	b004      	add	sp, #16
 8013e00:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8013e02:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013e06:	f7ff ff96 	bl	8013d36 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8013e0a:	f248 0005 	movw	r0, #32773	; 0x8005
 8013e0e:	f7ff ffa6 	bl	8013d5e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8013e12:	2302      	movs	r3, #2
 8013e14:	e7d4      	b.n	8013dc0 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8013e16:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8013e1a:	f7ff ff8c 	bl	8013d36 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8013e1e:	f241 0021 	movw	r0, #4129	; 0x1021
 8013e22:	f7ff ff9c 	bl	8013d5e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8013e26:	2306      	movs	r3, #6
 8013e28:	e7ca      	b.n	8013dc0 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8013e2a:	7b23      	ldrb	r3, [r4, #12]
 8013e2c:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8013e30:	2201      	movs	r2, #1
        break;
 8013e32:	e7e0      	b.n	8013df6 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8013e34:	89e3      	ldrh	r3, [r4, #14]
 8013e36:	0a1a      	lsrs	r2, r3, #8
 8013e38:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8013e3c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8013e40:	7c23      	ldrb	r3, [r4, #16]
 8013e42:	4a09      	ldr	r2, [pc, #36]	; (8013e68 <SUBGRF_SetPacketParams+0xe0>)
 8013e44:	7013      	strb	r3, [r2, #0]
 8013e46:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8013e4a:	7c63      	ldrb	r3, [r4, #17]
 8013e4c:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8013e50:	7ca3      	ldrb	r3, [r4, #18]
 8013e52:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8013e56:	7ce3      	ldrb	r3, [r4, #19]
 8013e58:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8013e5c:	2206      	movs	r2, #6
        break;
 8013e5e:	e7ca      	b.n	8013df6 <SUBGRF_SetPacketParams+0x6e>
 8013e60:	08014edc 	.word	0x08014edc
 8013e64:	20003e93 	.word	0x20003e93
 8013e68:	20003e91 	.word	0x20003e91

08013e6c <SUBGRF_ReadRegisters>:
{
 8013e6c:	b510      	push	{r4, lr}
 8013e6e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e70:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013e74:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8013e76:	460a      	mov	r2, r1
 8013e78:	4601      	mov	r1, r0
 8013e7a:	4803      	ldr	r0, [pc, #12]	; (8013e88 <SUBGRF_ReadRegisters+0x1c>)
 8013e7c:	f7f1 ffa2 	bl	8005dc4 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e80:	f384 8810 	msr	PRIMASK, r4
}
 8013e84:	bd10      	pop	{r4, pc}
 8013e86:	bf00      	nop
 8013e88:	200002d8 	.word	0x200002d8

08013e8c <SUBGRF_GetRandom>:
{
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	b082      	sub	sp, #8
    uint32_t number = 0;
 8013e90:	2600      	movs	r6, #0
 8013e92:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8013e94:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013e98:	f7ff fdf2 	bl	8013a80 <SUBGRF_ReadRegister>
 8013e9c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8013e9e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8013ea2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013ea6:	f7ff fcf9 	bl	801389c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8013eaa:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013eae:	f7ff fde7 	bl	8013a80 <SUBGRF_ReadRegister>
 8013eb2:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8013eb4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8013eb8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013ebc:	f7ff fcee 	bl	801389c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8013ec0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013ec4:	f7ff fb32 	bl	801352c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8013ec8:	2204      	movs	r2, #4
 8013eca:	eb0d 0102 	add.w	r1, sp, r2
 8013ece:	f640 0019 	movw	r0, #2073	; 0x819
 8013ed2:	f7ff ffcb 	bl	8013e6c <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8013ed6:	4630      	mov	r0, r6
 8013ed8:	f7ff faf4 	bl	80134c4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8013edc:	4629      	mov	r1, r5
 8013ede:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013ee2:	f7ff fcdb 	bl	801389c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8013ee6:	4621      	mov	r1, r4
 8013ee8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013eec:	f7ff fcd6 	bl	801389c <SUBGRF_WriteRegister>
}
 8013ef0:	9801      	ldr	r0, [sp, #4]
 8013ef2:	b002      	add	sp, #8
 8013ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013ef8 <SUBGRF_WriteBuffer>:
{
 8013ef8:	b510      	push	{r4, lr}
 8013efa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013efc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013f00:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8013f02:	460a      	mov	r2, r1
 8013f04:	4601      	mov	r1, r0
 8013f06:	4803      	ldr	r0, [pc, #12]	; (8013f14 <SUBGRF_WriteBuffer+0x1c>)
 8013f08:	f7f2 f8b2 	bl	8006070 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f0c:	f384 8810 	msr	PRIMASK, r4
}
 8013f10:	bd10      	pop	{r4, pc}
 8013f12:	bf00      	nop
 8013f14:	200002d8 	.word	0x200002d8

08013f18 <SUBGRF_SetPayload>:
{
 8013f18:	b508      	push	{r3, lr}
 8013f1a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8013f1c:	4601      	mov	r1, r0
 8013f1e:	2000      	movs	r0, #0
 8013f20:	f7ff ffea 	bl	8013ef8 <SUBGRF_WriteBuffer>
}
 8013f24:	bd08      	pop	{r3, pc}

08013f26 <SUBGRF_SendPayload>:
{
 8013f26:	b510      	push	{r4, lr}
 8013f28:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8013f2a:	f7ff fff5 	bl	8013f18 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8013f2e:	4620      	mov	r0, r4
 8013f30:	f7ff fae2 	bl	80134f8 <SUBGRF_SetTx>
}
 8013f34:	bd10      	pop	{r4, pc}
	...

08013f38 <SUBGRF_ReadBuffer>:
{
 8013f38:	b510      	push	{r4, lr}
 8013f3a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f3c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013f40:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8013f42:	460a      	mov	r2, r1
 8013f44:	4601      	mov	r1, r0
 8013f46:	4803      	ldr	r0, [pc, #12]	; (8013f54 <SUBGRF_ReadBuffer+0x1c>)
 8013f48:	f7f2 f8dc 	bl	8006104 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f4c:	f384 8810 	msr	PRIMASK, r4
}
 8013f50:	bd10      	pop	{r4, pc}
 8013f52:	bf00      	nop
 8013f54:	200002d8 	.word	0x200002d8

08013f58 <SUBGRF_GetPayload>:
{
 8013f58:	b570      	push	{r4, r5, r6, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	4606      	mov	r6, r0
 8013f5e:	460c      	mov	r4, r1
 8013f60:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8013f62:	2300      	movs	r3, #0
 8013f64:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8013f68:	f10d 0107 	add.w	r1, sp, #7
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f7ff fea7 	bl	8013cc0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8013f72:	7822      	ldrb	r2, [r4, #0]
 8013f74:	42aa      	cmp	r2, r5
 8013f76:	d902      	bls.n	8013f7e <SUBGRF_GetPayload+0x26>
        return 1;
 8013f78:	2001      	movs	r0, #1
}
 8013f7a:	b002      	add	sp, #8
 8013f7c:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8013f7e:	4631      	mov	r1, r6
 8013f80:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013f84:	f7ff ffd8 	bl	8013f38 <SUBGRF_ReadBuffer>
    return 0;
 8013f88:	2000      	movs	r0, #0
 8013f8a:	e7f6      	b.n	8013f7a <SUBGRF_GetPayload+0x22>

08013f8c <SUBGRF_SetSwitch>:
{
 8013f8c:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8013f8e:	2901      	cmp	r1, #1
 8013f90:	d003      	beq.n	8013f9a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8013f92:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8013f94:	f7ee fef4 	bl	8002d80 <RBI_ConfigRFSwitch>
}
 8013f98:	bd10      	pop	{r4, pc}
 8013f9a:	4604      	mov	r4, r0
 8013f9c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8013f9e:	2c01      	cmp	r4, #1
 8013fa0:	d003      	beq.n	8013faa <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8013fa2:	2c02      	cmp	r4, #2
 8013fa4:	d1f6      	bne.n	8013f94 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8013fa6:	2003      	movs	r0, #3
 8013fa8:	e7f4      	b.n	8013f94 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8013faa:	2004      	movs	r0, #4
 8013fac:	f7ff fd78 	bl	8013aa0 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8013fb0:	2002      	movs	r0, #2
 8013fb2:	e7f6      	b.n	8013fa2 <SUBGRF_SetSwitch+0x16>

08013fb4 <SUBGRF_SetRfTxPower>:
{
 8013fb4:	b538      	push	{r3, r4, r5, lr}
 8013fb6:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8013fb8:	f7ee fee6 	bl	8002d88 <RBI_GetTxConfig>
    switch (TxConfig)
 8013fbc:	b148      	cbz	r0, 8013fd2 <SUBGRF_SetRfTxPower+0x1e>
 8013fbe:	2802      	cmp	r0, #2
 8013fc0:	d10d      	bne.n	8013fde <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8013fc2:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8013fc4:	2202      	movs	r2, #2
 8013fc6:	4621      	mov	r1, r4
 8013fc8:	4628      	mov	r0, r5
 8013fca:	f7ff fdec 	bl	8013ba6 <SUBGRF_SetTxParams>
}
 8013fce:	4628      	mov	r0, r5
 8013fd0:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8013fd2:	2c0f      	cmp	r4, #15
 8013fd4:	dc01      	bgt.n	8013fda <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8013fd6:	2501      	movs	r5, #1
 8013fd8:	e7f4      	b.n	8013fc4 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8013fda:	2502      	movs	r5, #2
 8013fdc:	e7f2      	b.n	8013fc4 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8013fde:	2501      	movs	r5, #1
 8013fe0:	e7f0      	b.n	8013fc4 <SUBGRF_SetRfTxPower+0x10>

08013fe2 <SUBGRF_GetRadioWakeUpTime>:
}
 8013fe2:	2001      	movs	r0, #1
 8013fe4:	4770      	bx	lr
	...

08013fe8 <HAL_SUBGHZ_TxCpltCallback>:
{
 8013fe8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8013fea:	4b02      	ldr	r3, [pc, #8]	; (8013ff4 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2001      	movs	r0, #1
 8013ff0:	4798      	blx	r3
}
 8013ff2:	bd08      	pop	{r3, pc}
 8013ff4:	20003e94 	.word	0x20003e94

08013ff8 <HAL_SUBGHZ_RxCpltCallback>:
{
 8013ff8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8013ffa:	4b02      	ldr	r3, [pc, #8]	; (8014004 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	2002      	movs	r0, #2
 8014000:	4798      	blx	r3
}
 8014002:	bd08      	pop	{r3, pc}
 8014004:	20003e94 	.word	0x20003e94

08014008 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8014008:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801400a:	4b02      	ldr	r3, [pc, #8]	; (8014014 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	2040      	movs	r0, #64	; 0x40
 8014010:	4798      	blx	r3
}
 8014012:	bd08      	pop	{r3, pc}
 8014014:	20003e94 	.word	0x20003e94

08014018 <HAL_SUBGHZ_CADStatusCallback>:
{
 8014018:	b508      	push	{r3, lr}
    switch (cadstatus)
 801401a:	b111      	cbz	r1, 8014022 <HAL_SUBGHZ_CADStatusCallback+0xa>
 801401c:	2901      	cmp	r1, #1
 801401e:	d005      	beq.n	801402c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8014020:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8014022:	4b05      	ldr	r3, [pc, #20]	; (8014038 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	2080      	movs	r0, #128	; 0x80
 8014028:	4798      	blx	r3
            break;
 801402a:	e7f9      	b.n	8014020 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801402c:	4b02      	ldr	r3, [pc, #8]	; (8014038 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014034:	4798      	blx	r3
}
 8014036:	e7f3      	b.n	8014020 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8014038:	20003e94 	.word	0x20003e94

0801403c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 801403c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801403e:	4b03      	ldr	r3, [pc, #12]	; (801404c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014046:	4798      	blx	r3
}
 8014048:	bd08      	pop	{r3, pc}
 801404a:	bf00      	nop
 801404c:	20003e94 	.word	0x20003e94

08014050 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8014050:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8014052:	4b02      	ldr	r3, [pc, #8]	; (801405c <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2020      	movs	r0, #32
 8014058:	4798      	blx	r3
}
 801405a:	bd08      	pop	{r3, pc}
 801405c:	20003e94 	.word	0x20003e94

08014060 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8014060:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8014062:	4b02      	ldr	r3, [pc, #8]	; (801406c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	2004      	movs	r0, #4
 8014068:	4798      	blx	r3
}
 801406a:	bd08      	pop	{r3, pc}
 801406c:	20003e94 	.word	0x20003e94

08014070 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8014070:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8014072:	4b02      	ldr	r3, [pc, #8]	; (801407c <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	2008      	movs	r0, #8
 8014078:	4798      	blx	r3
}
 801407a:	bd08      	pop	{r3, pc}
 801407c:	20003e94 	.word	0x20003e94

08014080 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8014080:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8014082:	4b02      	ldr	r3, [pc, #8]	; (801408c <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2010      	movs	r0, #16
 8014088:	4798      	blx	r3
}
 801408a:	bd08      	pop	{r3, pc}
 801408c:	20003e94 	.word	0x20003e94

08014090 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8014090:	4601      	mov	r1, r0
 8014092:	b188      	cbz	r0, 80140b8 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8014094:	2300      	movs	r3, #0
 8014096:	2b15      	cmp	r3, #21
 8014098:	d80d      	bhi.n	80140b6 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801409a:	4618      	mov	r0, r3
 801409c:	4a07      	ldr	r2, [pc, #28]	; (80140bc <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801409e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80140a2:	428a      	cmp	r2, r1
 80140a4:	d802      	bhi.n	80140ac <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80140a6:	3301      	adds	r3, #1
 80140a8:	b2db      	uxtb	r3, r3
 80140aa:	e7f4      	b.n	8014096 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 80140ac:	4b03      	ldr	r3, [pc, #12]	; (80140bc <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80140ae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80140b2:	7900      	ldrb	r0, [r0, #4]
 80140b4:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80140b6:	e7fe      	b.n	80140b6 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 80140b8:	201f      	movs	r0, #31
}
 80140ba:	4770      	bx	lr
 80140bc:	08015d88 	.word	0x08015d88

080140c0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80140c0:	b570      	push	{r4, r5, r6, lr}
 80140c2:	b082      	sub	sp, #8
 80140c4:	4606      	mov	r6, r0
 80140c6:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80140c8:	4b1d      	ldr	r3, [pc, #116]	; (8014140 <SUBGRF_GetCFO+0x80>)
 80140ca:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80140cc:	f640 0007 	movw	r0, #2055	; 0x807
 80140d0:	f7ff fcd6 	bl	8013a80 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80140d4:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80140d8:	3308      	adds	r3, #8
 80140da:	446b      	add	r3, sp
 80140dc:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80140e0:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80140e4:	3b01      	subs	r3, #1
 80140e6:	fa05 f303 	lsl.w	r3, r5, r3
 80140ea:	4d16      	ldr	r5, [pc, #88]	; (8014144 <SUBGRF_GetCFO+0x84>)
 80140ec:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 80140f0:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80140f4:	2a07      	cmp	r2, #7
 80140f6:	d921      	bls.n	801413c <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 80140f8:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80140fa:	fb00 f202 	mul.w	r2, r0, r2
 80140fe:	2a03      	cmp	r2, #3
 8014100:	d800      	bhi.n	8014104 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8014102:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8014104:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8014108:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801410c:	f7ff fcb8 	bl	8013a80 <SUBGRF_ReadRegister>
 8014110:	0200      	lsls	r0, r0, #8
 8014112:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8014116:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801411a:	f7ff fcb1 	bl	8013a80 <SUBGRF_ReadRegister>
 801411e:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8014120:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8014124:	d003      	beq.n	801412e <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8014126:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 801412a:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801412e:	096d      	lsrs	r5, r5, #5
 8014130:	fb05 f000 	mul.w	r0, r5, r0
 8014134:	11c0      	asrs	r0, r0, #7
 8014136:	6020      	str	r0, [r4, #0]
}
 8014138:	b002      	add	sp, #8
 801413a:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 801413c:	2002      	movs	r0, #2
 801413e:	e7dc      	b.n	80140fa <SUBGRF_GetCFO+0x3a>
 8014140:	0c0a0804 	.word	0x0c0a0804
 8014144:	01e84800 	.word	0x01e84800

08014148 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8014148:	f04f 30ff 	mov.w	r0, #4294967295
 801414c:	4770      	bx	lr

0801414e <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 801414e:	f04f 30ff 	mov.w	r0, #4294967295
 8014152:	4770      	bx	lr

08014154 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8014154:	4770      	bx	lr

08014156 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8014156:	2000      	movs	r0, #0
 8014158:	4770      	bx	lr

0801415a <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 801415a:	2000      	movs	r0, #0
 801415c:	4770      	bx	lr

0801415e <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801415e:	4770      	bx	lr

08014160 <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 8014160:	f04f 30ff 	mov.w	r0, #4294967295
 8014164:	4770      	bx	lr

08014166 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8014166:	f04f 30ff 	mov.w	r0, #4294967295
 801416a:	4770      	bx	lr

0801416c <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801416c:	4770      	bx	lr

0801416e <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801416e:	4770      	bx	lr

08014170 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8014170:	4770      	bx	lr
	...

08014174 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8014174:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014176:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801417a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801417c:	4b1e      	ldr	r3, [pc, #120]	; (80141f8 <TRACE_AllocateBufer+0x84>)
 801417e:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8014182:	8a1a      	ldrh	r2, [r3, #16]
 8014184:	4594      	cmp	ip, r2
 8014186:	d011      	beq.n	80141ac <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014188:	4594      	cmp	ip, r2
 801418a:	d921      	bls.n	80141d0 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801418c:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8014190:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8014192:	4283      	cmp	r3, r0
 8014194:	d81f      	bhi.n	80141d6 <TRACE_AllocateBufer+0x62>
 8014196:	4282      	cmp	r2, r0
 8014198:	d91d      	bls.n	80141d6 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801419a:	4b17      	ldr	r3, [pc, #92]	; (80141f8 <TRACE_AllocateBufer+0x84>)
 801419c:	2401      	movs	r4, #1
 801419e:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80141a0:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80141a4:	2400      	movs	r4, #0
 80141a6:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80141a8:	4613      	mov	r3, r2
 80141aa:	e014      	b.n	80141d6 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80141ac:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80141b0:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80141b2:	4298      	cmp	r0, r3
 80141b4:	d30f      	bcc.n	80141d6 <TRACE_AllocateBufer+0x62>
 80141b6:	4282      	cmp	r2, r0
 80141b8:	d90d      	bls.n	80141d6 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80141ba:	4b0f      	ldr	r3, [pc, #60]	; (80141f8 <TRACE_AllocateBufer+0x84>)
 80141bc:	2401      	movs	r4, #1
 80141be:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80141c0:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80141c4:	f04f 0c00 	mov.w	ip, #0
 80141c8:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80141cc:	4613      	mov	r3, r2
 80141ce:	e002      	b.n	80141d6 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80141d0:	eba2 030c 	sub.w	r3, r2, ip
 80141d4:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80141d6:	4283      	cmp	r3, r0
 80141d8:	d90a      	bls.n	80141f0 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80141da:	4a07      	ldr	r2, [pc, #28]	; (80141f8 <TRACE_AllocateBufer+0x84>)
 80141dc:	8a53      	ldrh	r3, [r2, #18]
 80141de:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80141e0:	4403      	add	r3, r0
 80141e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80141e6:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80141e8:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80141ea:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80141ee:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 80141f0:	f04f 30ff 	mov.w	r0, #4294967295
 80141f4:	e7f9      	b.n	80141ea <TRACE_AllocateBufer+0x76>
 80141f6:	bf00      	nop
 80141f8:	20004298 	.word	0x20004298

080141fc <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80141fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014200:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8014202:	4a03      	ldr	r2, [pc, #12]	; (8014210 <TRACE_Lock+0x14>)
 8014204:	8ad3      	ldrh	r3, [r2, #22]
 8014206:	3301      	adds	r3, #1
 8014208:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801420a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801420e:	4770      	bx	lr
 8014210:	20004298 	.word	0x20004298

08014214 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014214:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014218:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 801421a:	4a03      	ldr	r2, [pc, #12]	; (8014228 <TRACE_UnLock+0x14>)
 801421c:	8ad3      	ldrh	r3, [r2, #22]
 801421e:	3b01      	subs	r3, #1
 8014220:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014222:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8014226:	4770      	bx	lr
 8014228:	20004298 	.word	0x20004298

0801422c <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801422c:	4b02      	ldr	r3, [pc, #8]	; (8014238 <TRACE_IsLocked+0xc>)
 801422e:	8ad8      	ldrh	r0, [r3, #22]
}
 8014230:	3800      	subs	r0, #0
 8014232:	bf18      	it	ne
 8014234:	2001      	movne	r0, #1
 8014236:	4770      	bx	lr
 8014238:	20004298 	.word	0x20004298

0801423c <UTIL_ADV_TRACE_Init>:
{
 801423c:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801423e:	2218      	movs	r2, #24
 8014240:	2100      	movs	r1, #0
 8014242:	4807      	ldr	r0, [pc, #28]	; (8014260 <UTIL_ADV_TRACE_Init+0x24>)
 8014244:	f000 f98f 	bl	8014566 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8014248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801424c:	2100      	movs	r1, #0
 801424e:	4805      	ldr	r0, [pc, #20]	; (8014264 <UTIL_ADV_TRACE_Init+0x28>)
 8014250:	f000 f989 	bl	8014566 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8014254:	4b04      	ldr	r3, [pc, #16]	; (8014268 <UTIL_ADV_TRACE_Init+0x2c>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	4804      	ldr	r0, [pc, #16]	; (801426c <UTIL_ADV_TRACE_Init+0x30>)
 801425a:	4798      	blx	r3
}
 801425c:	bd08      	pop	{r3, pc}
 801425e:	bf00      	nop
 8014260:	20004298 	.word	0x20004298
 8014264:	20003e98 	.word	0x20003e98
 8014268:	08014fa8 	.word	0x08014fa8
 801426c:	080143f1 	.word	0x080143f1

08014270 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8014270:	4b01      	ldr	r3, [pc, #4]	; (8014278 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8014272:	6058      	str	r0, [r3, #4]
}
 8014274:	4770      	bx	lr
 8014276:	bf00      	nop
 8014278:	20004298 	.word	0x20004298

0801427c <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801427c:	4b01      	ldr	r3, [pc, #4]	; (8014284 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801427e:	7218      	strb	r0, [r3, #8]
}
 8014280:	4770      	bx	lr
 8014282:	bf00      	nop
 8014284:	20004298 	.word	0x20004298

08014288 <TRACE_Send>:
{
 8014288:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801428a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801428e:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8014290:	f7ff ffcc 	bl	801422c <TRACE_IsLocked>
 8014294:	b118      	cbz	r0, 801429e <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014296:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801429a:	2000      	movs	r0, #0
}
 801429c:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 801429e:	f7ff ffad 	bl	80141fc <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80142a2:	4b1d      	ldr	r3, [pc, #116]	; (8014318 <TRACE_Send+0x90>)
 80142a4:	8a1a      	ldrh	r2, [r3, #16]
 80142a6:	8a5b      	ldrh	r3, [r3, #18]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d02e      	beq.n	801430a <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80142ac:	491a      	ldr	r1, [pc, #104]	; (8014318 <TRACE_Send+0x90>)
 80142ae:	7889      	ldrb	r1, [r1, #2]
 80142b0:	2901      	cmp	r1, #1
 80142b2:	d017      	beq.n	80142e4 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80142b4:	4a18      	ldr	r2, [pc, #96]	; (8014318 <TRACE_Send+0x90>)
 80142b6:	7892      	ldrb	r2, [r2, #2]
 80142b8:	b932      	cbnz	r2, 80142c8 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80142ba:	4a17      	ldr	r2, [pc, #92]	; (8014318 <TRACE_Send+0x90>)
 80142bc:	8a12      	ldrh	r2, [r2, #16]
 80142be:	4293      	cmp	r3, r2
 80142c0:	d91e      	bls.n	8014300 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80142c2:	1a9b      	subs	r3, r3, r2
 80142c4:	4a14      	ldr	r2, [pc, #80]	; (8014318 <TRACE_Send+0x90>)
 80142c6:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80142c8:	4e13      	ldr	r6, [pc, #76]	; (8014318 <TRACE_Send+0x90>)
 80142ca:	8a33      	ldrh	r3, [r6, #16]
 80142cc:	4d13      	ldr	r5, [pc, #76]	; (801431c <TRACE_Send+0x94>)
 80142ce:	441d      	add	r5, r3
 80142d0:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80142d4:	f7ed fc9c 	bl	8001c10 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80142d8:	4b11      	ldr	r3, [pc, #68]	; (8014320 <TRACE_Send+0x98>)
 80142da:	68db      	ldr	r3, [r3, #12]
 80142dc:	8ab1      	ldrh	r1, [r6, #20]
 80142de:	4628      	mov	r0, r5
 80142e0:	4798      	blx	r3
 80142e2:	e7db      	b.n	801429c <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80142e4:	480c      	ldr	r0, [pc, #48]	; (8014318 <TRACE_Send+0x90>)
 80142e6:	8801      	ldrh	r1, [r0, #0]
 80142e8:	1a8a      	subs	r2, r1, r2
 80142ea:	b292      	uxth	r2, r2
 80142ec:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80142ee:	2102      	movs	r1, #2
 80142f0:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80142f2:	2100      	movs	r1, #0
 80142f4:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80142f6:	2a00      	cmp	r2, #0
 80142f8:	d1dc      	bne.n	80142b4 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80142fa:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80142fc:	8201      	strh	r1, [r0, #16]
 80142fe:	e7d9      	b.n	80142b4 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014300:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8014304:	4a04      	ldr	r2, [pc, #16]	; (8014318 <TRACE_Send+0x90>)
 8014306:	8293      	strh	r3, [r2, #20]
 8014308:	e7de      	b.n	80142c8 <TRACE_Send+0x40>
      TRACE_UnLock();
 801430a:	f7ff ff83 	bl	8014214 <TRACE_UnLock>
 801430e:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8014312:	2000      	movs	r0, #0
}
 8014314:	e7c2      	b.n	801429c <TRACE_Send+0x14>
 8014316:	bf00      	nop
 8014318:	20004298 	.word	0x20004298
 801431c:	20003e98 	.word	0x20003e98
 8014320:	08014fa8 	.word	0x08014fa8

08014324 <UTIL_ADV_TRACE_COND_FSend>:
{
 8014324:	b408      	push	{r3}
 8014326:	b530      	push	{r4, r5, lr}
 8014328:	b086      	sub	sp, #24
 801432a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 801432c:	2300      	movs	r3, #0
 801432e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8014332:	4b2c      	ldr	r3, [pc, #176]	; (80143e4 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8014334:	7a1b      	ldrb	r3, [r3, #8]
 8014336:	4283      	cmp	r3, r0
 8014338:	d34d      	bcc.n	80143d6 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801433a:	4b2a      	ldr	r3, [pc, #168]	; (80143e4 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	ea31 0303 	bics.w	r3, r1, r3
 8014342:	d14b      	bne.n	80143dc <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8014344:	4b27      	ldr	r3, [pc, #156]	; (80143e4 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8014346:	685b      	ldr	r3, [r3, #4]
 8014348:	b123      	cbz	r3, 8014354 <UTIL_ADV_TRACE_COND_FSend+0x30>
 801434a:	b11a      	cbz	r2, 8014354 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801434c:	f10d 0102 	add.w	r1, sp, #2
 8014350:	a801      	add	r0, sp, #4
 8014352:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8014354:	ab0a      	add	r3, sp, #40	; 0x28
 8014356:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8014358:	4622      	mov	r2, r4
 801435a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801435e:	4822      	ldr	r0, [pc, #136]	; (80143e8 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8014360:	f000 fbf4 	bl	8014b4c <tiny_vsnprintf_like>
 8014364:	b285      	uxth	r5, r0
  TRACE_Lock();
 8014366:	f7ff ff49 	bl	80141fc <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801436a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801436e:	4428      	add	r0, r5
 8014370:	4669      	mov	r1, sp
 8014372:	b280      	uxth	r0, r0
 8014374:	f7ff fefe 	bl	8014174 <TRACE_AllocateBufer>
 8014378:	f1b0 3fff 	cmp.w	r0, #4294967295
 801437c:	d026      	beq.n	80143cc <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 801437e:	2300      	movs	r3, #0
 8014380:	e00d      	b.n	801439e <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8014382:	f8bd 2000 	ldrh.w	r2, [sp]
 8014386:	f103 0118 	add.w	r1, r3, #24
 801438a:	4469      	add	r1, sp
 801438c:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8014390:	4916      	ldr	r1, [pc, #88]	; (80143ec <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8014392:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8014394:	3201      	adds	r2, #1
 8014396:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 801439a:	3301      	adds	r3, #1
 801439c:	b29b      	uxth	r3, r3
 801439e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d8ed      	bhi.n	8014382 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80143a6:	f8bd 0000 	ldrh.w	r0, [sp]
 80143aa:	9b05      	ldr	r3, [sp, #20]
 80143ac:	4622      	mov	r2, r4
 80143ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80143b2:	4c0e      	ldr	r4, [pc, #56]	; (80143ec <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80143b4:	4420      	add	r0, r4
 80143b6:	f000 fbc9 	bl	8014b4c <tiny_vsnprintf_like>
    TRACE_UnLock();
 80143ba:	f7ff ff2b 	bl	8014214 <TRACE_UnLock>
    return TRACE_Send();
 80143be:	f7ff ff63 	bl	8014288 <TRACE_Send>
}
 80143c2:	b006      	add	sp, #24
 80143c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143c8:	b001      	add	sp, #4
 80143ca:	4770      	bx	lr
  TRACE_UnLock();
 80143cc:	f7ff ff22 	bl	8014214 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80143d0:	f06f 0002 	mvn.w	r0, #2
 80143d4:	e7f5      	b.n	80143c2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 80143d6:	f06f 0004 	mvn.w	r0, #4
 80143da:	e7f2      	b.n	80143c2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80143dc:	f06f 0005 	mvn.w	r0, #5
 80143e0:	e7ef      	b.n	80143c2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
 80143e2:	bf00      	nop
 80143e4:	20004298 	.word	0x20004298
 80143e8:	200042b0 	.word	0x200042b0
 80143ec:	20003e98 	.word	0x20003e98

080143f0 <TRACE_TxCpltCallback>:
{
 80143f0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80143f2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80143f6:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80143f8:	4b25      	ldr	r3, [pc, #148]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 80143fa:	789b      	ldrb	r3, [r3, #2]
 80143fc:	2b02      	cmp	r3, #2
 80143fe:	d016      	beq.n	801442e <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8014400:	4a23      	ldr	r2, [pc, #140]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 8014402:	8a13      	ldrh	r3, [r2, #16]
 8014404:	8a90      	ldrh	r0, [r2, #20]
 8014406:	4403      	add	r3, r0
 8014408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801440c:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801440e:	4b20      	ldr	r3, [pc, #128]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 8014410:	8a1a      	ldrh	r2, [r3, #16]
 8014412:	8a5b      	ldrh	r3, [r3, #18]
 8014414:	429a      	cmp	r2, r3
 8014416:	d003      	beq.n	8014420 <TRACE_TxCpltCallback+0x30>
 8014418:	481d      	ldr	r0, [pc, #116]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 801441a:	8ac0      	ldrh	r0, [r0, #22]
 801441c:	2801      	cmp	r0, #1
 801441e:	d00b      	beq.n	8014438 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014420:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8014424:	f7ed fbfa 	bl	8001c1c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8014428:	f7ff fef4 	bl	8014214 <TRACE_UnLock>
}
 801442c:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801442e:	4b18      	ldr	r3, [pc, #96]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 8014430:	2200      	movs	r2, #0
 8014432:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014434:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8014436:	e7ea      	b.n	801440e <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8014438:	4815      	ldr	r0, [pc, #84]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 801443a:	7880      	ldrb	r0, [r0, #2]
 801443c:	2801      	cmp	r0, #1
 801443e:	d014      	beq.n	801446a <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8014440:	4a13      	ldr	r2, [pc, #76]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 8014442:	7892      	ldrb	r2, [r2, #2]
 8014444:	b932      	cbnz	r2, 8014454 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014446:	4a12      	ldr	r2, [pc, #72]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 8014448:	8a12      	ldrh	r2, [r2, #16]
 801444a:	4293      	cmp	r3, r2
 801444c:	d91b      	bls.n	8014486 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801444e:	1a9b      	subs	r3, r3, r2
 8014450:	4a0f      	ldr	r2, [pc, #60]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 8014452:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8014454:	4b0e      	ldr	r3, [pc, #56]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 8014456:	8a1a      	ldrh	r2, [r3, #16]
 8014458:	480e      	ldr	r0, [pc, #56]	; (8014494 <TRACE_TxCpltCallback+0xa4>)
 801445a:	4410      	add	r0, r2
 801445c:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8014460:	4a0d      	ldr	r2, [pc, #52]	; (8014498 <TRACE_TxCpltCallback+0xa8>)
 8014462:	68d2      	ldr	r2, [r2, #12]
 8014464:	8a99      	ldrh	r1, [r3, #20]
 8014466:	4790      	blx	r2
 8014468:	e7e0      	b.n	801442c <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801446a:	4c09      	ldr	r4, [pc, #36]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 801446c:	8820      	ldrh	r0, [r4, #0]
 801446e:	1a82      	subs	r2, r0, r2
 8014470:	b292      	uxth	r2, r2
 8014472:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8014474:	2002      	movs	r0, #2
 8014476:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8014478:	2000      	movs	r0, #0
 801447a:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801447c:	2a00      	cmp	r2, #0
 801447e:	d1df      	bne.n	8014440 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014480:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014482:	8220      	strh	r0, [r4, #16]
 8014484:	e7dc      	b.n	8014440 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014486:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 801448a:	4a01      	ldr	r2, [pc, #4]	; (8014490 <TRACE_TxCpltCallback+0xa0>)
 801448c:	8293      	strh	r3, [r2, #20]
 801448e:	e7e1      	b.n	8014454 <TRACE_TxCpltCallback+0x64>
 8014490:	20004298 	.word	0x20004298
 8014494:	20003e98 	.word	0x20003e98
 8014498:	08014fa8 	.word	0x08014fa8

0801449c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801449c:	2300      	movs	r3, #0
 801449e:	4a02      	ldr	r2, [pc, #8]	; (80144a8 <UTIL_LPM_Init+0xc>)
 80144a0:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80144a2:	4a02      	ldr	r2, [pc, #8]	; (80144ac <UTIL_LPM_Init+0x10>)
 80144a4:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80144a6:	4770      	bx	lr
 80144a8:	200044b4 	.word	0x200044b4
 80144ac:	200044b0 	.word	0x200044b0

080144b0 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80144b0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80144b4:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80144b6:	b141      	cbz	r1, 80144ca <UTIL_LPM_SetStopMode+0x1a>
 80144b8:	2901      	cmp	r1, #1
 80144ba:	d103      	bne.n	80144c4 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80144bc:	4906      	ldr	r1, [pc, #24]	; (80144d8 <UTIL_LPM_SetStopMode+0x28>)
 80144be:	680a      	ldr	r2, [r1, #0]
 80144c0:	4310      	orrs	r0, r2
 80144c2:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80144c4:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80144c8:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80144ca:	4903      	ldr	r1, [pc, #12]	; (80144d8 <UTIL_LPM_SetStopMode+0x28>)
 80144cc:	680a      	ldr	r2, [r1, #0]
 80144ce:	ea22 0000 	bic.w	r0, r2, r0
 80144d2:	6008      	str	r0, [r1, #0]
      break;
 80144d4:	e7f6      	b.n	80144c4 <UTIL_LPM_SetStopMode+0x14>
 80144d6:	bf00      	nop
 80144d8:	200044b4 	.word	0x200044b4

080144dc <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80144dc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80144e0:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80144e2:	b141      	cbz	r1, 80144f6 <UTIL_LPM_SetOffMode+0x1a>
 80144e4:	2901      	cmp	r1, #1
 80144e6:	d103      	bne.n	80144f0 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80144e8:	4906      	ldr	r1, [pc, #24]	; (8014504 <UTIL_LPM_SetOffMode+0x28>)
 80144ea:	680a      	ldr	r2, [r1, #0]
 80144ec:	4310      	orrs	r0, r2
 80144ee:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80144f0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80144f4:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80144f6:	4903      	ldr	r1, [pc, #12]	; (8014504 <UTIL_LPM_SetOffMode+0x28>)
 80144f8:	680a      	ldr	r2, [r1, #0]
 80144fa:	ea22 0000 	bic.w	r0, r2, r0
 80144fe:	6008      	str	r0, [r1, #0]
      break;
 8014500:	e7f6      	b.n	80144f0 <UTIL_LPM_SetOffMode+0x14>
 8014502:	bf00      	nop
 8014504:	200044b0 	.word	0x200044b0

08014508 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8014508:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801450a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801450e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8014510:	4b0c      	ldr	r3, [pc, #48]	; (8014544 <UTIL_LPM_EnterLowPower+0x3c>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	b13b      	cbz	r3, 8014526 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8014516:	4d0c      	ldr	r5, [pc, #48]	; (8014548 <UTIL_LPM_EnterLowPower+0x40>)
 8014518:	682b      	ldr	r3, [r5, #0]
 801451a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801451c:	686b      	ldr	r3, [r5, #4]
 801451e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014520:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8014524:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8014526:	4b09      	ldr	r3, [pc, #36]	; (801454c <UTIL_LPM_EnterLowPower+0x44>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	b12b      	cbz	r3, 8014538 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 801452c:	4d06      	ldr	r5, [pc, #24]	; (8014548 <UTIL_LPM_EnterLowPower+0x40>)
 801452e:	68ab      	ldr	r3, [r5, #8]
 8014530:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8014532:	68eb      	ldr	r3, [r5, #12]
 8014534:	4798      	blx	r3
 8014536:	e7f3      	b.n	8014520 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8014538:	4d03      	ldr	r5, [pc, #12]	; (8014548 <UTIL_LPM_EnterLowPower+0x40>)
 801453a:	692b      	ldr	r3, [r5, #16]
 801453c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801453e:	696b      	ldr	r3, [r5, #20]
 8014540:	4798      	blx	r3
 8014542:	e7ed      	b.n	8014520 <UTIL_LPM_EnterLowPower+0x18>
 8014544:	200044b4 	.word	0x200044b4
 8014548:	08014f44 	.word	0x08014f44
 801454c:	200044b0 	.word	0x200044b0

08014550 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8014550:	e004      	b.n	801455c <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8014552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014556:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 801455a:	461a      	mov	r2, r3
 801455c:	1e53      	subs	r3, r2, #1
 801455e:	b29b      	uxth	r3, r3
 8014560:	2a00      	cmp	r2, #0
 8014562:	d1f6      	bne.n	8014552 <UTIL_MEM_cpy_8+0x2>
    }
}
 8014564:	4770      	bx	lr

08014566 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8014566:	e002      	b.n	801456e <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8014568:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 801456c:	461a      	mov	r2, r3
 801456e:	1e53      	subs	r3, r2, #1
 8014570:	b29b      	uxth	r3, r3
 8014572:	2a00      	cmp	r2, #0
 8014574:	d1f8      	bne.n	8014568 <UTIL_MEM_set_8+0x2>
  }
}
 8014576:	4770      	bx	lr

08014578 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8014578:	b082      	sub	sp, #8
 801457a:	b082      	sub	sp, #8
 801457c:	f10d 0c08 	add.w	ip, sp, #8
 8014580:	e90c 0006 	stmdb	ip, {r1, r2}
 8014584:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8014586:	2200      	movs	r2, #0
 8014588:	6002      	str	r2, [r0, #0]
 801458a:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801458c:	440b      	add	r3, r1
 801458e:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014590:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014594:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014598:	440a      	add	r2, r1
 801459a:	b291      	uxth	r1, r2
 801459c:	b212      	sxth	r2, r2
 801459e:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80145a0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80145a4:	db04      	blt.n	80145b0 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 80145a6:	3301      	adds	r3, #1
 80145a8:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80145aa:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80145ae:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80145b0:	b002      	add	sp, #8
 80145b2:	b002      	add	sp, #8
 80145b4:	4770      	bx	lr

080145b6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80145b6:	b082      	sub	sp, #8
 80145b8:	b082      	sub	sp, #8
 80145ba:	f10d 0c08 	add.w	ip, sp, #8
 80145be:	e90c 0006 	stmdb	ip, {r1, r2}
 80145c2:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80145c4:	2200      	movs	r2, #0
 80145c6:	6002      	str	r2, [r0, #0]
 80145c8:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80145ca:	1acb      	subs	r3, r1, r3
 80145cc:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80145ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80145d2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80145d6:	1a52      	subs	r2, r2, r1
 80145d8:	b291      	uxth	r1, r2
 80145da:	b212      	sxth	r2, r2
 80145dc:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80145de:	2a00      	cmp	r2, #0
 80145e0:	db02      	blt.n	80145e8 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80145e2:	b002      	add	sp, #8
 80145e4:	b002      	add	sp, #8
 80145e6:	4770      	bx	lr
    c.Seconds--;
 80145e8:	3b01      	subs	r3, #1
 80145ea:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 80145ec:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80145f0:	8081      	strh	r1, [r0, #4]
  return c;
 80145f2:	e7f6      	b.n	80145e2 <SysTimeSub+0x2c>

080145f4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80145f4:	b530      	push	{r4, r5, lr}
 80145f6:	b089      	sub	sp, #36	; 0x24
 80145f8:	ac02      	add	r4, sp, #8
 80145fa:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80145fe:	2300      	movs	r3, #0
 8014600:	9304      	str	r3, [sp, #16]
 8014602:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014606:	4d0b      	ldr	r5, [pc, #44]	; (8014634 <SysTimeSet+0x40>)
 8014608:	692b      	ldr	r3, [r5, #16]
 801460a:	a805      	add	r0, sp, #20
 801460c:	4798      	blx	r3
 801460e:	4603      	mov	r3, r0
 8014610:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8014612:	9a05      	ldr	r2, [sp, #20]
 8014614:	9200      	str	r2, [sp, #0]
 8014616:	e894 0006 	ldmia.w	r4, {r1, r2}
 801461a:	a806      	add	r0, sp, #24
 801461c:	f7ff ffcb 	bl	80145b6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8014620:	682b      	ldr	r3, [r5, #0]
 8014622:	9806      	ldr	r0, [sp, #24]
 8014624:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8014626:	68ab      	ldr	r3, [r5, #8]
 8014628:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801462c:	4798      	blx	r3
}
 801462e:	b009      	add	sp, #36	; 0x24
 8014630:	bd30      	pop	{r4, r5, pc}
 8014632:	bf00      	nop
 8014634:	08014f68 	.word	0x08014f68

08014638 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8014638:	b530      	push	{r4, r5, lr}
 801463a:	b087      	sub	sp, #28
 801463c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801463e:	2300      	movs	r3, #0
 8014640:	9304      	str	r3, [sp, #16]
 8014642:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8014646:	6003      	str	r3, [r0, #0]
 8014648:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801464a:	4d0b      	ldr	r5, [pc, #44]	; (8014678 <SysTimeGet+0x40>)
 801464c:	692b      	ldr	r3, [r5, #16]
 801464e:	a805      	add	r0, sp, #20
 8014650:	4798      	blx	r3
 8014652:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8014654:	68eb      	ldr	r3, [r5, #12]
 8014656:	4798      	blx	r3
 8014658:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801465c:	686b      	ldr	r3, [r5, #4]
 801465e:	4798      	blx	r3
 8014660:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8014662:	9b05      	ldr	r3, [sp, #20]
 8014664:	9300      	str	r3, [sp, #0]
 8014666:	9b04      	ldr	r3, [sp, #16]
 8014668:	aa02      	add	r2, sp, #8
 801466a:	ca06      	ldmia	r2, {r1, r2}
 801466c:	4620      	mov	r0, r4
 801466e:	f7ff ff83 	bl	8014578 <SysTimeAdd>

  return sysTime;
}
 8014672:	4620      	mov	r0, r4
 8014674:	b007      	add	sp, #28
 8014676:	bd30      	pop	{r4, r5, pc}
 8014678:	08014f68 	.word	0x08014f68

0801467c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801467c:	b530      	push	{r4, r5, lr}
 801467e:	b083      	sub	sp, #12
 8014680:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014682:	2300      	movs	r3, #0
 8014684:	9300      	str	r3, [sp, #0]
 8014686:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801468a:	4b06      	ldr	r3, [pc, #24]	; (80146a4 <SysTimeGetMcuTime+0x28>)
 801468c:	691b      	ldr	r3, [r3, #16]
 801468e:	466d      	mov	r5, sp
 8014690:	a801      	add	r0, sp, #4
 8014692:	4798      	blx	r3
 8014694:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8014696:	e895 0003 	ldmia.w	r5, {r0, r1}
 801469a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 801469e:	4620      	mov	r0, r4
 80146a0:	b003      	add	sp, #12
 80146a2:	bd30      	pop	{r4, r5, pc}
 80146a4:	08014f68 	.word	0x08014f68

080146a8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80146a8:	b530      	push	{r4, r5, lr}
 80146aa:	b089      	sub	sp, #36	; 0x24
 80146ac:	ac02      	add	r4, sp, #8
 80146ae:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80146b2:	4d0c      	ldr	r5, [pc, #48]	; (80146e4 <SysTimeToMs+0x3c>)
 80146b4:	68eb      	ldr	r3, [r5, #12]
 80146b6:	4798      	blx	r3
 80146b8:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80146bc:	686b      	ldr	r3, [r5, #4]
 80146be:	4798      	blx	r3
 80146c0:	4603      	mov	r3, r0
 80146c2:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80146c4:	9a07      	ldr	r2, [sp, #28]
 80146c6:	9200      	str	r2, [sp, #0]
 80146c8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80146cc:	a804      	add	r0, sp, #16
 80146ce:	f7ff ff72 	bl	80145b6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80146d2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80146d6:	9a04      	ldr	r2, [sp, #16]
 80146d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80146dc:	fb00 3002 	mla	r0, r0, r2, r3
 80146e0:	b009      	add	sp, #36	; 0x24
 80146e2:	bd30      	pop	{r4, r5, pc}
 80146e4:	08014f68 	.word	0x08014f68

080146e8 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 80146e8:	b530      	push	{r4, r5, lr}
 80146ea:	b087      	sub	sp, #28
 80146ec:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 80146ee:	4b12      	ldr	r3, [pc, #72]	; (8014738 <SysTimeFromMs+0x50>)
 80146f0:	fba3 2301 	umull	r2, r3, r3, r1
 80146f4:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 80146f6:	9304      	str	r3, [sp, #16]
 80146f8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80146fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014700:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8014704:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8014708:	2300      	movs	r3, #0
 801470a:	9302      	str	r3, [sp, #8]
 801470c:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801470e:	4d0b      	ldr	r5, [pc, #44]	; (801473c <SysTimeFromMs+0x54>)
 8014710:	68eb      	ldr	r3, [r5, #12]
 8014712:	4798      	blx	r3
 8014714:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8014718:	686b      	ldr	r3, [r5, #4]
 801471a:	4798      	blx	r3
 801471c:	4603      	mov	r3, r0
 801471e:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8014720:	9a03      	ldr	r2, [sp, #12]
 8014722:	9200      	str	r2, [sp, #0]
 8014724:	aa06      	add	r2, sp, #24
 8014726:	e912 0006 	ldmdb	r2, {r1, r2}
 801472a:	4620      	mov	r0, r4
 801472c:	f7ff ff24 	bl	8014578 <SysTimeAdd>
}
 8014730:	4620      	mov	r0, r4
 8014732:	b007      	add	sp, #28
 8014734:	bd30      	pop	{r4, r5, pc}
 8014736:	bf00      	nop
 8014738:	10624dd3 	.word	0x10624dd3
 801473c:	08014f68 	.word	0x08014f68

08014740 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8014740:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8014742:	4b03      	ldr	r3, [pc, #12]	; (8014750 <UTIL_TIMER_Init+0x10>)
 8014744:	2200      	movs	r2, #0
 8014746:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8014748:	4b02      	ldr	r3, [pc, #8]	; (8014754 <UTIL_TIMER_Init+0x14>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	4798      	blx	r3
}
 801474e:	bd08      	pop	{r3, pc}
 8014750:	200044b8 	.word	0x200044b8
 8014754:	08014f7c 	.word	0x08014f7c

08014758 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8014758:	b1a8      	cbz	r0, 8014786 <UTIL_TIMER_Create+0x2e>
{
 801475a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801475c:	4617      	mov	r7, r2
 801475e:	461e      	mov	r6, r3
 8014760:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8014762:	b193      	cbz	r3, 801478a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8014764:	2500      	movs	r5, #0
 8014766:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8014768:	4b09      	ldr	r3, [pc, #36]	; (8014790 <UTIL_TIMER_Create+0x38>)
 801476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801476c:	4608      	mov	r0, r1
 801476e:	4798      	blx	r3
 8014770:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8014772:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8014774:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8014776:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8014778:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 801477a:	9b06      	ldr	r3, [sp, #24]
 801477c:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 801477e:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8014780:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8014782:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8014784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8014786:	2001      	movs	r0, #1
}
 8014788:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 801478a:	2001      	movs	r0, #1
 801478c:	e7fa      	b.n	8014784 <UTIL_TIMER_Create+0x2c>
 801478e:	bf00      	nop
 8014790:	08014f7c 	.word	0x08014f7c

08014794 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8014794:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8014796:	4c03      	ldr	r4, [pc, #12]	; (80147a4 <UTIL_TIMER_GetCurrentTime+0x10>)
 8014798:	69e3      	ldr	r3, [r4, #28]
 801479a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 801479c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801479e:	4798      	blx	r3
}
 80147a0:	bd10      	pop	{r4, pc}
 80147a2:	bf00      	nop
 80147a4:	08014f7c 	.word	0x08014f7c

080147a8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80147a8:	b570      	push	{r4, r5, r6, lr}
 80147aa:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80147ac:	4d05      	ldr	r5, [pc, #20]	; (80147c4 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80147ae:	69eb      	ldr	r3, [r5, #28]
 80147b0:	4798      	blx	r3
 80147b2:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80147b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80147b6:	4630      	mov	r0, r6
 80147b8:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80147ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80147bc:	1a20      	subs	r0, r4, r0
 80147be:	4798      	blx	r3
}
 80147c0:	bd70      	pop	{r4, r5, r6, pc}
 80147c2:	bf00      	nop
 80147c4:	08014f7c 	.word	0x08014f7c

080147c8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80147c8:	4b05      	ldr	r3, [pc, #20]	; (80147e0 <TimerExists+0x18>)
 80147ca:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80147cc:	e000      	b.n	80147d0 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80147ce:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80147d0:	b11b      	cbz	r3, 80147da <TimerExists+0x12>
    if( cur == TimerObject )
 80147d2:	4283      	cmp	r3, r0
 80147d4:	d1fb      	bne.n	80147ce <TimerExists+0x6>
      return true;
 80147d6:	2001      	movs	r0, #1
  }
  return false;
}
 80147d8:	4770      	bx	lr
  return false;
 80147da:	2000      	movs	r0, #0
 80147dc:	4770      	bx	lr
 80147de:	bf00      	nop
 80147e0:	200044b8 	.word	0x200044b8

080147e4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80147e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147e6:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80147e8:	4e09      	ldr	r6, [pc, #36]	; (8014810 <TimerSetTimeout+0x2c>)
 80147ea:	6a33      	ldr	r3, [r6, #32]
 80147ec:	4798      	blx	r3
 80147ee:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80147f0:	2301      	movs	r3, #1
 80147f2:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80147f4:	6827      	ldr	r7, [r4, #0]
 80147f6:	69b6      	ldr	r6, [r6, #24]
 80147f8:	47b0      	blx	r6
 80147fa:	4428      	add	r0, r5
 80147fc:	4287      	cmp	r7, r0
 80147fe:	d202      	bcs.n	8014806 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8014800:	47b0      	blx	r6
 8014802:	4405      	add	r5, r0
 8014804:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8014806:	4b02      	ldr	r3, [pc, #8]	; (8014810 <TimerSetTimeout+0x2c>)
 8014808:	689b      	ldr	r3, [r3, #8]
 801480a:	6820      	ldr	r0, [r4, #0]
 801480c:	4798      	blx	r3
}
 801480e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014810:	08014f7c 	.word	0x08014f7c

08014814 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8014814:	b368      	cbz	r0, 8014872 <UTIL_TIMER_Stop+0x5e>
{
 8014816:	b510      	push	{r4, lr}
 8014818:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801481a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801481e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8014820:	4b15      	ldr	r3, [pc, #84]	; (8014878 <UTIL_TIMER_Stop+0x64>)
 8014822:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8014824:	2301      	movs	r3, #1
 8014826:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8014828:	b1e1      	cbz	r1, 8014864 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 801482a:	2300      	movs	r3, #0
 801482c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801482e:	4288      	cmp	r0, r1
 8014830:	d006      	beq.n	8014840 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8014832:	460b      	mov	r3, r1
        while( cur != NULL )
 8014834:	b1b3      	cbz	r3, 8014864 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8014836:	4293      	cmp	r3, r2
 8014838:	d011      	beq.n	801485e <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 801483a:	4619      	mov	r1, r3
            cur = cur->Next;
 801483c:	695b      	ldr	r3, [r3, #20]
 801483e:	e7f9      	b.n	8014834 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8014840:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8014842:	6948      	ldr	r0, [r1, #20]
 8014844:	b120      	cbz	r0, 8014850 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8014846:	4b0c      	ldr	r3, [pc, #48]	; (8014878 <UTIL_TIMER_Stop+0x64>)
 8014848:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801484a:	f7ff ffcb 	bl	80147e4 <TimerSetTimeout>
 801484e:	e009      	b.n	8014864 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8014850:	4b0a      	ldr	r3, [pc, #40]	; (801487c <UTIL_TIMER_Stop+0x68>)
 8014852:	68db      	ldr	r3, [r3, #12]
 8014854:	4798      	blx	r3
            TimerListHead = NULL;
 8014856:	4b08      	ldr	r3, [pc, #32]	; (8014878 <UTIL_TIMER_Stop+0x64>)
 8014858:	2200      	movs	r2, #0
 801485a:	601a      	str	r2, [r3, #0]
 801485c:	e002      	b.n	8014864 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 801485e:	695b      	ldr	r3, [r3, #20]
 8014860:	b123      	cbz	r3, 801486c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8014862:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014864:	f384 8810 	msr	PRIMASK, r4
}
 8014868:	2000      	movs	r0, #0
}
 801486a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 801486c:	2300      	movs	r3, #0
 801486e:	614b      	str	r3, [r1, #20]
 8014870:	e7f8      	b.n	8014864 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8014872:	2001      	movs	r0, #1
}
 8014874:	4770      	bx	lr
 8014876:	bf00      	nop
 8014878:	200044b8 	.word	0x200044b8
 801487c:	08014f7c 	.word	0x08014f7c

08014880 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8014880:	4b09      	ldr	r3, [pc, #36]	; (80148a8 <TimerInsertTimer+0x28>)
 8014882:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8014884:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8014886:	e001      	b.n	801488c <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8014888:	461a      	mov	r2, r3
        next = next->Next;
 801488a:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 801488c:	6951      	ldr	r1, [r2, #20]
 801488e:	b139      	cbz	r1, 80148a0 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8014890:	6819      	ldr	r1, [r3, #0]
 8014892:	f8d0 c000 	ldr.w	ip, [r0]
 8014896:	458c      	cmp	ip, r1
 8014898:	d8f6      	bhi.n	8014888 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 801489a:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 801489c:	6143      	str	r3, [r0, #20]
        return;
 801489e:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 80148a0:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80148a2:	2300      	movs	r3, #0
 80148a4:	6143      	str	r3, [r0, #20]
}
 80148a6:	4770      	bx	lr
 80148a8:	200044b8 	.word	0x200044b8

080148ac <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80148ac:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80148ae:	4b05      	ldr	r3, [pc, #20]	; (80148c4 <TimerInsertNewHeadTimer+0x18>)
 80148b0:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80148b2:	b10b      	cbz	r3, 80148b8 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 80148b4:	2200      	movs	r2, #0
 80148b6:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80148b8:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80148ba:	4b02      	ldr	r3, [pc, #8]	; (80148c4 <TimerInsertNewHeadTimer+0x18>)
 80148bc:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80148be:	f7ff ff91 	bl	80147e4 <TimerSetTimeout>
}
 80148c2:	bd08      	pop	{r3, pc}
 80148c4:	200044b8 	.word	0x200044b8

080148c8 <UTIL_TIMER_Start>:
{
 80148c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80148ca:	2800      	cmp	r0, #0
 80148cc:	d036      	beq.n	801493c <UTIL_TIMER_Start+0x74>
 80148ce:	4604      	mov	r4, r0
 80148d0:	f7ff ff7a 	bl	80147c8 <TimerExists>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	d134      	bne.n	8014942 <UTIL_TIMER_Start+0x7a>
 80148d8:	7a65      	ldrb	r5, [r4, #9]
 80148da:	2d00      	cmp	r5, #0
 80148dc:	d133      	bne.n	8014946 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80148de:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80148e2:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 80148e4:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80148e6:	4b19      	ldr	r3, [pc, #100]	; (801494c <UTIL_TIMER_Start+0x84>)
 80148e8:	6a1b      	ldr	r3, [r3, #32]
 80148ea:	4798      	blx	r3
    if( ticks < minValue )
 80148ec:	4287      	cmp	r7, r0
 80148ee:	d300      	bcc.n	80148f2 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 80148f0:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 80148f2:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 80148f4:	2300      	movs	r3, #0
 80148f6:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80148f8:	2201      	movs	r2, #1
 80148fa:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80148fc:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80148fe:	4b14      	ldr	r3, [pc, #80]	; (8014950 <UTIL_TIMER_Start+0x88>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	b183      	cbz	r3, 8014926 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8014904:	4b11      	ldr	r3, [pc, #68]	; (801494c <UTIL_TIMER_Start+0x84>)
 8014906:	699b      	ldr	r3, [r3, #24]
 8014908:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801490a:	6823      	ldr	r3, [r4, #0]
 801490c:	4418      	add	r0, r3
 801490e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8014910:	4b0f      	ldr	r3, [pc, #60]	; (8014950 <UTIL_TIMER_Start+0x88>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	4298      	cmp	r0, r3
 8014918:	d20c      	bcs.n	8014934 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801491a:	4620      	mov	r0, r4
 801491c:	f7ff ffc6 	bl	80148ac <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014920:	f386 8810 	msr	PRIMASK, r6
}
 8014924:	e00b      	b.n	801493e <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8014926:	4b09      	ldr	r3, [pc, #36]	; (801494c <UTIL_TIMER_Start+0x84>)
 8014928:	691b      	ldr	r3, [r3, #16]
 801492a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801492c:	4620      	mov	r0, r4
 801492e:	f7ff ffbd 	bl	80148ac <TimerInsertNewHeadTimer>
 8014932:	e7f5      	b.n	8014920 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8014934:	4620      	mov	r0, r4
 8014936:	f7ff ffa3 	bl	8014880 <TimerInsertTimer>
 801493a:	e7f1      	b.n	8014920 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 801493c:	2501      	movs	r5, #1
}
 801493e:	4628      	mov	r0, r5
 8014940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8014942:	2501      	movs	r5, #1
 8014944:	e7fb      	b.n	801493e <UTIL_TIMER_Start+0x76>
 8014946:	2501      	movs	r5, #1
 8014948:	e7f9      	b.n	801493e <UTIL_TIMER_Start+0x76>
 801494a:	bf00      	nop
 801494c:	08014f7c 	.word	0x08014f7c
 8014950:	200044b8 	.word	0x200044b8

08014954 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8014954:	b198      	cbz	r0, 801497e <UTIL_TIMER_SetPeriod+0x2a>
{
 8014956:	b510      	push	{r4, lr}
 8014958:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801495a:	4b0a      	ldr	r3, [pc, #40]	; (8014984 <UTIL_TIMER_SetPeriod+0x30>)
 801495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801495e:	4608      	mov	r0, r1
 8014960:	4798      	blx	r3
 8014962:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8014964:	4620      	mov	r0, r4
 8014966:	f7ff ff2f 	bl	80147c8 <TimerExists>
 801496a:	b908      	cbnz	r0, 8014970 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801496c:	2000      	movs	r0, #0
}
 801496e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8014970:	4620      	mov	r0, r4
 8014972:	f7ff ff4f 	bl	8014814 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8014976:	4620      	mov	r0, r4
 8014978:	f7ff ffa6 	bl	80148c8 <UTIL_TIMER_Start>
 801497c:	e7f7      	b.n	801496e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 801497e:	2001      	movs	r0, #1
}
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop
 8014984:	08014f7c 	.word	0x08014f7c

08014988 <UTIL_TIMER_IRQ_Handler>:
{
 8014988:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801498a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801498e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8014990:	4c1e      	ldr	r4, [pc, #120]	; (8014a0c <UTIL_TIMER_IRQ_Handler+0x84>)
 8014992:	6963      	ldr	r3, [r4, #20]
 8014994:	4798      	blx	r3
 8014996:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8014998:	6923      	ldr	r3, [r4, #16]
 801499a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 801499c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 801499e:	4b1c      	ldr	r3, [pc, #112]	; (8014a10 <UTIL_TIMER_IRQ_Handler+0x88>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	b923      	cbnz	r3, 80149ae <UTIL_TIMER_IRQ_Handler+0x26>
 80149a4:	e018      	b.n	80149d8 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 80149a6:	2200      	movs	r2, #0
 80149a8:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 80149aa:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80149ac:	b1a3      	cbz	r3, 80149d8 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 80149ae:	681a      	ldr	r2, [r3, #0]
 80149b0:	42a2      	cmp	r2, r4
 80149b2:	d9f8      	bls.n	80149a6 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 80149b4:	1a31      	subs	r1, r6, r0
 80149b6:	440a      	add	r2, r1
 80149b8:	601a      	str	r2, [r3, #0]
 80149ba:	e7f6      	b.n	80149aa <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 80149bc:	4b14      	ldr	r3, [pc, #80]	; (8014a10 <UTIL_TIMER_IRQ_Handler+0x88>)
 80149be:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80149c0:	6962      	ldr	r2, [r4, #20]
 80149c2:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80149c4:	2300      	movs	r3, #0
 80149c6:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80149c8:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80149ca:	68e3      	ldr	r3, [r4, #12]
 80149cc:	6920      	ldr	r0, [r4, #16]
 80149ce:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80149d0:	8963      	ldrh	r3, [r4, #10]
 80149d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149d6:	d012      	beq.n	80149fe <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80149d8:	4b0d      	ldr	r3, [pc, #52]	; (8014a10 <UTIL_TIMER_IRQ_Handler+0x88>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	b13b      	cbz	r3, 80149ee <UTIL_TIMER_IRQ_Handler+0x66>
 80149de:	681c      	ldr	r4, [r3, #0]
 80149e0:	2c00      	cmp	r4, #0
 80149e2:	d0eb      	beq.n	80149bc <UTIL_TIMER_IRQ_Handler+0x34>
 80149e4:	4b09      	ldr	r3, [pc, #36]	; (8014a0c <UTIL_TIMER_IRQ_Handler+0x84>)
 80149e6:	699b      	ldr	r3, [r3, #24]
 80149e8:	4798      	blx	r3
 80149ea:	4284      	cmp	r4, r0
 80149ec:	d3e6      	bcc.n	80149bc <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80149ee:	4b08      	ldr	r3, [pc, #32]	; (8014a10 <UTIL_TIMER_IRQ_Handler+0x88>)
 80149f0:	6818      	ldr	r0, [r3, #0]
 80149f2:	b108      	cbz	r0, 80149f8 <UTIL_TIMER_IRQ_Handler+0x70>
 80149f4:	7a03      	ldrb	r3, [r0, #8]
 80149f6:	b133      	cbz	r3, 8014a06 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149f8:	f385 8810 	msr	PRIMASK, r5
}
 80149fc:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80149fe:	4620      	mov	r0, r4
 8014a00:	f7ff ff62 	bl	80148c8 <UTIL_TIMER_Start>
 8014a04:	e7e8      	b.n	80149d8 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8014a06:	f7ff feed 	bl	80147e4 <TimerSetTimeout>
 8014a0a:	e7f5      	b.n	80149f8 <UTIL_TIMER_IRQ_Handler+0x70>
 8014a0c:	08014f7c 	.word	0x08014f7c
 8014a10:	200044b8 	.word	0x200044b8

08014a14 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8014a14:	4601      	mov	r1, r0
  int i = 0;
 8014a16:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8014a18:	e007      	b.n	8014a2a <ee_skip_atoi+0x16>
 8014a1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014a1e:	1c53      	adds	r3, r2, #1
 8014a20:	600b      	str	r3, [r1, #0]
 8014a22:	7813      	ldrb	r3, [r2, #0]
 8014a24:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8014a28:	3830      	subs	r0, #48	; 0x30
 8014a2a:	680a      	ldr	r2, [r1, #0]
 8014a2c:	7813      	ldrb	r3, [r2, #0]
 8014a2e:	3b30      	subs	r3, #48	; 0x30
 8014a30:	b2db      	uxtb	r3, r3
 8014a32:	2b09      	cmp	r3, #9
 8014a34:	d9f1      	bls.n	8014a1a <ee_skip_atoi+0x6>
  return i;
}
 8014a36:	4770      	bx	lr

08014a38 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8014a38:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8014a3c:	b093      	sub	sp, #76	; 0x4c
 8014a3e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014a40:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8014a42:	f016 0f40 	tst.w	r6, #64	; 0x40
 8014a46:	d110      	bne.n	8014a6a <ee_number+0x32>
  char *dig = lower_digits;
 8014a48:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8014b44 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8014a4c:	1e9f      	subs	r7, r3, #2
 8014a4e:	2f22      	cmp	r7, #34	; 0x22
 8014a50:	d875      	bhi.n	8014b3e <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8014a52:	f016 0401 	ands.w	r4, r6, #1
 8014a56:	d00b      	beq.n	8014a70 <ee_number+0x38>
 8014a58:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8014a5c:	f016 0f02 	tst.w	r6, #2
 8014a60:	d00f      	beq.n	8014a82 <ee_number+0x4a>
  {
    if (num < 0)
 8014a62:	2a00      	cmp	r2, #0
 8014a64:	db07      	blt.n	8014a76 <ee_number+0x3e>
  sign = 0;
 8014a66:	2700      	movs	r7, #0
 8014a68:	e00c      	b.n	8014a84 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8014a6a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8014b48 <ee_number+0x110>
 8014a6e:	e7ed      	b.n	8014a4c <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8014a70:	f04f 0e20 	mov.w	lr, #32
 8014a74:	e7f2      	b.n	8014a5c <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8014a76:	4252      	negs	r2, r2
      size--;
 8014a78:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014a7a:	3e01      	subs	r6, #1
 8014a7c:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8014a7e:	272d      	movs	r7, #45	; 0x2d
 8014a80:	e000      	b.n	8014a84 <ee_number+0x4c>
  sign = 0;
 8014a82:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8014a84:	bb5a      	cbnz	r2, 8014ade <ee_number+0xa6>
    tmp[i++] = '0';
 8014a86:	2330      	movs	r3, #48	; 0x30
 8014a88:	f88d 3004 	strb.w	r3, [sp, #4]
 8014a8c:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8014a90:	45ac      	cmp	ip, r5
 8014a92:	dd00      	ble.n	8014a96 <ee_number+0x5e>
 8014a94:	4665      	mov	r5, ip
  size -= precision;
 8014a96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014a98:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8014a9a:	b31c      	cbz	r4, 8014ae4 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8014a9c:	b11f      	cbz	r7, 8014aa6 <ee_number+0x6e>
 8014a9e:	f800 7b01 	strb.w	r7, [r0], #1
 8014aa2:	3901      	subs	r1, #1
 8014aa4:	d007      	beq.n	8014ab6 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	f103 33ff 	add.w	r3, r3, #4294967295
 8014aac:	dd24      	ble.n	8014af8 <ee_number+0xc0>
 8014aae:	f800 eb01 	strb.w	lr, [r0], #1
 8014ab2:	3901      	subs	r1, #1
 8014ab4:	d1f7      	bne.n	8014aa6 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8014ab6:	b013      	add	sp, #76	; 0x4c
 8014ab8:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8014abc:	fbb2 f6f3 	udiv	r6, r2, r3
 8014ac0:	fb03 2216 	mls	r2, r3, r6, r2
 8014ac4:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8014ac8:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8014acc:	446a      	add	r2, sp
 8014ace:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8014ad2:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8014ad4:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8014ad8:	2a00      	cmp	r2, #0
 8014ada:	d1ef      	bne.n	8014abc <ee_number+0x84>
 8014adc:	e7d8      	b.n	8014a90 <ee_number+0x58>
  i = 0;
 8014ade:	f04f 0c00 	mov.w	ip, #0
 8014ae2:	e7f9      	b.n	8014ad8 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	f103 33ff 	add.w	r3, r3, #4294967295
 8014aea:	ddd7      	ble.n	8014a9c <ee_number+0x64>
 8014aec:	2220      	movs	r2, #32
 8014aee:	f800 2b01 	strb.w	r2, [r0], #1
 8014af2:	3901      	subs	r1, #1
 8014af4:	d1f6      	bne.n	8014ae4 <ee_number+0xac>
 8014af6:	e7de      	b.n	8014ab6 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8014af8:	4565      	cmp	r5, ip
 8014afa:	f105 35ff 	add.w	r5, r5, #4294967295
 8014afe:	dd05      	ble.n	8014b0c <ee_number+0xd4>
 8014b00:	2230      	movs	r2, #48	; 0x30
 8014b02:	f800 2b01 	strb.w	r2, [r0], #1
 8014b06:	3901      	subs	r1, #1
 8014b08:	d1f6      	bne.n	8014af8 <ee_number+0xc0>
 8014b0a:	e7d4      	b.n	8014ab6 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8014b0c:	4662      	mov	r2, ip
 8014b0e:	2a00      	cmp	r2, #0
 8014b10:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014b14:	dd09      	ble.n	8014b2a <ee_number+0xf2>
 8014b16:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8014b1a:	446a      	add	r2, sp
 8014b1c:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8014b20:	f800 2b01 	strb.w	r2, [r0], #1
 8014b24:	3901      	subs	r1, #1
 8014b26:	d1f1      	bne.n	8014b0c <ee_number+0xd4>
 8014b28:	e7c5      	b.n	8014ab6 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	f103 33ff 	add.w	r3, r3, #4294967295
 8014b30:	ddc1      	ble.n	8014ab6 <ee_number+0x7e>
 8014b32:	2220      	movs	r2, #32
 8014b34:	f800 2b01 	strb.w	r2, [r0], #1
 8014b38:	3901      	subs	r1, #1
 8014b3a:	d1f6      	bne.n	8014b2a <ee_number+0xf2>
 8014b3c:	e7bb      	b.n	8014ab6 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8014b3e:	2000      	movs	r0, #0
 8014b40:	e7b9      	b.n	8014ab6 <ee_number+0x7e>
 8014b42:	bf00      	nop
 8014b44:	08015e60 	.word	0x08015e60
 8014b48:	08015e38 	.word	0x08015e38

08014b4c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8014b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b50:	b087      	sub	sp, #28
 8014b52:	9205      	str	r2, [sp, #20]
 8014b54:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8014b56:	1e0f      	subs	r7, r1, #0
 8014b58:	f340 80b8 	ble.w	8014ccc <tiny_vsnprintf_like+0x180>
 8014b5c:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8014b5e:	4604      	mov	r4, r0
 8014b60:	e004      	b.n	8014b6c <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8014b62:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8014b66:	9b05      	ldr	r3, [sp, #20]
 8014b68:	3301      	adds	r3, #1
 8014b6a:	9305      	str	r3, [sp, #20]
 8014b6c:	9905      	ldr	r1, [sp, #20]
 8014b6e:	780a      	ldrb	r2, [r1, #0]
 8014b70:	b922      	cbnz	r2, 8014b7c <tiny_vsnprintf_like+0x30>
 8014b72:	1ba3      	subs	r3, r4, r6
 8014b74:	1e78      	subs	r0, r7, #1
 8014b76:	4283      	cmp	r3, r0
 8014b78:	f2c0 80a2 	blt.w	8014cc0 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8014b7c:	1ba3      	subs	r3, r4, r6
 8014b7e:	f107 38ff 	add.w	r8, r7, #4294967295
 8014b82:	4543      	cmp	r3, r8
 8014b84:	f280 809c 	bge.w	8014cc0 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8014b88:	2a25      	cmp	r2, #37	; 0x25
 8014b8a:	d1ea      	bne.n	8014b62 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8014b8c:	1c4b      	adds	r3, r1, #1
 8014b8e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8014b90:	784b      	ldrb	r3, [r1, #1]
 8014b92:	2b30      	cmp	r3, #48	; 0x30
 8014b94:	d020      	beq.n	8014bd8 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8014b96:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8014b9a:	3b30      	subs	r3, #48	; 0x30
 8014b9c:	b2db      	uxtb	r3, r3
 8014b9e:	2b09      	cmp	r3, #9
 8014ba0:	d91d      	bls.n	8014bde <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8014ba2:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8014ba6:	9b05      	ldr	r3, [sp, #20]
 8014ba8:	781a      	ldrb	r2, [r3, #0]
 8014baa:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8014bae:	2b20      	cmp	r3, #32
 8014bb0:	d867      	bhi.n	8014c82 <tiny_vsnprintf_like+0x136>
 8014bb2:	e8df f003 	tbb	[pc, r3]
 8014bb6:	664a      	.short	0x664a
 8014bb8:	66666666 	.word	0x66666666
 8014bbc:	66666666 	.word	0x66666666
 8014bc0:	66621e66 	.word	0x66621e66
 8014bc4:	62666666 	.word	0x62666666
 8014bc8:	66666666 	.word	0x66666666
 8014bcc:	66666666 	.word	0x66666666
 8014bd0:	19662866 	.word	0x19662866
 8014bd4:	6666      	.short	0x6666
 8014bd6:	7c          	.byte	0x7c
 8014bd7:	00          	.byte	0x00
      flags |= ZEROPAD;
 8014bd8:	f04f 0901 	mov.w	r9, #1
 8014bdc:	e7dd      	b.n	8014b9a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8014bde:	a805      	add	r0, sp, #20
 8014be0:	f7ff ff18 	bl	8014a14 <ee_skip_atoi>
 8014be4:	4605      	mov	r5, r0
 8014be6:	e7de      	b.n	8014ba6 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8014be8:	230a      	movs	r3, #10
 8014bea:	e031      	b.n	8014c50 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8014bec:	2320      	movs	r3, #32
 8014bee:	f804 3b01 	strb.w	r3, [r4], #1
 8014bf2:	3d01      	subs	r5, #1
 8014bf4:	2d00      	cmp	r5, #0
 8014bf6:	dcf9      	bgt.n	8014bec <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8014bf8:	9b04      	ldr	r3, [sp, #16]
 8014bfa:	1d1a      	adds	r2, r3, #4
 8014bfc:	9204      	str	r2, [sp, #16]
 8014bfe:	781b      	ldrb	r3, [r3, #0]
 8014c00:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8014c04:	e7af      	b.n	8014b66 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8014c06:	9b04      	ldr	r3, [sp, #16]
 8014c08:	1d1a      	adds	r2, r3, #4
 8014c0a:	9204      	str	r2, [sp, #16]
 8014c0c:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8014c10:	f1b8 0f00 	cmp.w	r8, #0
 8014c14:	d003      	beq.n	8014c1e <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8014c16:	4640      	mov	r0, r8
 8014c18:	f7eb fab2 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8014c1c:	e006      	b.n	8014c2c <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8014c1e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014cd0 <tiny_vsnprintf_like+0x184>
 8014c22:	e7f8      	b.n	8014c16 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8014c24:	2220      	movs	r2, #32
 8014c26:	f804 2b01 	strb.w	r2, [r4], #1
 8014c2a:	461d      	mov	r5, r3
 8014c2c:	1e6b      	subs	r3, r5, #1
 8014c2e:	4285      	cmp	r5, r0
 8014c30:	dcf8      	bgt.n	8014c24 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8014c32:	2200      	movs	r2, #0
 8014c34:	e006      	b.n	8014c44 <tiny_vsnprintf_like+0xf8>
 8014c36:	4643      	mov	r3, r8
 8014c38:	f813 1b01 	ldrb.w	r1, [r3], #1
 8014c3c:	f804 1b01 	strb.w	r1, [r4], #1
 8014c40:	3201      	adds	r2, #1
 8014c42:	4698      	mov	r8, r3
 8014c44:	4282      	cmp	r2, r0
 8014c46:	dbf6      	blt.n	8014c36 <tiny_vsnprintf_like+0xea>
 8014c48:	e78d      	b.n	8014b66 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8014c4a:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8014c4e:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8014c50:	f019 0f02 	tst.w	r9, #2
 8014c54:	d02f      	beq.n	8014cb6 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8014c56:	9a04      	ldr	r2, [sp, #16]
 8014c58:	1d11      	adds	r1, r2, #4
 8014c5a:	9104      	str	r1, [sp, #16]
 8014c5c:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8014c5e:	1ba1      	subs	r1, r4, r6
 8014c60:	f8cd 9008 	str.w	r9, [sp, #8]
 8014c64:	f04f 30ff 	mov.w	r0, #4294967295
 8014c68:	9001      	str	r0, [sp, #4]
 8014c6a:	9500      	str	r5, [sp, #0]
 8014c6c:	eba8 0101 	sub.w	r1, r8, r1
 8014c70:	4620      	mov	r0, r4
 8014c72:	f7ff fee1 	bl	8014a38 <ee_number>
 8014c76:	4604      	mov	r4, r0
 8014c78:	e775      	b.n	8014b66 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8014c7a:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8014c7e:	230a      	movs	r3, #10
 8014c80:	e7e6      	b.n	8014c50 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8014c82:	2a25      	cmp	r2, #37	; 0x25
 8014c84:	d002      	beq.n	8014c8c <tiny_vsnprintf_like+0x140>
 8014c86:	2325      	movs	r3, #37	; 0x25
 8014c88:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8014c8c:	1ba3      	subs	r3, r4, r6
 8014c8e:	4598      	cmp	r8, r3
 8014c90:	dd0f      	ble.n	8014cb2 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8014c92:	9b05      	ldr	r3, [sp, #20]
 8014c94:	781a      	ldrb	r2, [r3, #0]
 8014c96:	b13a      	cbz	r2, 8014ca8 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8014c98:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8014c9c:	1ba3      	subs	r3, r4, r6
 8014c9e:	4598      	cmp	r8, r3
 8014ca0:	f73f af61 	bgt.w	8014b66 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8014ca4:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8014ca6:	e7d3      	b.n	8014c50 <tiny_vsnprintf_like+0x104>
          --fmt;
 8014ca8:	3b01      	subs	r3, #1
 8014caa:	9305      	str	r3, [sp, #20]
 8014cac:	e7f6      	b.n	8014c9c <tiny_vsnprintf_like+0x150>
        base = 16;
 8014cae:	2310      	movs	r3, #16
 8014cb0:	e7ce      	b.n	8014c50 <tiny_vsnprintf_like+0x104>
    base = 10;
 8014cb2:	230a      	movs	r3, #10
 8014cb4:	e7cc      	b.n	8014c50 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8014cb6:	9a04      	ldr	r2, [sp, #16]
 8014cb8:	1d11      	adds	r1, r2, #4
 8014cba:	9104      	str	r1, [sp, #16]
 8014cbc:	6812      	ldr	r2, [r2, #0]
 8014cbe:	e7ce      	b.n	8014c5e <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8014cc4:	1ba0      	subs	r0, r4, r6
}
 8014cc6:	b007      	add	sp, #28
 8014cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8014ccc:	2000      	movs	r0, #0
 8014cce:	e7fa      	b.n	8014cc6 <tiny_vsnprintf_like+0x17a>
 8014cd0:	08015e88 	.word	0x08015e88

08014cd4 <__libc_init_array>:
 8014cd4:	b570      	push	{r4, r5, r6, lr}
 8014cd6:	4d0d      	ldr	r5, [pc, #52]	; (8014d0c <__libc_init_array+0x38>)
 8014cd8:	4c0d      	ldr	r4, [pc, #52]	; (8014d10 <__libc_init_array+0x3c>)
 8014cda:	1b64      	subs	r4, r4, r5
 8014cdc:	10a4      	asrs	r4, r4, #2
 8014cde:	2600      	movs	r6, #0
 8014ce0:	42a6      	cmp	r6, r4
 8014ce2:	d109      	bne.n	8014cf8 <__libc_init_array+0x24>
 8014ce4:	4d0b      	ldr	r5, [pc, #44]	; (8014d14 <__libc_init_array+0x40>)
 8014ce6:	4c0c      	ldr	r4, [pc, #48]	; (8014d18 <__libc_init_array+0x44>)
 8014ce8:	f000 f8ae 	bl	8014e48 <_init>
 8014cec:	1b64      	subs	r4, r4, r5
 8014cee:	10a4      	asrs	r4, r4, #2
 8014cf0:	2600      	movs	r6, #0
 8014cf2:	42a6      	cmp	r6, r4
 8014cf4:	d105      	bne.n	8014d02 <__libc_init_array+0x2e>
 8014cf6:	bd70      	pop	{r4, r5, r6, pc}
 8014cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cfc:	4798      	blx	r3
 8014cfe:	3601      	adds	r6, #1
 8014d00:	e7ee      	b.n	8014ce0 <__libc_init_array+0xc>
 8014d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d06:	4798      	blx	r3
 8014d08:	3601      	adds	r6, #1
 8014d0a:	e7f2      	b.n	8014cf2 <__libc_init_array+0x1e>
 8014d0c:	08015e98 	.word	0x08015e98
 8014d10:	08015e98 	.word	0x08015e98
 8014d14:	08015e98 	.word	0x08015e98
 8014d18:	08015e9c 	.word	0x08015e9c

08014d1c <memcpy>:
 8014d1c:	440a      	add	r2, r1
 8014d1e:	4291      	cmp	r1, r2
 8014d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d24:	d100      	bne.n	8014d28 <memcpy+0xc>
 8014d26:	4770      	bx	lr
 8014d28:	b510      	push	{r4, lr}
 8014d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d32:	4291      	cmp	r1, r2
 8014d34:	d1f9      	bne.n	8014d2a <memcpy+0xe>
 8014d36:	bd10      	pop	{r4, pc}

08014d38 <memset>:
 8014d38:	4402      	add	r2, r0
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	4293      	cmp	r3, r2
 8014d3e:	d100      	bne.n	8014d42 <memset+0xa>
 8014d40:	4770      	bx	lr
 8014d42:	f803 1b01 	strb.w	r1, [r3], #1
 8014d46:	e7f9      	b.n	8014d3c <memset+0x4>

08014d48 <floor>:
 8014d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d4c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8014d50:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8014d54:	2e13      	cmp	r6, #19
 8014d56:	4602      	mov	r2, r0
 8014d58:	460b      	mov	r3, r1
 8014d5a:	4607      	mov	r7, r0
 8014d5c:	460c      	mov	r4, r1
 8014d5e:	4605      	mov	r5, r0
 8014d60:	dc33      	bgt.n	8014dca <floor+0x82>
 8014d62:	2e00      	cmp	r6, #0
 8014d64:	da14      	bge.n	8014d90 <floor+0x48>
 8014d66:	a334      	add	r3, pc, #208	; (adr r3, 8014e38 <floor+0xf0>)
 8014d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d6c:	f7eb fa16 	bl	800019c <__adddf3>
 8014d70:	2200      	movs	r2, #0
 8014d72:	2300      	movs	r3, #0
 8014d74:	f7eb fc46 	bl	8000604 <__aeabi_dcmpgt>
 8014d78:	b138      	cbz	r0, 8014d8a <floor+0x42>
 8014d7a:	2c00      	cmp	r4, #0
 8014d7c:	da58      	bge.n	8014e30 <floor+0xe8>
 8014d7e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014d82:	431d      	orrs	r5, r3
 8014d84:	d001      	beq.n	8014d8a <floor+0x42>
 8014d86:	4c2e      	ldr	r4, [pc, #184]	; (8014e40 <floor+0xf8>)
 8014d88:	2500      	movs	r5, #0
 8014d8a:	4623      	mov	r3, r4
 8014d8c:	462f      	mov	r7, r5
 8014d8e:	e025      	b.n	8014ddc <floor+0x94>
 8014d90:	4a2c      	ldr	r2, [pc, #176]	; (8014e44 <floor+0xfc>)
 8014d92:	fa42 f806 	asr.w	r8, r2, r6
 8014d96:	ea01 0208 	and.w	r2, r1, r8
 8014d9a:	4302      	orrs	r2, r0
 8014d9c:	d01e      	beq.n	8014ddc <floor+0x94>
 8014d9e:	a326      	add	r3, pc, #152	; (adr r3, 8014e38 <floor+0xf0>)
 8014da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da4:	f7eb f9fa 	bl	800019c <__adddf3>
 8014da8:	2200      	movs	r2, #0
 8014daa:	2300      	movs	r3, #0
 8014dac:	f7eb fc2a 	bl	8000604 <__aeabi_dcmpgt>
 8014db0:	2800      	cmp	r0, #0
 8014db2:	d0ea      	beq.n	8014d8a <floor+0x42>
 8014db4:	2c00      	cmp	r4, #0
 8014db6:	bfbe      	ittt	lt
 8014db8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014dbc:	fa43 f606 	asrlt.w	r6, r3, r6
 8014dc0:	19a4      	addlt	r4, r4, r6
 8014dc2:	ea24 0408 	bic.w	r4, r4, r8
 8014dc6:	2500      	movs	r5, #0
 8014dc8:	e7df      	b.n	8014d8a <floor+0x42>
 8014dca:	2e33      	cmp	r6, #51	; 0x33
 8014dcc:	dd0a      	ble.n	8014de4 <floor+0x9c>
 8014dce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014dd2:	d103      	bne.n	8014ddc <floor+0x94>
 8014dd4:	f7eb f9e2 	bl	800019c <__adddf3>
 8014dd8:	4607      	mov	r7, r0
 8014dda:	460b      	mov	r3, r1
 8014ddc:	4638      	mov	r0, r7
 8014dde:	4619      	mov	r1, r3
 8014de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014de4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8014de8:	f04f 32ff 	mov.w	r2, #4294967295
 8014dec:	fa22 f808 	lsr.w	r8, r2, r8
 8014df0:	ea18 0f00 	tst.w	r8, r0
 8014df4:	d0f2      	beq.n	8014ddc <floor+0x94>
 8014df6:	a310      	add	r3, pc, #64	; (adr r3, 8014e38 <floor+0xf0>)
 8014df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfc:	f7eb f9ce 	bl	800019c <__adddf3>
 8014e00:	2200      	movs	r2, #0
 8014e02:	2300      	movs	r3, #0
 8014e04:	f7eb fbfe 	bl	8000604 <__aeabi_dcmpgt>
 8014e08:	2800      	cmp	r0, #0
 8014e0a:	d0be      	beq.n	8014d8a <floor+0x42>
 8014e0c:	2c00      	cmp	r4, #0
 8014e0e:	da02      	bge.n	8014e16 <floor+0xce>
 8014e10:	2e14      	cmp	r6, #20
 8014e12:	d103      	bne.n	8014e1c <floor+0xd4>
 8014e14:	3401      	adds	r4, #1
 8014e16:	ea25 0508 	bic.w	r5, r5, r8
 8014e1a:	e7b6      	b.n	8014d8a <floor+0x42>
 8014e1c:	2301      	movs	r3, #1
 8014e1e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014e22:	fa03 f606 	lsl.w	r6, r3, r6
 8014e26:	4435      	add	r5, r6
 8014e28:	42bd      	cmp	r5, r7
 8014e2a:	bf38      	it	cc
 8014e2c:	18e4      	addcc	r4, r4, r3
 8014e2e:	e7f2      	b.n	8014e16 <floor+0xce>
 8014e30:	2500      	movs	r5, #0
 8014e32:	462c      	mov	r4, r5
 8014e34:	e7a9      	b.n	8014d8a <floor+0x42>
 8014e36:	bf00      	nop
 8014e38:	8800759c 	.word	0x8800759c
 8014e3c:	7e37e43c 	.word	0x7e37e43c
 8014e40:	bff00000 	.word	0xbff00000
 8014e44:	000fffff 	.word	0x000fffff

08014e48 <_init>:
 8014e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e4a:	bf00      	nop
 8014e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e4e:	bc08      	pop	{r3}
 8014e50:	469e      	mov	lr, r3
 8014e52:	4770      	bx	lr

08014e54 <_fini>:
 8014e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e56:	bf00      	nop
 8014e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e5a:	bc08      	pop	{r3}
 8014e5c:	469e      	mov	lr, r3
 8014e5e:	4770      	bx	lr
