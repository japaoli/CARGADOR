
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c00  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef0  08011d38  08011d38  00021d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c28  08012c28  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08012c28  08012c28  00022c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c30  08012c30  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012c30  08012c30  00022c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012c38  08012c38  00022c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08012c40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b18  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001510  20000118  20000118  00040118  2**2
                  ALLOC
 12 RAM1_region   00000000  20001628  20001628  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001628  20001628  00040118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   000572fb  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b783  00000000  00000000  000958e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002458b  00000000  00000000  000a1068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002be0  00000000  00000000  000c55f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002de8  00000000  00000000  000c81d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002ad3c  00000000  00000000  000cafc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004c18d  00000000  00000000  000f5cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000df0b7  00000000  00000000  00141e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  00220f40  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000079c0  00000000  00000000  00220f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000118 	.word	0x20000118
 8000154:	00000000 	.word	0x00000000
 8000158:	08011d20 	.word	0x08011d20

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000011c 	.word	0x2000011c
 8000174:	08011d20 	.word	0x08011d20

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14d      	bne.n	8000c84 <__udivmoddi4+0xac>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d968      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b152      	cbz	r2, 8000c0a <__udivmoddi4+0x32>
 8000bf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf8:	f1c2 0120 	rsb	r1, r2, #32
 8000bfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	ea41 0803 	orr.w	r8, r1, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fbb8 fef5 	udiv	lr, r8, r5
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fb05 831e 	mls	r3, r5, lr, r8
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	fb0e f107 	mul.w	r1, lr, r7
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d90b      	bls.n	8000c40 <__udivmoddi4+0x68>
 8000c28:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c30:	f080 811e 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f240 811b 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c48:	fb05 3310 	mls	r3, r5, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x96>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 8108 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8105 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa8>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	f000 80ee 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e9c6 0500 	strd	r0, r5, [r6]
 8000c94:	4608      	mov	r0, r1
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0303 	sbc.w	r3, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e2      	beq.n	8000c80 <__udivmoddi4+0xa8>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7df      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8091 	bne.w	8000df0 <__udivmoddi4+0x218>
 8000cce:	eba1 050c 	sub.w	r5, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce0:	fb07 5013 	mls	r0, r7, r3, r5
 8000ce4:	0c25      	lsrs	r5, r4, #16
 8000ce6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	42a8      	cmp	r0, r5
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	42a8      	cmp	r0, r5
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a2d      	subs	r5, r5, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79e      	b.n	8000c76 <__udivmoddi4+0x9e>
 8000d38:	f1c1 0720 	rsb	r7, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40fd      	lsrs	r5, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 5518 	mls	r5, r9, r8, r5
 8000d68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0505 	adds.w	r5, ip, r5
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	42a8      	cmp	r0, r5
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4465      	add	r5, ip
 8000d90:	1a2d      	subs	r5, r5, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d98:	fb09 5510 	mls	r5, r9, r0, r5
 8000d9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	45ae      	cmp	lr, r5
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	45ae      	cmp	lr, r5
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4465      	add	r5, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba5 050e 	sub.w	r5, r5, lr
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15e      	cbz	r6, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb65 050e 	sbc.w	r5, r5, lr
 8000dda:	fa05 f707 	lsl.w	r7, r5, r7
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	40cd      	lsrs	r5, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c6 7500 	strd	r7, r5, [r6]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa25 f303 	lsr.w	r3, r5, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	430d      	orrs	r5, r1
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e10:	fb07 3011 	mls	r0, r7, r1, r3
 8000e14:	0c2b      	lsrs	r3, r5, #16
 8000e16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	4298      	cmp	r0, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3902      	subs	r1, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a1b      	subs	r3, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3310 	mls	r3, r7, r0, r3
 8000e44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e48:	fb00 f30e 	mul.w	r3, r0, lr
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0505 	adds.w	r5, ip, r5
 8000e54:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	42ab      	cmp	r3, r5
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4465      	add	r5, ip
 8000e62:	1aed      	subs	r5, r5, r3
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e707      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000e70:	4686      	mov	lr, r0
 8000e72:	e6e5      	b.n	8000c40 <__udivmoddi4+0x68>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fa      	b.n	8000c6e <__udivmoddi4+0x96>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4641      	mov	r1, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4465      	add	r5, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eac:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_ADC_Init+0x50>)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_ADC_Init+0x54>)
 8000eb2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000eb8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebe:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ec6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ec8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eca:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ed8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000ee6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ee8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000eec:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000eee:	f001 fda7 	bl	8002a40 <HAL_ADC_Init>
 8000ef2:	b900      	cbnz	r0, 8000ef6 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ef4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ef6:	f000 fa9d 	bl	8001434 <Error_Handler>
}
 8000efa:	e7fb      	b.n	8000ef4 <MX_ADC_Init+0x48>
 8000efc:	20000134 	.word	0x20000134
 8000f00:	40012400 	.word	0x40012400

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f04:	6802      	ldr	r2, [r0, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_ADC_MspInit+0x28>)
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d000      	beq.n	8000f0e <HAL_ADC_MspInit+0xa>
 8000f0c:	4770      	bx	lr
{
 8000f0e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f1a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f22:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f24:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f26:	b002      	add	sp, #8
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40012400 	.word	0x40012400

08000f30 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_ADC_MspDeInit+0x18>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d000      	beq.n	8000f3a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f38:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f3e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	e7f7      	b.n	8000f38 <HAL_ADC_MspDeInit+0x8>
 8000f48:	40012400 	.word	0x40012400

08000f4c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f4c:	b530      	push	{r4, r5, lr}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	2300      	movs	r3, #0
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f5a:	f7ff ffa7 	bl	8000eac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f60:	f002 f9b2 	bl	80032c8 <HAL_ADCEx_Calibration_Start>
 8000f64:	b9f8      	cbnz	r0, 8000fa6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f66:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f6c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f6e:	a901      	add	r1, sp, #4
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f72:	f001 fef3 	bl	8002d5c <HAL_ADC_ConfigChannel>
 8000f76:	b9c8      	cbnz	r0, 8000fac <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f7a:	f002 f8b3 	bl	80030e4 <HAL_ADC_Start>
 8000f7e:	b9c0      	cbnz	r0, 8000fb2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f80:	4c0d      	ldr	r4, [pc, #52]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f82:	f04f 31ff 	mov.w	r1, #4294967295
 8000f86:	4620      	mov	r0, r4
 8000f88:	f001 fe86 	bl	8002c98 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f002 f97b 	bl	8003288 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f92:	4620      	mov	r0, r4
 8000f94:	f001 fedf 	bl	8002d56 <HAL_ADC_GetValue>
 8000f98:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f002 f91e 	bl	80031dc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	b005      	add	sp, #20
 8000fa4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fa6:	f000 fa45 	bl	8001434 <Error_Handler>
 8000faa:	e7dc      	b.n	8000f66 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000fac:	f000 fa42 	bl	8001434 <Error_Handler>
 8000fb0:	e7e2      	b.n	8000f78 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000fb2:	f000 fa3f 	bl	8001434 <Error_Handler>
 8000fb6:	e7e3      	b.n	8000f80 <ADC_ReadChannels+0x34>
 8000fb8:	20000134 	.word	0x20000134

08000fbc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <SYS_InitMeasurement+0x8>)
 8000fbe:	4a02      	ldr	r2, [pc, #8]	; (8000fc8 <SYS_InitMeasurement+0xc>)
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000134 	.word	0x20000134
 8000fc8:	40012400 	.word	0x40012400

08000fcc <SYS_GetBatteryLevel>:
{
 8000fcc:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <SYS_GetBatteryLevel+0x38>)
 8000fd0:	f7ff ffbc 	bl	8000f4c <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000fd4:	b1a0      	cbz	r0, 8001000 <SYS_GetBatteryLevel+0x34>
 8000fd6:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <SYS_GetBatteryLevel+0x3c>)
 8000fda:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000fde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d007      	beq.n	8000ff6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000fe6:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000fea:	fb03 f000 	mul.w	r0, r3, r0
 8000fee:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ff2:	b280      	uxth	r0, r0
 8000ff4:	e005      	b.n	8001002 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <SYS_GetBatteryLevel+0x40>)
 8000ff8:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	e000      	b.n	8001002 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001000:	2000      	movs	r0, #0
}
 8001002:	bd08      	pop	{r3, pc}
 8001004:	b4002000 	.word	0xb4002000
 8001008:	1fff7500 	.word	0x1fff7500
 800100c:	004c08d8 	.word	0x004c08d8

08001010 <SYS_GetTemperatureLevel>:
{
 8001010:	b510      	push	{r4, lr}
 8001012:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800101a:	f7ff ffd7 	bl	8000fcc <SYS_GetBatteryLevel>
 800101e:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001020:	4821      	ldr	r0, [pc, #132]	; (80010a8 <SYS_GetTemperatureLevel+0x98>)
 8001022:	f7ff ff93 	bl	8000f4c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <SYS_GetTemperatureLevel+0x9c>)
 8001028:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 800102c:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001030:	428a      	cmp	r2, r1
 8001032:	d01d      	beq.n	8001070 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001034:	fb00 f304 	mul.w	r3, r0, r4
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	4c1d      	ldr	r4, [pc, #116]	; (80010b0 <SYS_GetTemperatureLevel+0xa0>)
 800103c:	fba4 0303 	umull	r0, r3, r4, r3
 8001040:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001044:	2064      	movs	r0, #100	; 0x64
 8001046:	fb00 f303 	mul.w	r3, r0, r3
 800104a:	1a52      	subs	r2, r2, r1
 800104c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001050:	331e      	adds	r3, #30
 8001052:	b21b      	sxth	r3, r3
 8001054:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001058:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800105c:	b21b      	sxth	r3, r3
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001066:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800106a:	b200      	sxth	r0, r0
 800106c:	b002      	add	sp, #8
 800106e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001070:	fb00 f404 	mul.w	r4, r0, r4
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <SYS_GetTemperatureLevel+0xa4>)
 8001076:	fba3 2304 	umull	r2, r3, r3, r4
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001080:	0ae4      	lsrs	r4, r4, #11
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fb03 f404 	mul.w	r4, r3, r4
 800108a:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 800108e:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <SYS_GetTemperatureLevel+0xa8>)
 8001094:	fb83 2304 	smull	r2, r3, r3, r4
 8001098:	17e4      	asrs	r4, r4, #31
 800109a:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 800109e:	341e      	adds	r4, #30
 80010a0:	b224      	sxth	r4, r4
 80010a2:	f8ad 4006 	strh.w	r4, [sp, #6]
 80010a6:	e7d7      	b.n	8001058 <SYS_GetTemperatureLevel+0x48>
 80010a8:	b0001000 	.word	0xb0001000
 80010ac:	1fff7500 	.word	0x1fff7500
 80010b0:	09ee009f 	.word	0x09ee009f
 80010b4:	00100101 	.word	0x00100101
 80010b8:	68db8bad 	.word	0x68db8bad

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010bc:	b500      	push	{lr}
 80010be:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010c6:	f042 0204 	orr.w	r2, r2, #4
 80010ca:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ce:	f002 0204 	and.w	r2, r2, #4
 80010d2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80010d4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80010e6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2102      	movs	r1, #2
 80010ec:	200f      	movs	r0, #15
 80010ee:	f002 f99d 	bl	800342c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f002 f9d2 	bl	800349c <HAL_NVIC_EnableIRQ>

}
 80010f8:	b003      	add	sp, #12
 80010fa:	f85d fb04 	ldr.w	pc, [sp], #4

080010fe <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80010fe:	e000      	b.n	8001102 <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001100:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001102:	f010 0307 	ands.w	r3, r0, #7
 8001106:	d012      	beq.n	800112e <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 8001108:	f810 3b01 	ldrb.w	r3, [r0], #1
 800110c:	2bff      	cmp	r3, #255	; 0xff
 800110e:	d0f7      	beq.n	8001100 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 8001110:	2001      	movs	r0, #1
 8001112:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001114:	3901      	subs	r1, #1
  while (size != 0)
 8001116:	b129      	cbz	r1, 8001124 <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 8001118:	f810 3b01 	ldrb.w	r3, [r0], #1
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d0f9      	beq.n	8001114 <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8001120:	2001      	movs	r0, #1
 8001122:	e002      	b.n	800112a <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 8001124:	2000      	movs	r0, #0
 8001126:	e000      	b.n	800112a <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 8001128:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800112a:	bc10      	pop	{r4}
 800112c:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800112e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001132:	d212      	bcs.n	800115a <FLASH_IF_IsEmpty+0x5c>
{
 8001134:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 8001136:	4602      	mov	r2, r0
 8001138:	f852 4b08 	ldr.w	r4, [r2], #8
 800113c:	6840      	ldr	r0, [r0, #4]
 800113e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001142:	bf08      	it	eq
 8001144:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8001148:	d1ee      	bne.n	8001128 <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800114a:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 800114c:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800114e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001152:	d3f0      	bcc.n	8001136 <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 8001154:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001158:	e7dd      	b.n	8001116 <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 800115a:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 800115e:	b129      	cbz	r1, 800116c <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 8001160:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001164:	2bff      	cmp	r3, #255	; 0xff
 8001166:	d103      	bne.n	8001170 <FLASH_IF_IsEmpty+0x72>
    size--;
 8001168:	3901      	subs	r1, #1
 800116a:	e7f8      	b.n	800115e <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 800116c:	2000      	movs	r0, #0
 800116e:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 8001170:	2001      	movs	r0, #1
}
 8001172:	4770      	bx	lr

08001174 <FLASH_IF_Write64>:
{
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	4604      	mov	r4, r0
 8001178:	4616      	mov	r6, r2
 800117a:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 800117c:	e005      	b.n	800118a <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800117e:	4632      	mov	r2, r6
 8001180:	462b      	mov	r3, r5
 8001182:	4621      	mov	r1, r4
 8001184:	2001      	movs	r0, #1
 8001186:	f002 fcb5 	bl	8003af4 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800118a:	6822      	ldr	r2, [r4, #0]
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	42ab      	cmp	r3, r5
 8001190:	bf08      	it	eq
 8001192:	42b2      	cmpeq	r2, r6
 8001194:	d005      	beq.n	80011a2 <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001196:	4904      	ldr	r1, [pc, #16]	; (80011a8 <FLASH_IF_Write64+0x34>)
 8001198:	6909      	ldr	r1, [r1, #16]
 800119a:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 800119e:	d1fa      	bne.n	8001196 <FLASH_IF_Write64+0x22>
 80011a0:	e7ed      	b.n	800117e <FLASH_IF_Write64+0xa>
}
 80011a2:	2000      	movs	r0, #0
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
 80011a6:	bf00      	nop
 80011a8:	58004000 	.word	0x58004000

080011ac <FLASH_IF_Write_Buffer>:
{
 80011ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	4606      	mov	r6, r0
 80011b4:	460c      	mov	r4, r1
 80011b6:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80011b8:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 80011ba:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80011bc:	e003      	b.n	80011c6 <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 80011be:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 80011c0:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 80011c2:	b9af      	cbnz	r7, 80011f0 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80011c4:	3501      	adds	r5, #1
 80011c6:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 80011ca:	d211      	bcs.n	80011f0 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80011cc:	2208      	movs	r2, #8
 80011ce:	4621      	mov	r1, r4
 80011d0:	4668      	mov	r0, sp
 80011d2:	f010 f85b 	bl	801128c <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 80011d6:	9a00      	ldr	r2, [sp, #0]
 80011d8:	9b01      	ldr	r3, [sp, #4]
 80011da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011de:	bf08      	it	eq
 80011e0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80011e4:	d0eb      	beq.n	80011be <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 80011e6:	4630      	mov	r0, r6
 80011e8:	f7ff ffc4 	bl	8001174 <FLASH_IF_Write64>
 80011ec:	4607      	mov	r7, r0
 80011ee:	e7e6      	b.n	80011be <FLASH_IF_Write_Buffer+0x12>
}
 80011f0:	4638      	mov	r0, r7
 80011f2:	b002      	add	sp, #8
 80011f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011f8 <FLASH_IF_EraseByPages>:
{
 80011f8:	b500      	push	{lr}
 80011fa:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80011fc:	2302      	movs	r3, #2
 80011fe:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8001200:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 8001202:	9103      	str	r1, [sp, #12]
  if (interrupt)
 8001204:	b13a      	cbz	r2, 8001216 <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001206:	a801      	add	r0, sp, #4
 8001208:	f002 fd3c 	bl	8003c84 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800120c:	b140      	cbz	r0, 8001220 <FLASH_IF_EraseByPages+0x28>
 800120e:	2802      	cmp	r0, #2
 8001210:	d10a      	bne.n	8001228 <FLASH_IF_EraseByPages+0x30>
 8001212:	2001      	movs	r0, #1
 8001214:	e005      	b.n	8001222 <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001216:	4669      	mov	r1, sp
 8001218:	a801      	add	r0, sp, #4
 800121a:	f002 fcf3 	bl	8003c04 <HAL_FLASHEx_Erase>
 800121e:	e7f5      	b.n	800120c <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001220:	2000      	movs	r0, #0
}
 8001222:	b005      	add	sp, #20
 8001224:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001228:	f06f 0001 	mvn.w	r0, #1
 800122c:	e7f9      	b.n	8001222 <FLASH_IF_EraseByPages+0x2a>
	...

08001230 <FLASH_IF_Write>:
{
 8001230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001234:	4693      	mov	fp, r2
 8001236:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8001238:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 800123c:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <FLASH_IF_Write+0x108>)
 800123e:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <FLASH_IF_Write+0x10c>)
 8001244:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001248:	fbb5 f2f3 	udiv	r2, r5, r3
 800124c:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001250:	eb00 0a0b 	add.w	sl, r0, fp
 8001254:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 8001258:	f10a 3aff 	add.w	sl, sl, #4294967295
 800125c:	fbba f2f3 	udiv	r2, sl, r3
 8001260:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001264:	2900      	cmp	r1, #0
 8001266:	d052      	beq.n	800130e <FLASH_IF_Write+0xde>
 8001268:	4606      	mov	r6, r0
 800126a:	0aed      	lsrs	r5, r5, #11
 800126c:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 8001270:	4688      	mov	r8, r1
 8001272:	f01b 0f07 	tst.w	fp, #7
 8001276:	d14d      	bne.n	8001314 <FLASH_IF_Write+0xe4>
 8001278:	f010 0f07 	tst.w	r0, #7
 800127c:	d14d      	bne.n	800131a <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <FLASH_IF_Write+0x110>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db4c      	blt.n	8001320 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 8001286:	4555      	cmp	r5, sl
 8001288:	d004      	beq.n	8001294 <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800128a:	f3c0 040a 	ubfx	r4, r0, #0, #11
 800128e:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 8001292:	e00d      	b.n	80012b0 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 8001294:	465c      	mov	r4, fp
 8001296:	e00b      	b.n	80012b0 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001298:	4622      	mov	r2, r4
 800129a:	4641      	mov	r1, r8
 800129c:	4630      	mov	r0, r6
 800129e:	f7ff ff85 	bl	80011ac <FLASH_IF_Write_Buffer>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d145      	bne.n	8001332 <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 80012a6:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 80012a8:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 80012aa:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80012ae:	3501      	adds	r5, #1
 80012b0:	4555      	cmp	r5, sl
 80012b2:	d829      	bhi.n	8001308 <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80012b4:	4621      	mov	r1, r4
 80012b6:	4630      	mov	r0, r6
 80012b8:	f7ff ff21 	bl	80010fe <FLASH_IF_IsEmpty>
 80012bc:	2800      	cmp	r0, #0
 80012be:	d0eb      	beq.n	8001298 <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 80012c0:	f1b9 0f00 	cmp.w	r9, #0
 80012c4:	d02f      	beq.n	8001326 <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80012c6:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 80012ca:	02ff      	lsls	r7, r7, #11
 80012cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d0:	4639      	mov	r1, r7
 80012d2:	4648      	mov	r0, r9
 80012d4:	f00f ffda 	bl	801128c <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80012d8:	f3c6 000a 	ubfx	r0, r6, #0, #11
 80012dc:	b2a2      	uxth	r2, r4
 80012de:	4641      	mov	r1, r8
 80012e0:	4448      	add	r0, r9
 80012e2:	f00f ffd3 	bl	801128c <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80012e6:	2200      	movs	r2, #0
 80012e8:	2101      	movs	r1, #1
 80012ea:	4628      	mov	r0, r5
 80012ec:	f7ff ff84 	bl	80011f8 <FLASH_IF_EraseByPages>
 80012f0:	b9e0      	cbnz	r0, 800132c <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80012f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f6:	4649      	mov	r1, r9
 80012f8:	4638      	mov	r0, r7
 80012fa:	f7ff ff57 	bl	80011ac <FLASH_IF_Write_Buffer>
 80012fe:	2800      	cmp	r0, #0
 8001300:	d0d1      	beq.n	80012a6 <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 8001302:	f06f 0002 	mvn.w	r0, #2
 8001306:	e000      	b.n	800130a <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 8001308:	2000      	movs	r0, #0
}
 800130a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 800130e:	f06f 0004 	mvn.w	r0, #4
 8001312:	e7fa      	b.n	800130a <FLASH_IF_Write+0xda>
 8001314:	f06f 0004 	mvn.w	r0, #4
 8001318:	e7f7      	b.n	800130a <FLASH_IF_Write+0xda>
 800131a:	f06f 0004 	mvn.w	r0, #4
 800131e:	e7f4      	b.n	800130a <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 8001320:	f06f 0003 	mvn.w	r0, #3
 8001324:	e7f1      	b.n	800130a <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 8001326:	f06f 0004 	mvn.w	r0, #4
 800132a:	e7ee      	b.n	800130a <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 800132c:	f06f 0001 	mvn.w	r0, #1
 8001330:	e7eb      	b.n	800130a <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 8001332:	f06f 0002 	mvn.w	r0, #2
 8001336:	e7e8      	b.n	800130a <FLASH_IF_Write+0xda>
 8001338:	1fff7000 	.word	0x1fff7000
 800133c:	03fffc00 	.word	0x03fffc00
 8001340:	58004000 	.word	0x58004000

08001344 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001348:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	2400      	movs	r4, #0
 800134c:	9403      	str	r4, [sp, #12]
 800134e:	9404      	str	r4, [sp, #16]
 8001350:	9405      	str	r4, [sp, #20]
 8001352:	9406      	str	r4, [sp, #24]
 8001354:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800135c:	f042 0202 	orr.w	r2, r2, #2
 8001360:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001364:	f002 0202 	and.w	r2, r2, #2
 8001368:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800136a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800136c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800136e:	f042 0204 	orr.w	r2, r2, #4
 8001372:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001376:	f002 0204 	and.w	r2, r2, #4
 800137a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800137c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800137e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001380:	f042 0201 	orr.w	r2, r2, #1
 8001384:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800138e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001390:	4e26      	ldr	r6, [pc, #152]	; (800142c <MX_GPIO_Init+0xe8>)
 8001392:	4622      	mov	r2, r4
 8001394:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 8001398:	4630      	mov	r0, r6
 800139a:	f002 fdf7 	bl	8003f8c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800139e:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80013a2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2501      	movs	r5, #1
 80013a6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013aa:	2302      	movs	r3, #2
 80013ac:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	a903      	add	r1, sp, #12
 80013b0:	4630      	mov	r0, r6
 80013b2:	f002 fc9b 	bl	8003cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80013b6:	f04f 0803 	mov.w	r8, #3
 80013ba:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013be:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80013c2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	a903      	add	r1, sp, #12
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f002 fc8e 	bl	8003cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80013d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013d4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	a903      	add	r1, sp, #12
 80013e0:	4630      	mov	r0, r6
 80013e2:	f002 fc83 	bl	8003cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80013e6:	2340      	movs	r3, #64	; 0x40
 80013e8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ea:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80013ee:	a903      	add	r1, sp, #12
 80013f0:	480f      	ldr	r0, [pc, #60]	; (8001430 <MX_GPIO_Init+0xec>)
 80013f2:	f002 fc7b 	bl	8003cec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013f6:	4622      	mov	r2, r4
 80013f8:	4621      	mov	r1, r4
 80013fa:	2006      	movs	r0, #6
 80013fc:	f002 f816 	bl	800342c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001400:	2006      	movs	r0, #6
 8001402:	f002 f84b 	bl	800349c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001406:	4622      	mov	r2, r4
 8001408:	4621      	mov	r1, r4
 800140a:	2007      	movs	r0, #7
 800140c:	f002 f80e 	bl	800342c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001410:	2007      	movs	r0, #7
 8001412:	f002 f843 	bl	800349c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001416:	4622      	mov	r2, r4
 8001418:	4621      	mov	r1, r4
 800141a:	2016      	movs	r0, #22
 800141c:	f002 f806 	bl	800342c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001420:	2016      	movs	r0, #22
 8001422:	f002 f83b 	bl	800349c <HAL_NVIC_EnableIRQ>

}
 8001426:	b008      	add	sp, #32
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800

08001434 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001436:	e7fe      	b.n	8001436 <Error_Handler+0x2>

08001438 <SystemClock_Config>:
{
 8001438:	b510      	push	{r4, lr}
 800143a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143c:	2248      	movs	r2, #72	; 0x48
 800143e:	2100      	movs	r1, #0
 8001440:	a808      	add	r0, sp, #32
 8001442:	f010 fbe5 	bl	8011c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001446:	2400      	movs	r4, #0
 8001448:	9401      	str	r4, [sp, #4]
 800144a:	9402      	str	r4, [sp, #8]
 800144c:	9403      	str	r4, [sp, #12]
 800144e:	9404      	str	r4, [sp, #16]
 8001450:	9405      	str	r4, [sp, #20]
 8001452:	9406      	str	r4, [sp, #24]
 8001454:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001456:	f002 fdb5 	bl	8003fc4 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800145a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800145e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001462:	f023 0318 	bic.w	r3, r3, #24
 8001466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800146a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800146e:	6813      	ldr	r3, [r2, #0]
 8001470:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001484:	2324      	movs	r3, #36	; 0x24
 8001486:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001488:	2381      	movs	r3, #129	; 0x81
 800148a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800148c:	2301      	movs	r3, #1
 800148e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001490:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001492:	23b0      	movs	r3, #176	; 0xb0
 8001494:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001496:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	a808      	add	r0, sp, #32
 800149a:	f002 ff2d 	bl	80042f8 <HAL_RCC_OscConfig>
 800149e:	b970      	cbnz	r0, 80014be <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80014a0:	234f      	movs	r3, #79	; 0x4f
 80014a2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014aa:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ac:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80014ae:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b0:	2102      	movs	r1, #2
 80014b2:	a801      	add	r0, sp, #4
 80014b4:	f003 fa5c 	bl	8004970 <HAL_RCC_ClockConfig>
 80014b8:	b918      	cbnz	r0, 80014c2 <SystemClock_Config+0x8a>
}
 80014ba:	b01a      	add	sp, #104	; 0x68
 80014bc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80014be:	f7ff ffb9 	bl	8001434 <Error_Handler>
    Error_Handler();
 80014c2:	f7ff ffb7 	bl	8001434 <Error_Handler>

080014c6 <main>:
{
 80014c6:	b508      	push	{r3, lr}
  HAL_Init();
 80014c8:	f001 fa6c 	bl	80029a4 <HAL_Init>
  SystemClock_Config();
 80014cc:	f7ff ffb4 	bl	8001438 <SystemClock_Config>
  MX_GPIO_Init();
 80014d0:	f7ff ff38 	bl	8001344 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80014d4:	f000 fd00 	bl	8001ed8 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80014d8:	f000 fd04 	bl	8001ee4 <MX_LoRaWAN_Process>
  while (1)
 80014dc:	e7fc      	b.n	80014d8 <main+0x12>
	...

080014e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80014e0:	b500      	push	{lr}
 80014e2:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80014e4:	222c      	movs	r2, #44	; 0x2c
 80014e6:	2100      	movs	r1, #0
 80014e8:	a801      	add	r0, sp, #4
 80014ea:	f010 fb91 	bl	8011c10 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014ee:	4819      	ldr	r0, [pc, #100]	; (8001554 <MX_RTC_Init+0x74>)
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_RTC_Init+0x78>)
 80014f2:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80014f4:	231f      	movs	r3, #31
 80014f6:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014fc:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014fe:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001500:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001504:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001506:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800150e:	f003 fd95 	bl	800503c <HAL_RTC_Init>
 8001512:	b9a8      	cbnz	r0, 8001540 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <MX_RTC_Init+0x74>)
 8001516:	f003 fecb 	bl	80052b0 <HAL_RTCEx_SetSSRU_IT>
 800151a:	b9a0      	cbnz	r0, 8001546 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800151c:	2200      	movs	r2, #0
 800151e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001520:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001522:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001524:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001528:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800152a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001530:	a901      	add	r1, sp, #4
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <MX_RTC_Init+0x74>)
 8001534:	f003 fde0 	bl	80050f8 <HAL_RTC_SetAlarm_IT>
 8001538:	b940      	cbnz	r0, 800154c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800153a:	b00d      	add	sp, #52	; 0x34
 800153c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001540:	f7ff ff78 	bl	8001434 <Error_Handler>
 8001544:	e7e6      	b.n	8001514 <MX_RTC_Init+0x34>
    Error_Handler();
 8001546:	f7ff ff75 	bl	8001434 <Error_Handler>
 800154a:	e7e7      	b.n	800151c <MX_RTC_Init+0x3c>
    Error_Handler();
 800154c:	f7ff ff72 	bl	8001434 <Error_Handler>
}
 8001550:	e7f3      	b.n	800153a <MX_RTC_Init+0x5a>
 8001552:	bf00      	nop
 8001554:	20000198 	.word	0x20000198
 8001558:	40002800 	.word	0x40002800

0800155c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800155c:	b510      	push	{r4, lr}
 800155e:	b090      	sub	sp, #64	; 0x40
 8001560:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001562:	2238      	movs	r2, #56	; 0x38
 8001564:	2100      	movs	r1, #0
 8001566:	a802      	add	r0, sp, #8
 8001568:	f010 fb52 	bl	8011c10 <memset>
  if(rtcHandle->Instance==RTC)
 800156c:	6822      	ldr	r2, [r4, #0]
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_RTC_MspInit+0x7c>)
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001574:	b010      	add	sp, #64	; 0x40
 8001576:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800157e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001582:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001584:	a802      	add	r0, sp, #8
 8001586:	f003 fb47 	bl	8004c18 <HAL_RCCEx_PeriphCLKConfig>
 800158a:	bb08      	cbnz	r0, 80015d0 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001590:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 800159c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800159e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015a2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015aa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	4611      	mov	r1, r2
 80015b2:	2002      	movs	r0, #2
 80015b4:	f001 ff3a 	bl	800342c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80015b8:	2002      	movs	r0, #2
 80015ba:	f001 ff6f 	bl	800349c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	4611      	mov	r1, r2
 80015c2:	202a      	movs	r0, #42	; 0x2a
 80015c4:	f001 ff32 	bl	800342c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015c8:	202a      	movs	r0, #42	; 0x2a
 80015ca:	f001 ff67 	bl	800349c <HAL_NVIC_EnableIRQ>
}
 80015ce:	e7d1      	b.n	8001574 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80015d0:	f7ff ff30 	bl	8001434 <Error_Handler>
 80015d4:	e7da      	b.n	800158c <HAL_RTC_MspInit+0x30>
 80015d6:	bf00      	nop
 80015d8:	40002800 	.word	0x40002800

080015dc <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80015dc:	4770      	bx	lr

080015de <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80015de:	4770      	bx	lr

080015e0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80015e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80015e2:	f001 f9f5 	bl	80029d0 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80015e6:	2001      	movs	r0, #1
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <PWR_EnterStopMode+0x14>)
 80015ea:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80015ee:	f002 fd4d 	bl	800408c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80015f2:	bd08      	pop	{r3, pc}
 80015f4:	58000400 	.word	0x58000400

080015f8 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80015f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80015fa:	f001 f9f0 	bl	80029de <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80015fe:	bd08      	pop	{r3, pc}

08001600 <PWR_ExitStopMode>:
{
 8001600:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001602:	f001 f9ec 	bl	80029de <HAL_ResumeTick>
  vcom_Resume();
 8001606:	f000 fc27 	bl	8001e58 <vcom_Resume>
}
 800160a:	bd08      	pop	{r3, pc}

0800160c <PWR_EnterSleepMode>:
{
 800160c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800160e:	f001 f9df 	bl	80029d0 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001612:	2101      	movs	r1, #1
 8001614:	2000      	movs	r0, #0
 8001616:	f002 fcdd 	bl	8003fd4 <HAL_PWR_EnterSLEEPMode>
}
 800161a:	bd08      	pop	{r3, pc}

0800161c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161c:	4770      	bx	lr

0800161e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161e:	e7fe      	b.n	800161e <NMI_Handler>

08001620 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <HardFault_Handler>

08001622 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <MemManage_Handler>

08001624 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <BusFault_Handler>

08001626 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <UsageFault_Handler>

08001628 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001628:	4770      	bx	lr

0800162a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162a:	4770      	bx	lr

0800162c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	4770      	bx	lr

08001630 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001630:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001632:	4802      	ldr	r0, [pc, #8]	; (800163c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001634:	f003 fe68 	bl	8005308 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001638:	bd08      	pop	{r3, pc}
 800163a:	bf00      	nop
 800163c:	20000198 	.word	0x20000198

08001640 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001640:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001642:	2001      	movs	r0, #1
 8001644:	f002 fcb0 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001648:	bd08      	pop	{r3, pc}

0800164a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800164a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 800164c:	2002      	movs	r0, #2
 800164e:	f002 fcab 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001652:	bd08      	pop	{r3, pc}

08001654 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001654:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001656:	4802      	ldr	r0, [pc, #8]	; (8001660 <DMA1_Channel5_IRQHandler+0xc>)
 8001658:	f002 f93e 	bl	80038d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800165c:	bd08      	pop	{r3, pc}
 800165e:	bf00      	nop
 8001660:	200001e4 	.word	0x200001e4

08001664 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001664:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001666:	2040      	movs	r0, #64	; 0x40
 8001668:	f002 fc9e 	bl	8003fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800166c:	bd08      	pop	{r3, pc}
	...

08001670 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001670:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001672:	4802      	ldr	r0, [pc, #8]	; (800167c <USART2_IRQHandler+0xc>)
 8001674:	f004 fb04 	bl	8005c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001678:	bd08      	pop	{r3, pc}
 800167a:	bf00      	nop
 800167c:	20000244 	.word	0x20000244

08001680 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001680:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001682:	4802      	ldr	r0, [pc, #8]	; (800168c <RTC_Alarm_IRQHandler+0xc>)
 8001684:	f003 fc52 	bl	8004f2c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001688:	bd08      	pop	{r3, pc}
 800168a:	bf00      	nop
 800168c:	20000198 	.word	0x20000198

08001690 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001690:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001692:	4802      	ldr	r0, [pc, #8]	; (800169c <SUBGHZ_Radio_IRQHandler+0xc>)
 8001694:	f004 f8e2 	bl	800585c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001698:	bd08      	pop	{r3, pc}
 800169a:	bf00      	nop
 800169c:	200001d0 	.word	0x200001d0

080016a0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80016a0:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_SUBGHZ_Init+0x18>)
 80016a4:	2308      	movs	r3, #8
 80016a6:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80016a8:	f003 fe64 	bl	8005374 <HAL_SUBGHZ_Init>
 80016ac:	b900      	cbnz	r0, 80016b0 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80016ae:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016b0:	f7ff fec0 	bl	8001434 <Error_Handler>
}
 80016b4:	e7fb      	b.n	80016ae <MX_SUBGHZ_Init+0xe>
 80016b6:	bf00      	nop
 80016b8:	200001d0 	.word	0x200001d0

080016bc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80016bc:	b500      	push	{lr}
 80016be:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80016cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80016d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	4611      	mov	r1, r2
 80016da:	2032      	movs	r0, #50	; 0x32
 80016dc:	f001 fea6 	bl	800342c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80016e0:	2032      	movs	r0, #50	; 0x32
 80016e2:	f001 fedb 	bl	800349c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80016e6:	b003      	add	sp, #12
 80016e8:	f85d fb04 	ldr.w	pc, [sp], #4

080016ec <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80016ec:	b40c      	push	{r2, r3}
 80016ee:	b500      	push	{lr}
 80016f0:	b083      	sub	sp, #12
 80016f2:	ab04      	add	r3, sp, #16
 80016f4:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80016f8:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80016fa:	f010 f9a1 	bl	8011a40 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80016fe:	b003      	add	sp, #12
 8001700:	f85d eb04 	ldr.w	lr, [sp], #4
 8001704:	b002      	add	sp, #8
 8001706:	4770      	bx	lr

08001708 <TimestampNow>:
{
 8001708:	b530      	push	{r4, r5, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	4604      	mov	r4, r0
 800170e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001710:	a802      	add	r0, sp, #8
 8001712:	f00f ff0b 	bl	801152c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001716:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	9b02      	ldr	r3, [sp, #8]
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <TimestampNow+0x2c>)
 8001720:	2110      	movs	r1, #16
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff ffe2 	bl	80016ec <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001728:	4620      	mov	r0, r4
 800172a:	f7fe fd25 	bl	8000178 <strlen>
 800172e:	8028      	strh	r0, [r5, #0]
}
 8001730:	b005      	add	sp, #20
 8001732:	bd30      	pop	{r4, r5, pc}
 8001734:	08011dd8 	.word	0x08011dd8

08001738 <SystemApp_Init>:
{
 8001738:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800173e:	6893      	ldr	r3, [r2, #8]
 8001740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001744:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001746:	f00f ff75 	bl	8011634 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800174a:	2401      	movs	r4, #1
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <SystemApp_Init+0x4c>)
 800174e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001750:	f000 f8b8 	bl	80018c4 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001754:	f00f fc10 	bl	8010f78 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001758:	480b      	ldr	r0, [pc, #44]	; (8001788 <SystemApp_Init+0x50>)
 800175a:	f00f fc27 	bl	8010fac <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <SystemApp_Init+0x54>)
 8001760:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001764:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001766:	2002      	movs	r0, #2
 8001768:	f00f fc26 	bl	8010fb8 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 800176c:	f7ff fc26 	bl	8000fbc <SYS_InitMeasurement>
  EnvSensors_Init();
 8001770:	f000 f910 	bl	8001994 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001774:	f00f fd30 	bl	80111d8 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001778:	4621      	mov	r1, r4
 800177a:	4620      	mov	r0, r4
 800177c:	f00f fd4c 	bl	8011218 <UTIL_LPM_SetOffMode>
}
 8001780:	bd10      	pop	{r4, pc}
 8001782:	bf00      	nop
 8001784:	200001dc 	.word	0x200001dc
 8001788:	08001709 	.word	0x08001709
 800178c:	58004000 	.word	0x58004000

08001790 <UTIL_SEQ_Idle>:
{
 8001790:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001792:	f00f fd57 	bl	8011244 <UTIL_LPM_EnterLowPower>
}
 8001796:	bd08      	pop	{r3, pc}

08001798 <GetBatteryLevel>:
{
 8001798:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800179a:	f7ff fc17 	bl	8000fcc <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 800179e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017a2:	4298      	cmp	r0, r3
 80017a4:	d80d      	bhi.n	80017c2 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80017a6:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80017aa:	d30c      	bcc.n	80017c6 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80017ac:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80017b0:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80017b4:	0040      	lsls	r0, r0, #1
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <GetBatteryLevel+0x34>)
 80017b8:	fba3 3000 	umull	r3, r0, r3, r0
 80017bc:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80017c0:	e000      	b.n	80017c4 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80017c2:	20fe      	movs	r0, #254	; 0xfe
}
 80017c4:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80017c6:	2000      	movs	r0, #0
 80017c8:	e7fc      	b.n	80017c4 <GetBatteryLevel+0x2c>
 80017ca:	bf00      	nop
 80017cc:	1b4e81b5 	.word	0x1b4e81b5

080017d0 <GetTemperatureLevel>:
{
 80017d0:	b500      	push	{lr}
 80017d2:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80017d4:	4668      	mov	r0, sp
 80017d6:	f000 f8c1 	bl	800195c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80017da:	9801      	ldr	r0, [sp, #4]
 80017dc:	f7ff f99e 	bl	8000b1c <__aeabi_f2iz>
}
 80017e0:	b200      	sxth	r0, r0
 80017e2:	b007      	add	sp, #28
 80017e4:	f85d fb04 	ldr.w	pc, [sp], #4

080017e8 <GetUniqueId>:
{
 80017e8:	b538      	push	{r3, r4, r5, lr}
 80017ea:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <GetUniqueId+0x68>)
 80017ee:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80017f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f6:	d013      	beq.n	8001820 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 80017f8:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 80017fa:	0a1a      	lsrs	r2, r3, #8
 80017fc:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 80017fe:	0c1a      	lsrs	r2, r3, #16
 8001800:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001802:	0e1b      	lsrs	r3, r3, #24
 8001804:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <GetUniqueId+0x68>)
 8001808:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 800180c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800180e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001812:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001814:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001816:	0c1a      	lsrs	r2, r3, #16
 8001818:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 800181a:	0e1b      	lsrs	r3, r3, #24
 800181c:	7003      	strb	r3, [r0, #0]
}
 800181e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001820:	f001 f8e4 	bl	80029ec <HAL_GetUIDw0>
 8001824:	4605      	mov	r5, r0
 8001826:	f001 f8ed 	bl	8002a04 <HAL_GetUIDw2>
 800182a:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 800182c:	f001 f8e4 	bl	80029f8 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001830:	0e2b      	lsrs	r3, r5, #24
 8001832:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001834:	0c2b      	lsrs	r3, r5, #16
 8001836:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001838:	0a2b      	lsrs	r3, r5, #8
 800183a:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 800183c:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800183e:	0e03      	lsrs	r3, r0, #24
 8001840:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001842:	0c03      	lsrs	r3, r0, #16
 8001844:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001846:	0a03      	lsrs	r3, r0, #8
 8001848:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800184a:	7020      	strb	r0, [r4, #0]
 800184c:	e7e7      	b.n	800181e <GetUniqueId+0x36>
 800184e:	bf00      	nop
 8001850:	1fff7000 	.word	0x1fff7000

08001854 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <GetDevAddr+0x24>)
 8001856:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 800185a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800185e:	d000      	beq.n	8001862 <GetDevAddr+0xe>
}
 8001860:	4770      	bx	lr
{
 8001862:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001864:	f001 f8c2 	bl	80029ec <HAL_GetUIDw0>
 8001868:	4604      	mov	r4, r0
 800186a:	f001 f8c5 	bl	80029f8 <HAL_GetUIDw1>
 800186e:	4044      	eors	r4, r0
 8001870:	f001 f8c8 	bl	8002a04 <HAL_GetUIDw2>
 8001874:	4060      	eors	r0, r4
}
 8001876:	bd10      	pop	{r4, pc}
 8001878:	1fff7000 	.word	0x1fff7000

0800187c <UTIL_ADV_TRACE_PreSendHook>:
{
 800187c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800187e:	2101      	movs	r1, #1
 8001880:	2002      	movs	r0, #2
 8001882:	f00f fcb3 	bl	80111ec <UTIL_LPM_SetStopMode>
}
 8001886:	bd08      	pop	{r3, pc}

08001888 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001888:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800188a:	2100      	movs	r1, #0
 800188c:	2002      	movs	r0, #2
 800188e:	f00f fcad 	bl	80111ec <UTIL_LPM_SetStopMode>
}
 8001892:	bd08      	pop	{r3, pc}

08001894 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001894:	2000      	movs	r0, #0
 8001896:	4770      	bx	lr

08001898 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001898:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_GetTick+0x14>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b90b      	cbnz	r3, 80018a4 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80018a0:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80018a2:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80018a4:	f000 f8a2 	bl	80019ec <TIMER_IF_GetTimerValue>
 80018a8:	e7fb      	b.n	80018a2 <HAL_GetTick+0xa>
 80018aa:	bf00      	nop
 80018ac:	200001dc 	.word	0x200001dc

080018b0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80018b0:	b500      	push	{lr}
 80018b2:	b083      	sub	sp, #12
 80018b4:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80018b6:	9801      	ldr	r0, [sp, #4]
 80018b8:	f000 f97e 	bl	8001bb8 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80018bc:	b003      	add	sp, #12
 80018be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080018c4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80018c8:	4a22      	ldr	r2, [pc, #136]	; (8001954 <DBG_Init+0x90>)
 80018ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80018d6:	f001 f89b 	bl	8002a10 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80018da:	f001 f8a1 	bl	8002a20 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80018de:	f001 f8a7 	bl	8002a30 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80018e2:	2400      	movs	r4, #0
 80018e4:	9403      	str	r4, [sp, #12]
 80018e6:	9404      	str	r4, [sp, #16]
 80018e8:	9405      	str	r4, [sp, #20]
 80018ea:	9406      	str	r4, [sp, #24]
 80018ec:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018fc:	f042 0202 	orr.w	r2, r2, #2
 8001900:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001904:	f002 0202 	and.w	r2, r2, #2
 8001908:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800190a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800190c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800190e:	f042 0202 	orr.w	r2, r2, #2
 8001912:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800191c:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800191e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001922:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001924:	4d0c      	ldr	r5, [pc, #48]	; (8001958 <DBG_Init+0x94>)
 8001926:	a903      	add	r1, sp, #12
 8001928:	4628      	mov	r0, r5
 800192a:	f002 f9df 	bl	8003cec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 800192e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001932:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001934:	a903      	add	r1, sp, #12
 8001936:	4628      	mov	r0, r5
 8001938:	f002 f9d8 	bl	8003cec <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800193c:	4622      	mov	r2, r4
 800193e:	4639      	mov	r1, r7
 8001940:	4628      	mov	r0, r5
 8001942:	f002 fb23 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001946:	4622      	mov	r2, r4
 8001948:	4631      	mov	r1, r6
 800194a:	4628      	mov	r0, r5
 800194c:	f002 fb1e 	bl	8003f8c <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001950:	b009      	add	sp, #36	; 0x24
 8001952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001954:	58000800 	.word	0x58000800
 8001958:	48000400 	.word	0x48000400

0800195c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800195c:	b510      	push	{r4, lr}
 800195e:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001960:	f7ff fb56 	bl	8001010 <SYS_GetTemperatureLevel>
 8001964:	f340 200f 	sbfx	r0, r0, #8, #16
 8001968:	f7fe ff34 	bl	80007d4 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <EnvSensors_Read+0x28>)
 800196e:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001970:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <EnvSensors_Read+0x2c>)
 8001974:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <EnvSensors_Read+0x30>)
 8001978:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <EnvSensors_Read+0x34>)
 800197c:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 800197e:	2000      	movs	r0, #0
 8001980:	bd10      	pop	{r4, pc}
 8001982:	bf00      	nop
 8001984:	42480000 	.word	0x42480000
 8001988:	447a0000 	.word	0x447a0000
 800198c:	003e090d 	.word	0x003e090d
 8001990:	000503ab 	.word	0x000503ab

08001994 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001994:	2000      	movs	r0, #0
 8001996:	4770      	bx	lr

08001998 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <TIMER_IF_SetTimerContext+0x1c>)
 800199a:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800199c:	e001      	b.n	80019a2 <TIMER_IF_SetTimerContext+0xa>
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <TIMER_IF_SetTimerContext+0x1c>)
 80019a0:	6898      	ldr	r0, [r3, #8]
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <TIMER_IF_SetTimerContext+0x1c>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4283      	cmp	r3, r0
 80019a8:	d1f9      	bne.n	800199e <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 80019aa:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 80019ac:	4b02      	ldr	r3, [pc, #8]	; (80019b8 <TIMER_IF_SetTimerContext+0x20>)
 80019ae:	6018      	str	r0, [r3, #0]
}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40002800 	.word	0x40002800
 80019b8:	200001e0 	.word	0x200001e0

080019bc <TIMER_IF_GetTimerContext>:
}
 80019bc:	4b01      	ldr	r3, [pc, #4]	; (80019c4 <TIMER_IF_GetTimerContext+0x8>)
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200001e0 	.word	0x200001e0

080019c8 <TIMER_IF_GetTimerElapsedTime>:
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80019ca:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80019cc:	e001      	b.n	80019d2 <TIMER_IF_GetTimerElapsedTime+0xa>
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80019d0:	6898      	ldr	r0, [r3, #8]
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4283      	cmp	r3, r0
 80019d8:	d1f9      	bne.n	80019ce <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 80019da:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <TIMER_IF_GetTimerElapsedTime+0x20>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	1ac0      	subs	r0, r0, r3
 80019e2:	4770      	bx	lr
 80019e4:	40002800 	.word	0x40002800
 80019e8:	200001e0 	.word	0x200001e0

080019ec <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <TIMER_IF_GetTimerValue+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b153      	cbz	r3, 8001a08 <TIMER_IF_GetTimerValue+0x1c>
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <TIMER_IF_GetTimerValue+0x24>)
 80019f4:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80019f6:	e001      	b.n	80019fc <TIMER_IF_GetTimerValue+0x10>
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <TIMER_IF_GetTimerValue+0x24>)
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <TIMER_IF_GetTimerValue+0x24>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4283      	cmp	r3, r0
 8001a02:	d1f9      	bne.n	80019f8 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001a04:	43c0      	mvns	r0, r0
 8001a06:	4770      	bx	lr
  uint32_t ret = 0;
 8001a08:	2000      	movs	r0, #0
}
 8001a0a:	4770      	bx	lr
 8001a0c:	200001dd 	.word	0x200001dd
 8001a10:	40002800 	.word	0x40002800

08001a14 <TIMER_IF_GetMinimumTimeout>:
}
 8001a14:	2003      	movs	r0, #3
 8001a16:	4770      	bx	lr

08001a18 <TIMER_IF_Convert_ms2Tick>:
{
 8001a18:	b508      	push	{r3, lr}
 8001a1a:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a20:	2300      	movs	r3, #0
 8001a22:	0280      	lsls	r0, r0, #10
 8001a24:	0d89      	lsrs	r1, r1, #22
 8001a26:	f7ff f8bf 	bl	8000ba8 <__aeabi_uldivmod>
}
 8001a2a:	bd08      	pop	{r3, pc}

08001a2c <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001a2c:	0ec2      	lsrs	r2, r0, #27
 8001a2e:	0143      	lsls	r3, r0, #5
 8001a30:	1a1b      	subs	r3, r3, r0
 8001a32:	f162 0200 	sbc.w	r2, r2, #0
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	181b      	adds	r3, r3, r0
 8001a40:	f142 0000 	adc.w	r0, r2, #0
 8001a44:	00c0      	lsls	r0, r0, #3
 8001a46:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001a4a:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001a4e:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001a52:	4770      	bx	lr

08001a54 <TIMER_IF_StopTimer>:
{
 8001a54:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <TIMER_IF_StopTimer+0x20>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001a5c:	4c06      	ldr	r4, [pc, #24]	; (8001a78 <TIMER_IF_StopTimer+0x24>)
 8001a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a62:	4620      	mov	r0, r4
 8001a64:	f003 fa22 	bl	8004eac <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6c:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001a6e:	2000      	movs	r0, #0
 8001a70:	bd10      	pop	{r4, pc}
 8001a72:	bf00      	nop
 8001a74:	40002800 	.word	0x40002800
 8001a78:	20000198 	.word	0x20000198

08001a7c <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001a7c:	b508      	push	{r3, lr}
 8001a7e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001a80:	2102      	movs	r1, #2
 8001a82:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001a84:	f003 fc55 	bl	8005332 <HAL_RTCEx_BKUPWrite>
}
 8001a88:	bd08      	pop	{r3, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000198 	.word	0x20000198

08001a90 <TIMER_IF_Init>:
{
 8001a90:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <TIMER_IF_Init+0x40>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b10b      	cbz	r3, 8001a9c <TIMER_IF_Init+0xc>
}
 8001a98:	2000      	movs	r0, #0
 8001a9a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001a9c:	4c0d      	ldr	r4, [pc, #52]	; (8001ad4 <TIMER_IF_Init+0x44>)
 8001a9e:	f04f 35ff 	mov.w	r5, #4294967295
 8001aa2:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001aa4:	f7ff fd1c 	bl	80014e0 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001aa8:	f7ff ffd4 	bl	8001a54 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f003 f9fb 	bl	8004eac <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ab6:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f003 fbd9 	bl	8005270 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff ffdc 	bl	8001a7c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001ac4:	f7ff ff68 	bl	8001998 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001ac8:	4b01      	ldr	r3, [pc, #4]	; (8001ad0 <TIMER_IF_Init+0x40>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e7e3      	b.n	8001a98 <TIMER_IF_Init+0x8>
 8001ad0:	200001dd 	.word	0x200001dd
 8001ad4:	20000198 	.word	0x20000198

08001ad8 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001ad8:	b508      	push	{r3, lr}
 8001ada:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001adc:	2100      	movs	r1, #0
 8001ade:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001ae0:	f003 fc27 	bl	8005332 <HAL_RTCEx_BKUPWrite>
}
 8001ae4:	bd08      	pop	{r3, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000198 	.word	0x20000198

08001aec <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001aec:	b508      	push	{r3, lr}
 8001aee:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001af0:	2101      	movs	r1, #1
 8001af2:	4802      	ldr	r0, [pc, #8]	; (8001afc <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001af4:	f003 fc1d 	bl	8005332 <HAL_RTCEx_BKUPWrite>
}
 8001af8:	bd08      	pop	{r3, pc}
 8001afa:	bf00      	nop
 8001afc:	20000198 	.word	0x20000198

08001b00 <TIMER_IF_StartTimer>:
{
 8001b00:	b510      	push	{r4, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
 8001b04:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001b06:	222c      	movs	r2, #44	; 0x2c
 8001b08:	2100      	movs	r1, #0
 8001b0a:	a801      	add	r0, sp, #4
 8001b0c:	f010 f880 	bl	8011c10 <memset>
  TIMER_IF_StopTimer();
 8001b10:	f7ff ffa0 	bl	8001a54 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <TIMER_IF_StartTimer+0x48>)
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001b1e:	43e4      	mvns	r4, r4
 8001b20:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b22:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001b24:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b28:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b30:	2201      	movs	r2, #1
 8001b32:	a901      	add	r1, sp, #4
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <TIMER_IF_StartTimer+0x4c>)
 8001b36:	f003 fadf 	bl	80050f8 <HAL_RTC_SetAlarm_IT>
 8001b3a:	b910      	cbnz	r0, 8001b42 <TIMER_IF_StartTimer+0x42>
}
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	b00c      	add	sp, #48	; 0x30
 8001b40:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001b42:	f7ff fc77 	bl	8001434 <Error_Handler>
 8001b46:	e7f9      	b.n	8001b3c <TIMER_IF_StartTimer+0x3c>
 8001b48:	200001e0 	.word	0x200001e0
 8001b4c:	20000198 	.word	0x20000198

08001b50 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001b50:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001b52:	2102      	movs	r1, #2
 8001b54:	4801      	ldr	r0, [pc, #4]	; (8001b5c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001b56:	f003 fbf3 	bl	8005340 <HAL_RTCEx_BKUPRead>
}
 8001b5a:	bd08      	pop	{r3, pc}
 8001b5c:	20000198 	.word	0x20000198

08001b60 <TIMER_IF_GetTime>:
{
 8001b60:	b538      	push	{r3, r4, r5, lr}
 8001b62:	4605      	mov	r5, r0
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <TIMER_IF_GetTime+0x34>)
 8001b66:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001b68:	e001      	b.n	8001b6e <TIMER_IF_GetTime+0xe>
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <TIMER_IF_GetTime+0x34>)
 8001b6c:	689c      	ldr	r4, [r3, #8]
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <TIMER_IF_GetTime+0x34>)
 8001b70:	6892      	ldr	r2, [r2, #8]
 8001b72:	42a2      	cmp	r2, r4
 8001b74:	d1f9      	bne.n	8001b6a <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001b76:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001b78:	f7ff ffea 	bl	8001b50 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001b7c:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001b7e:	0aa4      	lsrs	r4, r4, #10
 8001b80:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001b84:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001b88:	f7ff ff50 	bl	8001a2c <TIMER_IF_Convert_Tick2ms>
 8001b8c:	8028      	strh	r0, [r5, #0]
}
 8001b8e:	4620      	mov	r0, r4
 8001b90:	bd38      	pop	{r3, r4, r5, pc}
 8001b92:	bf00      	nop
 8001b94:	40002800 	.word	0x40002800

08001b98 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001b98:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001b9e:	f003 fbcf 	bl	8005340 <HAL_RTCEx_BKUPRead>
}
 8001ba2:	bd08      	pop	{r3, pc}
 8001ba4:	20000198 	.word	0x20000198

08001ba8 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001ba8:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001baa:	2101      	movs	r1, #1
 8001bac:	4801      	ldr	r0, [pc, #4]	; (8001bb4 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001bae:	f003 fbc7 	bl	8005340 <HAL_RTCEx_BKUPRead>
}
 8001bb2:	bd08      	pop	{r3, pc}
 8001bb4:	20000198 	.word	0x20000198

08001bb8 <TIMER_IF_DelayMs>:
{
 8001bb8:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001bba:	f7ff ff2d 	bl	8001a18 <TIMER_IF_Convert_ms2Tick>
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <TIMER_IF_DelayMs+0x3c>)
 8001bc0:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001bc2:	e001      	b.n	8001bc8 <TIMER_IF_DelayMs+0x10>
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <TIMER_IF_DelayMs+0x3c>)
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <TIMER_IF_DelayMs+0x3c>)
 8001bca:	6892      	ldr	r2, [r2, #8]
 8001bcc:	428a      	cmp	r2, r1
 8001bce:	d1f9      	bne.n	8001bc4 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001bd0:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bd2:	e00a      	b.n	8001bea <TIMER_IF_DelayMs+0x32>
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <TIMER_IF_DelayMs+0x3c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <TIMER_IF_DelayMs+0x3c>)
 8001bda:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1f9      	bne.n	8001bd4 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001be0:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001be2:	1a5b      	subs	r3, r3, r1
 8001be4:	4283      	cmp	r3, r0
 8001be6:	d203      	bcs.n	8001bf0 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001be8:	bf00      	nop
 8001bea:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <TIMER_IF_DelayMs+0x3c>)
 8001bec:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001bee:	e7f3      	b.n	8001bd8 <TIMER_IF_DelayMs+0x20>
}
 8001bf0:	bd08      	pop	{r3, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40002800 	.word	0x40002800

08001bf8 <HAL_RTC_AlarmAEventCallback>:
{
 8001bf8:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001bfa:	f00f fe3f 	bl	801187c <UTIL_TIMER_IRQ_Handler>
}
 8001bfe:	bd08      	pop	{r3, pc}

08001c00 <HAL_RTCEx_SSRUEventCallback>:
{
 8001c00:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001c02:	f7ff ffa5 	bl	8001b50 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001c06:	3001      	adds	r0, #1
 8001c08:	f7ff ff38 	bl	8001a7c <TIMER_IF_BkUp_Write_MSBticks>
}
 8001c0c:	bd08      	pop	{r3, pc}
	...

08001c10 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c10:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c12:	4817      	ldr	r0, [pc, #92]	; (8001c70 <MX_USART2_UART_Init+0x60>)
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <MX_USART2_UART_Init+0x64>)
 8001c16:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001c18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001c1c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c22:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c24:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c26:	220c      	movs	r2, #12
 8001c28:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c2e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c30:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c32:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c34:	f004 fe83 	bl	800693e <HAL_UART_Init>
 8001c38:	b970      	cbnz	r0, 8001c58 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	480c      	ldr	r0, [pc, #48]	; (8001c70 <MX_USART2_UART_Init+0x60>)
 8001c3e:	f005 f840 	bl	8006cc2 <HAL_UARTEx_SetTxFifoThreshold>
 8001c42:	b960      	cbnz	r0, 8001c5e <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c44:	2100      	movs	r1, #0
 8001c46:	480a      	ldr	r0, [pc, #40]	; (8001c70 <MX_USART2_UART_Init+0x60>)
 8001c48:	f005 f860 	bl	8006d0c <HAL_UARTEx_SetRxFifoThreshold>
 8001c4c:	b950      	cbnz	r0, 8001c64 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001c4e:	4808      	ldr	r0, [pc, #32]	; (8001c70 <MX_USART2_UART_Init+0x60>)
 8001c50:	f005 f813 	bl	8006c7a <HAL_UARTEx_EnableFifoMode>
 8001c54:	b948      	cbnz	r0, 8001c6a <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c56:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c58:	f7ff fbec 	bl	8001434 <Error_Handler>
 8001c5c:	e7ed      	b.n	8001c3a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001c5e:	f7ff fbe9 	bl	8001434 <Error_Handler>
 8001c62:	e7ef      	b.n	8001c44 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001c64:	f7ff fbe6 	bl	8001434 <Error_Handler>
 8001c68:	e7f1      	b.n	8001c4e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001c6a:	f7ff fbe3 	bl	8001434 <Error_Handler>
}
 8001c6e:	e7f2      	b.n	8001c56 <MX_USART2_UART_Init+0x46>
 8001c70:	20000244 	.word	0x20000244
 8001c74:	40004400 	.word	0x40004400

08001c78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c78:	b530      	push	{r4, r5, lr}
 8001c7a:	b097      	sub	sp, #92	; 0x5c
 8001c7c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7e:	2100      	movs	r1, #0
 8001c80:	9111      	str	r1, [sp, #68]	; 0x44
 8001c82:	9112      	str	r1, [sp, #72]	; 0x48
 8001c84:	9113      	str	r1, [sp, #76]	; 0x4c
 8001c86:	9114      	str	r1, [sp, #80]	; 0x50
 8001c88:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c8a:	2238      	movs	r2, #56	; 0x38
 8001c8c:	a803      	add	r0, sp, #12
 8001c8e:	f00f ffbf 	bl	8011c10 <memset>
  if(uartHandle->Instance==USART2)
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_UART_MspInit+0xd4>)
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d001      	beq.n	8001c9e <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c9a:	b017      	add	sp, #92	; 0x5c
 8001c9c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_UART_MspInit+0xd8>)
 8001ca4:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca6:	a803      	add	r0, sp, #12
 8001ca8:	f002 ffb6 	bl	8004c18 <HAL_RCCEx_PeriphCLKConfig>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d144      	bne.n	8001d3a <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cba:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cbe:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001cc2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001cc4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001cd6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001cd8:	230c      	movs	r3, #12
 8001cda:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2500      	movs	r5, #0
 8001ce2:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ce8:	2307      	movs	r3, #7
 8001cea:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	a911      	add	r1, sp, #68	; 0x44
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f001 fffb 	bl	8003cec <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001cf6:	4817      	ldr	r0, [pc, #92]	; (8001d54 <HAL_UART_MspInit+0xdc>)
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_UART_MspInit+0xe0>)
 8001cfa:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001cfc:	2314      	movs	r3, #20
 8001cfe:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d00:	2310      	movs	r3, #16
 8001d02:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d04:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0a:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d0c:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d0e:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d10:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d12:	f001 fc53 	bl	80035bc <HAL_DMA_Init>
 8001d16:	b998      	cbnz	r0, 8001d40 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001d18:	2110      	movs	r1, #16
 8001d1a:	480e      	ldr	r0, [pc, #56]	; (8001d54 <HAL_UART_MspInit+0xdc>)
 8001d1c:	f001 fe50 	bl	80039c0 <HAL_DMA_ConfigChannelAttributes>
 8001d20:	b988      	cbnz	r0, 8001d46 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_UART_MspInit+0xdc>)
 8001d24:	67a3      	str	r3, [r4, #120]	; 0x78
 8001d26:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	2025      	movs	r0, #37	; 0x25
 8001d2e:	f001 fb7d 	bl	800342c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d32:	2025      	movs	r0, #37	; 0x25
 8001d34:	f001 fbb2 	bl	800349c <HAL_NVIC_EnableIRQ>
}
 8001d38:	e7af      	b.n	8001c9a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001d3a:	f7ff fb7b 	bl	8001434 <Error_Handler>
 8001d3e:	e7b7      	b.n	8001cb0 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001d40:	f7ff fb78 	bl	8001434 <Error_Handler>
 8001d44:	e7e8      	b.n	8001d18 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001d46:	f7ff fb75 	bl	8001434 <Error_Handler>
 8001d4a:	e7ea      	b.n	8001d22 <HAL_UART_MspInit+0xaa>
 8001d4c:	40004400 	.word	0x40004400
 8001d50:	000c0004 	.word	0x000c0004
 8001d54:	200001e4 	.word	0x200001e4
 8001d58:	40020058 	.word	0x40020058

08001d5c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001d5c:	6802      	ldr	r2, [r0, #0]
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_UART_MspDeInit+0x34>)
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d000      	beq.n	8001d66 <HAL_UART_MspDeInit+0xa>
 8001d64:	4770      	bx	lr
{
 8001d66:	b510      	push	{r4, lr}
 8001d68:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d6e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001d70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001d74:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001d76:	210c      	movs	r1, #12
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7c:	f002 f888 	bl	8003e90 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001d80:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001d82:	f001 fc8d 	bl	80036a0 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001d86:	2025      	movs	r0, #37	; 0x25
 8001d88:	f001 fb96 	bl	80034b8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001d8c:	bd10      	pop	{r4, pc}
 8001d8e:	bf00      	nop
 8001d90:	40004400 	.word	0x40004400

08001d94 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001d94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <vcom_Init+0x20>)
 8001d98:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001d9a:	f7ff f98f 	bl	80010bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d9e:	f7ff ff37 	bl	8001c10 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <vcom_Init+0x24>)
 8001da4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001da8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001db0:	2000      	movs	r0, #0
 8001db2:	bd08      	pop	{r3, pc}
 8001db4:	200002d8 	.word	0x200002d8
 8001db8:	58000800 	.word	0x58000800

08001dbc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001dbc:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dc8:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dcc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001dd2:	4804      	ldr	r0, [pc, #16]	; (8001de4 <vcom_DeInit+0x28>)
 8001dd4:	f7ff ffc2 	bl	8001d5c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001dd8:	200f      	movs	r0, #15
 8001dda:	f001 fb6d 	bl	80034b8 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001dde:	2000      	movs	r0, #0
 8001de0:	bd08      	pop	{r3, pc}
 8001de2:	bf00      	nop
 8001de4:	20000244 	.word	0x20000244

08001de8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001de8:	b508      	push	{r3, lr}
 8001dea:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001dec:	4601      	mov	r1, r0
 8001dee:	4802      	ldr	r0, [pc, #8]	; (8001df8 <vcom_Trace_DMA+0x10>)
 8001df0:	f003 fe72 	bl	8005ad8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001df4:	2000      	movs	r0, #0
 8001df6:	bd08      	pop	{r3, pc}
 8001df8:	20000244 	.word	0x20000244

08001dfc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001dfc:	b510      	push	{r4, lr}
 8001dfe:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <vcom_ReceiveInit+0x50>)
 8001e02:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001e04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e08:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001e0a:	ab02      	add	r3, sp, #8
 8001e0c:	e913 0006 	ldmdb	r3, {r1, r2}
 8001e10:	480f      	ldr	r0, [pc, #60]	; (8001e50 <vcom_ReceiveInit+0x54>)
 8001e12:	f004 feda 	bl	8006bca <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <vcom_ReceiveInit+0x54>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001e20:	d1f9      	bne.n	8001e16 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001e28:	d0fb      	beq.n	8001e22 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001e30:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001e32:	4c07      	ldr	r4, [pc, #28]	; (8001e50 <vcom_ReceiveInit+0x54>)
 8001e34:	4620      	mov	r0, r4
 8001e36:	f004 ff09 	bl	8006c4c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4905      	ldr	r1, [pc, #20]	; (8001e54 <vcom_ReceiveInit+0x58>)
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f004 fe54 	bl	8006aec <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001e44:	2000      	movs	r0, #0
 8001e46:	b002      	add	sp, #8
 8001e48:	bd10      	pop	{r4, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200002d4 	.word	0x200002d4
 8001e50:	20000244 	.word	0x20000244
 8001e54:	200002dc 	.word	0x200002dc

08001e58 <vcom_Resume>:

void vcom_Resume(void)
{
 8001e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <vcom_Resume+0x20>)
 8001e5c:	f004 fd6f 	bl	800693e <HAL_UART_Init>
 8001e60:	b920      	cbnz	r0, 8001e6c <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e62:	4806      	ldr	r0, [pc, #24]	; (8001e7c <vcom_Resume+0x24>)
 8001e64:	f001 fbaa 	bl	80035bc <HAL_DMA_Init>
 8001e68:	b918      	cbnz	r0, 8001e72 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001e6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e6c:	f7ff fae2 	bl	8001434 <Error_Handler>
 8001e70:	e7f7      	b.n	8001e62 <vcom_Resume+0xa>
    Error_Handler();
 8001e72:	f7ff fadf 	bl	8001434 <Error_Handler>
}
 8001e76:	e7f8      	b.n	8001e6a <vcom_Resume+0x12>
 8001e78:	20000244 	.word	0x20000244
 8001e7c:	200001e4 	.word	0x200001e4

08001e80 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001e82:	6802      	ldr	r2, [r0, #0]
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <HAL_UART_TxCpltCallback+0x18>)
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d000      	beq.n	8001e8c <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001e8a:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_UART_TxCpltCallback+0x1c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2000      	movs	r0, #0
 8001e92:	4798      	blx	r3
}
 8001e94:	e7f9      	b.n	8001e8a <HAL_UART_TxCpltCallback+0xa>
 8001e96:	bf00      	nop
 8001e98:	40004400 	.word	0x40004400
 8001e9c:	200002d8 	.word	0x200002d8

08001ea0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001ea0:	6802      	ldr	r2, [r0, #0]
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_UART_RxCpltCallback+0x2c>)
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d000      	beq.n	8001eaa <HAL_UART_RxCpltCallback+0xa>
 8001ea8:	4770      	bx	lr
{
 8001eaa:	b510      	push	{r4, lr}
 8001eac:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_UART_RxCpltCallback+0x30>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b12b      	cbz	r3, 8001ec0 <HAL_UART_RxCpltCallback+0x20>
 8001eb4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001eb8:	b912      	cbnz	r2, 8001ec0 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001eba:	2101      	movs	r1, #1
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <HAL_UART_RxCpltCallback+0x34>)
 8001ebe:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4904      	ldr	r1, [pc, #16]	; (8001ed4 <HAL_UART_RxCpltCallback+0x34>)
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f004 fe11 	bl	8006aec <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001eca:	bd10      	pop	{r4, pc}
 8001ecc:	40004400 	.word	0x40004400
 8001ed0:	200002d4 	.word	0x200002d4
 8001ed4:	200002dc 	.word	0x200002dc

08001ed8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001ed8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001eda:	f7ff fc2d 	bl	8001738 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001ede:	f000 fb8f 	bl	8002600 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001ee2:	bd08      	pop	{r3, pc}

08001ee4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001ee4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eea:	f00f fa17 	bl	801131c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001eee:	bd08      	pop	{r3, pc}

08001ef0 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8001ef0:	4b01      	ldr	r3, [pc, #4]	; (8001ef8 <OnTxFrameCtrlChanged+0x8>)
 8001ef2:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000058 	.word	0x20000058

08001efc <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8001efc:	4b01      	ldr	r3, [pc, #4]	; (8001f04 <OnPingSlotPeriodicityChanged+0x8>)
 8001efe:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000058 	.word	0x20000058

08001f08 <OnBeaconStatusChange>:
  if (params != NULL)
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d03f      	beq.n	8001f8c <OnBeaconStatusChange+0x84>
{
 8001f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f10:	b08c      	sub	sp, #48	; 0x30
 8001f12:	4603      	mov	r3, r0
    switch (params->State)
 8001f14:	7842      	ldrb	r2, [r0, #1]
 8001f16:	2a02      	cmp	r2, #2
 8001f18:	d00a      	beq.n	8001f30 <OnBeaconStatusChange+0x28>
 8001f1a:	2a03      	cmp	r2, #3
 8001f1c:	d02f      	beq.n	8001f7e <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <OnBeaconStatusChange+0x88>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	4611      	mov	r1, r2
 8001f24:	2002      	movs	r0, #2
 8001f26:	f00f f89b 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 8001f2a:	b00c      	add	sp, #48	; 0x30
 8001f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8001f30:	7c02      	ldrb	r2, [r0, #16]
 8001f32:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8001f36:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8001f3a:	7d9c      	ldrb	r4, [r3, #22]
 8001f3c:	7ddd      	ldrb	r5, [r3, #23]
 8001f3e:	7e1e      	ldrb	r6, [r3, #24]
 8001f40:	7e5f      	ldrb	r7, [r3, #25]
 8001f42:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8001f46:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8001f4a:	f893 801c 	ldrb.w	r8, [r3, #28]
 8001f4e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8001f52:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8001f56:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001f5a:	9708      	str	r7, [sp, #32]
 8001f5c:	9607      	str	r6, [sp, #28]
 8001f5e:	9506      	str	r5, [sp, #24]
 8001f60:	9405      	str	r4, [sp, #20]
 8001f62:	685c      	ldr	r4, [r3, #4]
 8001f64:	9404      	str	r4, [sp, #16]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	9303      	str	r3, [sp, #12]
 8001f6a:	9002      	str	r0, [sp, #8]
 8001f6c:	9101      	str	r1, [sp, #4]
 8001f6e:	9200      	str	r2, [sp, #0]
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <OnBeaconStatusChange+0x8c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	4611      	mov	r1, r2
 8001f76:	2002      	movs	r0, #2
 8001f78:	f00f f872 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8001f7c:	e7d5      	b.n	8001f2a <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <OnBeaconStatusChange+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	4611      	mov	r1, r2
 8001f84:	2002      	movs	r0, #2
 8001f86:	f00f f86b 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 8001f8a:	e7ce      	b.n	8001f2a <OnBeaconStatusChange+0x22>
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	08011e34 	.word	0x08011e34
 8001f94:	08011e4c 	.word	0x08011e4c
 8001f98:	08011ec0 	.word	0x08011ec0

08001f9c <OnClassChange>:
{
 8001f9c:	b500      	push	{lr}
 8001f9e:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <OnClassChange+0x1c>)
 8001fa2:	5c1b      	ldrb	r3, [r3, r0]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <OnClassChange+0x20>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4611      	mov	r1, r2
 8001fac:	2002      	movs	r0, #2
 8001fae:	f00f f857 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 8001fb2:	b003      	add	sp, #12
 8001fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fb8:	08011efc 	.word	0x08011efc
 8001fbc:	08011ee0 	.word	0x08011ee0

08001fc0 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8001fc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8001fc2:	2801      	cmp	r0, #1
 8001fc4:	d006      	beq.n	8001fd4 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <OnNvmDataChange+0x24>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4611      	mov	r1, r2
 8001fcc:	2002      	movs	r0, #2
 8001fce:	f00f f847 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8001fd2:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <OnNvmDataChange+0x28>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4611      	mov	r1, r2
 8001fda:	2002      	movs	r0, #2
 8001fdc:	f00f f840 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 8001fe0:	e7f7      	b.n	8001fd2 <OnNvmDataChange+0x12>
 8001fe2:	bf00      	nop
 8001fe4:	08011f14 	.word	0x08011f14
 8001fe8:	08011f00 	.word	0x08011f00

08001fec <OnTxTimerEvent>:
{
 8001fec:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	f00f f95f 	bl	80112b4 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8001ff6:	4802      	ldr	r0, [pc, #8]	; (8002000 <OnTxTimerEvent+0x14>)
 8001ff8:	f00f fbe0 	bl	80117bc <UTIL_TIMER_Start>
}
 8001ffc:	bd08      	pop	{r3, pc}
 8001ffe:	bf00      	nop
 8002000:	20000434 	.word	0x20000434

08002004 <OnMacProcessNotify>:
{
 8002004:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002006:	2100      	movs	r1, #0
 8002008:	2001      	movs	r0, #1
 800200a:	f00f f953 	bl	80112b4 <UTIL_SEQ_SetTask>
}
 800200e:	bd08      	pop	{r3, pc}

08002010 <OnSystemReset>:
{
 8002010:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002012:	f005 fb65 	bl	80076e0 <LmHandlerHalt>
 8002016:	b100      	cbz	r0, 800201a <OnSystemReset+0xa>
}
 8002018:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800201a:	f004 ffe3 	bl	8006fe4 <LmHandlerJoinStatus>
 800201e:	2801      	cmp	r0, #1
 8002020:	d1fa      	bne.n	8002018 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002022:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002026:	4905      	ldr	r1, [pc, #20]	; (800203c <OnSystemReset+0x2c>)
 8002028:	68ca      	ldr	r2, [r1, #12]
 800202a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <OnSystemReset+0x30>)
 8002030:	4313      	orrs	r3, r2
 8002032:	60cb      	str	r3, [r1, #12]
 8002034:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002038:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800203a:	e7fd      	b.n	8002038 <OnSystemReset+0x28>
 800203c:	e000ed00 	.word	0xe000ed00
 8002040:	05fa0004 	.word	0x05fa0004

08002044 <OnTxPeriodicityChanged>:
{
 8002044:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <OnTxPeriodicityChanged+0x28>)
 8002048:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800204a:	b910      	cbnz	r0, 8002052 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800204c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002050:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002052:	4c07      	ldr	r4, [pc, #28]	; (8002070 <OnTxPeriodicityChanged+0x2c>)
 8002054:	4620      	mov	r0, r4
 8002056:	f00f fb57 	bl	8011708 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <OnTxPeriodicityChanged+0x28>)
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	4620      	mov	r0, r4
 8002060:	f00f fbf2 	bl	8011848 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002064:	4620      	mov	r0, r4
 8002066:	f00f fba9 	bl	80117bc <UTIL_TIMER_Start>
}
 800206a:	bd10      	pop	{r4, pc}
 800206c:	2000006c 	.word	0x2000006c
 8002070:	20000434 	.word	0x20000434

08002074 <OnTxData>:
  if ((params != NULL))
 8002074:	2800      	cmp	r0, #0
 8002076:	d042      	beq.n	80020fe <OnTxData+0x8a>
{
 8002078:	b510      	push	{r4, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800207e:	7803      	ldrb	r3, [r0, #0]
 8002080:	b90b      	cbnz	r3, 8002086 <OnTxData+0x12>
}
 8002082:	b004      	add	sp, #16
 8002084:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002086:	2201      	movs	r2, #1
 8002088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800208c:	481c      	ldr	r0, [pc, #112]	; (8002100 <OnTxData+0x8c>)
 800208e:	f001 ff7d 	bl	8003f8c <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8002092:	481c      	ldr	r0, [pc, #112]	; (8002104 <OnTxData+0x90>)
 8002094:	f00f fb92 	bl	80117bc <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <OnTxData+0x94>)
 800209a:	2200      	movs	r2, #0
 800209c:	4611      	mov	r1, r2
 800209e:	2002      	movs	r0, #2
 80020a0:	f00e ffde 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80020a4:	7c23      	ldrb	r3, [r4, #16]
 80020a6:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80020aa:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80020ae:	9103      	str	r1, [sp, #12]
 80020b0:	9202      	str	r2, [sp, #8]
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	68e3      	ldr	r3, [r4, #12]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <OnTxData+0x98>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	4611      	mov	r1, r2
 80020be:	2003      	movs	r0, #3
 80020c0:	f00e ffce 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <OnTxData+0x9c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	4611      	mov	r1, r2
 80020ca:	2003      	movs	r0, #3
 80020cc:	f00e ffc8 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80020d0:	7a23      	ldrb	r3, [r4, #8]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10c      	bne.n	80020f0 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80020d6:	7a63      	ldrb	r3, [r4, #9]
 80020d8:	b143      	cbz	r3, 80020ec <OnTxData+0x78>
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <OnTxData+0xa0>)
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <OnTxData+0xa4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	4611      	mov	r1, r2
 80020e4:	2003      	movs	r0, #3
 80020e6:	f00e ffbb 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 80020ea:	e7ca      	b.n	8002082 <OnTxData+0xe>
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <OnTxData+0xa8>)
 80020ee:	e7f5      	b.n	80020dc <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <OnTxData+0xac>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	4611      	mov	r1, r2
 80020f6:	2003      	movs	r0, #3
 80020f8:	f00e ffb2 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 80020fc:	e7c1      	b.n	8002082 <OnTxData+0xe>
 80020fe:	4770      	bx	lr
 8002100:	48000400 	.word	0x48000400
 8002104:	2000041c 	.word	0x2000041c
 8002108:	08011f34 	.word	0x08011f34
 800210c:	08011f68 	.word	0x08011f68
 8002110:	08011f9c 	.word	0x08011f9c
 8002114:	08011f30 	.word	0x08011f30
 8002118:	08011fac 	.word	0x08011fac
 800211c:	08011f28 	.word	0x08011f28
 8002120:	08011fc0 	.word	0x08011fc0

08002124 <OnJoinRequest>:
  if (joinParams != NULL)
 8002124:	b358      	cbz	r0, 800217e <OnJoinRequest+0x5a>
{
 8002126:	b510      	push	{r4, lr}
 8002128:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800212a:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800212e:	b9fb      	cbnz	r3, 8002170 <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002130:	4813      	ldr	r0, [pc, #76]	; (8002180 <OnJoinRequest+0x5c>)
 8002132:	f00f fae9 	bl	8011708 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800213c:	4811      	ldr	r0, [pc, #68]	; (8002184 <OnJoinRequest+0x60>)
 800213e:	f001 ff25 	bl	8003f8c <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <OnJoinRequest+0x64>)
 8002144:	2200      	movs	r2, #0
 8002146:	4611      	mov	r1, r2
 8002148:	2002      	movs	r0, #2
 800214a:	f00e ff89 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800214e:	79a3      	ldrb	r3, [r4, #6]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d006      	beq.n	8002162 <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <OnJoinRequest+0x68>)
 8002156:	2200      	movs	r2, #0
 8002158:	4611      	mov	r1, r2
 800215a:	2002      	movs	r0, #2
 800215c:	f00e ff80 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 8002160:	e00c      	b.n	800217c <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <OnJoinRequest+0x6c>)
 8002164:	2200      	movs	r2, #0
 8002166:	4611      	mov	r1, r2
 8002168:	2002      	movs	r0, #2
 800216a:	f00e ff79 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 800216e:	e005      	b.n	800217c <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <OnJoinRequest+0x70>)
 8002172:	2200      	movs	r2, #0
 8002174:	4611      	mov	r1, r2
 8002176:	2002      	movs	r0, #2
 8002178:	f00e ff72 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 800217c:	bd10      	pop	{r4, pc}
 800217e:	4770      	bx	lr
 8002180:	200003d4 	.word	0x200003d4
 8002184:	48000400 	.word	0x48000400
 8002188:	08011fd0 	.word	0x08011fd0
 800218c:	08012008 	.word	0x08012008
 8002190:	08011fe8 	.word	0x08011fe8
 8002194:	08012028 	.word	0x08012028

08002198 <OnStopJoinTimerEvent>:
{
 8002198:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <OnStopJoinTimerEvent+0x3c>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d013      	beq.n	80021ca <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80021a2:	4c0d      	ldr	r4, [pc, #52]	; (80021d8 <OnStopJoinTimerEvent+0x40>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021aa:	4620      	mov	r0, r4
 80021ac:	f001 feee 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80021b0:	2200      	movs	r2, #0
 80021b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021b6:	4620      	mov	r0, r4
 80021b8:	f001 fee8 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c2:	4620      	mov	r0, r4
 80021c4:	f001 fee2 	bl	8003f8c <HAL_GPIO_WritePin>
}
 80021c8:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2008      	movs	r0, #8
 80021ce:	f00f f871 	bl	80112b4 <UTIL_SEQ_SetTask>
 80021d2:	e7e6      	b.n	80021a2 <OnStopJoinTimerEvent+0xa>
 80021d4:	20000000 	.word	0x20000000
 80021d8:	48000400 	.word	0x48000400

080021dc <OnRxTimerLedEvent>:
{
 80021dc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e4:	4801      	ldr	r0, [pc, #4]	; (80021ec <OnRxTimerLedEvent+0x10>)
 80021e6:	f001 fed1 	bl	8003f8c <HAL_GPIO_WritePin>
}
 80021ea:	bd08      	pop	{r3, pc}
 80021ec:	48000400 	.word	0x48000400

080021f0 <OnTxTimerLedEvent>:
{
 80021f0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80021f2:	2200      	movs	r2, #0
 80021f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021f8:	4801      	ldr	r0, [pc, #4]	; (8002200 <OnTxTimerLedEvent+0x10>)
 80021fa:	f001 fec7 	bl	8003f8c <HAL_GPIO_WritePin>
}
 80021fe:	bd08      	pop	{r3, pc}
 8002200:	48000400 	.word	0x48000400

08002204 <OnRxData>:
  if (params != NULL)
 8002204:	2900      	cmp	r1, #0
 8002206:	d06e      	beq.n	80022e6 <OnRxData+0xe2>
{
 8002208:	b570      	push	{r4, r5, r6, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	4604      	mov	r4, r0
 800220e:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002216:	4834      	ldr	r0, [pc, #208]	; (80022e8 <OnRxData+0xe4>)
 8002218:	f001 feb8 	bl	8003f8c <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 800221c:	4833      	ldr	r0, [pc, #204]	; (80022ec <OnRxData+0xe8>)
 800221e:	f00f facd 	bl	80117bc <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002222:	782e      	ldrb	r6, [r5, #0]
 8002224:	2e00      	cmp	r6, #0
 8002226:	d042      	beq.n	80022ae <OnRxData+0xaa>
      if (appData != NULL)
 8002228:	2c00      	cmp	r4, #0
 800222a:	d03f      	beq.n	80022ac <OnRxData+0xa8>
        RxPort = appData->Port;
 800222c:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800222e:	6863      	ldr	r3, [r4, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d03c      	beq.n	80022ae <OnRxData+0xaa>
          switch (appData->Port)
 8002234:	2e02      	cmp	r6, #2
 8002236:	d016      	beq.n	8002266 <OnRxData+0x62>
 8002238:	2e03      	cmp	r6, #3
 800223a:	d138      	bne.n	80022ae <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800223c:	7862      	ldrb	r2, [r4, #1]
 800223e:	2a01      	cmp	r2, #1
 8002240:	d135      	bne.n	80022ae <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d006      	beq.n	8002256 <OnRxData+0x52>
 8002248:	2b02      	cmp	r3, #2
 800224a:	d008      	beq.n	800225e <OnRxData+0x5a>
 800224c:	bb7b      	cbnz	r3, 80022ae <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800224e:	2000      	movs	r0, #0
 8002250:	f004 ff7c 	bl	800714c <LmHandlerRequestClass>
                    break;
 8002254:	e02b      	b.n	80022ae <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002256:	2001      	movs	r0, #1
 8002258:	f004 ff78 	bl	800714c <LmHandlerRequestClass>
                    break;
 800225c:	e027      	b.n	80022ae <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800225e:	2002      	movs	r0, #2
 8002260:	f004 ff74 	bl	800714c <LmHandlerRequestClass>
                    break;
 8002264:	e023      	b.n	80022ae <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002266:	7862      	ldrb	r2, [r4, #1]
 8002268:	2a01      	cmp	r2, #1
 800226a:	d120      	bne.n	80022ae <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <OnRxData+0xec>)
 8002274:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002276:	b963      	cbnz	r3, 8002292 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002278:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <OnRxData+0xf0>)
 800227a:	2200      	movs	r2, #0
 800227c:	4611      	mov	r1, r2
 800227e:	2003      	movs	r0, #3
 8002280:	f00e feee 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002284:	2200      	movs	r2, #0
 8002286:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800228a:	4817      	ldr	r0, [pc, #92]	; (80022e8 <OnRxData+0xe4>)
 800228c:	f001 fe7e 	bl	8003f8c <HAL_GPIO_WritePin>
 8002290:	e00d      	b.n	80022ae <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <OnRxData+0xf4>)
 8002294:	2200      	movs	r2, #0
 8002296:	4611      	mov	r1, r2
 8002298:	2003      	movs	r0, #3
 800229a:	f00e fee1 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a4:	4810      	ldr	r0, [pc, #64]	; (80022e8 <OnRxData+0xe4>)
 80022a6:	f001 fe71 	bl	8003f8c <HAL_GPIO_WritePin>
 80022aa:	e000      	b.n	80022ae <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80022ac:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80022ae:	7c2b      	ldrb	r3, [r5, #16]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d901      	bls.n	80022b8 <OnRxData+0xb4>
}
 80022b4:	b006      	add	sp, #24
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80022b8:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80022bc:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80022c0:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80022c4:	9005      	str	r0, [sp, #20]
 80022c6:	9104      	str	r1, [sp, #16]
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <OnRxData+0xf8>)
 80022ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022ce:	9303      	str	r3, [sp, #12]
 80022d0:	9202      	str	r2, [sp, #8]
 80022d2:	9601      	str	r6, [sp, #4]
 80022d4:	68eb      	ldr	r3, [r5, #12]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <OnRxData+0xfc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	4611      	mov	r1, r2
 80022de:	2003      	movs	r0, #3
 80022e0:	f00e febe 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 80022e4:	e7e6      	b.n	80022b4 <OnRxData+0xb0>
 80022e6:	4770      	bx	lr
 80022e8:	48000400 	.word	0x48000400
 80022ec:	200003ec 	.word	0x200003ec
 80022f0:	200003d2 	.word	0x200003d2
 80022f4:	08012044 	.word	0x08012044
 80022f8:	08012050 	.word	0x08012050
 80022fc:	08012244 	.word	0x08012244
 8002300:	0801205c 	.word	0x0801205c

08002304 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4605      	mov	r5, r0
 8002308:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800230a:	f001 fb97 	bl	8003a3c <HAL_FLASH_Unlock>
 800230e:	b100      	cbz	r0, 8002312 <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002310:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <OnStoreContextRequest+0x4c>)
 8002314:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002318:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <OnStoreContextRequest+0x50>)
 800231a:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 800231e:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002322:	fbb3 f3f0 	udiv	r3, r3, r0
 8002326:	fb00 f303 	mul.w	r3, r0, r3
 800232a:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 800232e:	2200      	movs	r2, #0
 8002330:	2101      	movs	r1, #1
 8002332:	0ad8      	lsrs	r0, r3, #11
 8002334:	f7fe ff60 	bl	80011f8 <FLASH_IF_EraseByPages>
 8002338:	b110      	cbz	r0, 8002340 <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 800233a:	f001 fb97 	bl	8003a6c <HAL_FLASH_Lock>
}
 800233e:	e7e7      	b.n	8002310 <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 8002340:	2300      	movs	r3, #0
 8002342:	4622      	mov	r2, r4
 8002344:	4629      	mov	r1, r5
 8002346:	4804      	ldr	r0, [pc, #16]	; (8002358 <OnStoreContextRequest+0x54>)
 8002348:	f7fe ff72 	bl	8001230 <FLASH_IF_Write>
 800234c:	e7f5      	b.n	800233a <OnStoreContextRequest+0x36>
 800234e:	bf00      	nop
 8002350:	1fff7000 	.word	0x1fff7000
 8002354:	03fffc00 	.word	0x03fffc00
 8002358:	0803f000 	.word	0x0803f000

0800235c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800235c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800235e:	b28a      	uxth	r2, r1
 8002360:	4901      	ldr	r1, [pc, #4]	; (8002368 <OnRestoreContextRequest+0xc>)
 8002362:	f00e ff93 	bl	801128c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002366:	bd08      	pop	{r3, pc}
 8002368:	0803f000 	.word	0x0803f000

0800236c <StopJoin>:
{
 800236c:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800236e:	4c1e      	ldr	r4, [pc, #120]	; (80023e8 <StopJoin+0x7c>)
 8002370:	2201      	movs	r2, #1
 8002372:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002376:	4620      	mov	r0, r4
 8002378:	f001 fe08 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002382:	4620      	mov	r0, r4
 8002384:	f001 fe02 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002388:	2201      	movs	r2, #1
 800238a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800238e:	4620      	mov	r0, r4
 8002390:	f001 fdfc 	bl	8003f8c <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002394:	4815      	ldr	r0, [pc, #84]	; (80023ec <StopJoin+0x80>)
 8002396:	f00f f9b7 	bl	8011708 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800239a:	f005 f999 	bl	80076d0 <LmHandlerStop>
 800239e:	b148      	cbz	r0, 80023b4 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <StopJoin+0x84>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	4611      	mov	r1, r2
 80023a6:	2002      	movs	r0, #2
 80023a8:	f00e fe5a 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80023ac:	4811      	ldr	r0, [pc, #68]	; (80023f4 <StopJoin+0x88>)
 80023ae:	f00f fa05 	bl	80117bc <UTIL_TIMER_Start>
}
 80023b2:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <StopJoin+0x8c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	4611      	mov	r1, r2
 80023ba:	2002      	movs	r0, #2
 80023bc:	f00e fe50 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80023c0:	4c0e      	ldr	r4, [pc, #56]	; (80023fc <StopJoin+0x90>)
 80023c2:	2501      	movs	r5, #1
 80023c4:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <StopJoin+0x94>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	4611      	mov	r1, r2
 80023cc:	2002      	movs	r0, #2
 80023ce:	f00e fe47 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80023d2:	480c      	ldr	r0, [pc, #48]	; (8002404 <StopJoin+0x98>)
 80023d4:	f004 fff8 	bl	80073c8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80023d8:	4629      	mov	r1, r5
 80023da:	7820      	ldrb	r0, [r4, #0]
 80023dc:	f004 fd8a 	bl	8006ef4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <StopJoin+0x80>)
 80023e2:	f00f f9eb 	bl	80117bc <UTIL_TIMER_Start>
 80023e6:	e7e1      	b.n	80023ac <StopJoin+0x40>
 80023e8:	48000400 	.word	0x48000400
 80023ec:	20000434 	.word	0x20000434
 80023f0:	080120a4 	.word	0x080120a4
 80023f4:	20000404 	.word	0x20000404
 80023f8:	080120c4 	.word	0x080120c4
 80023fc:	20000000 	.word	0x20000000
 8002400:	080120d8 	.word	0x080120d8
 8002404:	20000058 	.word	0x20000058

08002408 <StoreContext>:
{
 8002408:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 800240a:	f005 f971 	bl	80076f0 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800240e:	f110 0f08 	cmn.w	r0, #8
 8002412:	d003      	beq.n	800241c <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002414:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002418:	d007      	beq.n	800242a <StoreContext+0x22>
}
 800241a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <StoreContext+0x30>)
 800241e:	2200      	movs	r2, #0
 8002420:	4611      	mov	r1, r2
 8002422:	2002      	movs	r0, #2
 8002424:	f00e fe1c 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 8002428:	e7f7      	b.n	800241a <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <StoreContext+0x34>)
 800242c:	2200      	movs	r2, #0
 800242e:	4611      	mov	r1, r2
 8002430:	2002      	movs	r0, #2
 8002432:	f00e fe15 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 8002436:	e7f0      	b.n	800241a <StoreContext+0x12>
 8002438:	080120f8 	.word	0x080120f8
 800243c:	08012110 	.word	0x08012110

08002440 <SendTxData>:
{
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002442:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002444:	f7ff f9a8 	bl	8001798 <GetBatteryLevel>
 8002448:	4604      	mov	r4, r0
  EnvSensors_Read(&sensor_data);
 800244a:	a802      	add	r0, sp, #8
 800244c:	f7ff fa86 	bl	800195c <EnvSensors_Read>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002450:	9400      	str	r4, [sp, #0]
 8002452:	4b58      	ldr	r3, [pc, #352]	; (80025b4 <SendTxData+0x174>)
 8002454:	2201      	movs	r2, #1
 8002456:	2100      	movs	r1, #0
 8002458:	2002      	movs	r0, #2
 800245a:	f00e fe01 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800245e:	9803      	ldr	r0, [sp, #12]
 8002460:	f7fe fb5c 	bl	8000b1c <__aeabi_f2iz>
 8002464:	b200      	sxth	r0, r0
 8002466:	9000      	str	r0, [sp, #0]
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <SendTxData+0x178>)
 800246a:	2201      	movs	r2, #1
 800246c:	2100      	movs	r1, #0
 800246e:	2002      	movs	r0, #2
 8002470:	f00e fdf6 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8002474:	4c51      	ldr	r4, [pc, #324]	; (80025bc <SendTxData+0x17c>)
 8002476:	2302      	movs	r3, #2
 8002478:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800247a:	4951      	ldr	r1, [pc, #324]	; (80025c0 <SendTxData+0x180>)
 800247c:	9804      	ldr	r0, [sp, #16]
 800247e:	f7fe f9fd 	bl	800087c <__aeabi_fmul>
 8002482:	f7fe fb71 	bl	8000b68 <__aeabi_f2uiz>
 8002486:	b285      	uxth	r5, r0
  temperature = (int16_t)(sensor_data.temperature);
 8002488:	9803      	ldr	r0, [sp, #12]
 800248a:	f7fe fb47 	bl	8000b1c <__aeabi_f2iz>
 800248e:	b206      	sxth	r6, r0
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8002490:	494c      	ldr	r1, [pc, #304]	; (80025c4 <SendTxData+0x184>)
 8002492:	9802      	ldr	r0, [sp, #8]
 8002494:	f7fe f9f2 	bl	800087c <__aeabi_fmul>
 8002498:	4949      	ldr	r1, [pc, #292]	; (80025c0 <SendTxData+0x180>)
 800249a:	f7fe faa3 	bl	80009e4 <__aeabi_fdiv>
 800249e:	f7fe fb63 	bl	8000b68 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 80024a2:	6863      	ldr	r3, [r4, #4]
 80024a4:	4a48      	ldr	r2, [pc, #288]	; (80025c8 <SendTxData+0x188>)
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 80024aa:	6863      	ldr	r3, [r4, #4]
 80024ac:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80024b0:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 80024b2:	6863      	ldr	r3, [r4, #4]
 80024b4:	7098      	strb	r0, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 80024b6:	6863      	ldr	r3, [r4, #4]
 80024b8:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 80024ba:	6863      	ldr	r3, [r4, #4]
 80024bc:	0a2a      	lsrs	r2, r5, #8
 80024be:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 80024c0:	6863      	ldr	r3, [r4, #4]
 80024c2:	715d      	strb	r5, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <SendTxData+0x18c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d002      	beq.n	80024d2 <SendTxData+0x92>
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d000      	beq.n	80024d2 <SendTxData+0x92>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 80024d0:	bb63      	cbnz	r3, 800252c <SendTxData+0xec>
    AppData.Buffer[i++] = 0;
 80024d2:	4a3a      	ldr	r2, [pc, #232]	; (80025bc <SendTxData+0x17c>)
 80024d4:	6851      	ldr	r1, [r2, #4]
 80024d6:	2300      	movs	r3, #0
 80024d8:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 80024da:	6851      	ldr	r1, [r2, #4]
 80024dc:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 80024de:	6852      	ldr	r2, [r2, #4]
 80024e0:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 80024e2:	7253      	strb	r3, [r2, #9]
 80024e4:	220a      	movs	r2, #10
  AppData.BufferSize = i;
 80024e6:	4b35      	ldr	r3, [pc, #212]	; (80025bc <SendTxData+0x17c>)
 80024e8:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <SendTxData+0x190>)
 80024ec:	7a5b      	ldrb	r3, [r3, #9]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d138      	bne.n	8002564 <SendTxData+0x124>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80024f2:	2200      	movs	r2, #0
 80024f4:	4b35      	ldr	r3, [pc, #212]	; (80025cc <SendTxData+0x18c>)
 80024f6:	78d9      	ldrb	r1, [r3, #3]
 80024f8:	4830      	ldr	r0, [pc, #192]	; (80025bc <SendTxData+0x17c>)
 80024fa:	f004 fd85 	bl	8007008 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 80024fe:	2800      	cmp	r0, #0
 8002500:	d03e      	beq.n	8002580 <SendTxData+0x140>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002502:	f110 0f06 	cmn.w	r0, #6
 8002506:	d043      	beq.n	8002590 <SendTxData+0x150>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002508:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 800250a:	4c32      	ldr	r4, [pc, #200]	; (80025d4 <SendTxData+0x194>)
 800250c:	4620      	mov	r0, r4
 800250e:	f00f f8fb 	bl	8011708 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002512:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <SendTxData+0x198>)
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	42a9      	cmp	r1, r5
 8002518:	bf38      	it	cc
 800251a:	4629      	movcc	r1, r5
 800251c:	4620      	mov	r0, r4
 800251e:	f00f f993 	bl	8011848 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002522:	4620      	mov	r0, r4
 8002524:	f00f f94a 	bl	80117bc <UTIL_TIMER_Start>
}
 8002528:	b009      	add	sp, #36	; 0x24
 800252a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 800252c:	9d05      	ldr	r5, [sp, #20]
    longitude = sensor_data.longitude;
 800252e:	9c06      	ldr	r4, [sp, #24]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002530:	4e22      	ldr	r6, [pc, #136]	; (80025bc <SendTxData+0x17c>)
 8002532:	6877      	ldr	r7, [r6, #4]
 8002534:	f7ff f930 	bl	8001798 <GetBatteryLevel>
 8002538:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800253a:	6873      	ldr	r3, [r6, #4]
 800253c:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002540:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002542:	6873      	ldr	r3, [r6, #4]
 8002544:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002548:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800254a:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800254c:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002550:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002552:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002556:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002558:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800255a:	2200      	movs	r2, #0
 800255c:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800255e:	739a      	strb	r2, [r3, #14]
 8002560:	220f      	movs	r2, #15
 8002562:	e7c0      	b.n	80024e6 <SendTxData+0xa6>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002564:	f004 fd3e 	bl	8006fe4 <LmHandlerJoinStatus>
 8002568:	2801      	cmp	r0, #1
 800256a:	d1c2      	bne.n	80024f2 <SendTxData+0xb2>
    UTIL_TIMER_Stop(&JoinLedTimer);
 800256c:	4818      	ldr	r0, [pc, #96]	; (80025d0 <SendTxData+0x190>)
 800256e:	f00f f8cb 	bl	8011708 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002572:	2200      	movs	r2, #0
 8002574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002578:	4818      	ldr	r0, [pc, #96]	; (80025dc <SendTxData+0x19c>)
 800257a:	f001 fd07 	bl	8003f8c <HAL_GPIO_WritePin>
 800257e:	e7b8      	b.n	80024f2 <SendTxData+0xb2>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <SendTxData+0x1a0>)
 8002582:	2201      	movs	r2, #1
 8002584:	2100      	movs	r1, #0
 8002586:	4610      	mov	r0, r2
 8002588:	f00e fd6a 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800258c:	2500      	movs	r5, #0
 800258e:	e7bc      	b.n	800250a <SendTxData+0xca>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002590:	f004 fd22 	bl	8006fd8 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002594:	4605      	mov	r5, r0
 8002596:	2800      	cmp	r0, #0
 8002598:	d0b7      	beq.n	800250a <SendTxData+0xca>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <SendTxData+0x1a4>)
 800259c:	fba3 2300 	umull	r2, r3, r3, r0
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <SendTxData+0x1a8>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	2100      	movs	r1, #0
 80025aa:	4610      	mov	r0, r2
 80025ac:	f00e fd58 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 80025b0:	e7ab      	b.n	800250a <SendTxData+0xca>
 80025b2:	bf00      	nop
 80025b4:	08012128 	.word	0x08012128
 80025b8:	08012134 	.word	0x08012134
 80025bc:	20000004 	.word	0x20000004
 80025c0:	41200000 	.word	0x41200000
 80025c4:	42c80000 	.word	0x42c80000
 80025c8:	200003d2 	.word	0x200003d2
 80025cc:	20000058 	.word	0x20000058
 80025d0:	200003d4 	.word	0x200003d4
 80025d4:	20000434 	.word	0x20000434
 80025d8:	2000006c 	.word	0x2000006c
 80025dc:	48000400 	.word	0x48000400
 80025e0:	08012140 	.word	0x08012140
 80025e4:	10624dd3 	.word	0x10624dd3
 80025e8:	08012150 	.word	0x08012150

080025ec <OnJoinTimerLedEvent>:
{
 80025ec:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 80025ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025f2:	4802      	ldr	r0, [pc, #8]	; (80025fc <OnJoinTimerLedEvent+0x10>)
 80025f4:	f001 fccf 	bl	8003f96 <HAL_GPIO_TogglePin>
}
 80025f8:	bd08      	pop	{r3, pc}
 80025fa:	bf00      	nop
 80025fc:	48000400 	.word	0x48000400

08002600 <LoRaWAN_Init>:
{
 8002600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002604:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 8002606:	2400      	movs	r4, #0
 8002608:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800260a:	9402      	str	r4, [sp, #8]
 800260c:	2502      	movs	r5, #2
 800260e:	9501      	str	r5, [sp, #4]
 8002610:	2601      	movs	r6, #1
 8002612:	9600      	str	r6, [sp, #0]
 8002614:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <LoRaWAN_Init+0x144>)
 8002616:	4622      	mov	r2, r4
 8002618:	4621      	mov	r1, r4
 800261a:	4628      	mov	r0, r5
 800261c:	f00e fd20 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002620:	9402      	str	r4, [sp, #8]
 8002622:	2704      	movs	r7, #4
 8002624:	9701      	str	r7, [sp, #4]
 8002626:	9500      	str	r5, [sp, #0]
 8002628:	4b47      	ldr	r3, [pc, #284]	; (8002748 <LoRaWAN_Init+0x148>)
 800262a:	4622      	mov	r2, r4
 800262c:	4621      	mov	r1, r4
 800262e:	4628      	mov	r0, r5
 8002630:	f00e fd16 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002634:	9402      	str	r4, [sp, #8]
 8002636:	9501      	str	r5, [sp, #4]
 8002638:	9600      	str	r6, [sp, #0]
 800263a:	4b44      	ldr	r3, [pc, #272]	; (800274c <LoRaWAN_Init+0x14c>)
 800263c:	4622      	mov	r2, r4
 800263e:	4621      	mov	r1, r4
 8002640:	4628      	mov	r0, r5
 8002642:	f00e fd0d 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002646:	a905      	add	r1, sp, #20
 8002648:	4620      	mov	r0, r4
 800264a:	f005 f82b 	bl	80076a4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800264e:	9b05      	ldr	r3, [sp, #20]
 8002650:	0e1a      	lsrs	r2, r3, #24
 8002652:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002656:	9102      	str	r1, [sp, #8]
 8002658:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	9200      	str	r2, [sp, #0]
 8002660:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <LoRaWAN_Init+0x150>)
 8002662:	4622      	mov	r2, r4
 8002664:	4621      	mov	r1, r4
 8002666:	4628      	mov	r0, r5
 8002668:	f00e fcfa 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800266c:	a905      	add	r1, sp, #20
 800266e:	4630      	mov	r0, r6
 8002670:	f005 f818 	bl	80076a4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002674:	9b05      	ldr	r3, [sp, #20]
 8002676:	0e1a      	lsrs	r2, r3, #24
 8002678:	b2d9      	uxtb	r1, r3
 800267a:	9103      	str	r1, [sp, #12]
 800267c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002680:	9102      	str	r1, [sp, #8]
 8002682:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	9200      	str	r2, [sp, #0]
 800268a:	4b32      	ldr	r3, [pc, #200]	; (8002754 <LoRaWAN_Init+0x154>)
 800268c:	4622      	mov	r2, r4
 800268e:	4621      	mov	r1, r4
 8002690:	4628      	mov	r0, r5
 8002692:	f00e fce5 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002696:	9400      	str	r4, [sp, #0]
 8002698:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <LoRaWAN_Init+0x158>)
 800269a:	4622      	mov	r2, r4
 800269c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026a0:	482e      	ldr	r0, [pc, #184]	; (800275c <LoRaWAN_Init+0x15c>)
 80026a2:	f00e ffd3 	bl	801164c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80026a6:	9400      	str	r4, [sp, #0]
 80026a8:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <LoRaWAN_Init+0x160>)
 80026aa:	4622      	mov	r2, r4
 80026ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026b0:	482c      	ldr	r0, [pc, #176]	; (8002764 <LoRaWAN_Init+0x164>)
 80026b2:	f00e ffcb 	bl	801164c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80026b6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002768 <LoRaWAN_Init+0x168>
 80026ba:	9400      	str	r4, [sp, #0]
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <LoRaWAN_Init+0x16c>)
 80026be:	4632      	mov	r2, r6
 80026c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026c4:	4640      	mov	r0, r8
 80026c6:	f00e ffc1 	bl	801164c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 80026ca:	9400      	str	r4, [sp, #0]
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <LoRaWAN_Init+0x170>)
 80026ce:	4622      	mov	r2, r4
 80026d0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80026d4:	4827      	ldr	r0, [pc, #156]	; (8002774 <LoRaWAN_Init+0x174>)
 80026d6:	f00e ffb9 	bl	801164c <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80026da:	4a27      	ldr	r2, [pc, #156]	; (8002778 <LoRaWAN_Init+0x178>)
 80026dc:	4621      	mov	r1, r4
 80026de:	4630      	mov	r0, r6
 80026e0:	f00e feb4 	bl	801144c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80026e4:	4a25      	ldr	r2, [pc, #148]	; (800277c <LoRaWAN_Init+0x17c>)
 80026e6:	4621      	mov	r1, r4
 80026e8:	4628      	mov	r0, r5
 80026ea:	f00e feaf 	bl	801144c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80026ee:	4a24      	ldr	r2, [pc, #144]	; (8002780 <LoRaWAN_Init+0x180>)
 80026f0:	4621      	mov	r1, r4
 80026f2:	4638      	mov	r0, r7
 80026f4:	f00e feaa 	bl	801144c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80026f8:	4a22      	ldr	r2, [pc, #136]	; (8002784 <LoRaWAN_Init+0x184>)
 80026fa:	4621      	mov	r1, r4
 80026fc:	2008      	movs	r0, #8
 80026fe:	f00e fea5 	bl	801144c <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002702:	f000 f85d 	bl	80027c0 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002706:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800270a:	481f      	ldr	r0, [pc, #124]	; (8002788 <LoRaWAN_Init+0x188>)
 800270c:	f004 ff90 	bl	8007630 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002710:	481e      	ldr	r0, [pc, #120]	; (800278c <LoRaWAN_Init+0x18c>)
 8002712:	f004 fe59 	bl	80073c8 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002716:	4640      	mov	r0, r8
 8002718:	f00f f850 	bl	80117bc <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 800271c:	4621      	mov	r1, r4
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <LoRaWAN_Init+0x190>)
 8002720:	7818      	ldrb	r0, [r3, #0]
 8002722:	f004 fbe7 	bl	8006ef4 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002726:	4d1b      	ldr	r5, [pc, #108]	; (8002794 <LoRaWAN_Init+0x194>)
 8002728:	9400      	str	r4, [sp, #0]
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <LoRaWAN_Init+0x198>)
 800272c:	4622      	mov	r2, r4
 800272e:	491b      	ldr	r1, [pc, #108]	; (800279c <LoRaWAN_Init+0x19c>)
 8002730:	6809      	ldr	r1, [r1, #0]
 8002732:	4628      	mov	r0, r5
 8002734:	f00e ff8a 	bl	801164c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002738:	4628      	mov	r0, r5
 800273a:	f00f f83f 	bl	80117bc <UTIL_TIMER_Start>
}
 800273e:	b006      	add	sp, #24
 8002740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002744:	08012170 	.word	0x08012170
 8002748:	08012194 	.word	0x08012194
 800274c:	080121b8 	.word	0x080121b8
 8002750:	080121dc 	.word	0x080121dc
 8002754:	08012200 	.word	0x08012200
 8002758:	080021f1 	.word	0x080021f1
 800275c:	2000041c 	.word	0x2000041c
 8002760:	080021dd 	.word	0x080021dd
 8002764:	200003ec 	.word	0x200003ec
 8002768:	200003d4 	.word	0x200003d4
 800276c:	080025ed 	.word	0x080025ed
 8002770:	08002199 	.word	0x08002199
 8002774:	20000404 	.word	0x20000404
 8002778:	08007105 	.word	0x08007105
 800277c:	08002441 	.word	0x08002441
 8002780:	08002409 	.word	0x08002409
 8002784:	0800236d 	.word	0x0800236d
 8002788:	2000000c 	.word	0x2000000c
 800278c:	20000058 	.word	0x20000058
 8002790:	20000000 	.word	0x20000000
 8002794:	20000434 	.word	0x20000434
 8002798:	08001fed 	.word	0x08001fed
 800279c:	2000006c 	.word	0x2000006c

080027a0 <HAL_GPIO_EXTI_Callback>:
{
 80027a0:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 80027a2:	2802      	cmp	r0, #2
 80027a4:	d002      	beq.n	80027ac <HAL_GPIO_EXTI_Callback+0xc>
 80027a6:	2840      	cmp	r0, #64	; 0x40
 80027a8:	d005      	beq.n	80027b6 <HAL_GPIO_EXTI_Callback+0x16>
}
 80027aa:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80027ac:	2100      	movs	r1, #0
 80027ae:	2008      	movs	r0, #8
 80027b0:	f00e fd80 	bl	80112b4 <UTIL_SEQ_SetTask>
      break;
 80027b4:	e7f9      	b.n	80027aa <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 80027b6:	2100      	movs	r1, #0
 80027b8:	2004      	movs	r0, #4
 80027ba:	f00e fd7b 	bl	80112b4 <UTIL_SEQ_SetTask>
}
 80027be:	e7f4      	b.n	80027aa <HAL_GPIO_EXTI_Callback+0xa>

080027c0 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <LoraInfo_Init+0x1c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80027c6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80027c8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80027ca:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 80027cc:	2220      	movs	r2, #32
 80027ce:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 80027d0:	f44f 7290 	mov.w	r2, #288	; 0x120
 80027d4:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 80027d6:	2203      	movs	r2, #3
 80027d8:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80027da:	4770      	bx	lr
 80027dc:	2000044c 	.word	0x2000044c

080027e0 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80027e0:	4800      	ldr	r0, [pc, #0]	; (80027e4 <LoraInfo_GetPtr+0x4>)
 80027e2:	4770      	bx	lr
 80027e4:	2000044c 	.word	0x2000044c

080027e8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80027e8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80027ea:	f000 f83f 	bl	800286c <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80027ee:	bd08      	pop	{r3, pc}

080027f0 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80027f0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80027f2:	f000 f87d 	bl	80028f0 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80027f6:	bd08      	pop	{r3, pc}

080027f8 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80027f8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80027fa:	f000 f8c7 	bl	800298c <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80027fe:	bd08      	pop	{r3, pc}

08002800 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002800:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002802:	f000 f8c5 	bl	8002990 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002806:	bd08      	pop	{r3, pc}

08002808 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002808:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800280a:	f000 f8c3 	bl	8002994 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800280e:	bd08      	pop	{r3, pc}

08002810 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002810:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002812:	f000 f8c1 	bl	8002998 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002816:	bd08      	pop	{r3, pc}

08002818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002818:	480d      	ldr	r0, [pc, #52]	; (8002850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800281a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800281c:	f000 f8c1 	bl	80029a2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <LoopForever+0x6>)
  ldr r1, =_edata
 8002822:	490d      	ldr	r1, [pc, #52]	; (8002858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002824:	4a0d      	ldr	r2, [pc, #52]	; (800285c <LoopForever+0xe>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002828:	e002      	b.n	8002830 <LoopCopyDataInit>

0800282a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800282a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800282c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800282e:	3304      	adds	r3, #4

08002830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002834:	d3f9      	bcc.n	800282a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002838:	4c0a      	ldr	r4, [pc, #40]	; (8002864 <LoopForever+0x16>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800283c:	e001      	b.n	8002842 <LoopFillZerobss>

0800283e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800283e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002840:	3204      	adds	r2, #4

08002842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002844:	d3fb      	bcc.n	800283e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002846:	f00f f9bf 	bl	8011bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800284a:	f7fe fe3c 	bl	80014c6 <main>

0800284e <LoopForever>:

LoopForever:
    b LoopForever
 800284e:	e7fe      	b.n	800284e <LoopForever>
  ldr   r0, =_estack
 8002850:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002858:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 800285c:	08012c40 	.word	0x08012c40
  ldr r2, =_sbss
 8002860:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002864:	20001628 	.word	0x20001628

08002868 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC_IRQHandler>
	...

0800286c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002870:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002872:	2400      	movs	r4, #0
 8002874:	9401      	str	r4, [sp, #4]
 8002876:	9402      	str	r4, [sp, #8]
 8002878:	9403      	str	r4, [sp, #12]
 800287a:	9404      	str	r4, [sp, #16]
 800287c:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002884:	f042 0204 	orr.w	r2, r2, #4
 8002888:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002892:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002894:	2710      	movs	r7, #16
 8002896:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002898:	2301      	movs	r3, #1
 800289a:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289c:	2303      	movs	r3, #3
 800289e:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80028a0:	4d12      	ldr	r5, [pc, #72]	; (80028ec <BSP_RADIO_Init+0x80>)
 80028a2:	a901      	add	r1, sp, #4
 80028a4:	4628      	mov	r0, r5
 80028a6:	f001 fa21 	bl	8003cec <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80028aa:	f04f 0820 	mov.w	r8, #32
 80028ae:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80028b2:	a901      	add	r1, sp, #4
 80028b4:	4628      	mov	r0, r5
 80028b6:	f001 fa19 	bl	8003cec <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80028ba:	2608      	movs	r6, #8
 80028bc:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80028be:	a901      	add	r1, sp, #4
 80028c0:	4628      	mov	r0, r5
 80028c2:	f001 fa13 	bl	8003cec <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80028c6:	4622      	mov	r2, r4
 80028c8:	4641      	mov	r1, r8
 80028ca:	4628      	mov	r0, r5
 80028cc:	f001 fb5e 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80028d0:	4622      	mov	r2, r4
 80028d2:	4639      	mov	r1, r7
 80028d4:	4628      	mov	r0, r5
 80028d6:	f001 fb59 	bl	8003f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80028da:	4622      	mov	r2, r4
 80028dc:	4631      	mov	r1, r6
 80028de:	4628      	mov	r0, r5
 80028e0:	f001 fb54 	bl	8003f8c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80028e4:	4620      	mov	r0, r4
 80028e6:	b006      	add	sp, #24
 80028e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ec:	48000800 	.word	0x48000800

080028f0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80028f0:	b510      	push	{r4, lr}
  switch (Config)
 80028f2:	2803      	cmp	r0, #3
 80028f4:	d813      	bhi.n	800291e <BSP_RADIO_ConfigRFSwitch+0x2e>
 80028f6:	e8df f000 	tbb	[pc, r0]
 80028fa:	1402      	.short	0x1402
 80028fc:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80028fe:	4c22      	ldr	r4, [pc, #136]	; (8002988 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002900:	2200      	movs	r2, #0
 8002902:	2108      	movs	r1, #8
 8002904:	4620      	mov	r0, r4
 8002906:	f001 fb41 	bl	8003f8c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	2110      	movs	r1, #16
 800290e:	4620      	mov	r0, r4
 8002910:	f001 fb3c 	bl	8003f8c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002914:	2200      	movs	r2, #0
 8002916:	2120      	movs	r1, #32
 8002918:	4620      	mov	r0, r4
 800291a:	f001 fb37 	bl	8003f8c <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800291e:	2000      	movs	r0, #0
 8002920:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002922:	4c19      	ldr	r4, [pc, #100]	; (8002988 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002924:	2201      	movs	r2, #1
 8002926:	2108      	movs	r1, #8
 8002928:	4620      	mov	r0, r4
 800292a:	f001 fb2f 	bl	8003f8c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800292e:	2201      	movs	r2, #1
 8002930:	2110      	movs	r1, #16
 8002932:	4620      	mov	r0, r4
 8002934:	f001 fb2a 	bl	8003f8c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002938:	2200      	movs	r2, #0
 800293a:	2120      	movs	r1, #32
 800293c:	4620      	mov	r0, r4
 800293e:	f001 fb25 	bl	8003f8c <HAL_GPIO_WritePin>
      break;
 8002942:	e7ec      	b.n	800291e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002944:	4c10      	ldr	r4, [pc, #64]	; (8002988 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002946:	2201      	movs	r2, #1
 8002948:	2108      	movs	r1, #8
 800294a:	4620      	mov	r0, r4
 800294c:	f001 fb1e 	bl	8003f8c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002950:	2201      	movs	r2, #1
 8002952:	2110      	movs	r1, #16
 8002954:	4620      	mov	r0, r4
 8002956:	f001 fb19 	bl	8003f8c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800295a:	2201      	movs	r2, #1
 800295c:	2120      	movs	r1, #32
 800295e:	4620      	mov	r0, r4
 8002960:	f001 fb14 	bl	8003f8c <HAL_GPIO_WritePin>
      break;
 8002964:	e7db      	b.n	800291e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002966:	4c08      	ldr	r4, [pc, #32]	; (8002988 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002968:	2201      	movs	r2, #1
 800296a:	2108      	movs	r1, #8
 800296c:	4620      	mov	r0, r4
 800296e:	f001 fb0d 	bl	8003f8c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002972:	2200      	movs	r2, #0
 8002974:	2110      	movs	r1, #16
 8002976:	4620      	mov	r0, r4
 8002978:	f001 fb08 	bl	8003f8c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800297c:	2201      	movs	r2, #1
 800297e:	2120      	movs	r1, #32
 8002980:	4620      	mov	r0, r4
 8002982:	f001 fb03 	bl	8003f8c <HAL_GPIO_WritePin>
      break;
 8002986:	e7ca      	b.n	800291e <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002988:	48000800 	.word	0x48000800

0800298c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 800298c:	2000      	movs	r0, #0
 800298e:	4770      	bx	lr

08002990 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002990:	2001      	movs	r0, #1
 8002992:	4770      	bx	lr

08002994 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002994:	2001      	movs	r0, #1
 8002996:	4770      	bx	lr

08002998 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002998:	b908      	cbnz	r0, 800299e <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800299a:	200f      	movs	r0, #15
 800299c:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800299e:	2016      	movs	r0, #22
  }

  return ret;
}
 80029a0:	4770      	bx	lr

080029a2 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80029a2:	4770      	bx	lr

080029a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a4:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a6:	2003      	movs	r0, #3
 80029a8:	f000 fd2e 	bl	8003408 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029ac:	f001 fc94 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_Init+0x28>)
 80029b2:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029b4:	200f      	movs	r0, #15
 80029b6:	f7fe ff6d 	bl	8001894 <HAL_InitTick>
 80029ba:	b110      	cbz	r0, 80029c2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80029bc:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80029be:	4620      	mov	r0, r4
 80029c0:	bd10      	pop	{r4, pc}
 80029c2:	4604      	mov	r4, r0
    HAL_MspInit();
 80029c4:	f7fe fe2a 	bl	800161c <HAL_MspInit>
 80029c8:	e7f9      	b.n	80029be <HAL_Init+0x1a>
 80029ca:	bf00      	nop
 80029cc:	20000070 	.word	0x20000070

080029d0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80029d4:	6913      	ldr	r3, [r2, #16]
 80029d6:	f023 0302 	bic.w	r3, r3, #2
 80029da:	6113      	str	r3, [r2, #16]
}
 80029dc:	4770      	bx	lr

080029de <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029de:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80029e2:	6913      	ldr	r3, [r2, #16]
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6113      	str	r3, [r2, #16]
}
 80029ea:	4770      	bx	lr

080029ec <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 80029ec:	4b01      	ldr	r3, [pc, #4]	; (80029f4 <HAL_GetUIDw0+0x8>)
 80029ee:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 80029f2:	4770      	bx	lr
 80029f4:	1fff7000 	.word	0x1fff7000

080029f8 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 80029f8:	4b01      	ldr	r3, [pc, #4]	; (8002a00 <HAL_GetUIDw1+0x8>)
 80029fa:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 80029fe:	4770      	bx	lr
 8002a00:	1fff7000 	.word	0x1fff7000

08002a04 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002a04:	4b01      	ldr	r3, [pc, #4]	; (8002a0c <HAL_GetUIDw2+0x8>)
 8002a06:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002a0a:	4770      	bx	lr
 8002a0c:	1fff7000 	.word	0x1fff7000

08002a10 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002a10:	4a02      	ldr	r2, [pc, #8]	; (8002a1c <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8002a12:	6853      	ldr	r3, [r2, #4]
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8002a1a:	4770      	bx	lr
 8002a1c:	e0042000 	.word	0xe0042000

08002a20 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002a20:	4a02      	ldr	r2, [pc, #8]	; (8002a2c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8002a22:	6853      	ldr	r3, [r2, #4]
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8002a2a:	4770      	bx	lr
 8002a2c:	e0042000 	.word	0xe0042000

08002a30 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002a30:	4a02      	ldr	r2, [pc, #8]	; (8002a3c <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8002a32:	6853      	ldr	r3, [r2, #4]
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8002a3a:	4770      	bx	lr
 8002a3c:	e0042000 	.word	0xe0042000

08002a40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	f000 811b 	beq.w	8002c84 <HAL_ADC_Init+0x244>
 8002a4e:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a50:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002a52:	b1bb      	cbz	r3, 8002a84 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a54:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a56:	6893      	ldr	r3, [r2, #8]
 8002a58:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a5c:	d11f      	bne.n	8002a9e <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002a5e:	6893      	ldr	r3, [r2, #8]
 8002a60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a64:	f023 0317 	bic.w	r3, r3, #23
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a6e:	4b86      	ldr	r3, [pc, #536]	; (8002c88 <HAL_ADC_Init+0x248>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	4a85      	ldr	r2, [pc, #532]	; (8002c8c <HAL_ADC_Init+0x24c>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a82:	e009      	b.n	8002a98 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002a84:	f7fe fa3e 	bl	8000f04 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002a8c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002a90:	e7e0      	b.n	8002a54 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002a98:	9b01      	ldr	r3, [sp, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f9      	bne.n	8002a92 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a9e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002aa0:	6893      	ldr	r3, [r2, #8]
 8002aa2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002aa6:	f040 809c 	bne.w	8002be2 <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002aac:	f043 0310 	orr.w	r3, r3, #16
 8002ab0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002aba:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002abc:	6893      	ldr	r3, [r2, #8]
 8002abe:	f013 0304 	ands.w	r3, r3, #4
 8002ac2:	d000      	beq.n	8002ac6 <HAL_ADC_Init+0x86>
 8002ac4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ac6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002ac8:	f011 0f10 	tst.w	r1, #16
 8002acc:	f040 80d3 	bne.w	8002c76 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f040 80d0 	bne.w	8002c76 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002ad8:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002adc:	f041 0102 	orr.w	r1, r1, #2
 8002ae0:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ae2:	6891      	ldr	r1, [r2, #8]
 8002ae4:	f011 0f01 	tst.w	r1, #1
 8002ae8:	d151      	bne.n	8002b8e <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002aea:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002aec:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002aee:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002af2:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002af4:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002af8:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002afa:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002afe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002b00:	b10d      	cbz	r5, 8002b06 <HAL_ADC_Init+0xc6>
 8002b02:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002b06:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 8002b08:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002b0a:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002b0c:	6925      	ldr	r5, [r4, #16]
 8002b0e:	2d00      	cmp	r5, #0
 8002b10:	db69      	blt.n	8002be6 <HAL_ADC_Init+0x1a6>
 8002b12:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002b16:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b18:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002b1c:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b20:	f894 5020 	ldrb.w	r5, [r4, #32]
 8002b24:	2d01      	cmp	r5, #1
 8002b26:	d061      	beq.n	8002bec <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002b2a:	b125      	cbz	r5, 8002b36 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b2c:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002b30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b32:	4335      	orrs	r5, r6
 8002b34:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b36:	68d5      	ldr	r5, [r2, #12]
 8002b38:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8002b3c:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 8002b40:	ea4c 0101 	orr.w	r1, ip, r1
 8002b44:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b46:	6862      	ldr	r2, [r4, #4]
 8002b48:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002b4c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b4e:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b52:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002b56:	2901      	cmp	r1, #1
 8002b58:	d055      	beq.n	8002c06 <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002b5a:	6822      	ldr	r2, [r4, #0]
 8002b5c:	6916      	ldr	r6, [r2, #16]
 8002b5e:	494c      	ldr	r1, [pc, #304]	; (8002c90 <HAL_ADC_Init+0x250>)
 8002b60:	4031      	ands	r1, r6
 8002b62:	4329      	orrs	r1, r5
 8002b64:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b66:	6862      	ldr	r2, [r4, #4]
 8002b68:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8002b6c:	d00f      	beq.n	8002b8e <HAL_ADC_Init+0x14e>
 8002b6e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002b72:	d00c      	beq.n	8002b8e <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002b78:	d009      	beq.n	8002b8e <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002b7a:	4d46      	ldr	r5, [pc, #280]	; (8002c94 <HAL_ADC_Init+0x254>)
 8002b7c:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8002b80:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8002b84:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002b8e:	6825      	ldr	r5, [r4, #0]
 8002b90:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002b92:	6969      	ldr	r1, [r5, #20]
 8002b94:	f021 0107 	bic.w	r1, r1, #7
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002b9c:	6821      	ldr	r1, [r4, #0]
 8002b9e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002ba0:	694a      	ldr	r2, [r1, #20]
 8002ba2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ba6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002baa:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002bac:	6922      	ldr	r2, [r4, #16]
 8002bae:	2a00      	cmp	r2, #0
 8002bb0:	d133      	bne.n	8002c1a <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002bb6:	f063 030f 	orn	r3, r3, #15
 8002bba:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002bbc:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8002bc4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d04c      	beq.n	8002c64 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bcc:	f023 0312 	bic.w	r3, r3, #18
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002bde:	2001      	movs	r0, #1
 8002be0:	e04e      	b.n	8002c80 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be2:	2000      	movs	r0, #0
 8002be4:	e76a      	b.n	8002abc <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002be6:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8002bea:	e794      	b.n	8002b16 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bec:	b916      	cbnz	r6, 8002bf4 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002bee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002bf2:	e799      	b.n	8002b28 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf4:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8002bf6:	f045 0520 	orr.w	r5, r5, #32
 8002bfa:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfc:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8002bfe:	f045 0501 	orr.w	r5, r5, #1
 8002c02:	65e5      	str	r5, [r4, #92]	; 0x5c
 8002c04:	e790      	b.n	8002b28 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8002c06:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c08:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002c0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002c0c:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002c0e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002c10:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002c12:	432a      	orrs	r2, r5
 8002c14:	f042 0501 	orr.w	r5, r2, #1
 8002c18:	e79f      	b.n	8002b5a <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c1a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002c1e:	d1cd      	bne.n	8002bbc <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002c20:	2b07      	cmp	r3, #7
 8002c22:	d808      	bhi.n	8002c36 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002c24:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002c26:	0099      	lsls	r1, r3, #2
 8002c28:	40ca      	lsrs	r2, r1
 8002c2a:	f002 020f 	and.w	r2, r2, #15
 8002c2e:	2a0f      	cmp	r2, #15
 8002c30:	d001      	beq.n	8002c36 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002c32:	3301      	adds	r3, #1
 8002c34:	e7f4      	b.n	8002c20 <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d00e      	beq.n	8002c58 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8002c3a:	6821      	ldr	r1, [r4, #0]
 8002c3c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002c3e:	69e3      	ldr	r3, [r4, #28]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f003 031c 	and.w	r3, r3, #28
 8002c48:	f06f 020f 	mvn.w	r2, #15
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002c52:	4313      	orrs	r3, r2
 8002c54:	628b      	str	r3, [r1, #40]	; 0x28
 8002c56:	e7b1      	b.n	8002bbc <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002c5c:	f063 030f 	orn	r3, r3, #15
 8002c60:	6293      	str	r3, [r2, #40]	; 0x28
 8002c62:	e7ab      	b.n	8002bbc <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8002c64:	2300      	movs	r3, #0
 8002c66:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002c68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c6a:	f023 0303 	bic.w	r3, r3, #3
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c74:	e004      	b.n	8002c80 <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c78:	f043 0310 	orr.w	r3, r3, #16
 8002c7c:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c7e:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002c80:	b002      	add	sp, #8
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002c84:	2001      	movs	r0, #1
 8002c86:	e7fb      	b.n	8002c80 <HAL_ADC_Init+0x240>
 8002c88:	20000070 	.word	0x20000070
 8002c8c:	053e2d63 	.word	0x053e2d63
 8002c90:	1ffffc02 	.word	0x1ffffc02
 8002c94:	40012000 	.word	0x40012000

08002c98 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c9e:	6946      	ldr	r6, [r0, #20]
 8002ca0:	2e08      	cmp	r6, #8
 8002ca2:	d005      	beq.n	8002cb0 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002ca4:	6803      	ldr	r3, [r0, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f013 0f01 	tst.w	r3, #1
 8002cac:	d11e      	bne.n	8002cec <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002cae:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002cb0:	f7fe fdf2 	bl	8001898 <HAL_GetTick>
 8002cb4:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4232      	tst	r2, r6
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002cc2:	d0f8      	beq.n	8002cb6 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002cc4:	f7fe fde8 	bl	8001898 <HAL_GetTick>
 8002cc8:	1bc3      	subs	r3, r0, r7
 8002cca:	42ab      	cmp	r3, r5
 8002ccc:	d801      	bhi.n	8002cd2 <HAL_ADC_PollForConversion+0x3a>
 8002cce:	2d00      	cmp	r5, #0
 8002cd0:	d1f1      	bne.n	8002cb6 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4233      	tst	r3, r6
 8002cd8:	d1ed      	bne.n	8002cb6 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8002ce8:	2003      	movs	r0, #3
 8002cea:	e028      	b.n	8002d3e <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cec:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002cee:	f043 0320 	orr.w	r3, r3, #32
 8002cf2:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	e022      	b.n	8002d3e <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cf8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002d06:	d115      	bne.n	8002d34 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d08:	7ea2      	ldrb	r2, [r4, #26]
 8002d0a:	b99a      	cbnz	r2, 8002d34 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	f012 0f08 	tst.w	r2, #8
 8002d12:	d00f      	beq.n	8002d34 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	f012 0f04 	tst.w	r2, #4
 8002d1a:	d111      	bne.n	8002d40 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	f022 020c 	bic.w	r2, r2, #12
 8002d22:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002d24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002d34:	7e20      	ldrb	r0, [r4, #24]
 8002d36:	b960      	cbnz	r0, 8002d52 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d42:	f043 0320 	orr.w	r3, r3, #32
 8002d46:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002d50:	e7f0      	b.n	8002d34 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002d52:	2000      	movs	r0, #0
 8002d54:	e7f3      	b.n	8002d3e <HAL_ADC_PollForConversion+0xa6>

08002d56 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d56:	6803      	ldr	r3, [r0, #0]
 8002d58:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002d5a:	4770      	bx	lr

08002d5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002d5c:	b470      	push	{r4, r5, r6}
 8002d5e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d60:	2200      	movs	r2, #0
 8002d62:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d64:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002d66:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002d6a:	2a01      	cmp	r2, #1
 8002d6c:	f000 8105 	beq.w	8002f7a <HAL_ADC_ConfigChannel+0x21e>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2201      	movs	r2, #1
 8002d74:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d78:	6802      	ldr	r2, [r0, #0]
 8002d7a:	6890      	ldr	r0, [r2, #8]
 8002d7c:	f010 0f04 	tst.w	r0, #4
 8002d80:	d00a      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d84:	f042 0220 	orr.w	r2, r2, #32
 8002d88:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d8a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002d92:	b003      	add	sp, #12
 8002d94:	bc70      	pop	{r4, r5, r6}
 8002d96:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002d98:	6848      	ldr	r0, [r1, #4]
 8002d9a:	2802      	cmp	r0, #2
 8002d9c:	f000 809e 	beq.w	8002edc <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002da0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002da4:	d029      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x9e>
 8002da6:	4d76      	ldr	r5, [pc, #472]	; (8002f80 <HAL_ADC_ConfigChannel+0x224>)
 8002da8:	42ac      	cmp	r4, r5
 8002daa:	d026      	beq.n	8002dfa <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002dac:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002dae:	f000 001f 	and.w	r0, r0, #31
 8002db2:	250f      	movs	r5, #15
 8002db4:	4085      	lsls	r5, r0
 8002db6:	ea24 0505 	bic.w	r5, r4, r5
 8002dba:	680c      	ldr	r4, [r1, #0]
 8002dbc:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002dc0:	2e00      	cmp	r6, #0
 8002dc2:	d133      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0xd0>
 8002dc4:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002dc8:	fa04 f000 	lsl.w	r0, r4, r0
 8002dcc:	4328      	orrs	r0, r5
 8002dce:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002dd0:	684c      	ldr	r4, [r1, #4]
 8002dd2:	08a0      	lsrs	r0, r4, #2
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	69dd      	ldr	r5, [r3, #28]
 8002dd8:	42a8      	cmp	r0, r5
 8002dda:	d814      	bhi.n	8002e06 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ddc:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002dde:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002de0:	f004 041f 	and.w	r4, r4, #31
 8002de4:	260f      	movs	r6, #15
 8002de6:	40a6      	lsls	r6, r4
 8002de8:	ea20 0006 	bic.w	r0, r0, r6
 8002dec:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002df0:	fa05 f404 	lsl.w	r4, r5, r4
 8002df4:	4304      	orrs	r4, r0
 8002df6:	6294      	str	r4, [r2, #40]	; 0x28
}
 8002df8:	e005      	b.n	8002e06 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002dfa:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002dfc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002dfe:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002e02:	4320      	orrs	r0, r4
 8002e04:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e06:	681c      	ldr	r4, [r3, #0]
 8002e08:	680d      	ldr	r5, [r1, #0]
 8002e0a:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002e0c:	6960      	ldr	r0, [r4, #20]
 8002e0e:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8002e12:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8002e16:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002e1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e1e:	4302      	orrs	r2, r0
 8002e20:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e22:	680a      	ldr	r2, [r1, #0]
 8002e24:	2a00      	cmp	r2, #0
 8002e26:	db09      	blt.n	8002e3c <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e28:	2000      	movs	r0, #0
 8002e2a:	e7af      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e30:	b114      	cbz	r4, 8002e38 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002e32:	fab4 f484 	clz	r4, r4
 8002e36:	e7c7      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002e38:	2420      	movs	r4, #32
 8002e3a:	e7c5      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e3c:	4951      	ldr	r1, [pc, #324]	; (8002f84 <HAL_ADC_ConfigChannel+0x228>)
 8002e3e:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8002e42:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e46:	4c50      	ldr	r4, [pc, #320]	; (8002f88 <HAL_ADC_ConfigChannel+0x22c>)
 8002e48:	42a2      	cmp	r2, r4
 8002e4a:	d007      	beq.n	8002e5c <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e4c:	4c4f      	ldr	r4, [pc, #316]	; (8002f8c <HAL_ADC_ConfigChannel+0x230>)
 8002e4e:	42a2      	cmp	r2, r4
 8002e50:	d026      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e52:	4c4f      	ldr	r4, [pc, #316]	; (8002f90 <HAL_ADC_ConfigChannel+0x234>)
 8002e54:	42a2      	cmp	r2, r4
 8002e56:	d032      	beq.n	8002ebe <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e58:	2000      	movs	r0, #0
 8002e5a:	e797      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e5c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002e60:	d1f4      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e66:	4847      	ldr	r0, [pc, #284]	; (8002f84 <HAL_ADC_ConfigChannel+0x228>)
 8002e68:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002e6c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002e70:	4311      	orrs	r1, r2
 8002e72:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e76:	4a47      	ldr	r2, [pc, #284]	; (8002f94 <HAL_ADC_ConfigChannel+0x238>)
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	0992      	lsrs	r2, r2, #6
 8002e7c:	4946      	ldr	r1, [pc, #280]	; (8002f98 <HAL_ADC_ConfigChannel+0x23c>)
 8002e7e:	fba1 1202 	umull	r1, r2, r1, r2
 8002e82:	0992      	lsrs	r2, r2, #6
 8002e84:	3201      	adds	r2, #1
 8002e86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002e8e:	e002      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 8002e90:	9a01      	ldr	r2, [sp, #4]
 8002e92:	3a01      	subs	r2, #1
 8002e94:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002e96:	9a01      	ldr	r2, [sp, #4]
 8002e98:	2a00      	cmp	r2, #0
 8002e9a:	d1f9      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	e775      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ea0:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002ea4:	d1d5      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ea6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002eaa:	4836      	ldr	r0, [pc, #216]	; (8002f84 <HAL_ADC_ConfigChannel+0x228>)
 8002eac:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002eb0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eba:	2000      	movs	r0, #0
}
 8002ebc:	e766      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ebe:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002ec2:	d158      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec4:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ec8:	482e      	ldr	r0, [pc, #184]	; (8002f84 <HAL_ADC_ConfigChannel+0x228>)
 8002eca:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002ece:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed8:	2000      	movs	r0, #0
}
 8002eda:	e757      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002edc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002ee0:	d002      	beq.n	8002ee8 <HAL_ADC_ConfigChannel+0x18c>
 8002ee2:	4827      	ldr	r0, [pc, #156]	; (8002f80 <HAL_ADC_ConfigChannel+0x224>)
 8002ee4:	4284      	cmp	r4, r0
 8002ee6:	d106      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002ee8:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002eea:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002eec:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002ef0:	ea20 0004 	bic.w	r0, r0, r4
 8002ef4:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ef6:	680a      	ldr	r2, [r1, #0]
 8002ef8:	2a00      	cmp	r2, #0
 8002efa:	db01      	blt.n	8002f00 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efc:	2000      	movs	r0, #0
 8002efe:	e745      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f00:	4920      	ldr	r1, [pc, #128]	; (8002f84 <HAL_ADC_ConfigChannel+0x228>)
 8002f02:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f06:	4820      	ldr	r0, [pc, #128]	; (8002f88 <HAL_ADC_ConfigChannel+0x22c>)
 8002f08:	4282      	cmp	r2, r0
 8002f0a:	d007      	beq.n	8002f1c <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f0c:	481f      	ldr	r0, [pc, #124]	; (8002f8c <HAL_ADC_ConfigChannel+0x230>)
 8002f0e:	4282      	cmp	r2, r0
 8002f10:	d013      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f12:	481f      	ldr	r0, [pc, #124]	; (8002f90 <HAL_ADC_ConfigChannel+0x234>)
 8002f14:	4282      	cmp	r2, r0
 8002f16:	d01f      	beq.n	8002f58 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f18:	2000      	movs	r0, #0
 8002f1a:	e737      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f1c:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f20:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8002f24:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8002f28:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002f2c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002f30:	4311      	orrs	r1, r2
 8002f32:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f36:	2000      	movs	r0, #0
}
 8002f38:	e728      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f3a:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f3e:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8002f42:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8002f46:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002f4a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f54:	2000      	movs	r0, #0
}
 8002f56:	e719      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f58:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f5c:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8002f60:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002f64:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002f68:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f72:	2000      	movs	r0, #0
}
 8002f74:	e70a      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
 8002f76:	2000      	movs	r0, #0
 8002f78:	e708      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8002f7a:	2002      	movs	r0, #2
 8002f7c:	e709      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x36>
 8002f7e:	bf00      	nop
 8002f80:	80000004 	.word	0x80000004
 8002f84:	40012000 	.word	0x40012000
 8002f88:	b0001000 	.word	0xb0001000
 8002f8c:	b8004000 	.word	0xb8004000
 8002f90:	b4002000 	.word	0xb4002000
 8002f94:	20000070 	.word	0x20000070
 8002f98:	053e2d63 	.word	0x053e2d63

08002f9c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002f9c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f9e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	f012 0f04 	tst.w	r2, #4
 8002fa6:	d02a      	beq.n	8002ffe <ADC_ConversionStop+0x62>
 8002fa8:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	f012 0f02 	tst.w	r2, #2
 8002fb0:	d107      	bne.n	8002fc2 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fb8:	f022 0217 	bic.w	r2, r2, #23
 8002fbc:	f042 0210 	orr.w	r2, r2, #16
 8002fc0:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fc2:	f7fe fc69 	bl	8001898 <HAL_GetTick>
 8002fc6:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f013 0f04 	tst.w	r3, #4
 8002fd0:	d013      	beq.n	8002ffa <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002fd2:	f7fe fc61 	bl	8001898 <HAL_GetTick>
 8002fd6:	1b43      	subs	r3, r0, r5
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d9f5      	bls.n	8002fc8 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f013 0f04 	tst.w	r3, #4
 8002fe4:	d0f0      	beq.n	8002fc8 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fe8:	f043 0310 	orr.w	r3, r3, #16
 8002fec:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	e002      	b.n	8003000 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	e000      	b.n	8003000 <ADC_ConversionStop+0x64>
 8002ffe:	2000      	movs	r0, #0
}
 8003000:	bd38      	pop	{r3, r4, r5, pc}
	...

08003004 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003004:	b530      	push	{r4, r5, lr}
 8003006:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003008:	2300      	movs	r3, #0
 800300a:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800300c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	f012 0f01 	tst.w	r2, #1
 8003014:	d15b      	bne.n	80030ce <ADC_Enable+0xca>
 8003016:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003018:	6899      	ldr	r1, [r3, #8]
 800301a:	4a2e      	ldr	r2, [pc, #184]	; (80030d4 <ADC_Enable+0xd0>)
 800301c:	4211      	tst	r1, r2
 800301e:	d117      	bne.n	8003050 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003026:	f022 0217 	bic.w	r2, r2, #23
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003030:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <ADC_Enable+0xd4>)
 8003032:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003036:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800303a:	d019      	beq.n	8003070 <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <ADC_Enable+0xd8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <ADC_Enable+0xdc>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	3301      	adds	r3, #1
 800304c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800304e:	e00c      	b.n	800306a <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003050:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003052:	f043 0310 	orr.w	r3, r3, #16
 8003056:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003058:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8003060:	2001      	movs	r0, #1
 8003062:	e035      	b.n	80030d0 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003064:	9b01      	ldr	r3, [sp, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800306a:	9b01      	ldr	r3, [sp, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f9      	bne.n	8003064 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003070:	7e63      	ldrb	r3, [r4, #25]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003076:	2000      	movs	r0, #0
 8003078:	e02a      	b.n	80030d0 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 800307a:	f7fe fc0d 	bl	8001898 <HAL_GetTick>
 800307e:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	f012 0f01 	tst.w	r2, #1
 8003088:	d11f      	bne.n	80030ca <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	f012 0f01 	tst.w	r2, #1
 8003090:	d107      	bne.n	80030a2 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003098:	f022 0217 	bic.w	r2, r2, #23
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030a2:	f7fe fbf9 	bl	8001898 <HAL_GetTick>
 80030a6:	1b40      	subs	r0, r0, r5
 80030a8:	2802      	cmp	r0, #2
 80030aa:	d9e9      	bls.n	8003080 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f013 0f01 	tst.w	r3, #1
 80030b4:	d1e4      	bne.n	8003080 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030b8:	f043 0310 	orr.w	r3, r3, #16
 80030bc:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80030c6:	2001      	movs	r0, #1
 80030c8:	e002      	b.n	80030d0 <ADC_Enable+0xcc>
  return HAL_OK;
 80030ca:	2000      	movs	r0, #0
 80030cc:	e000      	b.n	80030d0 <ADC_Enable+0xcc>
 80030ce:	2000      	movs	r0, #0
}
 80030d0:	b003      	add	sp, #12
 80030d2:	bd30      	pop	{r4, r5, pc}
 80030d4:	80000017 	.word	0x80000017
 80030d8:	40012000 	.word	0x40012000
 80030dc:	20000070 	.word	0x20000070
 80030e0:	053e2d63 	.word	0x053e2d63

080030e4 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f013 0f04 	tst.w	r3, #4
 80030ec:	d128      	bne.n	8003140 <HAL_ADC_Start+0x5c>
{
 80030ee:	b510      	push	{r4, lr}
 80030f0:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80030f2:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d024      	beq.n	8003144 <HAL_ADC_Start+0x60>
 80030fa:	2301      	movs	r3, #1
 80030fc:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003100:	f7ff ff80 	bl	8003004 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003104:	b9c0      	cbnz	r0, 8003138 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003106:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003108:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003114:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003116:	2300      	movs	r3, #0
 8003118:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800311a:	6822      	ldr	r2, [r4, #0]
 800311c:	211c      	movs	r1, #28
 800311e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003120:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003124:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003126:	6893      	ldr	r3, [r2, #8]
 8003128:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800312c:	f023 0317 	bic.w	r3, r3, #23
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	6093      	str	r3, [r2, #8]
}
 8003136:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003138:	2300      	movs	r3, #0
 800313a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800313e:	e7fa      	b.n	8003136 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003140:	2002      	movs	r0, #2
}
 8003142:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003144:	2002      	movs	r0, #2
 8003146:	e7f6      	b.n	8003136 <HAL_ADC_Start+0x52>

08003148 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800314c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800314e:	6893      	ldr	r3, [r2, #8]
 8003150:	f013 0302 	ands.w	r3, r3, #2
 8003154:	d000      	beq.n	8003158 <ADC_Disable+0x10>
 8003156:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003158:	6891      	ldr	r1, [r2, #8]
 800315a:	f011 0f01 	tst.w	r1, #1
 800315e:	d039      	beq.n	80031d4 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003160:	2b00      	cmp	r3, #0
 8003162:	d139      	bne.n	80031d8 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003164:	6893      	ldr	r3, [r2, #8]
 8003166:	f003 0305 	and.w	r3, r3, #5
 800316a:	2b01      	cmp	r3, #1
 800316c:	d009      	beq.n	8003182 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003170:	f043 0310 	orr.w	r3, r3, #16
 8003174:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003176:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800317e:	2001      	movs	r0, #1
 8003180:	e029      	b.n	80031d6 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003182:	6893      	ldr	r3, [r2, #8]
 8003184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003188:	f023 0317 	bic.w	r3, r3, #23
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	2203      	movs	r2, #3
 8003196:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003198:	f7fe fb7e 	bl	8001898 <HAL_GetTick>
 800319c:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f013 0f01 	tst.w	r3, #1
 80031a6:	d013      	beq.n	80031d0 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031a8:	f7fe fb76 	bl	8001898 <HAL_GetTick>
 80031ac:	1b40      	subs	r0, r0, r5
 80031ae:	2802      	cmp	r0, #2
 80031b0:	d9f5      	bls.n	800319e <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f013 0f01 	tst.w	r3, #1
 80031ba:	d0f0      	beq.n	800319e <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031be:	f043 0310 	orr.w	r3, r3, #16
 80031c2:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80031cc:	2001      	movs	r0, #1
 80031ce:	e002      	b.n	80031d6 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031d0:	2000      	movs	r0, #0
 80031d2:	e000      	b.n	80031d6 <ADC_Disable+0x8e>
 80031d4:	2000      	movs	r0, #0
}
 80031d6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80031d8:	2000      	movs	r0, #0
 80031da:	e7fc      	b.n	80031d6 <ADC_Disable+0x8e>

080031dc <HAL_ADC_DeInit>:
{
 80031dc:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80031de:	2800      	cmp	r0, #0
 80031e0:	d04c      	beq.n	800327c <HAL_ADC_DeInit+0xa0>
 80031e2:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80031e4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80031ec:	f7ff fed6 	bl	8002f9c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80031f0:	4606      	mov	r6, r0
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d033      	beq.n	800325e <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80031f6:	6822      	ldr	r2, [r4, #0]
 80031f8:	6853      	ldr	r3, [r2, #4]
 80031fa:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80031fe:	f023 0303 	bic.w	r3, r3, #3
 8003202:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	f240 329f 	movw	r2, #927	; 0x39f
 800320a:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800320c:	6822      	ldr	r2, [r4, #0]
 800320e:	68d1      	ldr	r1, [r2, #12]
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_ADC_DeInit+0xa4>)
 8003212:	400b      	ands	r3, r1
 8003214:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	6913      	ldr	r3, [r2, #16]
 800321a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800321e:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003220:	6822      	ldr	r2, [r4, #0]
 8003222:	6953      	ldr	r3, [r2, #20]
 8003224:	f023 0307 	bic.w	r3, r3, #7
 8003228:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800322a:	6822      	ldr	r2, [r4, #0]
 800322c:	6a13      	ldr	r3, [r2, #32]
 800322e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003232:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003238:	2500      	movs	r5, #0
 800323a:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800323c:	4a11      	ldr	r2, [pc, #68]	; (8003284 <HAL_ADC_DeInit+0xa8>)
 800323e:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8003242:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003246:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 800324a:	4620      	mov	r0, r4
 800324c:	f7fd fe70 	bl	8000f30 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003250:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003252:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003254:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003256:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 800325a:	4630      	mov	r0, r6
 800325c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800325e:	4620      	mov	r0, r4
 8003260:	f7ff ff72 	bl	8003148 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003264:	4606      	mov	r6, r0
 8003266:	b908      	cbnz	r0, 800326c <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8003268:	2301      	movs	r3, #1
 800326a:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800326c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800326e:	6893      	ldr	r3, [r2, #8]
 8003270:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003274:	f023 0317 	bic.w	r3, r3, #23
 8003278:	6093      	str	r3, [r2, #8]
}
 800327a:	e7bc      	b.n	80031f6 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 800327c:	2601      	movs	r6, #1
 800327e:	e7ec      	b.n	800325a <HAL_ADC_DeInit+0x7e>
 8003280:	833e0200 	.word	0x833e0200
 8003284:	40012000 	.word	0x40012000

08003288 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003288:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800328c:	2b01      	cmp	r3, #1
 800328e:	d019      	beq.n	80032c4 <HAL_ADC_Stop+0x3c>
{
 8003290:	b510      	push	{r4, lr}
 8003292:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003294:	2301      	movs	r3, #1
 8003296:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800329a:	f7ff fe7f 	bl	8002f9c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800329e:	b118      	cbz	r0, 80032a8 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80032a0:	2300      	movs	r3, #0
 80032a2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80032a6:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80032a8:	4620      	mov	r0, r4
 80032aa:	f7ff ff4d 	bl	8003148 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80032ae:	2800      	cmp	r0, #0
 80032b0:	d1f6      	bne.n	80032a0 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80032b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80032c2:	e7ed      	b.n	80032a0 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80032c4:	2002      	movs	r0, #2
}
 80032c6:	4770      	bx	lr

080032c8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80032d0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	f000 8094 	beq.w	8003402 <HAL_ADCEx_Calibration_Start+0x13a>
 80032da:	4604      	mov	r4, r0
 80032dc:	2301      	movs	r3, #1
 80032de:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032e2:	f7ff ff31 	bl	8003148 <ADC_Disable>
 80032e6:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032e8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	f012 0201 	ands.w	r2, r2, #1
 80032f0:	d009      	beq.n	8003306 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032f4:	f043 0310 	orr.w	r3, r3, #16
 80032f8:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80032fa:	2300      	movs	r3, #0
 80032fc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8003300:	4628      	mov	r0, r5
 8003302:	b003      	add	sp, #12
 8003304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003306:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003308:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 800330c:	f041 0102 	orr.w	r1, r1, #2
 8003310:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003312:	68de      	ldr	r6, [r3, #12]
 8003314:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003318:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 800331c:	0436      	lsls	r6, r6, #16
 800331e:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003326:	f021 0103 	bic.w	r1, r1, #3
 800332a:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 800332c:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800332e:	e005      	b.n	800333c <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003338:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800333a:	3201      	adds	r2, #1
 800333c:	2a07      	cmp	r2, #7
 800333e:	d81e      	bhi.n	800337e <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003340:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003342:	688b      	ldr	r3, [r1, #8]
 8003344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003348:	f023 0317 	bic.w	r3, r3, #23
 800334c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003350:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003352:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	2900      	cmp	r1, #0
 8003358:	daea      	bge.n	8003330 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 800335a:	9b01      	ldr	r3, [sp, #4]
 800335c:	3301      	adds	r3, #1
 800335e:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003360:	9b01      	ldr	r3, [sp, #4]
 8003362:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003366:	d3f4      	bcc.n	8003352 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800336a:	f023 0312 	bic.w	r3, r3, #18
 800336e:	f043 0310 	orr.w	r3, r3, #16
 8003372:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003374:	2300      	movs	r3, #0
 8003376:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800337a:	2501      	movs	r5, #1
 800337c:	e7c0      	b.n	8003300 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800337e:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003382:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003384:	688b      	ldr	r3, [r1, #8]
 8003386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800338a:	f023 0317 	bic.w	r3, r3, #23
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003394:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003396:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800339a:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 800339e:	4302      	orrs	r2, r0
 80033a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 80033a4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80033a6:	6893      	ldr	r3, [r2, #8]
 80033a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ac:	f023 0317 	bic.w	r3, r3, #23
 80033b0:	f043 0302 	orr.w	r3, r3, #2
 80033b4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80033b6:	f7fe fa6f 	bl	8001898 <HAL_GetTick>
 80033ba:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033bc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	f012 0f01 	tst.w	r2, #1
 80033c4:	d109      	bne.n	80033da <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	4316      	orrs	r6, r2
 80033ca:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80033cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80033d8:	e78f      	b.n	80032fa <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033da:	f7fe fa5d 	bl	8001898 <HAL_GetTick>
 80033de:	1bc3      	subs	r3, r0, r7
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d9eb      	bls.n	80033bc <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f013 0f01 	tst.w	r3, #1
 80033ec:	d0e6      	beq.n	80033bc <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033f0:	f043 0310 	orr.w	r3, r3, #16
 80033f4:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80033fe:	2501      	movs	r5, #1
 8003400:	e77e      	b.n	8003300 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003402:	2502      	movs	r5, #2
 8003404:	e77c      	b.n	8003300 <HAL_ADCEx_Calibration_Start+0x38>
	...

08003408 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003408:	4a07      	ldr	r2, [pc, #28]	; (8003428 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800340a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	0200      	lsls	r0, r0, #8
 8003416:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800341a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800341c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003424:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800342e:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_NVIC_SetPriority+0x68>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003436:	f1c3 0c07 	rsb	ip, r3, #7
 800343a:	f1bc 0f04 	cmp.w	ip, #4
 800343e:	bf28      	it	cs
 8003440:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003444:	f103 0e04 	add.w	lr, r3, #4
 8003448:	f1be 0f06 	cmp.w	lr, #6
 800344c:	d918      	bls.n	8003480 <HAL_NVIC_SetPriority+0x54>
 800344e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	f04f 3eff 	mov.w	lr, #4294967295
 8003454:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003458:	ea21 010c 	bic.w	r1, r1, ip
 800345c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345e:	fa0e f303 	lsl.w	r3, lr, r3
 8003462:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003466:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003468:	2800      	cmp	r0, #0
 800346a:	db0b      	blt.n	8003484 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346c:	0109      	lsls	r1, r1, #4
 800346e:	b2c9      	uxtb	r1, r1
 8003470:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003474:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003478:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800347c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003480:	2300      	movs	r3, #0
 8003482:	e7e5      	b.n	8003450 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	f000 000f 	and.w	r0, r0, #15
 8003488:	0109      	lsls	r1, r1, #4
 800348a:	b2c9      	uxtb	r1, r1
 800348c:	4b02      	ldr	r3, [pc, #8]	; (8003498 <HAL_NVIC_SetPriority+0x6c>)
 800348e:	5419      	strb	r1, [r3, r0]
 8003490:	e7f4      	b.n	800347c <HAL_NVIC_SetPriority+0x50>
 8003492:	bf00      	nop
 8003494:	e000ed00 	.word	0xe000ed00
 8003498:	e000ed14 	.word	0xe000ed14

0800349c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800349c:	2800      	cmp	r0, #0
 800349e:	db07      	blt.n	80034b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a0:	f000 021f 	and.w	r2, r0, #31
 80034a4:	0940      	lsrs	r0, r0, #5
 80034a6:	2301      	movs	r3, #1
 80034a8:	4093      	lsls	r3, r2
 80034aa:	4a02      	ldr	r2, [pc, #8]	; (80034b4 <HAL_NVIC_EnableIRQ+0x18>)
 80034ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80034b8:	2800      	cmp	r0, #0
 80034ba:	db0c      	blt.n	80034d6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034bc:	f000 021f 	and.w	r2, r0, #31
 80034c0:	0940      	lsrs	r0, r0, #5
 80034c2:	2301      	movs	r3, #1
 80034c4:	4093      	lsls	r3, r2
 80034c6:	3020      	adds	r0, #32
 80034c8:	4a03      	ldr	r2, [pc, #12]	; (80034d8 <HAL_NVIC_DisableIRQ+0x20>)
 80034ca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034d2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80034d6:	4770      	bx	lr
 80034d8:	e000e100 	.word	0xe000e100

080034dc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034dc:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034de:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80034e0:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80034e4:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034e8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80034ea:	b124      	cbz	r4, 80034f6 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ec:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80034ee:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80034f2:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80034f8:	f004 0c1c 	and.w	ip, r4, #28
 80034fc:	2401      	movs	r4, #1
 80034fe:	fa04 f40c 	lsl.w	r4, r4, ip
 8003502:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003506:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800350a:	6804      	ldr	r4, [r0, #0]
 800350c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800350e:	6883      	ldr	r3, [r0, #8]
 8003510:	2b10      	cmp	r3, #16
 8003512:	d005      	beq.n	8003520 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003514:	6803      	ldr	r3, [r0, #0]
 8003516:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003518:	6803      	ldr	r3, [r0, #0]
 800351a:	60da      	str	r2, [r3, #12]
  }
}
 800351c:	bc10      	pop	{r4}
 800351e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003520:	6803      	ldr	r3, [r0, #0]
 8003522:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003524:	6803      	ldr	r3, [r0, #0]
 8003526:	60d9      	str	r1, [r3, #12]
 8003528:	e7f8      	b.n	800351c <DMA_SetConfig+0x40>
	...

0800352c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800352c:	6803      	ldr	r3, [r0, #0]
 800352e:	4a14      	ldr	r2, [pc, #80]	; (8003580 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d816      	bhi.n	8003562 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003534:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003536:	f022 0203 	bic.w	r2, r2, #3
 800353a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800353e:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003542:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003544:	b2db      	uxtb	r3, r3
 8003546:	3b08      	subs	r3, #8
 8003548:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003550:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003552:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2201      	movs	r2, #1
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003560:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003562:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003564:	f022 0103 	bic.w	r1, r2, #3
 8003568:	4a08      	ldr	r2, [pc, #32]	; (800358c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 800356a:	440a      	add	r2, r1
 800356c:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800356e:	b2db      	uxtb	r3, r3
 8003570:	3b08      	subs	r3, #8
 8003572:	4a04      	ldr	r2, [pc, #16]	; (8003584 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	3307      	adds	r3, #7
 800357c:	e7e8      	b.n	8003550 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800357e:	bf00      	nop
 8003580:	40020407 	.word	0x40020407
 8003584:	cccccccd 	.word	0xcccccccd
 8003588:	40020880 	.word	0x40020880
 800358c:	4002081c 	.word	0x4002081c

08003590 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003590:	6843      	ldr	r3, [r0, #4]
 8003592:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003596:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003598:	441a      	add	r2, r3
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800359e:	4a06      	ldr	r2, [pc, #24]	; (80035b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80035a0:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80035a2:	3b01      	subs	r3, #1
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2201      	movs	r2, #1
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	1000823f 	.word	0x1000823f
 80035b8:	40020940 	.word	0x40020940

080035bc <HAL_DMA_Init>:
  if (hdma == NULL)
 80035bc:	2800      	cmp	r0, #0
 80035be:	d060      	beq.n	8003682 <HAL_DMA_Init+0xc6>
{
 80035c0:	b510      	push	{r4, lr}
 80035c2:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035c4:	6802      	ldr	r2, [r0, #0]
 80035c6:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_DMA_Init+0xcc>)
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d842      	bhi.n	8003652 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035cc:	4b2f      	ldr	r3, [pc, #188]	; (800368c <HAL_DMA_Init+0xd0>)
 80035ce:	4413      	add	r3, r2
 80035d0:	492f      	ldr	r1, [pc, #188]	; (8003690 <HAL_DMA_Init+0xd4>)
 80035d2:	fba1 1303 	umull	r1, r3, r1, r3
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_DMA_Init+0xd8>)
 80035de:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80035e0:	2302      	movs	r3, #2
 80035e2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f0:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035f2:	6821      	ldr	r1, [r4, #0]
 80035f4:	680a      	ldr	r2, [r1, #0]
 80035f6:	68a3      	ldr	r3, [r4, #8]
 80035f8:	68e0      	ldr	r0, [r4, #12]
 80035fa:	4303      	orrs	r3, r0
 80035fc:	6920      	ldr	r0, [r4, #16]
 80035fe:	4303      	orrs	r3, r0
 8003600:	6960      	ldr	r0, [r4, #20]
 8003602:	4303      	orrs	r3, r0
 8003604:	69a0      	ldr	r0, [r4, #24]
 8003606:	4303      	orrs	r3, r0
 8003608:	69e0      	ldr	r0, [r4, #28]
 800360a:	4303      	orrs	r3, r0
 800360c:	6a20      	ldr	r0, [r4, #32]
 800360e:	4303      	orrs	r3, r0
 8003610:	4313      	orrs	r3, r2
 8003612:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003614:	4620      	mov	r0, r4
 8003616:	f7ff ff89 	bl	800352c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800361a:	68a3      	ldr	r3, [r4, #8]
 800361c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003620:	d022      	beq.n	8003668 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003622:	6863      	ldr	r3, [r4, #4]
 8003624:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800362a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800362c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800362e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003630:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003632:	6863      	ldr	r3, [r4, #4]
 8003634:	3b01      	subs	r3, #1
 8003636:	2b03      	cmp	r3, #3
 8003638:	d919      	bls.n	800366e <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800363e:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003640:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003642:	2000      	movs	r0, #0
 8003644:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003646:	2301      	movs	r3, #1
 8003648:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800364c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003650:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_DMA_Init+0xdc>)
 8003654:	4413      	add	r3, r2
 8003656:	490e      	ldr	r1, [pc, #56]	; (8003690 <HAL_DMA_Init+0xd4>)
 8003658:	fba1 1303 	umull	r1, r3, r1, r3
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <HAL_DMA_Init+0xe0>)
 8003664:	6403      	str	r3, [r0, #64]	; 0x40
 8003666:	e7bb      	b.n	80035e0 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003668:	2300      	movs	r3, #0
 800366a:	6063      	str	r3, [r4, #4]
 800366c:	e7d9      	b.n	8003622 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800366e:	4620      	mov	r0, r4
 8003670:	f7ff ff8e 	bl	8003590 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003674:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800367a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800367c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	e7df      	b.n	8003642 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003682:	2001      	movs	r0, #1
}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40020407 	.word	0x40020407
 800368c:	bffdfff8 	.word	0xbffdfff8
 8003690:	cccccccd 	.word	0xcccccccd
 8003694:	40020000 	.word	0x40020000
 8003698:	bffdfbf8 	.word	0xbffdfbf8
 800369c:	40020400 	.word	0x40020400

080036a0 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d04b      	beq.n	800373c <HAL_DMA_DeInit+0x9c>
{
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80036a8:	6802      	ldr	r2, [r0, #0]
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036b2:	6802      	ldr	r2, [r0, #0]
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_DMA_DeInit+0xa0>)
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d82c      	bhi.n	8003714 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036ba:	4b22      	ldr	r3, [pc, #136]	; (8003744 <HAL_DMA_DeInit+0xa4>)
 80036bc:	4413      	add	r3, r2
 80036be:	4922      	ldr	r1, [pc, #136]	; (8003748 <HAL_DMA_DeInit+0xa8>)
 80036c0:	fba1 1303 	umull	r1, r3, r1, r3
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_DMA_DeInit+0xac>)
 80036cc:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80036ce:	2500      	movs	r5, #0
 80036d0:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036d4:	f003 021c 	and.w	r2, r3, #28
 80036d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80036da:	2301      	movs	r3, #1
 80036dc:	4093      	lsls	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036e0:	4620      	mov	r0, r4
 80036e2:	f7ff ff23 	bl	800352c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80036e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80036e8:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80036ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80036ee:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036f0:	6863      	ldr	r3, [r4, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d918      	bls.n	800372a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80036f8:	2000      	movs	r0, #0
 80036fa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80036fc:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80036fe:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8003700:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003702:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003704:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003706:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003708:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800370a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800370e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003712:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_DMA_DeInit+0xb0>)
 8003716:	4413      	add	r3, r2
 8003718:	490b      	ldr	r1, [pc, #44]	; (8003748 <HAL_DMA_DeInit+0xa8>)
 800371a:	fba1 1303 	umull	r1, r3, r1, r3
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_DMA_DeInit+0xb4>)
 8003726:	6403      	str	r3, [r0, #64]	; 0x40
 8003728:	e7d1      	b.n	80036ce <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800372a:	4620      	mov	r0, r4
 800372c:	f7ff ff30 	bl	8003590 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003730:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003732:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003734:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003736:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	e7dd      	b.n	80036f8 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 800373c:	2001      	movs	r0, #1
}
 800373e:	4770      	bx	lr
 8003740:	40020407 	.word	0x40020407
 8003744:	bffdfff8 	.word	0xbffdfff8
 8003748:	cccccccd 	.word	0xcccccccd
 800374c:	40020000 	.word	0x40020000
 8003750:	bffdfbf8 	.word	0xbffdfbf8
 8003754:	40020400 	.word	0x40020400

08003758 <HAL_DMA_Start_IT>:
{
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800375c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003760:	2801      	cmp	r0, #1
 8003762:	d043      	beq.n	80037ec <HAL_DMA_Start_IT+0x94>
 8003764:	2001      	movs	r0, #1
 8003766:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 800376a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800376e:	b2c0      	uxtb	r0, r0
 8003770:	2801      	cmp	r0, #1
 8003772:	d006      	beq.n	8003782 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003778:	2300      	movs	r3, #0
 800377a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800377e:	2001      	movs	r0, #1
}
 8003780:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003782:	2002      	movs	r0, #2
 8003784:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003788:	2000      	movs	r0, #0
 800378a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800378c:	6825      	ldr	r5, [r4, #0]
 800378e:	6828      	ldr	r0, [r5, #0]
 8003790:	f020 0001 	bic.w	r0, r0, #1
 8003794:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003796:	4620      	mov	r0, r4
 8003798:	f7ff fea0 	bl	80034dc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800379c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800379e:	b1d3      	cbz	r3, 80037d6 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	6813      	ldr	r3, [r2, #0]
 80037a4:	f043 030e 	orr.w	r3, r3, #14
 80037a8:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80037b2:	d003      	beq.n	80037bc <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ba:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80037bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037be:	b11b      	cbz	r3, 80037c8 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80037c8:	6822      	ldr	r2, [r4, #0]
 80037ca:	6813      	ldr	r3, [r2, #0]
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2000      	movs	r0, #0
 80037d4:	e7d4      	b.n	8003780 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037d6:	6822      	ldr	r2, [r4, #0]
 80037d8:	6813      	ldr	r3, [r2, #0]
 80037da:	f023 0304 	bic.w	r3, r3, #4
 80037de:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037e0:	6822      	ldr	r2, [r4, #0]
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	f043 030a 	orr.w	r3, r3, #10
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e7de      	b.n	80037aa <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80037ec:	2002      	movs	r0, #2
 80037ee:	e7c7      	b.n	8003780 <HAL_DMA_Start_IT+0x28>

080037f0 <HAL_DMA_Abort>:
  if (NULL == hdma)
 80037f0:	4603      	mov	r3, r0
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d034      	beq.n	8003860 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80037f6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	2a02      	cmp	r2, #2
 80037fe:	d006      	beq.n	800380e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003800:	2204      	movs	r2, #4
 8003802:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003804:	2200      	movs	r2, #0
 8003806:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 800380a:	2001      	movs	r0, #1
 800380c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800380e:	6801      	ldr	r1, [r0, #0]
 8003810:	680a      	ldr	r2, [r1, #0]
 8003812:	f022 020e 	bic.w	r2, r2, #14
 8003816:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003818:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800381a:	680a      	ldr	r2, [r1, #0]
 800381c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003820:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003822:	6801      	ldr	r1, [r0, #0]
 8003824:	680a      	ldr	r2, [r1, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800382c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800382e:	f002 011c 	and.w	r1, r2, #28
 8003832:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003834:	2201      	movs	r2, #1
 8003836:	408a      	lsls	r2, r1
 8003838:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800383a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800383c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800383e:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003842:	b132      	cbz	r2, 8003852 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003844:	6811      	ldr	r1, [r2, #0]
 8003846:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800384a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800384c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800384e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003850:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003858:	2000      	movs	r0, #0
 800385a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800385e:	4770      	bx	lr
    return HAL_ERROR;
 8003860:	2001      	movs	r0, #1
}
 8003862:	4770      	bx	lr

08003864 <HAL_DMA_Abort_IT>:
{
 8003864:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003866:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d003      	beq.n	8003878 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003870:	2304      	movs	r3, #4
 8003872:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003874:	2001      	movs	r0, #1
}
 8003876:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003878:	6802      	ldr	r2, [r0, #0]
 800387a:	6813      	ldr	r3, [r2, #0]
 800387c:	f023 030e 	bic.w	r3, r3, #14
 8003880:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003882:	6802      	ldr	r2, [r0, #0]
 8003884:	6813      	ldr	r3, [r2, #0]
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800388c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003894:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003896:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003898:	f003 021c 	and.w	r2, r3, #28
 800389c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800389e:	2301      	movs	r3, #1
 80038a0:	4093      	lsls	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80038a6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80038a8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80038aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80038ac:	b133      	cbz	r3, 80038bc <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80038b8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80038ba:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80038bc:	2301      	movs	r3, #1
 80038be:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80038c2:	2300      	movs	r3, #0
 80038c4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80038c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80038ca:	b113      	cbz	r3, 80038d2 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80038cc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2000      	movs	r0, #0
 80038d0:	e7d1      	b.n	8003876 <HAL_DMA_Abort_IT+0x12>
 80038d2:	2000      	movs	r0, #0
 80038d4:	e7cf      	b.n	8003876 <HAL_DMA_Abort_IT+0x12>
	...

080038d8 <HAL_DMA_IRQHandler>:
{
 80038d8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80038dc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80038de:	6804      	ldr	r4, [r0, #0]
 80038e0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80038e4:	f003 031c 	and.w	r3, r3, #28
 80038e8:	2204      	movs	r2, #4
 80038ea:	409a      	lsls	r2, r3
 80038ec:	420a      	tst	r2, r1
 80038ee:	d015      	beq.n	800391c <HAL_DMA_IRQHandler+0x44>
 80038f0:	f015 0f04 	tst.w	r5, #4
 80038f4:	d012      	beq.n	800391c <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	f013 0f20 	tst.w	r3, #32
 80038fc:	d103      	bne.n	8003906 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	f023 0304 	bic.w	r3, r3, #4
 8003904:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003906:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003908:	f003 021c 	and.w	r2, r3, #28
 800390c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800390e:	2304      	movs	r3, #4
 8003910:	4093      	lsls	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003914:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003916:	b103      	cbz	r3, 800391a <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003918:	4798      	blx	r3
}
 800391a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800391c:	2202      	movs	r2, #2
 800391e:	409a      	lsls	r2, r3
 8003920:	420a      	tst	r2, r1
 8003922:	d028      	beq.n	8003976 <HAL_DMA_IRQHandler+0x9e>
 8003924:	f015 0f02 	tst.w	r5, #2
 8003928:	d025      	beq.n	8003976 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	f013 0f20 	tst.w	r3, #32
 8003930:	d106      	bne.n	8003940 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	f023 030a 	bic.w	r3, r3, #10
 8003938:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800393a:	2301      	movs	r3, #1
 800393c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003940:	6802      	ldr	r2, [r0, #0]
 8003942:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <HAL_DMA_IRQHandler+0xdc>)
 8003944:	429a      	cmp	r2, r3
 8003946:	d90e      	bls.n	8003966 <HAL_DMA_IRQHandler+0x8e>
 8003948:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800394a:	f003 021c 	and.w	r2, r3, #28
 800394e:	2302      	movs	r3, #2
 8003950:	4093      	lsls	r3, r2
 8003952:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <HAL_DMA_IRQHandler+0xe0>)
 8003954:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003956:	2300      	movs	r3, #0
 8003958:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 800395c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0db      	beq.n	800391a <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003962:	4798      	blx	r3
 8003964:	e7d9      	b.n	800391a <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003966:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003968:	f003 021c 	and.w	r2, r3, #28
 800396c:	2302      	movs	r3, #2
 800396e:	4093      	lsls	r3, r2
 8003970:	4a12      	ldr	r2, [pc, #72]	; (80039bc <HAL_DMA_IRQHandler+0xe4>)
 8003972:	6053      	str	r3, [r2, #4]
 8003974:	e7ef      	b.n	8003956 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003976:	2208      	movs	r2, #8
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	420b      	tst	r3, r1
 800397e:	d0cc      	beq.n	800391a <HAL_DMA_IRQHandler+0x42>
 8003980:	f015 0f08 	tst.w	r5, #8
 8003984:	d0c9      	beq.n	800391a <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	f023 030e 	bic.w	r3, r3, #14
 800398c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800398e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003990:	f003 031c 	and.w	r3, r3, #28
 8003994:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003996:	2201      	movs	r2, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800399e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80039a0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80039a4:	2300      	movs	r3, #0
 80039a6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80039aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0b4      	beq.n	800391a <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80039b0:	4798      	blx	r3
  return;
 80039b2:	e7b2      	b.n	800391a <HAL_DMA_IRQHandler+0x42>
 80039b4:	40020080 	.word	0x40020080
 80039b8:	40020400 	.word	0x40020400
 80039bc:	40020000 	.word	0x40020000

080039c0 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80039c0:	b178      	cbz	r0, 80039e2 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 80039c2:	6803      	ldr	r3, [r0, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80039c6:	f011 0f10 	tst.w	r1, #16
 80039ca:	d004      	beq.n	80039d6 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80039cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80039d0:	d004      	beq.n	80039dc <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80039d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80039d6:	601a      	str	r2, [r3, #0]
  return status;
 80039d8:	2000      	movs	r0, #0
 80039da:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80039dc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80039e0:	e7f9      	b.n	80039d6 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 80039e2:	2001      	movs	r0, #1
}
 80039e4:	4770      	bx	lr
	...

080039e8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80039e8:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80039ea:	4c05      	ldr	r4, [pc, #20]	; (8003a00 <FLASH_Program_DoubleWord+0x18>)
 80039ec:	6961      	ldr	r1, [r4, #20]
 80039ee:	f041 0101 	orr.w	r1, r1, #1
 80039f2:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80039f4:	6002      	str	r2, [r0, #0]
 80039f6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80039fa:	6043      	str	r3, [r0, #4]
}
 80039fc:	bc10      	pop	{r4}
 80039fe:	4770      	bx	lr
 8003a00:	58004000 	.word	0x58004000

08003a04 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003a04:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <FLASH_Program_Fast+0x34>)
 8003a06:	6953      	ldr	r3, [r2, #20]
 8003a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a12:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003a14:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003a16:	f851 2b04 	ldr.w	r2, [r1], #4
 8003a1a:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003a1e:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003a20:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003a24:	d1f7      	bne.n	8003a16 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003a26:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <FLASH_Program_Fast+0x34>)
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003a2e:	d1fa      	bne.n	8003a26 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a30:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	58004000 	.word	0x58004000

08003a3c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_FLASH_Unlock+0x28>)
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db01      	blt.n	8003a48 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003a44:	2000      	movs	r0, #0
 8003a46:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_FLASH_Unlock+0x28>)
 8003a4a:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <HAL_FLASH_Unlock+0x2c>)
 8003a4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a4e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003a52:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	db01      	blt.n	8003a5e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	4770      	bx	lr
      status = HAL_ERROR;
 8003a5e:	2001      	movs	r0, #1
}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	58004000 	.word	0x58004000
 8003a68:	45670123 	.word	0x45670123

08003a6c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_FLASH_Lock+0x18>)
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a74:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	db01      	blt.n	8003a80 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8003a7c:	2001      	movs	r0, #1
}
 8003a7e:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003a80:	2000      	movs	r0, #0
 8003a82:	4770      	bx	lr
 8003a84:	58004000 	.word	0x58004000

08003a88 <FLASH_WaitForLastOperation>:
{
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003a8c:	f7fd ff04 	bl	8001898 <HAL_GetTick>
 8003a90:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003a92:	4b16      	ldr	r3, [pc, #88]	; (8003aec <FLASH_WaitForLastOperation+0x64>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003a9a:	d006      	beq.n	8003aaa <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003a9c:	f7fd fefc 	bl	8001898 <HAL_GetTick>
 8003aa0:	1b00      	subs	r0, r0, r4
 8003aa2:	42a8      	cmp	r0, r5
 8003aa4:	d3f5      	bcc.n	8003a92 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003aa6:	2003      	movs	r0, #3
}
 8003aa8:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <FLASH_WaitForLastOperation+0x64>)
 8003aac:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003aae:	f013 0f01 	tst.w	r3, #1
 8003ab2:	d002      	beq.n	8003aba <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <FLASH_WaitForLastOperation+0x64>)
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003aba:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d001      	beq.n	8003ac6 <FLASH_WaitForLastOperation+0x3e>
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <FLASH_WaitForLastOperation+0x64>)
 8003ac4:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8003ac6:	b95b      	cbnz	r3, 8003ae0 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003ac8:	4b08      	ldr	r3, [pc, #32]	; (8003aec <FLASH_WaitForLastOperation+0x64>)
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003ad0:	d00a      	beq.n	8003ae8 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003ad2:	f7fd fee1 	bl	8001898 <HAL_GetTick>
 8003ad6:	1b00      	subs	r0, r0, r4
 8003ad8:	42a8      	cmp	r0, r5
 8003ada:	d3f5      	bcc.n	8003ac8 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8003adc:	2003      	movs	r0, #3
 8003ade:	e7e3      	b.n	8003aa8 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8003ae0:	4a03      	ldr	r2, [pc, #12]	; (8003af0 <FLASH_WaitForLastOperation+0x68>)
 8003ae2:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	e7df      	b.n	8003aa8 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e7dd      	b.n	8003aa8 <FLASH_WaitForLastOperation+0x20>
 8003aec:	58004000 	.word	0x58004000
 8003af0:	2000045c 	.word	0x2000045c

08003af4 <HAL_FLASH_Program>:
{
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003af8:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_FLASH_Program+0x5c>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d025      	beq.n	8003b4c <HAL_FLASH_Program+0x58>
 8003b00:	4604      	mov	r4, r0
 8003b02:	460d      	mov	r5, r1
 8003b04:	4616      	mov	r6, r2
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_FLASH_Program+0x5c>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b14:	f7ff ffb8 	bl	8003a88 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003b18:	b970      	cbnz	r0, 8003b38 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003b1a:	2c01      	cmp	r4, #1
 8003b1c:	d010      	beq.n	8003b40 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003b1e:	4631      	mov	r1, r6
 8003b20:	4628      	mov	r0, r5
 8003b22:	f7ff ff6f 	bl	8003a04 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b2a:	f7ff ffad 	bl	8003a88 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003b2e:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <HAL_FLASH_Program+0x60>)
 8003b30:	6953      	ldr	r3, [r2, #20]
 8003b32:	ea23 0404 	bic.w	r4, r3, r4
 8003b36:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_FLASH_Program+0x5c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
}
 8003b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8003b40:	4632      	mov	r2, r6
 8003b42:	463b      	mov	r3, r7
 8003b44:	4628      	mov	r0, r5
 8003b46:	f7ff ff4f 	bl	80039e8 <FLASH_Program_DoubleWord>
 8003b4a:	e7ec      	b.n	8003b26 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8003b4c:	2002      	movs	r0, #2
 8003b4e:	e7f6      	b.n	8003b3e <HAL_FLASH_Program+0x4a>
 8003b50:	2000045c 	.word	0x2000045c
 8003b54:	58004000 	.word	0x58004000

08003b58 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8003b58:	4a03      	ldr	r2, [pc, #12]	; (8003b68 <FLASH_MassErase+0x10>)
 8003b5a:	6953      	ldr	r3, [r2, #20]
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	6153      	str	r3, [r2, #20]
#endif
}
 8003b66:	4770      	bx	lr
 8003b68:	58004000 	.word	0x58004000

08003b6c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <FLASH_FlushCaches+0x64>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d006      	beq.n	8003b86 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <FLASH_FlushCaches+0x64>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d012      	beq.n	8003baa <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8003b84:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <FLASH_FlushCaches+0x64>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e7e6      	b.n	8003b78 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <FLASH_FlushCaches+0x64>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bc2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bca:	601a      	str	r2, [r3, #0]
}
 8003bcc:	e7da      	b.n	8003b84 <FLASH_FlushCaches+0x18>
 8003bce:	bf00      	nop
 8003bd0:	58004000 	.word	0x58004000

08003bd4 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003bd4:	4a03      	ldr	r2, [pc, #12]	; (8003be4 <FLASH_AcknowledgePageErase+0x10>)
 8003bd6:	6953      	ldr	r3, [r2, #20]
 8003bd8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003bdc:	f023 0302 	bic.w	r3, r3, #2
 8003be0:	6153      	str	r3, [r2, #20]
#endif
}
 8003be2:	4770      	bx	lr
 8003be4:	58004000 	.word	0x58004000

08003be8 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003be8:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <FLASH_PageErase+0x18>)
 8003bea:	6953      	ldr	r3, [r2, #20]
 8003bec:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003bf0:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003bf4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003bf8:	f040 0002 	orr.w	r0, r0, #2
 8003bfc:	6150      	str	r0, [r2, #20]
}
 8003bfe:	4770      	bx	lr
 8003c00:	58004000 	.word	0x58004000

08003c04 <HAL_FLASHEx_Erase>:
{
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_FLASHEx_Erase+0x7c>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d035      	beq.n	8003c7a <HAL_FLASHEx_Erase+0x76>
 8003c0e:	4605      	mov	r5, r0
 8003c10:	460f      	mov	r7, r1
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_FLASHEx_Erase+0x7c>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c18:	2200      	movs	r2, #0
 8003c1a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c20:	f7ff ff32 	bl	8003a88 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003c24:	4606      	mov	r6, r0
 8003c26:	bb18      	cbnz	r0, 8003c70 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d013      	beq.n	8003c56 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003c34:	686c      	ldr	r4, [r5, #4]
 8003c36:	686b      	ldr	r3, [r5, #4]
 8003c38:	68aa      	ldr	r2, [r5, #8]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	42a3      	cmp	r3, r4
 8003c3e:	d913      	bls.n	8003c68 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8003c40:	4620      	mov	r0, r4
 8003c42:	f7ff ffd1 	bl	8003be8 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c4a:	f7ff ff1d 	bl	8003a88 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8003c4e:	4606      	mov	r6, r0
 8003c50:	b948      	cbnz	r0, 8003c66 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003c52:	3401      	adds	r4, #1
 8003c54:	e7ef      	b.n	8003c36 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8003c56:	f7ff ff7f 	bl	8003b58 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c5e:	f7ff ff13 	bl	8003a88 <FLASH_WaitForLastOperation>
 8003c62:	4606      	mov	r6, r0
 8003c64:	e002      	b.n	8003c6c <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8003c66:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8003c68:	f7ff ffb4 	bl	8003bd4 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8003c6c:	f7ff ff7e 	bl	8003b6c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_FLASHEx_Erase+0x7c>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
}
 8003c76:	4630      	mov	r0, r6
 8003c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003c7a:	2602      	movs	r6, #2
 8003c7c:	e7fb      	b.n	8003c76 <HAL_FLASHEx_Erase+0x72>
 8003c7e:	bf00      	nop
 8003c80:	2000045c 	.word	0x2000045c

08003c84 <HAL_FLASHEx_Erase_IT>:
{
 8003c84:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8003c86:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <HAL_FLASHEx_Erase_IT+0x60>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d028      	beq.n	8003ce0 <HAL_FLASHEx_Erase_IT+0x5c>
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_FLASHEx_Erase_IT+0x60>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c96:	2200      	movs	r2, #0
 8003c98:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8003c9a:	6802      	ldr	r2, [r0, #0]
 8003c9c:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ca2:	f7ff fef1 	bl	8003a88 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 8003ca6:	4605      	mov	r5, r0
 8003ca8:	b120      	cbz	r0, 8003cb4 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HAL_FLASHEx_Erase_IT+0x60>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
}
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003cb4:	4a0c      	ldr	r2, [pc, #48]	; (8003ce8 <HAL_FLASHEx_Erase_IT+0x64>)
 8003cb6:	6953      	ldr	r3, [r2, #20]
 8003cb8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003cbc:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d007      	beq.n	8003cd4 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8003cc4:	68a2      	ldr	r2, [r4, #8]
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_FLASHEx_Erase_IT+0x60>)
 8003cc8:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 8003cca:	6860      	ldr	r0, [r4, #4]
 8003ccc:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 8003cce:	f7ff ff8b 	bl	8003be8 <FLASH_PageErase>
 8003cd2:	e7ed      	b.n	8003cb0 <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <HAL_FLASHEx_Erase_IT+0x60>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 8003cda:	f7ff ff3d 	bl	8003b58 <FLASH_MassErase>
 8003cde:	e7e7      	b.n	8003cb0 <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 8003ce0:	2502      	movs	r5, #2
 8003ce2:	e7e5      	b.n	8003cb0 <HAL_FLASHEx_Erase_IT+0x2c>
 8003ce4:	2000045c 	.word	0x2000045c
 8003ce8:	58004000 	.word	0x58004000

08003cec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cec:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003cee:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf0:	e069      	b.n	8003dc6 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cf2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cf4:	005e      	lsls	r6, r3, #1
 8003cf6:	2403      	movs	r4, #3
 8003cf8:	40b4      	lsls	r4, r6
 8003cfa:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cfe:	68cc      	ldr	r4, [r1, #12]
 8003d00:	40b4      	lsls	r4, r6
 8003d02:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003d04:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d06:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d08:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d0c:	684c      	ldr	r4, [r1, #4]
 8003d0e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003d12:	409c      	lsls	r4, r3
 8003d14:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003d18:	6044      	str	r4, [r0, #4]
 8003d1a:	e065      	b.n	8003de8 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d1c:	08dd      	lsrs	r5, r3, #3
 8003d1e:	3508      	adds	r5, #8
 8003d20:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d24:	f003 0407 	and.w	r4, r3, #7
 8003d28:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003d2c:	240f      	movs	r4, #15
 8003d2e:	fa04 f40c 	lsl.w	r4, r4, ip
 8003d32:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d36:	690c      	ldr	r4, [r1, #16]
 8003d38:	fa04 f40c 	lsl.w	r4, r4, ip
 8003d3c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003d40:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003d44:	e067      	b.n	8003e16 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d46:	2402      	movs	r4, #2
 8003d48:	e000      	b.n	8003d4c <HAL_GPIO_Init+0x60>
 8003d4a:	2400      	movs	r4, #0
 8003d4c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003d50:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d52:	f10c 0c02 	add.w	ip, ip, #2
 8003d56:	4d4b      	ldr	r5, [pc, #300]	; (8003e84 <HAL_GPIO_Init+0x198>)
 8003d58:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d5c:	4c4a      	ldr	r4, [pc, #296]	; (8003e88 <HAL_GPIO_Init+0x19c>)
 8003d5e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003d60:	43d4      	mvns	r4, r2
 8003d62:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d66:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003d6a:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8003d6e:	d001      	beq.n	8003d74 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003d70:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003d74:	4d44      	ldr	r5, [pc, #272]	; (8003e88 <HAL_GPIO_Init+0x19c>)
 8003d76:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003d78:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003d7a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d7e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003d82:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8003d86:	d001      	beq.n	8003d8c <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003d88:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003d8c:	4d3e      	ldr	r5, [pc, #248]	; (8003e88 <HAL_GPIO_Init+0x19c>)
 8003d8e:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003d90:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003d94:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d98:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003d9c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8003da0:	d001      	beq.n	8003da6 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8003da2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003da6:	4d38      	ldr	r5, [pc, #224]	; (8003e88 <HAL_GPIO_Init+0x19c>)
 8003da8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003dac:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003db0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003db2:	684e      	ldr	r6, [r1, #4]
 8003db4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003db8:	d001      	beq.n	8003dbe <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8003dba:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003dbe:	4a32      	ldr	r2, [pc, #200]	; (8003e88 <HAL_GPIO_Init+0x19c>)
 8003dc0:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003dc4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc6:	680a      	ldr	r2, [r1, #0]
 8003dc8:	fa32 f403 	lsrs.w	r4, r2, r3
 8003dcc:	d058      	beq.n	8003e80 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dce:	f04f 0c01 	mov.w	ip, #1
 8003dd2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003dd6:	ea1c 0202 	ands.w	r2, ip, r2
 8003dda:	d0f3      	beq.n	8003dc4 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ddc:	684c      	ldr	r4, [r1, #4]
 8003dde:	f004 0403 	and.w	r4, r4, #3
 8003de2:	3c01      	subs	r4, #1
 8003de4:	2c01      	cmp	r4, #1
 8003de6:	d984      	bls.n	8003cf2 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de8:	684c      	ldr	r4, [r1, #4]
 8003dea:	f004 0403 	and.w	r4, r4, #3
 8003dee:	2c03      	cmp	r4, #3
 8003df0:	d00c      	beq.n	8003e0c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003df2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003df4:	005d      	lsls	r5, r3, #1
 8003df6:	f04f 0c03 	mov.w	ip, #3
 8003dfa:	fa0c fc05 	lsl.w	ip, ip, r5
 8003dfe:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e02:	688c      	ldr	r4, [r1, #8]
 8003e04:	40ac      	lsls	r4, r5
 8003e06:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003e0a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e0c:	684c      	ldr	r4, [r1, #4]
 8003e0e:	f004 0403 	and.w	r4, r4, #3
 8003e12:	2c02      	cmp	r4, #2
 8003e14:	d082      	beq.n	8003d1c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8003e16:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e18:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003e1c:	f04f 0c03 	mov.w	ip, #3
 8003e20:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003e24:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e28:	684c      	ldr	r4, [r1, #4]
 8003e2a:	f004 0403 	and.w	r4, r4, #3
 8003e2e:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e32:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003e36:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e38:	684c      	ldr	r4, [r1, #4]
 8003e3a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003e3e:	d0c1      	beq.n	8003dc4 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e40:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003e44:	f10c 0502 	add.w	r5, ip, #2
 8003e48:	4c0e      	ldr	r4, [pc, #56]	; (8003e84 <HAL_GPIO_Init+0x198>)
 8003e4a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003e4e:	f003 0403 	and.w	r4, r3, #3
 8003e52:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003e56:	2407      	movs	r4, #7
 8003e58:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e5c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e60:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003e64:	f43f af71 	beq.w	8003d4a <HAL_GPIO_Init+0x5e>
 8003e68:	4c08      	ldr	r4, [pc, #32]	; (8003e8c <HAL_GPIO_Init+0x1a0>)
 8003e6a:	42a0      	cmp	r0, r4
 8003e6c:	d006      	beq.n	8003e7c <HAL_GPIO_Init+0x190>
 8003e6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003e72:	42a0      	cmp	r0, r4
 8003e74:	f43f af67 	beq.w	8003d46 <HAL_GPIO_Init+0x5a>
 8003e78:	2407      	movs	r4, #7
 8003e7a:	e767      	b.n	8003d4c <HAL_GPIO_Init+0x60>
 8003e7c:	2401      	movs	r4, #1
 8003e7e:	e765      	b.n	8003d4c <HAL_GPIO_Init+0x60>
  }
}
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	58000800 	.word	0x58000800
 8003e8c:	48000400 	.word	0x48000400

08003e90 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003e90:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e92:	fa31 f203 	lsrs.w	r2, r1, r3
 8003e96:	d071      	beq.n	8003f7c <HAL_GPIO_DeInit+0xec>
{
 8003e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9a:	e02e      	b.n	8003efa <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003e9c:	2502      	movs	r5, #2
 8003e9e:	e000      	b.n	8003ea2 <HAL_GPIO_DeInit+0x12>
 8003ea0:	2500      	movs	r5, #0
 8003ea2:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003ea6:	45a4      	cmp	ip, r4
 8003ea8:	d049      	beq.n	8003f3e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003eaa:	6804      	ldr	r4, [r0, #0]
 8003eac:	005d      	lsls	r5, r3, #1
 8003eae:	f04f 0c03 	mov.w	ip, #3
 8003eb2:	fa0c fc05 	lsl.w	ip, ip, r5
 8003eb6:	ea44 040c 	orr.w	r4, r4, ip
 8003eba:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003ebc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003ec0:	f10e 0e08 	add.w	lr, lr, #8
 8003ec4:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003ec8:	f003 0507 	and.w	r5, r3, #7
 8003ecc:	00ae      	lsls	r6, r5, #2
 8003ece:	250f      	movs	r5, #15
 8003ed0:	40b5      	lsls	r5, r6
 8003ed2:	ea24 0405 	bic.w	r4, r4, r5
 8003ed6:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eda:	6884      	ldr	r4, [r0, #8]
 8003edc:	ea24 040c 	bic.w	r4, r4, ip
 8003ee0:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ee2:	6844      	ldr	r4, [r0, #4]
 8003ee4:	ea24 0202 	bic.w	r2, r4, r2
 8003ee8:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eea:	68c2      	ldr	r2, [r0, #12]
 8003eec:	ea22 020c 	bic.w	r2, r2, ip
 8003ef0:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003ef2:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003ef4:	fa31 f203 	lsrs.w	r2, r1, r3
 8003ef8:	d03f      	beq.n	8003f7a <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003efa:	2201      	movs	r2, #1
 8003efc:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003efe:	ea12 0701 	ands.w	r7, r2, r1
 8003f02:	d0f6      	beq.n	8003ef2 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003f04:	089e      	lsrs	r6, r3, #2
 8003f06:	1cb5      	adds	r5, r6, #2
 8003f08:	4c1d      	ldr	r4, [pc, #116]	; (8003f80 <HAL_GPIO_DeInit+0xf0>)
 8003f0a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003f0e:	f003 0c03 	and.w	ip, r3, #3
 8003f12:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003f16:	f04f 0e07 	mov.w	lr, #7
 8003f1a:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003f1e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003f22:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003f26:	d0bb      	beq.n	8003ea0 <HAL_GPIO_DeInit+0x10>
 8003f28:	4d16      	ldr	r5, [pc, #88]	; (8003f84 <HAL_GPIO_DeInit+0xf4>)
 8003f2a:	42a8      	cmp	r0, r5
 8003f2c:	d005      	beq.n	8003f3a <HAL_GPIO_DeInit+0xaa>
 8003f2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f32:	42a8      	cmp	r0, r5
 8003f34:	d0b2      	beq.n	8003e9c <HAL_GPIO_DeInit+0xc>
 8003f36:	2507      	movs	r5, #7
 8003f38:	e7b3      	b.n	8003ea2 <HAL_GPIO_DeInit+0x12>
 8003f3a:	2501      	movs	r5, #1
 8003f3c:	e7b1      	b.n	8003ea2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8003f3e:	4c12      	ldr	r4, [pc, #72]	; (8003f88 <HAL_GPIO_DeInit+0xf8>)
 8003f40:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8003f44:	ea25 0507 	bic.w	r5, r5, r7
 8003f48:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003f4c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8003f50:	ea25 0507 	bic.w	r5, r5, r7
 8003f54:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8003f58:	6825      	ldr	r5, [r4, #0]
 8003f5a:	ea25 0507 	bic.w	r5, r5, r7
 8003f5e:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003f60:	6865      	ldr	r5, [r4, #4]
 8003f62:	ea25 0707 	bic.w	r7, r5, r7
 8003f66:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003f68:	4d05      	ldr	r5, [pc, #20]	; (8003f80 <HAL_GPIO_DeInit+0xf0>)
 8003f6a:	3602      	adds	r6, #2
 8003f6c:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8003f70:	ea24 040e 	bic.w	r4, r4, lr
 8003f74:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8003f78:	e797      	b.n	8003eaa <HAL_GPIO_DeInit+0x1a>
  }
}
 8003f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40010000 	.word	0x40010000
 8003f84:	48000400 	.word	0x48000400
 8003f88:	58000800 	.word	0x58000800

08003f8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f8c:	b10a      	cbz	r2, 8003f92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f8e:	6181      	str	r1, [r0, #24]
 8003f90:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f92:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003f94:	4770      	bx	lr

08003f96 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f96:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f98:	ea01 0203 	and.w	r2, r1, r3
 8003f9c:	ea21 0103 	bic.w	r1, r1, r3
 8003fa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003fa4:	6181      	str	r1, [r0, #24]
}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fa8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	4203      	tst	r3, r0
 8003fb0:	d100      	bne.n	8003fb4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003fb2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fb4:	4b02      	ldr	r3, [pc, #8]	; (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003fb6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fb8:	f7fe fbf2 	bl	80027a0 <HAL_GPIO_EXTI_Callback>
}
 8003fbc:	e7f9      	b.n	8003fb2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003fbe:	bf00      	nop
 8003fc0:	58000800 	.word	0x58000800

08003fc4 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc4:	4a02      	ldr	r2, [pc, #8]	; (8003fd0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	6013      	str	r3, [r2, #0]
}
 8003fce:	4770      	bx	lr
 8003fd0:	58000400 	.word	0x58000400

08003fd4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003fd8:	b9a0      	cbnz	r0, 8004004 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003fe2:	d10a      	bne.n	8003ffa <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <HAL_PWR_EnterSLEEPMode+0x48>)
 8003fe6:	6913      	ldr	r3, [r2, #16]
 8003fe8:	f023 0304 	bic.w	r3, r3, #4
 8003fec:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003fee:	2c01      	cmp	r4, #1
 8003ff0:	d010      	beq.n	8004014 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003ff2:	bf40      	sev
    __WFE();
 8003ff4:	bf20      	wfe
    __WFE();
 8003ff6:	bf20      	wfe
  }
}
 8003ff8:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003ffa:	f000 f821 	bl	8004040 <HAL_PWREx_DisableLowPowerRunMode>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_PWR_EnterSLEEPMode+0x10>
 8004002:	e7f9      	b.n	8003ff8 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f413 7f00 	tst.w	r3, #512	; 0x200
 800400c:	d1ea      	bne.n	8003fe4 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800400e:	f000 f80f 	bl	8004030 <HAL_PWREx_EnableLowPowerRunMode>
 8004012:	e7e7      	b.n	8003fe4 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004014:	bf30      	wfi
 8004016:	e7ef      	b.n	8003ff8 <HAL_PWR_EnterSLEEPMode+0x24>
 8004018:	58000400 	.word	0x58000400
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8004020:	4b02      	ldr	r3, [pc, #8]	; (800402c <HAL_PWREx_GetVoltageRange+0xc>)
 8004022:	6818      	ldr	r0, [r3, #0]
}
 8004024:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	58000400 	.word	0x58000400

08004030 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004030:	4a02      	ldr	r2, [pc, #8]	; (800403c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	4770      	bx	lr
 800403c:	58000400 	.word	0x58000400

08004040 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004040:	4a0f      	ldr	r2, [pc, #60]	; (8004080 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004048:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2232      	movs	r2, #50	; 0x32
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800405c:	e000      	b.n	8004060 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 800405e:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004060:	4a07      	ldr	r2, [pc, #28]	; (8004080 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004062:	6952      	ldr	r2, [r2, #20]
 8004064:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004068:	d001      	beq.n	800406e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f7      	bne.n	800405e <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800406e:	4b04      	ldr	r3, [pc, #16]	; (8004080 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004076:	d101      	bne.n	800407c <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8004078:	2000      	movs	r0, #0
 800407a:	4770      	bx	lr
    return HAL_TIMEOUT;
 800407c:	2003      	movs	r0, #3
}
 800407e:	4770      	bx	lr
 8004080:	58000400 	.word	0x58000400
 8004084:	20000070 	.word	0x20000070
 8004088:	431bde83 	.word	0x431bde83

0800408c <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800408c:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800408e:	6813      	ldr	r3, [r2, #0]
 8004090:	f023 0307 	bic.w	r3, r3, #7
 8004094:	f043 0302 	orr.w	r3, r3, #2
 8004098:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800409a:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 800409c:	6913      	ldr	r3, [r2, #16]
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80040a4:	2801      	cmp	r0, #1
 80040a6:	d008      	beq.n	80040ba <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80040a8:	bf40      	sev
    __WFE();
 80040aa:	bf20      	wfe
    __WFE();
 80040ac:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040ae:	4a05      	ldr	r2, [pc, #20]	; (80040c4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80040b0:	6913      	ldr	r3, [r2, #16]
 80040b2:	f023 0304 	bic.w	r3, r3, #4
 80040b6:	6113      	str	r3, [r2, #16]
}
 80040b8:	4770      	bx	lr
    __WFI();
 80040ba:	bf30      	wfi
 80040bc:	e7f7      	b.n	80040ae <HAL_PWREx_EnterSTOP2Mode+0x22>
 80040be:	bf00      	nop
 80040c0:	58000400 	.word	0x58000400
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80040c8:	b530      	push	{r4, r5, lr}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	4604      	mov	r4, r0
 80040ce:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80040d0:	4b2a      	ldr	r3, [pc, #168]	; (800417c <RCC_SetFlashLatency+0xb4>)
 80040d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80040d6:	9006      	str	r0, [sp, #24]
 80040d8:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80040dc:	f103 0208 	add.w	r2, r3, #8
 80040e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040e4:	9004      	str	r0, [sp, #16]
 80040e6:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80040ea:	ad01      	add	r5, sp, #4
 80040ec:	3310      	adds	r3, #16
 80040ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f6:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80040fa:	d007      	beq.n	800410c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	e014      	b.n	800412a <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8004100:	aa08      	add	r2, sp, #32
 8004102:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004106:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800410a:	e01e      	b.n	800414a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800410c:	2300      	movs	r3, #0
 800410e:	2b02      	cmp	r3, #2
 8004110:	d808      	bhi.n	8004124 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004112:	aa08      	add	r2, sp, #32
 8004114:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004118:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 800411c:	42a2      	cmp	r2, r4
 800411e:	d2ef      	bcs.n	8004100 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004120:	3301      	adds	r3, #1
 8004122:	e7f4      	b.n	800410e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004124:	2500      	movs	r5, #0
 8004126:	e010      	b.n	800414a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004128:	3301      	adds	r3, #1
 800412a:	2b02      	cmp	r3, #2
 800412c:	d80c      	bhi.n	8004148 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800412e:	aa08      	add	r2, sp, #32
 8004130:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004134:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004138:	42a2      	cmp	r2, r4
 800413a:	d3f5      	bcc.n	8004128 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800413c:	aa08      	add	r2, sp, #32
 800413e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004142:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004146:	e000      	b.n	800414a <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004148:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800414a:	4a0d      	ldr	r2, [pc, #52]	; (8004180 <RCC_SetFlashLatency+0xb8>)
 800414c:	6813      	ldr	r3, [r2, #0]
 800414e:	f023 0307 	bic.w	r3, r3, #7
 8004152:	432b      	orrs	r3, r5
 8004154:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004156:	f7fd fb9f 	bl	8001898 <HAL_GetTick>
 800415a:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800415c:	4b08      	ldr	r3, [pc, #32]	; (8004180 <RCC_SetFlashLatency+0xb8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	42ab      	cmp	r3, r5
 8004166:	d006      	beq.n	8004176 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004168:	f7fd fb96 	bl	8001898 <HAL_GetTick>
 800416c:	1b00      	subs	r0, r0, r4
 800416e:	2802      	cmp	r0, #2
 8004170:	d9f4      	bls.n	800415c <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8004172:	2003      	movs	r0, #3
 8004174:	e000      	b.n	8004178 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8004176:	2000      	movs	r0, #0
}
 8004178:	b009      	add	sp, #36	; 0x24
 800417a:	bd30      	pop	{r4, r5, pc}
 800417c:	08011d38 	.word	0x08011d38
 8004180:	58004000 	.word	0x58004000

08004184 <RCC_SetFlashLatencyFromMSIRange>:
{
 8004184:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004186:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0x38>)
 800418c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004194:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 800419e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041a2:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80041a6:	f7ff ff3b 	bl	8004020 <HAL_PWREx_GetVoltageRange>
 80041aa:	4601      	mov	r1, r0
 80041ac:	4805      	ldr	r0, [pc, #20]	; (80041c4 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80041ae:	fba0 3004 	umull	r3, r0, r0, r4
 80041b2:	0c80      	lsrs	r0, r0, #18
 80041b4:	f7ff ff88 	bl	80040c8 <RCC_SetFlashLatency>
}
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	bf00      	nop
 80041bc:	080122bc 	.word	0x080122bc
 80041c0:	0801225c 	.word	0x0801225c
 80041c4:	431bde83 	.word	0x431bde83

080041c8 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041cc:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80041d4:	f011 010c 	ands.w	r1, r1, #12
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x28>
 80041da:	290c      	cmp	r1, #12
 80041dc:	d006      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041de:	2904      	cmp	r1, #4
 80041e0:	d047      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041e2:	2908      	cmp	r1, #8
 80041e4:	d03b      	beq.n	800425e <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80041e6:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80041e8:	4610      	mov	r0, r2
 80041ea:	e026      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d1f6      	bne.n	80041de <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80041f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f013 0308 	ands.w	r3, r3, #8
 80041fa:	d00d      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x50>
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f013 0308 	ands.w	r3, r3, #8
 8004206:	d124      	bne.n	8004252 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004210:	4a2e      	ldr	r2, [pc, #184]	; (80042cc <HAL_RCC_GetSysClockFreq+0x104>)
 8004212:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004216:	e00e      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	f012 0f08 	tst.w	r2, #8
 8004222:	d112      	bne.n	800424a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004230:	4a26      	ldr	r2, [pc, #152]	; (80042cc <HAL_RCC_GetSysClockFreq+0x104>)
 8004232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004236:	b1d1      	cbz	r1, 800426e <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004238:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004244:	2b0c      	cmp	r3, #12
 8004246:	d01a      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004248:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800424a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	e7ee      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x68>
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004258:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800425c:	e7d8      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8004268:	d106      	bne.n	8004278 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800426a:	4819      	ldr	r0, [pc, #100]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800426c:	e7e5      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800426e:	4610      	mov	r0, r2
 8004270:	e7e3      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004272:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004274:	4817      	ldr	r0, [pc, #92]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004276:	e7e0      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004278:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800427a:	4816      	ldr	r0, [pc, #88]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800427c:	e7dd      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800427e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004288:	2b02      	cmp	r3, #2
 800428a:	d009      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0xd8>
 800428c:	2b03      	cmp	r3, #3
 800428e:	d108      	bne.n	80042a2 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800429a:	d115      	bne.n	80042c8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800429c:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800429e:	e000      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80042a0:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	68d8      	ldr	r0, [r3, #12]
 80042a8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80042ac:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042b0:	68d8      	ldr	r0, [r3, #12]
 80042b2:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80042b6:	3001      	adds	r0, #1
 80042b8:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80042bc:	68d8      	ldr	r0, [r3, #12]
 80042be:	0f40      	lsrs	r0, r0, #29
 80042c0:	3001      	adds	r0, #1
 80042c2:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80042c6:	e7bf      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80042c8:	4a02      	ldr	r2, [pc, #8]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ca:	e7ea      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0xda>
 80042cc:	080122bc 	.word	0x080122bc
 80042d0:	01e84800 	.word	0x01e84800
 80042d4:	00f42400 	.word	0x00f42400

080042d8 <HAL_RCC_GetHCLKFreq>:
{
 80042d8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80042da:	f7ff ff75 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042e8:	4a02      	ldr	r2, [pc, #8]	; (80042f4 <HAL_RCC_GetHCLKFreq+0x1c>)
 80042ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80042ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80042f2:	bd08      	pop	{r3, pc}
 80042f4:	0801225c 	.word	0x0801225c

080042f8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80042f8:	2800      	cmp	r0, #0
 80042fa:	f000 8319 	beq.w	8004930 <HAL_RCC_OscConfig+0x638>
{
 80042fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004300:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004306:	689d      	ldr	r5, [r3, #8]
 8004308:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800430c:	68de      	ldr	r6, [r3, #12]
 800430e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004312:	6803      	ldr	r3, [r0, #0]
 8004314:	f013 0f20 	tst.w	r3, #32
 8004318:	f000 808f 	beq.w	800443a <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800431c:	b1ed      	cbz	r5, 800435a <HAL_RCC_OscConfig+0x62>
 800431e:	2d0c      	cmp	r5, #12
 8004320:	d019      	beq.n	8004356 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004322:	6a23      	ldr	r3, [r4, #32]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80bc 	beq.w	80044a2 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800432a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004336:	f7fd faaf 	bl	8001898 <HAL_GetTick>
 800433a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f013 0f02 	tst.w	r3, #2
 8004346:	d165      	bne.n	8004414 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004348:	f7fd faa6 	bl	8001898 <HAL_GetTick>
 800434c:	1bc0      	subs	r0, r0, r7
 800434e:	2802      	cmp	r0, #2
 8004350:	d9f4      	bls.n	800433c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004352:	2003      	movs	r0, #3
 8004354:	e2f9      	b.n	800494a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004356:	2e01      	cmp	r6, #1
 8004358:	d1e3      	bne.n	8004322 <HAL_RCC_OscConfig+0x2a>
 800435a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f013 0f02 	tst.w	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004366:	6a23      	ldr	r3, [r4, #32]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 82e3 	beq.w	8004934 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800436e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f013 0f08 	tst.w	r3, #8
 800437a:	d029      	beq.n	80043d0 <HAL_RCC_OscConfig+0xd8>
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004386:	4298      	cmp	r0, r3
 8004388:	d92a      	bls.n	80043e0 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800438a:	f7ff fefb 	bl	8004184 <RCC_SetFlashLatencyFromMSIRange>
 800438e:	2800      	cmp	r0, #0
 8004390:	f040 82d2 	bne.w	8004938 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	f042 0208 	orr.w	r2, r2, #8
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80043a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80043b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80043b8:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80043ba:	f7ff ff8d 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80043be:	4bb0      	ldr	r3, [pc, #704]	; (8004680 <HAL_RCC_OscConfig+0x388>)
 80043c0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80043c2:	4bb0      	ldr	r3, [pc, #704]	; (8004684 <HAL_RCC_OscConfig+0x38c>)
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	f7fd fa65 	bl	8001894 <HAL_InitTick>
        if (status != HAL_OK)
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d035      	beq.n	800443a <HAL_RCC_OscConfig+0x142>
 80043ce:	e2bc      	b.n	800494a <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043de:	e7d2      	b.n	8004386 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	f042 0208 	orr.w	r2, r2, #8
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80043f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004400:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004404:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004406:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004408:	f7ff febc 	bl	8004184 <RCC_SetFlashLatencyFromMSIRange>
 800440c:	2800      	cmp	r0, #0
 800440e:	d0d4      	beq.n	80043ba <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8004410:	2001      	movs	r0, #1
 8004412:	e29a      	b.n	800494a <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	f042 0208 	orr.w	r2, r2, #8
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004426:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004434:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004438:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	f013 0f01 	tst.w	r3, #1
 8004440:	d051      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004442:	2d08      	cmp	r5, #8
 8004444:	d045      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1da>
 8004446:	2d0c      	cmp	r5, #12
 8004448:	d041      	beq.n	80044ce <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800444a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800444e:	6813      	ldr	r3, [r2, #0]
 8004450:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004454:	68a1      	ldr	r1, [r4, #8]
 8004456:	430b      	orrs	r3, r1
 8004458:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445a:	6863      	ldr	r3, [r4, #4]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d063      	beq.n	800452a <HAL_RCC_OscConfig+0x232>
 8004462:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004466:	d065      	beq.n	8004534 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004472:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800447a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800447c:	6863      	ldr	r3, [r4, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d063      	beq.n	800454a <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8004482:	f7fd fa09 	bl	8001898 <HAL_GetTick>
 8004486:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004492:	d128      	bne.n	80044e6 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004494:	f7fd fa00 	bl	8001898 <HAL_GetTick>
 8004498:	1bc0      	subs	r0, r0, r7
 800449a:	2864      	cmp	r0, #100	; 0x64
 800449c:	d9f4      	bls.n	8004488 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 800449e:	2003      	movs	r0, #3
 80044a0:	e253      	b.n	800494a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80044a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80044ae:	f7fd f9f3 	bl	8001898 <HAL_GetTick>
 80044b2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80044b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f013 0f02 	tst.w	r3, #2
 80044be:	d0bc      	beq.n	800443a <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c0:	f7fd f9ea 	bl	8001898 <HAL_GetTick>
 80044c4:	1bc0      	subs	r0, r0, r7
 80044c6:	2802      	cmp	r0, #2
 80044c8:	d9f4      	bls.n	80044b4 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80044ca:	2003      	movs	r0, #3
 80044cc:	e23d      	b.n	800494a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044ce:	2e03      	cmp	r6, #3
 80044d0:	d1bb      	bne.n	800444a <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80044dc:	d003      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 822b 	beq.w	800493c <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	f013 0f02 	tst.w	r3, #2
 80044ec:	d052      	beq.n	8004594 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80044ee:	2d04      	cmp	r5, #4
 80044f0:	d03d      	beq.n	800456e <HAL_RCC_OscConfig+0x276>
 80044f2:	2d0c      	cmp	r5, #12
 80044f4:	d039      	beq.n	800456a <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8091 	beq.w	8004620 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80044fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004502:	6813      	ldr	r3, [r2, #0]
 8004504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004508:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800450a:	f7fd f9c5 	bl	8001898 <HAL_GetTick>
 800450e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800451a:	d177      	bne.n	800460c <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451c:	f7fd f9bc 	bl	8001898 <HAL_GetTick>
 8004520:	1b80      	subs	r0, r0, r6
 8004522:	2802      	cmp	r0, #2
 8004524:	d9f4      	bls.n	8004510 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8004526:	2003      	movs	r0, #3
 8004528:	e20f      	b.n	800494a <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800452a:	6813      	ldr	r3, [r2, #0]
 800452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004530:	6013      	str	r3, [r2, #0]
}
 8004532:	e7a3      	b.n	800447c <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800453e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004546:	601a      	str	r2, [r3, #0]
}
 8004548:	e798      	b.n	800447c <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 800454a:	f7fd f9a5 	bl	8001898 <HAL_GetTick>
 800454e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800455a:	d0c4      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455c:	f7fd f99c 	bl	8001898 <HAL_GetTick>
 8004560:	1bc0      	subs	r0, r0, r7
 8004562:	2864      	cmp	r0, #100	; 0x64
 8004564:	d9f4      	bls.n	8004550 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8004566:	2003      	movs	r0, #3
 8004568:	e1ef      	b.n	800494a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800456a:	2e02      	cmp	r6, #2
 800456c:	d1c3      	bne.n	80044f6 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800456e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004578:	d003      	beq.n	8004582 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 81df 	beq.w	8004940 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004582:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004588:	6853      	ldr	r3, [r2, #4]
 800458a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800458e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004592:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	f013 0f08 	tst.w	r3, #8
 800459a:	f000 808e 	beq.w	80046ba <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800459e:	69a3      	ldr	r3, [r4, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d071      	beq.n	8004688 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 80045a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80045ac:	69e1      	ldr	r1, [r4, #28]
 80045ae:	f003 0210 	and.w	r2, r3, #16
 80045b2:	4291      	cmp	r1, r2
 80045b4:	d011      	beq.n	80045da <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80045b6:	f003 0203 	and.w	r2, r3, #3
 80045ba:	2a02      	cmp	r2, #2
 80045bc:	f000 81c2 	beq.w	8004944 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80045c0:	f013 0f01 	tst.w	r3, #1
 80045c4:	d142      	bne.n	800464c <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80045c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ca:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80045ce:	f023 0310 	bic.w	r3, r3, #16
 80045d2:	69e1      	ldr	r1, [r4, #28]
 80045d4:	430b      	orrs	r3, r1
 80045d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80045da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045de:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80045ea:	f7fd f955 	bl	8001898 <HAL_GetTick>
 80045ee:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f8:	f013 0f02 	tst.w	r3, #2
 80045fc:	d15d      	bne.n	80046ba <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fe:	f7fd f94b 	bl	8001898 <HAL_GetTick>
 8004602:	1b80      	subs	r0, r0, r6
 8004604:	2811      	cmp	r0, #17
 8004606:	d9f3      	bls.n	80045f0 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8004608:	2003      	movs	r0, #3
 800460a:	e19e      	b.n	800494a <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800460e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004612:	6853      	ldr	r3, [r2, #4]
 8004614:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004618:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800461c:	6053      	str	r3, [r2, #4]
}
 800461e:	e7b9      	b.n	8004594 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004624:	6813      	ldr	r3, [r2, #0]
 8004626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800462a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800462c:	f7fd f934 	bl	8001898 <HAL_GetTick>
 8004630:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800463c:	d0aa      	beq.n	8004594 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463e:	f7fd f92b 	bl	8001898 <HAL_GetTick>
 8004642:	1b80      	subs	r0, r0, r6
 8004644:	2802      	cmp	r0, #2
 8004646:	d9f4      	bls.n	8004632 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8004648:	2003      	movs	r0, #3
 800464a:	e17e      	b.n	800494a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800464c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004650:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 800465c:	f7fd f91c 	bl	8001898 <HAL_GetTick>
 8004660:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466a:	f013 0f02 	tst.w	r3, #2
 800466e:	d0aa      	beq.n	80045c6 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004670:	f7fd f912 	bl	8001898 <HAL_GetTick>
 8004674:	1b80      	subs	r0, r0, r6
 8004676:	2811      	cmp	r0, #17
 8004678:	d9f3      	bls.n	8004662 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 800467a:	2003      	movs	r0, #3
 800467c:	e165      	b.n	800494a <HAL_RCC_OscConfig+0x652>
 800467e:	bf00      	nop
 8004680:	20000070 	.word	0x20000070
 8004684:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004698:	f7fd f8fe 	bl	8001898 <HAL_GetTick>
 800469c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800469e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a6:	f013 0f02 	tst.w	r3, #2
 80046aa:	d006      	beq.n	80046ba <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ac:	f7fd f8f4 	bl	8001898 <HAL_GetTick>
 80046b0:	1b80      	subs	r0, r0, r6
 80046b2:	2811      	cmp	r0, #17
 80046b4:	d9f3      	bls.n	800469e <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 80046b6:	2003      	movs	r0, #3
 80046b8:	e147      	b.n	800494a <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	f013 0f04 	tst.w	r3, #4
 80046c0:	f000 80b1 	beq.w	8004826 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80046c4:	4ba8      	ldr	r3, [pc, #672]	; (8004968 <HAL_RCC_OscConfig+0x670>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046cc:	d110      	bne.n	80046f0 <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 80046ce:	f7ff fc79 	bl	8003fc4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80046d2:	f7fd f8e1 	bl	8001898 <HAL_GetTick>
 80046d6:	4606      	mov	r6, r0
 80046d8:	4ba3      	ldr	r3, [pc, #652]	; (8004968 <HAL_RCC_OscConfig+0x670>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046e0:	d106      	bne.n	80046f0 <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e2:	f7fd f8d9 	bl	8001898 <HAL_GetTick>
 80046e6:	1b80      	subs	r0, r0, r6
 80046e8:	2802      	cmp	r0, #2
 80046ea:	d9f5      	bls.n	80046d8 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 80046ec:	2003      	movs	r0, #3
 80046ee:	e12c      	b.n	800494a <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046f0:	68e3      	ldr	r3, [r4, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d061      	beq.n	80047ba <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80046f6:	2b85      	cmp	r3, #133	; 0x85
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	d107      	bne.n	800470e <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004702:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800470e:	f7fd f8c3 	bl	8001898 <HAL_GetTick>
 8004712:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004718:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f013 0f02 	tst.w	r3, #2
 8004730:	d108      	bne.n	8004744 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004732:	f7fd f8b1 	bl	8001898 <HAL_GetTick>
 8004736:	1b80      	subs	r0, r0, r6
 8004738:	f241 3388 	movw	r3, #5000	; 0x1388
 800473c:	4298      	cmp	r0, r3
 800473e:	d9f1      	bls.n	8004724 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 8004740:	2003      	movs	r0, #3
 8004742:	e102      	b.n	800494a <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004744:	68e3      	ldr	r3, [r4, #12]
 8004746:	2b81      	cmp	r3, #129	; 0x81
 8004748:	d001      	beq.n	800474e <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800474a:	2b85      	cmp	r3, #133	; 0x85
 800474c:	d11a      	bne.n	8004784 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 800474e:	f7fd f8a3 	bl	8001898 <HAL_GetTick>
 8004752:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004758:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800475c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004770:	d159      	bne.n	8004826 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fd f891 	bl	8001898 <HAL_GetTick>
 8004776:	1b80      	subs	r0, r0, r6
 8004778:	f241 3388 	movw	r3, #5000	; 0x1388
 800477c:	4298      	cmp	r0, r3
 800477e:	d9f1      	bls.n	8004764 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8004780:	2003      	movs	r0, #3
 8004782:	e0e2      	b.n	800494a <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8004784:	f7fd f888 	bl	8001898 <HAL_GetTick>
 8004788:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800478a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800478e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80047a6:	d03e      	beq.n	8004826 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f7fd f876 	bl	8001898 <HAL_GetTick>
 80047ac:	1b80      	subs	r0, r0, r6
 80047ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80047b2:	4298      	cmp	r0, r3
 80047b4:	d9f1      	bls.n	800479a <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 80047b6:	2003      	movs	r0, #3
 80047b8:	e0c7      	b.n	800494a <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 80047ba:	f7fd f86d 	bl	8001898 <HAL_GetTick>
 80047be:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80047dc:	d008      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f7fd f85b 	bl	8001898 <HAL_GetTick>
 80047e2:	1b80      	subs	r0, r0, r6
 80047e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80047e8:	4298      	cmp	r0, r3
 80047ea:	d9f1      	bls.n	80047d0 <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 80047ec:	2003      	movs	r0, #3
 80047ee:	e0ac      	b.n	800494a <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 80047f0:	f7fd f852 	bl	8001898 <HAL_GetTick>
 80047f4:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f013 0f02 	tst.w	r3, #2
 8004812:	d008      	beq.n	8004826 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7fd f840 	bl	8001898 <HAL_GetTick>
 8004818:	1b80      	subs	r0, r0, r6
 800481a:	f241 3388 	movw	r3, #5000	; 0x1388
 800481e:	4298      	cmp	r0, r3
 8004820:	d9f1      	bls.n	8004806 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 8004822:	2003      	movs	r0, #3
 8004824:	e091      	b.n	800494a <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004826:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 808d 	beq.w	8004948 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800482e:	2d0c      	cmp	r5, #12
 8004830:	d062      	beq.n	80048f8 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004832:	2b02      	cmp	r3, #2
 8004834:	d01f      	beq.n	8004876 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004840:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	f022 0203 	bic.w	r2, r2, #3
 8004848:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8004850:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004854:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004856:	f7fd f81f 	bl	8001898 <HAL_GetTick>
 800485a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800485c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004866:	d073      	beq.n	8004950 <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004868:	f7fd f816 	bl	8001898 <HAL_GetTick>
 800486c:	1b00      	subs	r0, r0, r4
 800486e:	280a      	cmp	r0, #10
 8004870:	d9f4      	bls.n	800485c <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 8004872:	2003      	movs	r0, #3
 8004874:	e069      	b.n	800494a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004880:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004882:	f7fd f809 	bl	8001898 <HAL_GetTick>
 8004886:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004892:	d12a      	bne.n	80048ea <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004898:	68d3      	ldr	r3, [r2, #12]
 800489a:	4934      	ldr	r1, [pc, #208]	; (800496c <HAL_RCC_OscConfig+0x674>)
 800489c:	4019      	ands	r1, r3
 800489e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80048a2:	4303      	orrs	r3, r0
 80048a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80048a6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80048aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80048ac:	4303      	orrs	r3, r0
 80048ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80048b0:	4303      	orrs	r3, r0
 80048b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80048b4:	4303      	orrs	r3, r0
 80048b6:	430b      	orrs	r3, r1
 80048b8:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c0:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048c2:	68d3      	ldr	r3, [r2, #12]
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80048ca:	f7fc ffe5 	bl	8001898 <HAL_GetTick>
 80048ce:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80048da:	d137      	bne.n	800494c <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fc ffdc 	bl	8001898 <HAL_GetTick>
 80048e0:	1b00      	subs	r0, r0, r4
 80048e2:	280a      	cmp	r0, #10
 80048e4:	d9f4      	bls.n	80048d0 <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 80048e6:	2003      	movs	r0, #3
 80048e8:	e02f      	b.n	800494a <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fc ffd5 	bl	8001898 <HAL_GetTick>
 80048ee:	1b40      	subs	r0, r0, r5
 80048f0:	280a      	cmp	r0, #10
 80048f2:	d9c9      	bls.n	8004888 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 80048f4:	2003      	movs	r0, #3
 80048f6:	e028      	b.n	800494a <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d02b      	beq.n	8004954 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 80048fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004900:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004902:	f003 0103 	and.w	r1, r3, #3
 8004906:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004908:	4291      	cmp	r1, r2
 800490a:	d125      	bne.n	8004958 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800490c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004912:	428a      	cmp	r2, r1
 8004914:	d122      	bne.n	800495c <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004916:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800491a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800491c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004920:	d11e      	bne.n	8004960 <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004922:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004926:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004928:	4293      	cmp	r3, r2
 800492a:	d11b      	bne.n	8004964 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 800492c:	2000      	movs	r0, #0
 800492e:	e00c      	b.n	800494a <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 8004930:	2001      	movs	r0, #1
}
 8004932:	4770      	bx	lr
        return HAL_ERROR;
 8004934:	2001      	movs	r0, #1
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8004938:	2001      	movs	r0, #1
 800493a:	e006      	b.n	800494a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 800493c:	2001      	movs	r0, #1
 800493e:	e004      	b.n	800494a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004940:	2001      	movs	r0, #1
 8004942:	e002      	b.n	800494a <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004944:	2001      	movs	r0, #1
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8004948:	2000      	movs	r0, #0
}
 800494a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800494c:	2000      	movs	r0, #0
 800494e:	e7fc      	b.n	800494a <HAL_RCC_OscConfig+0x652>
 8004950:	2000      	movs	r0, #0
 8004952:	e7fa      	b.n	800494a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004954:	2001      	movs	r0, #1
 8004956:	e7f8      	b.n	800494a <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004958:	2001      	movs	r0, #1
 800495a:	e7f6      	b.n	800494a <HAL_RCC_OscConfig+0x652>
 800495c:	2001      	movs	r0, #1
 800495e:	e7f4      	b.n	800494a <HAL_RCC_OscConfig+0x652>
 8004960:	2001      	movs	r0, #1
 8004962:	e7f2      	b.n	800494a <HAL_RCC_OscConfig+0x652>
 8004964:	2001      	movs	r0, #1
 8004966:	e7f0      	b.n	800494a <HAL_RCC_OscConfig+0x652>
 8004968:	58000400 	.word	0x58000400
 800496c:	11c1808c 	.word	0x11c1808c

08004970 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004970:	2800      	cmp	r0, #0
 8004972:	f000 8127 	beq.w	8004bc4 <HAL_RCC_ClockConfig+0x254>
{
 8004976:	b570      	push	{r4, r5, r6, lr}
 8004978:	460c      	mov	r4, r1
 800497a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800497c:	4b93      	ldr	r3, [pc, #588]	; (8004bcc <HAL_RCC_ClockConfig+0x25c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	428b      	cmp	r3, r1
 8004986:	d32d      	bcc.n	80049e4 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	f013 0f02 	tst.w	r3, #2
 800498e:	d13f      	bne.n	8004a10 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	f013 0f20 	tst.w	r3, #32
 8004996:	d153      	bne.n	8004a40 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800499e:	d16a      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	f013 0f04 	tst.w	r3, #4
 80049a6:	f040 8083 	bne.w	8004ab0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	682b      	ldr	r3, [r5, #0]
 80049ac:	f013 0f08 	tst.w	r3, #8
 80049b0:	f040 8097 	bne.w	8004ae2 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	f013 0f01 	tst.w	r3, #1
 80049ba:	f000 80de 	beq.w	8004b7a <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049be:	686b      	ldr	r3, [r5, #4]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f000 80a8 	beq.w	8004b16 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	f000 80ad 	beq.w	8004b26 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f040 80b2 	bne.w	8004b36 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80049d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	f012 0f02 	tst.w	r2, #2
 80049dc:	f040 80b1 	bne.w	8004b42 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80049e0:	2001      	movs	r0, #1
 80049e2:	e0ee      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e4:	4a79      	ldr	r2, [pc, #484]	; (8004bcc <HAL_RCC_ClockConfig+0x25c>)
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	f023 0307 	bic.w	r3, r3, #7
 80049ec:	430b      	orrs	r3, r1
 80049ee:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80049f0:	f7fc ff52 	bl	8001898 <HAL_GetTick>
 80049f4:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	4b75      	ldr	r3, [pc, #468]	; (8004bcc <HAL_RCC_ClockConfig+0x25c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	42a3      	cmp	r3, r4
 8004a00:	d0c2      	beq.n	8004988 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a02:	f7fc ff49 	bl	8001898 <HAL_GetTick>
 8004a06:	1b80      	subs	r0, r0, r6
 8004a08:	2802      	cmp	r0, #2
 8004a0a:	d9f4      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004a0c:	2003      	movs	r0, #3
 8004a0e:	e0d8      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004a10:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a16:	688a      	ldr	r2, [r1, #8]
 8004a18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004a20:	f7fc ff3a 	bl	8001898 <HAL_GetTick>
 8004a24:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004a30:	d1ae      	bne.n	8004990 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a32:	f7fc ff31 	bl	8001898 <HAL_GetTick>
 8004a36:	1b80      	subs	r0, r0, r6
 8004a38:	2802      	cmp	r0, #2
 8004a3a:	d9f4      	bls.n	8004a26 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004a3c:	2003      	movs	r0, #3
 8004a3e:	e0c0      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004a40:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a46:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8004a4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004a54:	f7fc ff20 	bl	8001898 <HAL_GetTick>
 8004a58:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a66:	d197      	bne.n	8004998 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a68:	f7fc ff16 	bl	8001898 <HAL_GetTick>
 8004a6c:	1b80      	subs	r0, r0, r6
 8004a6e:	2802      	cmp	r0, #2
 8004a70:	d9f3      	bls.n	8004a5a <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004a72:	2003      	movs	r0, #3
 8004a74:	e0a5      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004a76:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a7c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004a80:	f023 030f 	bic.w	r3, r3, #15
 8004a84:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004a88:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004a8c:	f7fc ff04 	bl	8001898 <HAL_GetTick>
 8004a90:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004a9e:	f47f af7f 	bne.w	80049a0 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004aa2:	f7fc fef9 	bl	8001898 <HAL_GetTick>
 8004aa6:	1b80      	subs	r0, r0, r6
 8004aa8:	2802      	cmp	r0, #2
 8004aaa:	d9f2      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8004aac:	2003      	movs	r0, #3
 8004aae:	e088      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004ab0:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab6:	688a      	ldr	r2, [r1, #8]
 8004ab8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004abc:	4313      	orrs	r3, r2
 8004abe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004ac0:	f7fc feea 	bl	8001898 <HAL_GetTick>
 8004ac4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ad0:	f47f af6b 	bne.w	80049aa <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ad4:	f7fc fee0 	bl	8001898 <HAL_GetTick>
 8004ad8:	1b80      	subs	r0, r0, r6
 8004ada:	2802      	cmp	r0, #2
 8004adc:	d9f3      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004ade:	2003      	movs	r0, #3
 8004ae0:	e06f      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004ae2:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ae8:	6893      	ldr	r3, [r2, #8]
 8004aea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004aee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004af2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004af4:	f7fc fed0 	bl	8001898 <HAL_GetTick>
 8004af8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004b04:	f47f af56 	bne.w	80049b4 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b08:	f7fc fec6 	bl	8001898 <HAL_GetTick>
 8004b0c:	1b80      	subs	r0, r0, r6
 8004b0e:	2802      	cmp	r0, #2
 8004b10:	d9f3      	bls.n	8004afa <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004b12:	2003      	movs	r0, #3
 8004b14:	e055      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004b20:	d10f      	bne.n	8004b42 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004b22:	2001      	movs	r0, #1
 8004b24:	e04d      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004b32:	2001      	movs	r0, #1
 8004b34:	e045      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004b40:	d042      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b46:	688a      	ldr	r2, [r1, #8]
 8004b48:	f022 0203 	bic.w	r2, r2, #3
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004b50:	f7fc fea2 	bl	8001898 <HAL_GetTick>
 8004b54:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b60:	686a      	ldr	r2, [r5, #4]
 8004b62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004b66:	d008      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b68:	f7fc fe96 	bl	8001898 <HAL_GetTick>
 8004b6c:	1b80      	subs	r0, r0, r6
 8004b6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b72:	4298      	cmp	r0, r3
 8004b74:	d9ef      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004b76:	2003      	movs	r0, #3
 8004b78:	e023      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <HAL_RCC_ClockConfig+0x25c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	d915      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b86:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <HAL_RCC_ClockConfig+0x25c>)
 8004b88:	6813      	ldr	r3, [r2, #0]
 8004b8a:	f023 0307 	bic.w	r3, r3, #7
 8004b8e:	4323      	orrs	r3, r4
 8004b90:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004b92:	f7fc fe81 	bl	8001898 <HAL_GetTick>
 8004b96:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_RCC_ClockConfig+0x25c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	42a3      	cmp	r3, r4
 8004ba2:	d006      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ba4:	f7fc fe78 	bl	8001898 <HAL_GetTick>
 8004ba8:	1b40      	subs	r0, r0, r5
 8004baa:	2802      	cmp	r0, #2
 8004bac:	d9f4      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8004bae:	2003      	movs	r0, #3
 8004bb0:	e007      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004bb2:	f7ff fb91 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_RCC_ClockConfig+0x260>)
 8004bb8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCC_ClockConfig+0x264>)
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	f7fc fe69 	bl	8001894 <HAL_InitTick>
}
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004bc4:	2001      	movs	r0, #1
}
 8004bc6:	4770      	bx	lr
        return HAL_ERROR;
 8004bc8:	2001      	movs	r0, #1
 8004bca:	e7fa      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x252>
 8004bcc:	58004000 	.word	0x58004000
 8004bd0:	20000070 	.word	0x20000070
 8004bd4:	20000074 	.word	0x20000074

08004bd8 <HAL_RCC_GetPCLK1Freq>:
{
 8004bd8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004bda:	f7ff fb7d 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004be8:	4a02      	ldr	r2, [pc, #8]	; (8004bf4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004bee:	40d8      	lsrs	r0, r3
 8004bf0:	bd08      	pop	{r3, pc}
 8004bf2:	bf00      	nop
 8004bf4:	0801229c 	.word	0x0801229c

08004bf8 <HAL_RCC_GetPCLK2Freq>:
{
 8004bf8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004bfa:	f7ff fb6d 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c08:	4a02      	ldr	r2, [pc, #8]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004c0e:	40d8      	lsrs	r0, r3
 8004c10:	bd08      	pop	{r3, pc}
 8004c12:	bf00      	nop
 8004c14:	0801229c 	.word	0x0801229c

08004c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c1c:	6803      	ldr	r3, [r0, #0]
 8004c1e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c22:	f040 80ab 	bne.w	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004c26:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	f013 0f01 	tst.w	r3, #1
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c30:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c36:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c3a:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	f013 0f02 	tst.w	r3, #2
 8004c4c:	d00a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c4e:	68a2      	ldr	r2, [r4, #8]
 8004c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c54:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c58:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004c5c:	b292      	uxth	r2, r2
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	f013 0f20 	tst.w	r3, #32
 8004c6a:	d009      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c6c:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c72:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004c76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004c86:	d00c      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c88:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c8e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c92:	0c02      	lsrs	r2, r0, #16
 8004c94:	0412      	lsls	r2, r2, #16
 8004c96:	ea23 0302 	bic.w	r3, r3, r2
 8004c9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004caa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cb0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004cb4:	0c02      	lsrs	r2, r0, #16
 8004cb6:	0412      	lsls	r2, r2, #16
 8004cb8:	ea23 0302 	bic.w	r3, r3, r2
 8004cbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004cca:	d00c      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004ccc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cd2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004cd6:	0c02      	lsrs	r2, r0, #16
 8004cd8:	0412      	lsls	r2, r2, #16
 8004cda:	ea23 0302 	bic.w	r3, r3, r2
 8004cde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004cec:	f040 809e 	bne.w	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004cf6:	f040 80aa 	bne.w	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d00:	f040 80b6 	bne.w	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	f013 0f10 	tst.w	r3, #16
 8004d0a:	d00e      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004d0c:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004d20:	68e3      	ldr	r3, [r4, #12]
 8004d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d26:	f000 80b4 	beq.w	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004d30:	d00f      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d32:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d3c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d48:	b91b      	cbnz	r3, 8004d52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004d4a:	68cb      	ldr	r3, [r1, #12]
 8004d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d50:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004d58:	d00e      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d60:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004d6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d74:	f000 8092 	beq.w	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004d78:	4628      	mov	r0, r5
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004d7c:	f7ff f922 	bl	8003fc4 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004d80:	f7fc fd8a 	bl	8001898 <HAL_GetTick>
 8004d84:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004d86:	4b48      	ldr	r3, [pc, #288]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d90:	f7fc fd82 	bl	8001898 <HAL_GetTick>
 8004d94:	1b40      	subs	r0, r0, r5
 8004d96:	2802      	cmp	r0, #2
 8004d98:	d9f5      	bls.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8004d9a:	2503      	movs	r5, #3
 8004d9c:	e000      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004d9e:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004da0:	2d00      	cmp	r5, #0
 8004da2:	f47f af41 	bne.w	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004db2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d024      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004dc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004dc4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004dc8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004dcc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004dd0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004dd4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004dd8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004de0:	f012 0f02 	tst.w	r2, #2
 8004de4:	d10f      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	f47f af1e 	bne.w	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004df2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004df6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004e00:	e712      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004e02:	2200      	movs	r2, #0
 8004e04:	e7ec      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8004e06:	f7fc fd47 	bl	8001898 <HAL_GetTick>
 8004e0a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e14:	f013 0f02 	tst.w	r3, #2
 8004e18:	d1e5      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f7fc fd3d 	bl	8001898 <HAL_GetTick>
 8004e1e:	1b80      	subs	r0, r0, r6
 8004e20:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e24:	4298      	cmp	r0, r3
 8004e26:	d9f1      	bls.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8004e28:	2503      	movs	r5, #3
 8004e2a:	e7dc      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e2c:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e2e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004e32:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e36:	0919      	lsrs	r1, r3, #4
 8004e38:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004e3c:	ea22 0201 	bic.w	r2, r2, r1
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004e4c:	e750      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e4e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e50:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004e54:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e58:	0919      	lsrs	r1, r3, #4
 8004e5a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004e5e:	ea22 0201 	bic.w	r2, r2, r1
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004e6e:	e744      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e70:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e72:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004e76:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e7a:	0919      	lsrs	r1, r3, #4
 8004e7c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004e80:	ea22 0201 	bic.w	r2, r2, r1
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004e90:	e738      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004e92:	68cb      	ldr	r3, [r1, #12]
 8004e94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e98:	60cb      	str	r3, [r1, #12]
 8004e9a:	e746      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e9c:	68cb      	ldr	r3, [r1, #12]
 8004e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea2:	60cb      	str	r3, [r1, #12]
 8004ea4:	e768      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ea6:	bf00      	nop
 8004ea8:	58000400 	.word	0x58000400

08004eac <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004eac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d036      	beq.n	8004f22 <HAL_RTC_DeactivateAlarm+0x76>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004ec2:	22ca      	movs	r2, #202	; 0xca
 8004ec4:	625a      	str	r2, [r3, #36]	; 0x24
 8004ec6:	2253      	movs	r2, #83	; 0x53
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004eca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004ece:	d019      	beq.n	8004f04 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004ed0:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004ed8:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004edc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ee0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004ee2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004ee4:	f022 0202 	bic.w	r2, r2, #2
 8004ee8:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004eea:	2202      	movs	r2, #2
 8004eec:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004ef0:	22ff      	movs	r2, #255	; 0xff
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004efa:	2300      	movs	r3, #0
 8004efc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004f00:	4618      	mov	r0, r3
 8004f02:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004f0a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f12:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004f14:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f20:	e7e5      	b.n	8004eee <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8004f22:	2002      	movs	r0, #2
}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40002800 	.word	0x40002800

08004f2c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004f32:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004f34:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004f36:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004f38:	f015 0f01 	tst.w	r5, #1
 8004f3c:	d106      	bne.n	8004f4c <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004f3e:	f015 0f02 	tst.w	r5, #2
 8004f42:	d109      	bne.n	8004f58 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004f52:	f7fc fe51 	bl	8001bf8 <HAL_RTC_AlarmAEventCallback>
 8004f56:	e7f2      	b.n	8004f3e <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004f58:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f9e6 	bl	8005330 <HAL_RTCEx_AlarmBEventCallback>
 8004f64:	e7ee      	b.n	8004f44 <HAL_RTC_AlarmIRQHandler+0x18>
 8004f66:	bf00      	nop
 8004f68:	40002800 	.word	0x40002800

08004f6c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f6c:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004f6e:	4a0b      	ldr	r2, [pc, #44]	; (8004f9c <HAL_RTC_WaitForSynchro+0x30>)
 8004f70:	68d3      	ldr	r3, [r2, #12]
 8004f72:	f023 0320 	bic.w	r3, r3, #32
 8004f76:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004f78:	f7fc fc8e 	bl	8001898 <HAL_GetTick>
 8004f7c:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <HAL_RTC_WaitForSynchro+0x30>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f013 0f20 	tst.w	r3, #32
 8004f86:	d107      	bne.n	8004f98 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f88:	f7fc fc86 	bl	8001898 <HAL_GetTick>
 8004f8c:	1b00      	subs	r0, r0, r4
 8004f8e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f92:	d9f4      	bls.n	8004f7e <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8004f94:	2003      	movs	r0, #3
 8004f96:	e000      	b.n	8004f9a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004f98:	2000      	movs	r0, #0
}
 8004f9a:	bd10      	pop	{r4, pc}
 8004f9c:	40002800 	.word	0x40002800

08004fa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fa0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <RTC_EnterInitMode+0x48>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004faa:	d002      	beq.n	8004fb2 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004fac:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8004fae:	4620      	mov	r0, r4
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
 8004fb2:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004fb4:	4a0c      	ldr	r2, [pc, #48]	; (8004fe8 <RTC_EnterInitMode+0x48>)
 8004fb6:	68d3      	ldr	r3, [r2, #12]
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbc:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004fbe:	f7fc fc6b 	bl	8001898 <HAL_GetTick>
 8004fc2:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004fc4:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004fc6:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <RTC_EnterInitMode+0x48>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004fce:	d1ee      	bne.n	8004fae <RTC_EnterInitMode+0xe>
 8004fd0:	2c03      	cmp	r4, #3
 8004fd2:	d0ec      	beq.n	8004fae <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004fd4:	f7fc fc60 	bl	8001898 <HAL_GetTick>
 8004fd8:	1b43      	subs	r3, r0, r5
 8004fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fde:	d9f2      	bls.n	8004fc6 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fe0:	2403      	movs	r4, #3
 8004fe2:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8004fe6:	e7ee      	b.n	8004fc6 <RTC_EnterInitMode+0x26>
 8004fe8:	40002800 	.word	0x40002800

08004fec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fec:	b510      	push	{r4, lr}
 8004fee:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ff0:	4b11      	ldr	r3, [pc, #68]	; (8005038 <RTC_ExitInitMode+0x4c>)
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f013 0f20 	tst.w	r3, #32
 8005000:	d107      	bne.n	8005012 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005002:	f7ff ffb3 	bl	8004f6c <HAL_RTC_WaitForSynchro>
 8005006:	4603      	mov	r3, r0
 8005008:	b1a0      	cbz	r0, 8005034 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005010:	e010      	b.n	8005034 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005012:	4a09      	ldr	r2, [pc, #36]	; (8005038 <RTC_ExitInitMode+0x4c>)
 8005014:	6993      	ldr	r3, [r2, #24]
 8005016:	f023 0320 	bic.w	r3, r3, #32
 800501a:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800501c:	f7ff ffa6 	bl	8004f6c <HAL_RTC_WaitForSynchro>
 8005020:	4603      	mov	r3, r0
 8005022:	b110      	cbz	r0, 800502a <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800502a:	4903      	ldr	r1, [pc, #12]	; (8005038 <RTC_ExitInitMode+0x4c>)
 800502c:	698a      	ldr	r2, [r1, #24]
 800502e:	f042 0220 	orr.w	r2, r2, #32
 8005032:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd10      	pop	{r4, pc}
 8005038:	40002800 	.word	0x40002800

0800503c <HAL_RTC_Init>:
  if (hrtc != NULL)
 800503c:	2800      	cmp	r0, #0
 800503e:	d04a      	beq.n	80050d6 <HAL_RTC_Init+0x9a>
{
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005044:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005048:	b19b      	cbz	r3, 8005072 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800504a:	2302      	movs	r3, #2
 800504c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005050:	4b22      	ldr	r3, [pc, #136]	; (80050dc <HAL_RTC_Init+0xa0>)
 8005052:	22ca      	movs	r2, #202	; 0xca
 8005054:	625a      	str	r2, [r3, #36]	; 0x24
 8005056:	2253      	movs	r2, #83	; 0x53
 8005058:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800505a:	4620      	mov	r0, r4
 800505c:	f7ff ffa0 	bl	8004fa0 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8005060:	b160      	cbz	r0, 800507c <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005062:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <HAL_RTC_Init+0xa0>)
 8005064:	22ff      	movs	r2, #255	; 0xff
 8005066:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005068:	b910      	cbnz	r0, 8005070 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 800506a:	2301      	movs	r3, #1
 800506c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005070:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8005072:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8005076:	f7fc fa71 	bl	800155c <HAL_RTC_MspInit>
 800507a:	e7e6      	b.n	800504a <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800507c:	4b17      	ldr	r3, [pc, #92]	; (80050dc <HAL_RTC_Init+0xa0>)
 800507e:	699a      	ldr	r2, [r3, #24]
 8005080:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8005084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005088:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800508a:	6999      	ldr	r1, [r3, #24]
 800508c:	6862      	ldr	r2, [r4, #4]
 800508e:	6920      	ldr	r0, [r4, #16]
 8005090:	4302      	orrs	r2, r0
 8005092:	69a0      	ldr	r0, [r4, #24]
 8005094:	4302      	orrs	r2, r0
 8005096:	430a      	orrs	r2, r1
 8005098:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800509a:	68e2      	ldr	r2, [r4, #12]
 800509c:	68a1      	ldr	r1, [r4, #8]
 800509e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80050a2:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80050aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80050ae:	4301      	orrs	r1, r0
 80050b0:	430a      	orrs	r2, r1
 80050b2:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 80050b4:	4620      	mov	r0, r4
 80050b6:	f7ff ff99 	bl	8004fec <RTC_ExitInitMode>
      if (status == HAL_OK)
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d1d1      	bne.n	8005062 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 80050be:	4907      	ldr	r1, [pc, #28]	; (80050dc <HAL_RTC_Init+0xa0>)
 80050c0:	698b      	ldr	r3, [r1, #24]
 80050c2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80050c6:	6a22      	ldr	r2, [r4, #32]
 80050c8:	69e5      	ldr	r5, [r4, #28]
 80050ca:	432a      	orrs	r2, r5
 80050cc:	6965      	ldr	r5, [r4, #20]
 80050ce:	432a      	orrs	r2, r5
 80050d0:	4313      	orrs	r3, r2
 80050d2:	618b      	str	r3, [r1, #24]
 80050d4:	e7c5      	b.n	8005062 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 80050d6:	2001      	movs	r0, #1
}
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40002800 	.word	0x40002800

080050e0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80050e0:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80050e2:	e002      	b.n	80050ea <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80050e4:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80050e6:	380a      	subs	r0, #10
 80050e8:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80050ea:	2809      	cmp	r0, #9
 80050ec:	d8fa      	bhi.n	80050e4 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	b2db      	uxtb	r3, r3
}
 80050f2:	4318      	orrs	r0, r3
 80050f4:	4770      	bx	lr
	...

080050f8 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80050f8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	f000 80b0 	beq.w	8005262 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8005102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005106:	4605      	mov	r5, r0
 8005108:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800510a:	2301      	movs	r3, #1
 800510c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005110:	2302      	movs	r3, #2
 8005112:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005116:	4b54      	ldr	r3, [pc, #336]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 8005118:	68de      	ldr	r6, [r3, #12]
 800511a:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800511e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005122:	d043      	beq.n	80051ac <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005124:	bb12      	cbnz	r2, 800516c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f013 0f40 	tst.w	r3, #64	; 0x40
 800512c:	d101      	bne.n	8005132 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800512e:	2300      	movs	r3, #0
 8005130:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005132:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005136:	7820      	ldrb	r0, [r4, #0]
 8005138:	f7ff ffd2 	bl	80050e0 <RTC_ByteToBcd2>
 800513c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800513e:	7860      	ldrb	r0, [r4, #1]
 8005140:	f7ff ffce 	bl	80050e0 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005144:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005148:	78a0      	ldrb	r0, [r4, #2]
 800514a:	f7ff ffc9 	bl	80050e0 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800514e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005150:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005152:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005156:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800515a:	f7ff ffc1 	bl	80050e0 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800515e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005162:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005164:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005166:	ea48 0000 	orr.w	r0, r8, r0
 800516a:	e020      	b.n	80051ae <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800516c:	6948      	ldr	r0, [r1, #20]
 800516e:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8005172:	d009      	beq.n	8005188 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005174:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005178:	d006      	beq.n	8005188 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800517a:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005182:	d101      	bne.n	8005188 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005184:	2300      	movs	r3, #0
 8005186:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005188:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800518a:	7863      	ldrb	r3, [r4, #1]
 800518c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800518e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005192:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005194:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005196:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005198:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800519c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80051a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051a4:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80051a6:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051a8:	4318      	orrs	r0, r3
 80051aa:	e000      	b.n	80051ae <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80051ac:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051ae:	4b2e      	ldr	r3, [pc, #184]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 80051b0:	22ca      	movs	r2, #202	; 0xca
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24
 80051b4:	2253      	movs	r2, #83	; 0x53
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80051b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80051ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051be:	d02a      	beq.n	8005216 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80051c0:	4b29      	ldr	r3, [pc, #164]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 80051c2:	699a      	ldr	r2, [r3, #24]
 80051c4:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80051c8:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80051ca:	2202      	movs	r2, #2
 80051cc:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80051ce:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80051d2:	d040      	beq.n	8005256 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80051d4:	4b24      	ldr	r3, [pc, #144]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 80051d6:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80051d8:	69a2      	ldr	r2, [r4, #24]
 80051da:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80051dc:	6862      	ldr	r2, [r4, #4]
 80051de:	4b22      	ldr	r3, [pc, #136]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 80051e0:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80051e2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80051e4:	f042 0202 	orr.w	r2, r2, #2
 80051e8:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80051f0:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80051f2:	4a1e      	ldr	r2, [pc, #120]	; (800526c <HAL_RTC_SetAlarm_IT+0x174>)
 80051f4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80051f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005200:	4b19      	ldr	r3, [pc, #100]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 8005202:	22ff      	movs	r2, #255	; 0xff
 8005204:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005206:	2301      	movs	r3, #1
 8005208:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800520c:	2000      	movs	r0, #0
 800520e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8005212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005216:	4b14      	ldr	r3, [pc, #80]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800521e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005220:	2201      	movs	r2, #1
 8005222:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005224:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005228:	d00f      	beq.n	800524a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800522a:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 800522c:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800522e:	69a2      	ldr	r2, [r4, #24]
 8005230:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005232:	6862      	ldr	r2, [r4, #4]
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 8005236:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005238:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005246:	619a      	str	r2, [r3, #24]
 8005248:	e7d3      	b.n	80051f2 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800524a:	69a3      	ldr	r3, [r4, #24]
 800524c:	69e2      	ldr	r2, [r4, #28]
 800524e:	4313      	orrs	r3, r2
 8005250:	4a05      	ldr	r2, [pc, #20]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 8005252:	6453      	str	r3, [r2, #68]	; 0x44
 8005254:	e7ed      	b.n	8005232 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005256:	69a3      	ldr	r3, [r4, #24]
 8005258:	69e2      	ldr	r2, [r4, #28]
 800525a:	4313      	orrs	r3, r2
 800525c:	4a02      	ldr	r2, [pc, #8]	; (8005268 <HAL_RTC_SetAlarm_IT+0x170>)
 800525e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005260:	e7bc      	b.n	80051dc <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8005262:	2002      	movs	r0, #2
}
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40002800 	.word	0x40002800
 800526c:	58000800 	.word	0x58000800

08005270 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005270:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d017      	beq.n	80052a8 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005278:	2101      	movs	r1, #1
 800527a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800527e:	2302      	movs	r3, #2
 8005280:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005286:	22ca      	movs	r2, #202	; 0xca
 8005288:	625a      	str	r2, [r3, #36]	; 0x24
 800528a:	2253      	movs	r2, #83	; 0x53
 800528c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	f042 0220 	orr.w	r2, r2, #32
 8005294:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005296:	22ff      	movs	r2, #255	; 0xff
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800529a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800529e:	2300      	movs	r3, #0
 80052a0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80052a4:	4618      	mov	r0, r3
 80052a6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80052a8:	2002      	movs	r0, #2
}
 80052aa:	4770      	bx	lr
 80052ac:	40002800 	.word	0x40002800

080052b0 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052b0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d020      	beq.n	80052fa <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80052b8:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80052ba:	2101      	movs	r1, #1
 80052bc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052c0:	2302      	movs	r3, #2
 80052c2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052c6:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80052c8:	22ca      	movs	r2, #202	; 0xca
 80052ca:	625a      	str	r2, [r3, #36]	; 0x24
 80052cc:	2253      	movs	r2, #83	; 0x53
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052d6:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80052d8:	4c0a      	ldr	r4, [pc, #40]	; (8005304 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80052da:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80052de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80052e2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e6:	22ff      	movs	r2, #255	; 0xff
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80052ea:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052ee:	2300      	movs	r3, #0
 80052f0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80052f4:	4618      	mov	r0, r3
}
 80052f6:	bc10      	pop	{r4}
 80052f8:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80052fa:	2002      	movs	r0, #2
}
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40002800 	.word	0x40002800
 8005304:	58000800 	.word	0x58000800

08005308 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005308:	b510      	push	{r4, lr}
 800530a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800530c:	4b07      	ldr	r3, [pc, #28]	; (800532c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005314:	d103      	bne.n	800531e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005316:	2301      	movs	r3, #1
 8005318:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800531c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800531e:	4b03      	ldr	r3, [pc, #12]	; (800532c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005320:	2240      	movs	r2, #64	; 0x40
 8005322:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005324:	f7fc fc6c 	bl	8001c00 <HAL_RTCEx_SSRUEventCallback>
 8005328:	e7f5      	b.n	8005316 <HAL_RTCEx_SSRUIRQHandler+0xe>
 800532a:	bf00      	nop
 800532c:	40002800 	.word	0x40002800

08005330 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005330:	4770      	bx	lr

08005332 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005332:	0089      	lsls	r1, r1, #2
 8005334:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005338:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800533c:	600a      	str	r2, [r1, #0]
}
 800533e:	4770      	bx	lr

08005340 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005340:	0089      	lsls	r1, r1, #2
 8005342:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005346:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800534a:	6808      	ldr	r0, [r1, #0]
}
 800534c:	4770      	bx	lr
	...

08005350 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <SUBGHZSPI_Init+0x20>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005358:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800535a:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800535e:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005360:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005364:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800536c:	601a      	str	r2, [r3, #0]
}
 800536e:	4770      	bx	lr
 8005370:	58010000 	.word	0x58010000

08005374 <HAL_SUBGHZ_Init>:
{
 8005374:	b530      	push	{r4, r5, lr}
 8005376:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005378:	2800      	cmp	r0, #0
 800537a:	d04e      	beq.n	800541a <HAL_SUBGHZ_Init+0xa6>
 800537c:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800537e:	7983      	ldrb	r3, [r0, #6]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d03b      	beq.n	80053fc <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005384:	2302      	movs	r3, #2
 8005386:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800538c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005390:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005394:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005398:	4b21      	ldr	r3, [pc, #132]	; (8005420 <HAL_SUBGHZ_Init+0xac>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80053a0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80053a4:	2264      	movs	r2, #100	; 0x64
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
 80053aa:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80053ac:	9b01      	ldr	r3, [sp, #4]
 80053ae:	b34b      	cbz	r3, 8005404 <HAL_SUBGHZ_Init+0x90>
    count--;
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80053b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053be:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80053c2:	d1f3      	bne.n	80053ac <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80053c4:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80053c6:	4b17      	ldr	r3, [pc, #92]	; (8005424 <HAL_SUBGHZ_Init+0xb0>)
 80053c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80053cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(EXTI->IMR2, ExtiLine);
 80053d4:	4914      	ldr	r1, [pc, #80]	; (8005428 <HAL_SUBGHZ_Init+0xb4>)
 80053d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80053da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053e8:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80053ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ee:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80053f0:	b15d      	cbz	r5, 800540a <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80053f2:	2301      	movs	r3, #1
 80053f4:	71a3      	strb	r3, [r4, #6]
}
 80053f6:	4628      	mov	r0, r5
 80053f8:	b003      	add	sp, #12
 80053fa:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80053fc:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80053fe:	f7fc f95d 	bl	80016bc <HAL_SUBGHZ_MspInit>
 8005402:	e7bf      	b.n	8005384 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005404:	2501      	movs	r5, #1
 8005406:	60a5      	str	r5, [r4, #8]
      break;
 8005408:	e7dd      	b.n	80053c6 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800540a:	6820      	ldr	r0, [r4, #0]
 800540c:	f7ff ffa0 	bl	8005350 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005410:	2301      	movs	r3, #1
 8005412:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005414:	2300      	movs	r3, #0
 8005416:	60a3      	str	r3, [r4, #8]
 8005418:	e7eb      	b.n	80053f2 <HAL_SUBGHZ_Init+0x7e>
    return status;
 800541a:	2501      	movs	r5, #1
 800541c:	e7eb      	b.n	80053f6 <HAL_SUBGHZ_Init+0x82>
 800541e:	bf00      	nop
 8005420:	20000070 	.word	0x20000070
 8005424:	58000400 	.word	0x58000400
 8005428:	58000800 	.word	0x58000800

0800542c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800542c:	b082      	sub	sp, #8
 800542e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005430:	4b1a      	ldr	r3, [pc, #104]	; (800549c <SUBGHZSPI_Transmit+0x70>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005438:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800543c:	2064      	movs	r0, #100	; 0x64
 800543e:	fb00 f303 	mul.w	r3, r0, r3
 8005442:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005444:	9b01      	ldr	r3, [sp, #4]
 8005446:	b14b      	cbz	r3, 800545c <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005448:	9b01      	ldr	r3, [sp, #4]
 800544a:	3b01      	subs	r3, #1
 800544c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800544e:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <SUBGHZSPI_Transmit+0x74>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f013 0f02 	tst.w	r3, #2
 8005456:	d0f5      	beq.n	8005444 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005458:	2000      	movs	r0, #0
 800545a:	e001      	b.n	8005460 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800545c:	2001      	movs	r0, #1
 800545e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <SUBGHZSPI_Transmit+0x74>)
 8005462:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <SUBGHZSPI_Transmit+0x70>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800546c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005470:	2164      	movs	r1, #100	; 0x64
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005478:	9b01      	ldr	r3, [sp, #4]
 800547a:	b143      	cbz	r3, 800548e <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800547c:	9b01      	ldr	r3, [sp, #4]
 800547e:	3b01      	subs	r3, #1
 8005480:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005482:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <SUBGHZSPI_Transmit+0x74>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f013 0f01 	tst.w	r3, #1
 800548a:	d0f5      	beq.n	8005478 <SUBGHZSPI_Transmit+0x4c>
 800548c:	e001      	b.n	8005492 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800548e:	2001      	movs	r0, #1
 8005490:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005492:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <SUBGHZSPI_Transmit+0x74>)
 8005494:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8005496:	b002      	add	sp, #8
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000070 	.word	0x20000070
 80054a0:	58010000 	.word	0x58010000

080054a4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80054a4:	b082      	sub	sp, #8
 80054a6:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80054a8:	4b1c      	ldr	r3, [pc, #112]	; (800551c <SUBGHZSPI_Receive+0x78>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80054b0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80054b4:	2064      	movs	r0, #100	; 0x64
 80054b6:	fb00 f303 	mul.w	r3, r0, r3
 80054ba:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80054bc:	9b01      	ldr	r3, [sp, #4]
 80054be:	b14b      	cbz	r3, 80054d4 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80054c0:	9b01      	ldr	r3, [sp, #4]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80054c6:	4b16      	ldr	r3, [pc, #88]	; (8005520 <SUBGHZSPI_Receive+0x7c>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f013 0f02 	tst.w	r3, #2
 80054ce:	d0f5      	beq.n	80054bc <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80054d0:	2000      	movs	r0, #0
 80054d2:	e001      	b.n	80054d8 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80054d4:	2001      	movs	r0, #1
 80054d6:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80054d8:	4b11      	ldr	r3, [pc, #68]	; (8005520 <SUBGHZSPI_Receive+0x7c>)
 80054da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80054de:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <SUBGHZSPI_Receive+0x78>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80054ea:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80054ee:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80054f2:	fb0c f303 	mul.w	r3, ip, r3
 80054f6:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80054f8:	9b01      	ldr	r3, [sp, #4]
 80054fa:	b143      	cbz	r3, 800550e <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	3b01      	subs	r3, #1
 8005500:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005502:	4b07      	ldr	r3, [pc, #28]	; (8005520 <SUBGHZSPI_Receive+0x7c>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f013 0f01 	tst.w	r3, #1
 800550a:	d0f5      	beq.n	80054f8 <SUBGHZSPI_Receive+0x54>
 800550c:	e001      	b.n	8005512 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800550e:	2001      	movs	r0, #1
 8005510:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005512:	4b03      	ldr	r3, [pc, #12]	; (8005520 <SUBGHZSPI_Receive+0x7c>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005518:	b002      	add	sp, #8
 800551a:	4770      	bx	lr
 800551c:	20000070 	.word	0x20000070
 8005520:	58010000 	.word	0x58010000

08005524 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005524:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <SUBGHZ_WaitOnBusy+0x50>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800552e:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005532:	2264      	movs	r2, #100	; 0x64
 8005534:	fb02 f303 	mul.w	r3, r2, r3
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	e006      	b.n	800554a <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800553c:	2302      	movs	r3, #2
 800553e:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005540:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005542:	b002      	add	sp, #8
 8005544:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005546:	4213      	tst	r3, r2
 8005548:	d012      	beq.n	8005570 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <SUBGHZ_WaitOnBusy+0x54>)
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f013 0304 	ands.w	r3, r3, #4
 8005552:	d000      	beq.n	8005556 <SUBGHZ_WaitOnBusy+0x32>
 8005554:	2301      	movs	r3, #1
    if (count == 0U)
 8005556:	9a01      	ldr	r2, [sp, #4]
 8005558:	2a00      	cmp	r2, #0
 800555a:	d0ef      	beq.n	800553c <SUBGHZ_WaitOnBusy+0x18>
    count--;
 800555c:	9a01      	ldr	r2, [sp, #4]
 800555e:	3a01      	subs	r2, #1
 8005560:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005562:	4a05      	ldr	r2, [pc, #20]	; (8005578 <SUBGHZ_WaitOnBusy+0x54>)
 8005564:	6952      	ldr	r2, [r2, #20]
 8005566:	f012 0202 	ands.w	r2, r2, #2
 800556a:	d0ec      	beq.n	8005546 <SUBGHZ_WaitOnBusy+0x22>
 800556c:	2201      	movs	r2, #1
 800556e:	e7ea      	b.n	8005546 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8005570:	2000      	movs	r0, #0
 8005572:	e7e6      	b.n	8005542 <SUBGHZ_WaitOnBusy+0x1e>
 8005574:	20000070 	.word	0x20000070
 8005578:	58000400 	.word	0x58000400

0800557c <SUBGHZ_CheckDeviceReady>:
{
 800557c:	b500      	push	{lr}
 800557e:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005580:	7903      	ldrb	r3, [r0, #4]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d004      	beq.n	8005590 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005586:	f7ff ffcd 	bl	8005524 <SUBGHZ_WaitOnBusy>
}
 800558a:	b003      	add	sp, #12
 800558c:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <SUBGHZ_CheckDeviceReady+0x4c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005598:	f3c3 334f 	ubfx	r3, r3, #13, #16
 800559c:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800559e:	4a0b      	ldr	r2, [pc, #44]	; (80055cc <SUBGHZ_CheckDeviceReady+0x50>)
 80055a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80055a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 80055ac:	9b01      	ldr	r3, [sp, #4]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80055b2:	9b01      	ldr	r3, [sp, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f9      	bne.n	80055ac <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <SUBGHZ_CheckDeviceReady+0x50>)
 80055ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80055c6:	e7de      	b.n	8005586 <SUBGHZ_CheckDeviceReady+0xa>
 80055c8:	20000070 	.word	0x20000070
 80055cc:	58000400 	.word	0x58000400

080055d0 <HAL_SUBGHZ_WriteRegisters>:
{
 80055d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80055d6:	7980      	ldrb	r0, [r0, #6]
 80055d8:	fa5f f880 	uxtb.w	r8, r0
 80055dc:	f1b8 0f01 	cmp.w	r8, #1
 80055e0:	d13e      	bne.n	8005660 <HAL_SUBGHZ_WriteRegisters+0x90>
 80055e2:	460c      	mov	r4, r1
 80055e4:	4617      	mov	r7, r2
 80055e6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80055e8:	796b      	ldrb	r3, [r5, #5]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d03b      	beq.n	8005666 <HAL_SUBGHZ_WriteRegisters+0x96>
 80055ee:	2301      	movs	r3, #1
 80055f0:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80055f2:	2302      	movs	r3, #2
 80055f4:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80055f6:	4628      	mov	r0, r5
 80055f8:	f7ff ffc0 	bl	800557c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055fc:	4a1b      	ldr	r2, [pc, #108]	; (800566c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80055fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005602:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800560a:	210d      	movs	r1, #13
 800560c:	4628      	mov	r0, r5
 800560e:	f7ff ff0d 	bl	800542c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005612:	0a21      	lsrs	r1, r4, #8
 8005614:	4628      	mov	r0, r5
 8005616:	f7ff ff09 	bl	800542c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800561a:	b2e1      	uxtb	r1, r4
 800561c:	4628      	mov	r0, r5
 800561e:	f7ff ff05 	bl	800542c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005622:	2400      	movs	r4, #0
 8005624:	e005      	b.n	8005632 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005626:	5d39      	ldrb	r1, [r7, r4]
 8005628:	4628      	mov	r0, r5
 800562a:	f7ff feff 	bl	800542c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800562e:	3401      	adds	r4, #1
 8005630:	b2a4      	uxth	r4, r4
 8005632:	42b4      	cmp	r4, r6
 8005634:	d3f7      	bcc.n	8005626 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005636:	4a0d      	ldr	r2, [pc, #52]	; (800566c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005638:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800563c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005644:	4628      	mov	r0, r5
 8005646:	f7ff ff6d 	bl	8005524 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800564a:	68ab      	ldr	r3, [r5, #8]
 800564c:	b90b      	cbnz	r3, 8005652 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800564e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005652:	2301      	movs	r3, #1
 8005654:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005656:	2300      	movs	r3, #0
 8005658:	716b      	strb	r3, [r5, #5]
}
 800565a:	4640      	mov	r0, r8
 800565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005660:	f04f 0802 	mov.w	r8, #2
 8005664:	e7f9      	b.n	800565a <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005666:	f04f 0802 	mov.w	r8, #2
 800566a:	e7f6      	b.n	800565a <HAL_SUBGHZ_WriteRegisters+0x8a>
 800566c:	58000400 	.word	0x58000400

08005670 <HAL_SUBGHZ_ReadRegisters>:
{
 8005670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005674:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005676:	7980      	ldrb	r0, [r0, #6]
 8005678:	fa5f f880 	uxtb.w	r8, r0
 800567c:	f1b8 0f01 	cmp.w	r8, #1
 8005680:	d141      	bne.n	8005706 <HAL_SUBGHZ_ReadRegisters+0x96>
 8005682:	460c      	mov	r4, r1
 8005684:	4615      	mov	r5, r2
 8005686:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005688:	7973      	ldrb	r3, [r6, #5]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d03e      	beq.n	800570c <HAL_SUBGHZ_ReadRegisters+0x9c>
 800568e:	2301      	movs	r3, #1
 8005690:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005692:	4630      	mov	r0, r6
 8005694:	f7ff ff72 	bl	800557c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005698:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800569a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800569e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80056a6:	211d      	movs	r1, #29
 80056a8:	4630      	mov	r0, r6
 80056aa:	f7ff febf 	bl	800542c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80056ae:	0a21      	lsrs	r1, r4, #8
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7ff febb 	bl	800542c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80056b6:	b2e1      	uxtb	r1, r4
 80056b8:	4630      	mov	r0, r6
 80056ba:	f7ff feb7 	bl	800542c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80056be:	2100      	movs	r1, #0
 80056c0:	4630      	mov	r0, r6
 80056c2:	f7ff feb3 	bl	800542c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80056c6:	2400      	movs	r4, #0
 80056c8:	e006      	b.n	80056d8 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80056ca:	4629      	mov	r1, r5
 80056cc:	4630      	mov	r0, r6
 80056ce:	f7ff fee9 	bl	80054a4 <SUBGHZSPI_Receive>
      pData++;
 80056d2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80056d4:	3401      	adds	r4, #1
 80056d6:	b2a4      	uxth	r4, r4
 80056d8:	42bc      	cmp	r4, r7
 80056da:	d3f6      	bcc.n	80056ca <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056dc:	4a0d      	ldr	r2, [pc, #52]	; (8005714 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80056de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80056ea:	4630      	mov	r0, r6
 80056ec:	f7ff ff1a 	bl	8005524 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80056f0:	68b3      	ldr	r3, [r6, #8]
 80056f2:	b90b      	cbnz	r3, 80056f8 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80056f4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80056f8:	2301      	movs	r3, #1
 80056fa:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80056fc:	2300      	movs	r3, #0
 80056fe:	7173      	strb	r3, [r6, #5]
}
 8005700:	4640      	mov	r0, r8
 8005702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005706:	f04f 0802 	mov.w	r8, #2
 800570a:	e7f9      	b.n	8005700 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 800570c:	f04f 0802 	mov.w	r8, #2
 8005710:	e7f6      	b.n	8005700 <HAL_SUBGHZ_ReadRegisters+0x90>
 8005712:	bf00      	nop
 8005714:	58000400 	.word	0x58000400

08005718 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800571c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800571e:	7980      	ldrb	r0, [r0, #6]
 8005720:	fa5f f980 	uxtb.w	r9, r0
 8005724:	f1b9 0f01 	cmp.w	r9, #1
 8005728:	d143      	bne.n	80057b2 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800572a:	4688      	mov	r8, r1
 800572c:	4617      	mov	r7, r2
 800572e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005730:	796b      	ldrb	r3, [r5, #5]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d040      	beq.n	80057b8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005736:	2301      	movs	r3, #1
 8005738:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800573a:	4628      	mov	r0, r5
 800573c:	f7ff ff1e 	bl	800557c <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005740:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005744:	d005      	beq.n	8005752 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005746:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 800574a:	d002      	beq.n	8005752 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800574c:	2300      	movs	r3, #0
 800574e:	712b      	strb	r3, [r5, #4]
 8005750:	e001      	b.n	8005756 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005752:	2301      	movs	r3, #1
 8005754:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005756:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005758:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800575c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005764:	4641      	mov	r1, r8
 8005766:	4628      	mov	r0, r5
 8005768:	f7ff fe60 	bl	800542c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800576c:	2400      	movs	r4, #0
 800576e:	e005      	b.n	800577c <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005770:	5d39      	ldrb	r1, [r7, r4]
 8005772:	4628      	mov	r0, r5
 8005774:	f7ff fe5a 	bl	800542c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005778:	3401      	adds	r4, #1
 800577a:	b2a4      	uxth	r4, r4
 800577c:	42b4      	cmp	r4, r6
 800577e:	d3f7      	bcc.n	8005770 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005780:	4a0f      	ldr	r2, [pc, #60]	; (80057c0 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005782:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800578e:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005792:	d10a      	bne.n	80057aa <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005794:	68ab      	ldr	r3, [r5, #8]
 8005796:	b90b      	cbnz	r3, 800579c <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8005798:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800579c:	2301      	movs	r3, #1
 800579e:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80057a0:	2300      	movs	r3, #0
 80057a2:	716b      	strb	r3, [r5, #5]
}
 80057a4:	4648      	mov	r0, r9
 80057a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80057aa:	4628      	mov	r0, r5
 80057ac:	f7ff feba 	bl	8005524 <SUBGHZ_WaitOnBusy>
 80057b0:	e7f0      	b.n	8005794 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 80057b2:	f04f 0902 	mov.w	r9, #2
 80057b6:	e7f5      	b.n	80057a4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80057b8:	f04f 0902 	mov.w	r9, #2
 80057bc:	e7f2      	b.n	80057a4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80057be:	bf00      	nop
 80057c0:	58000400 	.word	0x58000400

080057c4 <HAL_SUBGHZ_ExecGetCmd>:
{
 80057c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80057ca:	7980      	ldrb	r0, [r0, #6]
 80057cc:	fa5f f880 	uxtb.w	r8, r0
 80057d0:	f1b8 0f01 	cmp.w	r8, #1
 80057d4:	d139      	bne.n	800584a <HAL_SUBGHZ_ExecGetCmd+0x86>
 80057d6:	460c      	mov	r4, r1
 80057d8:	4615      	mov	r5, r2
 80057da:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80057dc:	7973      	ldrb	r3, [r6, #5]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d036      	beq.n	8005850 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80057e2:	2301      	movs	r3, #1
 80057e4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80057e6:	4630      	mov	r0, r6
 80057e8:	f7ff fec8 	bl	800557c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057ec:	4a1a      	ldr	r2, [pc, #104]	; (8005858 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80057ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80057fa:	4621      	mov	r1, r4
 80057fc:	4630      	mov	r0, r6
 80057fe:	f7ff fe15 	bl	800542c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005802:	2100      	movs	r1, #0
 8005804:	4630      	mov	r0, r6
 8005806:	f7ff fe11 	bl	800542c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800580a:	2400      	movs	r4, #0
 800580c:	e006      	b.n	800581c <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800580e:	4629      	mov	r1, r5
 8005810:	4630      	mov	r0, r6
 8005812:	f7ff fe47 	bl	80054a4 <SUBGHZSPI_Receive>
      pData++;
 8005816:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005818:	3401      	adds	r4, #1
 800581a:	b2a4      	uxth	r4, r4
 800581c:	42bc      	cmp	r4, r7
 800581e:	d3f6      	bcc.n	800580e <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005820:	4a0d      	ldr	r2, [pc, #52]	; (8005858 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005822:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800582e:	4630      	mov	r0, r6
 8005830:	f7ff fe78 	bl	8005524 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005834:	68b3      	ldr	r3, [r6, #8]
 8005836:	b90b      	cbnz	r3, 800583c <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005838:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800583c:	2301      	movs	r3, #1
 800583e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005840:	2300      	movs	r3, #0
 8005842:	7173      	strb	r3, [r6, #5]
}
 8005844:	4640      	mov	r0, r8
 8005846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800584a:	f04f 0802 	mov.w	r8, #2
 800584e:	e7f9      	b.n	8005844 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005850:	f04f 0802 	mov.w	r8, #2
 8005854:	e7f6      	b.n	8005844 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005856:	bf00      	nop
 8005858:	58000400 	.word	0x58000400

0800585c <HAL_SUBGHZ_IRQHandler>:
{
 800585c:	b530      	push	{r4, r5, lr}
 800585e:	b083      	sub	sp, #12
 8005860:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8005862:	2300      	movs	r3, #0
 8005864:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005868:	2302      	movs	r3, #2
 800586a:	aa01      	add	r2, sp, #4
 800586c:	2112      	movs	r1, #18
 800586e:	f7ff ffa9 	bl	80057c4 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005872:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005876:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800587a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800587e:	f013 0f01 	tst.w	r3, #1
 8005882:	d126      	bne.n	80058d2 <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005884:	f014 0f02 	tst.w	r4, #2
 8005888:	d127      	bne.n	80058da <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800588a:	f014 0f04 	tst.w	r4, #4
 800588e:	d128      	bne.n	80058e2 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005890:	f014 0f08 	tst.w	r4, #8
 8005894:	d129      	bne.n	80058ea <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005896:	f014 0f10 	tst.w	r4, #16
 800589a:	d12a      	bne.n	80058f2 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800589c:	f014 0f20 	tst.w	r4, #32
 80058a0:	d12b      	bne.n	80058fa <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80058a2:	f014 0f40 	tst.w	r4, #64	; 0x40
 80058a6:	d12c      	bne.n	8005902 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80058a8:	f014 0f80 	tst.w	r4, #128	; 0x80
 80058ac:	d006      	beq.n	80058bc <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80058ae:	f414 7f80 	tst.w	r4, #256	; 0x100
 80058b2:	d02a      	beq.n	800590a <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80058b4:	2101      	movs	r1, #1
 80058b6:	4628      	mov	r0, r5
 80058b8:	f00b fa4c 	bl	8010d54 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80058bc:	f414 7f00 	tst.w	r4, #512	; 0x200
 80058c0:	d128      	bne.n	8005914 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80058c2:	2302      	movs	r3, #2
 80058c4:	aa01      	add	r2, sp, #4
 80058c6:	4619      	mov	r1, r3
 80058c8:	4628      	mov	r0, r5
 80058ca:	f7ff ff25 	bl	8005718 <HAL_SUBGHZ_ExecSetCmd>
}
 80058ce:	b003      	add	sp, #12
 80058d0:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80058d2:	4628      	mov	r0, r5
 80058d4:	f00b fa26 	bl	8010d24 <HAL_SUBGHZ_TxCpltCallback>
 80058d8:	e7d4      	b.n	8005884 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80058da:	4628      	mov	r0, r5
 80058dc:	f00b fa2a 	bl	8010d34 <HAL_SUBGHZ_RxCpltCallback>
 80058e0:	e7d3      	b.n	800588a <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80058e2:	4628      	mov	r0, r5
 80058e4:	f00b fa5a 	bl	8010d9c <HAL_SUBGHZ_PreambleDetectedCallback>
 80058e8:	e7d2      	b.n	8005890 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80058ea:	4628      	mov	r0, r5
 80058ec:	f00b fa5e 	bl	8010dac <HAL_SUBGHZ_SyncWordValidCallback>
 80058f0:	e7d1      	b.n	8005896 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80058f2:	4628      	mov	r0, r5
 80058f4:	f00b fa62 	bl	8010dbc <HAL_SUBGHZ_HeaderValidCallback>
 80058f8:	e7d0      	b.n	800589c <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80058fa:	4628      	mov	r0, r5
 80058fc:	f00b fa46 	bl	8010d8c <HAL_SUBGHZ_HeaderErrorCallback>
 8005900:	e7cf      	b.n	80058a2 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005902:	4628      	mov	r0, r5
 8005904:	f00b fa1e 	bl	8010d44 <HAL_SUBGHZ_CRCErrorCallback>
 8005908:	e7ce      	b.n	80058a8 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800590a:	2100      	movs	r1, #0
 800590c:	4628      	mov	r0, r5
 800590e:	f00b fa21 	bl	8010d54 <HAL_SUBGHZ_CADStatusCallback>
 8005912:	e7d3      	b.n	80058bc <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005914:	4628      	mov	r0, r5
 8005916:	f00b fa2f 	bl	8010d78 <HAL_SUBGHZ_RxTxTimeoutCallback>
 800591a:	e7d2      	b.n	80058c2 <HAL_SUBGHZ_IRQHandler+0x66>

0800591c <HAL_SUBGHZ_WriteBuffer>:
{
 800591c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005920:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005922:	7980      	ldrb	r0, [r0, #6]
 8005924:	fa5f f880 	uxtb.w	r8, r0
 8005928:	f1b8 0f01 	cmp.w	r8, #1
 800592c:	d138      	bne.n	80059a0 <HAL_SUBGHZ_WriteBuffer+0x84>
 800592e:	460c      	mov	r4, r1
 8005930:	4617      	mov	r7, r2
 8005932:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005934:	796b      	ldrb	r3, [r5, #5]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d035      	beq.n	80059a6 <HAL_SUBGHZ_WriteBuffer+0x8a>
 800593a:	2301      	movs	r3, #1
 800593c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800593e:	4628      	mov	r0, r5
 8005940:	f7ff fe1c 	bl	800557c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005946:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800594a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800594e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005952:	210e      	movs	r1, #14
 8005954:	4628      	mov	r0, r5
 8005956:	f7ff fd69 	bl	800542c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800595a:	4621      	mov	r1, r4
 800595c:	4628      	mov	r0, r5
 800595e:	f7ff fd65 	bl	800542c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005962:	2400      	movs	r4, #0
 8005964:	e005      	b.n	8005972 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005966:	5d39      	ldrb	r1, [r7, r4]
 8005968:	4628      	mov	r0, r5
 800596a:	f7ff fd5f 	bl	800542c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800596e:	3401      	adds	r4, #1
 8005970:	b2a4      	uxth	r4, r4
 8005972:	42b4      	cmp	r4, r6
 8005974:	d3f7      	bcc.n	8005966 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005976:	4a0d      	ldr	r2, [pc, #52]	; (80059ac <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005978:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800597c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005984:	4628      	mov	r0, r5
 8005986:	f7ff fdcd 	bl	8005524 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800598a:	68ab      	ldr	r3, [r5, #8]
 800598c:	b90b      	cbnz	r3, 8005992 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800598e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005992:	2301      	movs	r3, #1
 8005994:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005996:	2300      	movs	r3, #0
 8005998:	716b      	strb	r3, [r5, #5]
}
 800599a:	4640      	mov	r0, r8
 800599c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80059a0:	f04f 0802 	mov.w	r8, #2
 80059a4:	e7f9      	b.n	800599a <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80059a6:	f04f 0802 	mov.w	r8, #2
 80059aa:	e7f6      	b.n	800599a <HAL_SUBGHZ_WriteBuffer+0x7e>
 80059ac:	58000400 	.word	0x58000400

080059b0 <HAL_SUBGHZ_ReadBuffer>:
{
 80059b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80059b6:	7980      	ldrb	r0, [r0, #6]
 80059b8:	fa5f f880 	uxtb.w	r8, r0
 80059bc:	f1b8 0f01 	cmp.w	r8, #1
 80059c0:	d13d      	bne.n	8005a3e <HAL_SUBGHZ_ReadBuffer+0x8e>
 80059c2:	460c      	mov	r4, r1
 80059c4:	4615      	mov	r5, r2
 80059c6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80059c8:	7973      	ldrb	r3, [r6, #5]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d03a      	beq.n	8005a44 <HAL_SUBGHZ_ReadBuffer+0x94>
 80059ce:	2301      	movs	r3, #1
 80059d0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7ff fdd2 	bl	800557c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059d8:	4a1c      	ldr	r2, [pc, #112]	; (8005a4c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80059da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80059e6:	211e      	movs	r1, #30
 80059e8:	4630      	mov	r0, r6
 80059ea:	f7ff fd1f 	bl	800542c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80059ee:	4621      	mov	r1, r4
 80059f0:	4630      	mov	r0, r6
 80059f2:	f7ff fd1b 	bl	800542c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80059f6:	2100      	movs	r1, #0
 80059f8:	4630      	mov	r0, r6
 80059fa:	f7ff fd17 	bl	800542c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059fe:	2400      	movs	r4, #0
 8005a00:	e006      	b.n	8005a10 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005a02:	4629      	mov	r1, r5
 8005a04:	4630      	mov	r0, r6
 8005a06:	f7ff fd4d 	bl	80054a4 <SUBGHZSPI_Receive>
      pData++;
 8005a0a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005a0c:	3401      	adds	r4, #1
 8005a0e:	b2a4      	uxth	r4, r4
 8005a10:	42bc      	cmp	r4, r7
 8005a12:	d3f6      	bcc.n	8005a02 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a14:	4a0d      	ldr	r2, [pc, #52]	; (8005a4c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005a16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a22:	4630      	mov	r0, r6
 8005a24:	f7ff fd7e 	bl	8005524 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a28:	68b3      	ldr	r3, [r6, #8]
 8005a2a:	b90b      	cbnz	r3, 8005a30 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005a2c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a30:	2301      	movs	r3, #1
 8005a32:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005a34:	2300      	movs	r3, #0
 8005a36:	7173      	strb	r3, [r6, #5]
}
 8005a38:	4640      	mov	r0, r8
 8005a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005a3e:	f04f 0802 	mov.w	r8, #2
 8005a42:	e7f9      	b.n	8005a38 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005a44:	f04f 0802 	mov.w	r8, #2
 8005a48:	e7f6      	b.n	8005a38 <HAL_SUBGHZ_ReadBuffer+0x88>
 8005a4a:	bf00      	nop
 8005a4c:	58000400 	.word	0x58000400

08005a50 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005a50:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	e852 3f00 	ldrex	r3, [r2]
 8005a56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	e842 3100 	strex	r1, r3, [r2]
 8005a5e:	2900      	cmp	r1, #0
 8005a60:	d1f6      	bne.n	8005a50 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005a62:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	f102 0308 	add.w	r3, r2, #8
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	3208      	adds	r2, #8
 8005a72:	e842 3100 	strex	r1, r3, [r2]
 8005a76:	2900      	cmp	r1, #0
 8005a78:	d1f3      	bne.n	8005a62 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a7a:	2320      	movs	r3, #32
 8005a7c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8005a80:	4770      	bx	lr

08005a82 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	e852 3f00 	ldrex	r3, [r2]
 8005a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	e842 3100 	strex	r1, r3, [r2]
 8005a90:	2900      	cmp	r1, #0
 8005a92:	d1f6      	bne.n	8005a82 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a94:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	f102 0308 	add.w	r3, r2, #8
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	3208      	adds	r2, #8
 8005aa8:	e842 3100 	strex	r1, r3, [r2]
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d1f1      	bne.n	8005a94 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d006      	beq.n	8005ac4 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	2320      	movs	r3, #32
 8005ab8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005abc:	2300      	movs	r3, #0
 8005abe:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ac0:	6703      	str	r3, [r0, #112]	; 0x70
}
 8005ac2:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	e852 3f00 	ldrex	r3, [r2]
 8005aca:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	e842 3100 	strex	r1, r3, [r2]
 8005ad2:	2900      	cmp	r1, #0
 8005ad4:	d1f6      	bne.n	8005ac4 <UART_EndRxTransfer+0x42>
 8005ad6:	e7ee      	b.n	8005ab6 <UART_EndRxTransfer+0x34>

08005ad8 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8005ad8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d14c      	bne.n	8005b7a <HAL_UART_Transmit_DMA+0xa2>
{
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005ae4:	2900      	cmp	r1, #0
 8005ae6:	d04a      	beq.n	8005b7e <HAL_UART_Transmit_DMA+0xa6>
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	d04a      	beq.n	8005b82 <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8005aec:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d048      	beq.n	8005b86 <HAL_UART_Transmit_DMA+0xae>
 8005af4:	2301      	movs	r3, #1
 8005af6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8005afa:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005afc:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b00:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b0a:	2321      	movs	r3, #33	; 0x21
 8005b0c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8005b10:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005b12:	b1f3      	cbz	r3, 8005b52 <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b14:	491d      	ldr	r1, [pc, #116]	; (8005b8c <HAL_UART_Transmit_DMA+0xb4>)
 8005b16:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b18:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005b1a:	491d      	ldr	r1, [pc, #116]	; (8005b90 <HAL_UART_Transmit_DMA+0xb8>)
 8005b1c:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b1e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005b20:	491c      	ldr	r1, [pc, #112]	; (8005b94 <HAL_UART_Transmit_DMA+0xbc>)
 8005b22:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005b24:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005b26:	2100      	movs	r1, #0
 8005b28:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b2a:	6801      	ldr	r1, [r0, #0]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8005b32:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005b34:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005b36:	f7fd fe0f 	bl	8003758 <HAL_DMA_Start_IT>
 8005b3a:	b150      	cbz	r0, 8005b52 <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8005b42:	2300      	movs	r3, #0
 8005b44:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005b48:	2320      	movs	r3, #32
 8005b4a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8005b4e:	2001      	movs	r0, #1
 8005b50:	e012      	b.n	8005b78 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	2240      	movs	r2, #64	; 0x40
 8005b56:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b5e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	f102 0308 	add.w	r3, r2, #8
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	3208      	adds	r2, #8
 8005b6e:	e842 3100 	strex	r1, r3, [r2]
 8005b72:	2900      	cmp	r1, #0
 8005b74:	d1f3      	bne.n	8005b5e <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8005b76:	2000      	movs	r0, #0
}
 8005b78:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005b7a:	2002      	movs	r0, #2
}
 8005b7c:	4770      	bx	lr
      return HAL_ERROR;
 8005b7e:	2001      	movs	r0, #1
 8005b80:	e7fa      	b.n	8005b78 <HAL_UART_Transmit_DMA+0xa0>
 8005b82:	2001      	movs	r0, #1
 8005b84:	e7f8      	b.n	8005b78 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8005b86:	2002      	movs	r0, #2
 8005b88:	e7f6      	b.n	8005b78 <HAL_UART_Transmit_DMA+0xa0>
 8005b8a:	bf00      	nop
 8005b8c:	08005b99 	.word	0x08005b99
 8005b90:	08005c07 	.word	0x08005c07
 8005b94:	08005c13 	.word	0x08005c13

08005b98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b98:	b508      	push	{r3, lr}
 8005b9a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b9c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f013 0f20 	tst.w	r3, #32
 8005ba6:	d118      	bne.n	8005bda <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	f102 0308 	add.w	r3, r2, #8
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	3208      	adds	r2, #8
 8005bbe:	e842 3100 	strex	r1, r3, [r2]
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	d1f3      	bne.n	8005bae <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bc6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	e852 3f00 	ldrex	r3, [r2]
 8005bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	e842 3100 	strex	r1, r3, [r2]
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	d1f6      	bne.n	8005bc6 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bd8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005bda:	f7fc f951 	bl	8001e80 <HAL_UART_TxCpltCallback>
}
 8005bde:	e7fb      	b.n	8005bd8 <UART_DMATransmitCplt+0x40>

08005be0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005be0:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005be2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	e852 3f00 	ldrex	r3, [r2]
 8005be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	e842 3100 	strex	r1, r3, [r2]
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	d1f6      	bne.n	8005be2 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bf4:	2320      	movs	r3, #32
 8005bf6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bfe:	f7fc f93f 	bl	8001e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c02:	bd08      	pop	{r3, pc}

08005c04 <HAL_UART_TxHalfCpltCallback>:
}
 8005c04:	4770      	bx	lr

08005c06 <UART_DMATxHalfCplt>:
{
 8005c06:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005c08:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005c0a:	f7ff fffb 	bl	8005c04 <HAL_UART_TxHalfCpltCallback>
}
 8005c0e:	bd08      	pop	{r3, pc}

08005c10 <HAL_UART_ErrorCallback>:
}
 8005c10:	4770      	bx	lr

08005c12 <UART_DMAError>:
{
 8005c12:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c14:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c16:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c1a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c26:	d001      	beq.n	8005c2c <UART_DMAError+0x1a>
 8005c28:	2a21      	cmp	r2, #33	; 0x21
 8005c2a:	d010      	beq.n	8005c4e <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c34:	d001      	beq.n	8005c3a <UART_DMAError+0x28>
 8005c36:	2d22      	cmp	r5, #34	; 0x22
 8005c38:	d010      	beq.n	8005c5c <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c3a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005c3e:	f043 0310 	orr.w	r3, r3, #16
 8005c42:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8005c46:	4620      	mov	r0, r4
 8005c48:	f7ff ffe2 	bl	8005c10 <HAL_UART_ErrorCallback>
}
 8005c4c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005c54:	4620      	mov	r0, r4
 8005c56:	f7ff fefb 	bl	8005a50 <UART_EndTxTransfer>
 8005c5a:	e7e7      	b.n	8005c2c <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005c62:	4620      	mov	r0, r4
 8005c64:	f7ff ff0d 	bl	8005a82 <UART_EndRxTransfer>
 8005c68:	e7e7      	b.n	8005c3a <UART_DMAError+0x28>

08005c6a <UART_DMAAbortOnError>:
{
 8005c6a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c6c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005c74:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005c78:	f7ff ffca 	bl	8005c10 <HAL_UART_ErrorCallback>
}
 8005c7c:	bd08      	pop	{r3, pc}

08005c7e <HAL_UARTEx_RxEventCallback>:
}
 8005c7e:	4770      	bx	lr

08005c80 <HAL_UART_IRQHandler>:
{
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c84:	6801      	ldr	r1, [r0, #0]
 8005c86:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c88:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c8a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c8c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005c90:	401a      	ands	r2, r3
 8005c92:	d108      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c94:	f013 0f20 	tst.w	r3, #32
 8005c98:	d005      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c9a:	f010 0f20 	tst.w	r0, #32
 8005c9e:	d134      	bne.n	8005d0a <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ca0:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005ca4:	d131      	bne.n	8005d0a <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005ca6:	b12a      	cbz	r2, 8005cb4 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ca8:	4a95      	ldr	r2, [pc, #596]	; (8005f00 <HAL_UART_IRQHandler+0x280>)
 8005caa:	402a      	ands	r2, r5
 8005cac:	d133      	bne.n	8005d16 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005cae:	4e95      	ldr	r6, [pc, #596]	; (8005f04 <HAL_UART_IRQHandler+0x284>)
 8005cb0:	4230      	tst	r0, r6
 8005cb2:	d130      	bne.n	8005d16 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005cb6:	2a01      	cmp	r2, #1
 8005cb8:	f000 80c3 	beq.w	8005e42 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005cc0:	d003      	beq.n	8005cca <HAL_UART_IRQHandler+0x4a>
 8005cc2:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005cc6:	f040 815b 	bne.w	8005f80 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005cca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cce:	d007      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005cd0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005cd4:	f040 815b 	bne.w	8005f8e <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005cd8:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005cdc:	f040 8157 	bne.w	8005f8e <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ce0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ce4:	d003      	beq.n	8005cee <HAL_UART_IRQHandler+0x6e>
 8005ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cea:	f040 8157 	bne.w	8005f9c <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005cee:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005cf2:	d003      	beq.n	8005cfc <HAL_UART_IRQHandler+0x7c>
 8005cf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005cf8:	f040 8154 	bne.w	8005fa4 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005cfc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005d00:	d002      	beq.n	8005d08 <HAL_UART_IRQHandler+0x88>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	f2c0 8152 	blt.w	8005fac <HAL_UART_IRQHandler+0x32c>
}
 8005d08:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005d0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0fb      	beq.n	8005d08 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005d10:	4620      	mov	r0, r4
 8005d12:	4798      	blx	r3
      return;
 8005d14:	e7f8      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d16:	f013 0f01 	tst.w	r3, #1
 8005d1a:	d009      	beq.n	8005d30 <HAL_UART_IRQHandler+0xb0>
 8005d1c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005d20:	d006      	beq.n	8005d30 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d22:	2601      	movs	r6, #1
 8005d24:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d26:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005d2a:	4331      	orrs	r1, r6
 8005d2c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d30:	f013 0f02 	tst.w	r3, #2
 8005d34:	d00b      	beq.n	8005d4e <HAL_UART_IRQHandler+0xce>
 8005d36:	f015 0f01 	tst.w	r5, #1
 8005d3a:	d008      	beq.n	8005d4e <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d3c:	6821      	ldr	r1, [r4, #0]
 8005d3e:	2602      	movs	r6, #2
 8005d40:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d42:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005d46:	f041 0104 	orr.w	r1, r1, #4
 8005d4a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d4e:	f013 0f04 	tst.w	r3, #4
 8005d52:	d00b      	beq.n	8005d6c <HAL_UART_IRQHandler+0xec>
 8005d54:	f015 0f01 	tst.w	r5, #1
 8005d58:	d008      	beq.n	8005d6c <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d5a:	6821      	ldr	r1, [r4, #0]
 8005d5c:	2604      	movs	r6, #4
 8005d5e:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d60:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005d64:	f041 0102 	orr.w	r1, r1, #2
 8005d68:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d6c:	f013 0f08 	tst.w	r3, #8
 8005d70:	d00b      	beq.n	8005d8a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d72:	f010 0f20 	tst.w	r0, #32
 8005d76:	d100      	bne.n	8005d7a <HAL_UART_IRQHandler+0xfa>
 8005d78:	b13a      	cbz	r2, 8005d8a <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	2108      	movs	r1, #8
 8005d7e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d80:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005d84:	430a      	orrs	r2, r1
 8005d86:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d8a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005d8e:	d00c      	beq.n	8005daa <HAL_UART_IRQHandler+0x12a>
 8005d90:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005d94:	d009      	beq.n	8005daa <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d9c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d9e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005da2:	f042 0220 	orr.w	r2, r2, #32
 8005da6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005daa:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	d0aa      	beq.n	8005d08 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005db2:	f013 0f20 	tst.w	r3, #32
 8005db6:	d009      	beq.n	8005dcc <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005db8:	f010 0f20 	tst.w	r0, #32
 8005dbc:	d102      	bne.n	8005dc4 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dbe:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005dc2:	d003      	beq.n	8005dcc <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005dc4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005dc6:	b10b      	cbz	r3, 8005dcc <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005dcc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dd8:	d102      	bne.n	8005de0 <HAL_UART_IRQHandler+0x160>
 8005dda:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005dde:	d029      	beq.n	8005e34 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005de0:	4620      	mov	r0, r4
 8005de2:	f7ff fe4e 	bl	8005a82 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dee:	d01d      	beq.n	8005e2c <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	f102 0308 	add.w	r3, r2, #8
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	3208      	adds	r2, #8
 8005e00:	e842 3100 	strex	r1, r3, [r2]
 8005e04:	2900      	cmp	r1, #0
 8005e06:	d1f3      	bne.n	8005df0 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005e08:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005e0a:	b15b      	cbz	r3, 8005e24 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e0c:	4a3e      	ldr	r2, [pc, #248]	; (8005f08 <HAL_UART_IRQHandler+0x288>)
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e10:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005e12:	f7fd fd27 	bl	8003864 <HAL_DMA_Abort_IT>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f43f af76 	beq.w	8005d08 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e1c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005e1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005e20:	4798      	blx	r3
 8005e22:	e771      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005e24:	4620      	mov	r0, r4
 8005e26:	f7ff fef3 	bl	8005c10 <HAL_UART_ErrorCallback>
 8005e2a:	e76d      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f7ff feef 	bl	8005c10 <HAL_UART_ErrorCallback>
 8005e32:	e769      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005e34:	4620      	mov	r0, r4
 8005e36:	f7ff feeb 	bl	8005c10 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005e40:	e762      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005e42:	f013 0f10 	tst.w	r3, #16
 8005e46:	f43f af39 	beq.w	8005cbc <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005e4a:	f010 0f10 	tst.w	r0, #16
 8005e4e:	f43f af35 	beq.w	8005cbc <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e52:	2310      	movs	r3, #16
 8005e54:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e5e:	d055      	beq.n	8005f0c <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e60:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f43f af4d 	beq.w	8005d08 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005e6e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005e72:	4299      	cmp	r1, r3
 8005e74:	f67f af48 	bls.w	8005d08 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005e78:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e7c:	6813      	ldr	r3, [r2, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f013 0f20 	tst.w	r3, #32
 8005e84:	d131      	bne.n	8005eea <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	e852 3f00 	ldrex	r3, [r2]
 8005e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	e842 3100 	strex	r1, r3, [r2]
 8005e94:	2900      	cmp	r1, #0
 8005e96:	d1f6      	bne.n	8005e86 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	f102 0308 	add.w	r3, r2, #8
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	3208      	adds	r2, #8
 8005ea8:	e842 3100 	strex	r1, r3, [r2]
 8005eac:	2900      	cmp	r1, #0
 8005eae:	d1f3      	bne.n	8005e98 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	f102 0308 	add.w	r3, r2, #8
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	3208      	adds	r2, #8
 8005ec0:	e842 3100 	strex	r1, r3, [r2]
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d1f3      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	2320      	movs	r3, #32
 8005eca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	e852 3f00 	ldrex	r3, [r2]
 8005ed8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	e842 3100 	strex	r1, r3, [r2]
 8005ee0:	2900      	cmp	r1, #0
 8005ee2:	d1f6      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ee4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005ee6:	f7fd fc83 	bl	80037f0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005eee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	1ac9      	subs	r1, r1, r3
 8005ef6:	b289      	uxth	r1, r1
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7ff fec0 	bl	8005c7e <HAL_UARTEx_RxEventCallback>
      return;
 8005efe:	e703      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
 8005f00:	10000001 	.word	0x10000001
 8005f04:	04000120 	.word	0x04000120
 8005f08:	08005c6b 	.word	0x08005c6b
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f0c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005f10:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	1ac9      	subs	r1, r1, r3
 8005f18:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8005f1a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f43f aef1 	beq.w	8005d08 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8005f26:	2900      	cmp	r1, #0
 8005f28:	f43f aeee 	beq.w	8005d08 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f2c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	e852 3f00 	ldrex	r3, [r2]
 8005f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	e842 3000 	strex	r0, r3, [r2]
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d1f6      	bne.n	8005f2c <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f3e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	f102 0308 	add.w	r3, r2, #8
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	3208      	adds	r2, #8
 8005f52:	e842 3000 	strex	r0, r3, [r2]
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d1f1      	bne.n	8005f3e <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	2320      	movs	r3, #32
 8005f5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f60:	2300      	movs	r3, #0
 8005f62:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005f64:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f66:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	e852 3f00 	ldrex	r3, [r2]
 8005f6c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	e842 3000 	strex	r0, r3, [r2]
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d1f6      	bne.n	8005f66 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7ff fe80 	bl	8005c7e <HAL_UARTEx_RxEventCallback>
      return;
 8005f7e:	e6c3      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f84:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 fe1c 	bl	8006bc4 <HAL_UARTEx_WakeupCallback>
    return;
 8005f8c:	e6bc      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005f8e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f43f aeb9 	beq.w	8005d08 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005f96:	4620      	mov	r0, r4
 8005f98:	4798      	blx	r3
    return;
 8005f9a:	e6b5      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff fe1f 	bl	8005be0 <UART_EndTransmit_IT>
    return;
 8005fa2:	e6b1      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f000 fe0f 	bl	8006bc8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005faa:	e6ad      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 fe0a 	bl	8006bc6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005fb2:	e6a9      	b.n	8005d08 <HAL_UART_IRQHandler+0x88>

08005fb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fb4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8005fb6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fba:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005fbe:	2a22      	cmp	r2, #34	; 0x22
 8005fc0:	d005      	beq.n	8005fce <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fc2:	6802      	ldr	r2, [r0, #0]
 8005fc4:	6993      	ldr	r3, [r2, #24]
 8005fc6:	f043 0308 	orr.w	r3, r3, #8
 8005fca:	6193      	str	r3, [r2, #24]
  }
}
 8005fcc:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fce:	6802      	ldr	r2, [r0, #0]
 8005fd0:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005fd6:	400b      	ands	r3, r1
 8005fd8:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005fda:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005fdc:	3301      	adds	r3, #1
 8005fde:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005fe0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005fee:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e9      	bne.n	8005fcc <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ff8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	e852 3f00 	ldrex	r3, [r2]
 8005ffe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	e842 3100 	strex	r1, r3, [r2]
 8006006:	2900      	cmp	r1, #0
 8006008:	d1f6      	bne.n	8005ff8 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	f102 0308 	add.w	r3, r2, #8
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	3208      	adds	r2, #8
 800601a:	e842 3100 	strex	r1, r3, [r2]
 800601e:	2900      	cmp	r1, #0
 8006020:	d1f3      	bne.n	800600a <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8006022:	2320      	movs	r3, #32
 8006024:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d116      	bne.n	8006060 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006032:	2300      	movs	r3, #0
 8006034:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006036:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	e852 3f00 	ldrex	r3, [r2]
 800603c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	e842 3100 	strex	r1, r3, [r2]
 8006044:	2900      	cmp	r1, #0
 8006046:	d1f6      	bne.n	8006036 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006048:	6803      	ldr	r3, [r0, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	f012 0f10 	tst.w	r2, #16
 8006050:	d001      	beq.n	8006056 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006052:	2210      	movs	r2, #16
 8006054:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006056:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800605a:	f7ff fe10 	bl	8005c7e <HAL_UARTEx_RxEventCallback>
 800605e:	e7b5      	b.n	8005fcc <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006060:	f7fb ff1e 	bl	8001ea0 <HAL_UART_RxCpltCallback>
 8006064:	e7b2      	b.n	8005fcc <UART_RxISR_8BIT+0x18>

08006066 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006066:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006068:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800606c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006070:	2b22      	cmp	r3, #34	; 0x22
 8006072:	d005      	beq.n	8006080 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006074:	6802      	ldr	r2, [r0, #0]
 8006076:	6993      	ldr	r3, [r2, #24]
 8006078:	f043 0308 	orr.w	r3, r3, #8
 800607c:	6193      	str	r3, [r2, #24]
  }
}
 800607e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006080:	6803      	ldr	r3, [r0, #0]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006084:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006086:	4013      	ands	r3, r2
 8006088:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800608a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800608c:	3302      	adds	r3, #2
 800608e:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006090:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29b      	uxth	r3, r3
 800609a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800609e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1ea      	bne.n	800607e <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060a8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	e852 3f00 	ldrex	r3, [r2]
 80060ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	e842 3100 	strex	r1, r3, [r2]
 80060b6:	2900      	cmp	r1, #0
 80060b8:	d1f6      	bne.n	80060a8 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	f102 0308 	add.w	r3, r2, #8
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	3208      	adds	r2, #8
 80060ca:	e842 3100 	strex	r1, r3, [r2]
 80060ce:	2900      	cmp	r1, #0
 80060d0:	d1f3      	bne.n	80060ba <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80060d2:	2320      	movs	r3, #32
 80060d4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060dc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d116      	bne.n	8006110 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e2:	2300      	movs	r3, #0
 80060e4:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	e852 3f00 	ldrex	r3, [r2]
 80060ec:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	e842 3100 	strex	r1, r3, [r2]
 80060f4:	2900      	cmp	r1, #0
 80060f6:	d1f6      	bne.n	80060e6 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060f8:	6803      	ldr	r3, [r0, #0]
 80060fa:	69da      	ldr	r2, [r3, #28]
 80060fc:	f012 0f10 	tst.w	r2, #16
 8006100:	d001      	beq.n	8006106 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006102:	2210      	movs	r2, #16
 8006104:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006106:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800610a:	f7ff fdb8 	bl	8005c7e <HAL_UARTEx_RxEventCallback>
 800610e:	e7b6      	b.n	800607e <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006110:	f7fb fec6 	bl	8001ea0 <HAL_UART_RxCpltCallback>
 8006114:	e7b3      	b.n	800607e <UART_RxISR_16BIT+0x18>
	...

08006118 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800611c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006120:	6803      	ldr	r3, [r0, #0]
 8006122:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006124:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006128:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800612c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006130:	2a22      	cmp	r2, #34	; 0x22
 8006132:	d005      	beq.n	8006140 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	f042 0208 	orr.w	r2, r2, #8
 800613a:	619a      	str	r2, [r3, #24]
  }
}
 800613c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006140:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006142:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006146:	e008      	b.n	800615a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006148:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d14c      	bne.n	80061ea <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8006150:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d04e      	beq.n	80061f8 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800615a:	2f00      	cmp	r7, #0
 800615c:	f000 8087 	beq.w	800626e <UART_RxISR_8BIT_FIFOEN+0x156>
 8006160:	f015 0f20 	tst.w	r5, #32
 8006164:	f000 8083 	beq.w	800626e <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800616c:	b2f3      	uxtb	r3, r6
 800616e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006170:	400b      	ands	r3, r1
 8006172:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006174:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006176:	3301      	adds	r3, #1
 8006178:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800617a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29b      	uxth	r3, r3
 8006184:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800618c:	f015 0f07 	tst.w	r5, #7
 8006190:	d0de      	beq.n	8006150 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006192:	f015 0f01 	tst.w	r5, #1
 8006196:	d009      	beq.n	80061ac <UART_RxISR_8BIT_FIFOEN+0x94>
 8006198:	f419 7f80 	tst.w	r9, #256	; 0x100
 800619c:	d006      	beq.n	80061ac <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800619e:	2201      	movs	r2, #1
 80061a0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061a2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061ac:	f015 0f02 	tst.w	r5, #2
 80061b0:	d00b      	beq.n	80061ca <UART_RxISR_8BIT_FIFOEN+0xb2>
 80061b2:	f018 0f01 	tst.w	r8, #1
 80061b6:	d008      	beq.n	80061ca <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	2202      	movs	r2, #2
 80061bc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061be:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80061c2:	f043 0304 	orr.w	r3, r3, #4
 80061c6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061ca:	f015 0f04 	tst.w	r5, #4
 80061ce:	d0bb      	beq.n	8006148 <UART_RxISR_8BIT_FIFOEN+0x30>
 80061d0:	f018 0f01 	tst.w	r8, #1
 80061d4:	d0b8      	beq.n	8006148 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	2204      	movs	r2, #4
 80061da:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061dc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80061e0:	f043 0302 	orr.w	r3, r3, #2
 80061e4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80061e8:	e7ae      	b.n	8006148 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80061ea:	4620      	mov	r0, r4
 80061ec:	f7ff fd10 	bl	8005c10 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80061f6:	e7ab      	b.n	8006150 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	e852 3f00 	ldrex	r3, [r2]
 80061fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	e842 3100 	strex	r1, r3, [r2]
 8006206:	2900      	cmp	r1, #0
 8006208:	d1f6      	bne.n	80061f8 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800620a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	f102 0308 	add.w	r3, r2, #8
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006218:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	3208      	adds	r2, #8
 800621e:	e842 3100 	strex	r1, r3, [r2]
 8006222:	2900      	cmp	r1, #0
 8006224:	d1f1      	bne.n	800620a <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8006226:	2320      	movs	r3, #32
 8006228:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800622c:	2300      	movs	r3, #0
 800622e:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006230:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006232:	2b01      	cmp	r3, #1
 8006234:	d003      	beq.n	800623e <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8006236:	4620      	mov	r0, r4
 8006238:	f7fb fe32 	bl	8001ea0 <HAL_UART_RxCpltCallback>
 800623c:	e78d      	b.n	800615a <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623e:	2300      	movs	r3, #0
 8006240:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006242:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	e852 3f00 	ldrex	r3, [r2]
 8006248:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	e842 3100 	strex	r1, r3, [r2]
 8006250:	2900      	cmp	r1, #0
 8006252:	d1f6      	bne.n	8006242 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	f012 0f10 	tst.w	r2, #16
 800625c:	d001      	beq.n	8006262 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800625e:	2210      	movs	r2, #16
 8006260:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006262:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006266:	4620      	mov	r0, r4
 8006268:	f7ff fd09 	bl	8005c7e <HAL_UARTEx_RxEventCallback>
 800626c:	e775      	b.n	800615a <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800626e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006272:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006274:	2b00      	cmp	r3, #0
 8006276:	f43f af61 	beq.w	800613c <UART_RxISR_8BIT_FIFOEN+0x24>
 800627a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800627e:	429a      	cmp	r2, r3
 8006280:	f67f af5c 	bls.w	800613c <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006284:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	f102 0308 	add.w	r3, r2, #8
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	3208      	adds	r2, #8
 8006294:	e842 3100 	strex	r1, r3, [r2]
 8006298:	2900      	cmp	r1, #0
 800629a:	d1f3      	bne.n	8006284 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 800629c:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800629e:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	e852 3f00 	ldrex	r3, [r2]
 80062a6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	e842 3100 	strex	r1, r3, [r2]
 80062ae:	2900      	cmp	r1, #0
 80062b0:	d1f6      	bne.n	80062a0 <UART_RxISR_8BIT_FIFOEN+0x188>
 80062b2:	e743      	b.n	800613c <UART_RxISR_8BIT_FIFOEN+0x24>
 80062b4:	08005fb5 	.word	0x08005fb5

080062b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80062b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80062bc:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80062c0:	6803      	ldr	r3, [r0, #0]
 80062c2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80062c4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80062c8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062cc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80062d0:	2a22      	cmp	r2, #34	; 0x22
 80062d2:	d005      	beq.n	80062e0 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	f042 0208 	orr.w	r2, r2, #8
 80062da:	619a      	str	r2, [r3, #24]
  }
}
 80062dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80062e2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062e6:	e008      	b.n	80062fa <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d14b      	bne.n	8006388 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80062f0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d04d      	beq.n	8006396 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062fa:	2f00      	cmp	r7, #0
 80062fc:	f000 8086 	beq.w	800640c <UART_RxISR_16BIT_FIFOEN+0x154>
 8006300:	f015 0f20 	tst.w	r5, #32
 8006304:	f000 8082 	beq.w	800640c <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800630c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800630e:	4033      	ands	r3, r6
 8006310:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006312:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006314:	3302      	adds	r3, #2
 8006316:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006318:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29b      	uxth	r3, r3
 8006322:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800632a:	f015 0f07 	tst.w	r5, #7
 800632e:	d0df      	beq.n	80062f0 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006330:	f015 0f01 	tst.w	r5, #1
 8006334:	d009      	beq.n	800634a <UART_RxISR_16BIT_FIFOEN+0x92>
 8006336:	f419 7f80 	tst.w	r9, #256	; 0x100
 800633a:	d006      	beq.n	800634a <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800633c:	2201      	movs	r2, #1
 800633e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006340:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800634a:	f015 0f02 	tst.w	r5, #2
 800634e:	d00b      	beq.n	8006368 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8006350:	f018 0f01 	tst.w	r8, #1
 8006354:	d008      	beq.n	8006368 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	2202      	movs	r2, #2
 800635a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800635c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006360:	f043 0304 	orr.w	r3, r3, #4
 8006364:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006368:	f015 0f04 	tst.w	r5, #4
 800636c:	d0bc      	beq.n	80062e8 <UART_RxISR_16BIT_FIFOEN+0x30>
 800636e:	f018 0f01 	tst.w	r8, #1
 8006372:	d0b9      	beq.n	80062e8 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	2204      	movs	r2, #4
 8006378:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800637a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800637e:	f043 0302 	orr.w	r3, r3, #2
 8006382:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006386:	e7af      	b.n	80062e8 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006388:	4620      	mov	r0, r4
 800638a:	f7ff fc41 	bl	8005c10 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638e:	2300      	movs	r3, #0
 8006390:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006394:	e7ac      	b.n	80062f0 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006396:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	e852 3f00 	ldrex	r3, [r2]
 800639c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	e842 3100 	strex	r1, r3, [r2]
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d1f6      	bne.n	8006396 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	f102 0308 	add.w	r3, r2, #8
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063b6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	3208      	adds	r2, #8
 80063bc:	e842 3100 	strex	r1, r3, [r2]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	d1f1      	bne.n	80063a8 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80063c4:	2320      	movs	r3, #32
 80063c6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d003      	beq.n	80063dc <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 80063d4:	4620      	mov	r0, r4
 80063d6:	f7fb fd63 	bl	8001ea0 <HAL_UART_RxCpltCallback>
 80063da:	e78e      	b.n	80062fa <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063dc:	2300      	movs	r3, #0
 80063de:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	e852 3f00 	ldrex	r3, [r2]
 80063e6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	e842 3100 	strex	r1, r3, [r2]
 80063ee:	2900      	cmp	r1, #0
 80063f0:	d1f6      	bne.n	80063e0 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	f012 0f10 	tst.w	r2, #16
 80063fa:	d001      	beq.n	8006400 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063fc:	2210      	movs	r2, #16
 80063fe:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006400:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006404:	4620      	mov	r0, r4
 8006406:	f7ff fc3a 	bl	8005c7e <HAL_UARTEx_RxEventCallback>
 800640a:	e776      	b.n	80062fa <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800640c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006410:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006412:	2b00      	cmp	r3, #0
 8006414:	f43f af62 	beq.w	80062dc <UART_RxISR_16BIT_FIFOEN+0x24>
 8006418:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800641c:	429a      	cmp	r2, r3
 800641e:	f67f af5d 	bls.w	80062dc <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006422:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	f102 0308 	add.w	r3, r2, #8
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	3208      	adds	r2, #8
 8006432:	e842 3100 	strex	r1, r3, [r2]
 8006436:	2900      	cmp	r1, #0
 8006438:	d1f3      	bne.n	8006422 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 800643c:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800643e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	e852 3f00 	ldrex	r3, [r2]
 8006444:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	e842 3100 	strex	r1, r3, [r2]
 800644c:	2900      	cmp	r1, #0
 800644e:	d1f6      	bne.n	800643e <UART_RxISR_16BIT_FIFOEN+0x186>
 8006450:	e744      	b.n	80062dc <UART_RxISR_16BIT_FIFOEN+0x24>
 8006452:	bf00      	nop
 8006454:	08006067 	.word	0x08006067

08006458 <UART_SetConfig>:
{
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800645c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800645e:	6883      	ldr	r3, [r0, #8]
 8006460:	6902      	ldr	r2, [r0, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	6942      	ldr	r2, [r0, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	69c2      	ldr	r2, [r0, #28]
 800646a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800646c:	6808      	ldr	r0, [r1, #0]
 800646e:	4a9d      	ldr	r2, [pc, #628]	; (80066e4 <UART_SetConfig+0x28c>)
 8006470:	4002      	ands	r2, r0
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	6853      	ldr	r3, [r2, #4]
 800647a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800647e:	68e1      	ldr	r1, [r4, #12]
 8006480:	430b      	orrs	r3, r1
 8006482:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006484:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	4b97      	ldr	r3, [pc, #604]	; (80066e8 <UART_SetConfig+0x290>)
 800648a:	429a      	cmp	r2, r3
 800648c:	d001      	beq.n	8006492 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800648e:	6a23      	ldr	r3, [r4, #32]
 8006490:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006492:	6893      	ldr	r3, [r2, #8]
 8006494:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006498:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800649c:	430b      	orrs	r3, r1
 800649e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064a0:	6822      	ldr	r2, [r4, #0]
 80064a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80064a4:	f023 030f 	bic.w	r3, r3, #15
 80064a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064aa:	430b      	orrs	r3, r1
 80064ac:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	4a8e      	ldr	r2, [pc, #568]	; (80066ec <UART_SetConfig+0x294>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01c      	beq.n	80064f0 <UART_SetConfig+0x98>
 80064b6:	4a8e      	ldr	r2, [pc, #568]	; (80066f0 <UART_SetConfig+0x298>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d031      	beq.n	8006520 <UART_SetConfig+0xc8>
 80064bc:	4a8a      	ldr	r2, [pc, #552]	; (80066e8 <UART_SetConfig+0x290>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d04b      	beq.n	800655a <UART_SetConfig+0x102>
 80064c2:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80064c4:	4988      	ldr	r1, [pc, #544]	; (80066e8 <UART_SetConfig+0x290>)
 80064c6:	428b      	cmp	r3, r1
 80064c8:	d068      	beq.n	800659c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ca:	69e0      	ldr	r0, [r4, #28]
 80064cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80064d0:	f000 80a5 	beq.w	800661e <UART_SetConfig+0x1c6>
    switch (clocksource)
 80064d4:	2a08      	cmp	r2, #8
 80064d6:	f200 811f 	bhi.w	8006718 <UART_SetConfig+0x2c0>
 80064da:	e8df f012 	tbh	[pc, r2, lsl #1]
 80064de:	00d3      	.short	0x00d3
 80064e0:	00d100f5 	.word	0x00d100f5
 80064e4:	00f8011d 	.word	0x00f8011d
 80064e8:	011d011d 	.word	0x011d011d
 80064ec:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80064f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064f4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80064f8:	f002 0203 	and.w	r2, r2, #3
 80064fc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006500:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8006504:	2a03      	cmp	r2, #3
 8006506:	d809      	bhi.n	800651c <UART_SetConfig+0xc4>
 8006508:	e8df f002 	tbb	[pc, r2]
 800650c:	063c0402 	.word	0x063c0402
 8006510:	2201      	movs	r2, #1
 8006512:	e7d7      	b.n	80064c4 <UART_SetConfig+0x6c>
 8006514:	2204      	movs	r2, #4
 8006516:	e7d5      	b.n	80064c4 <UART_SetConfig+0x6c>
 8006518:	2208      	movs	r2, #8
 800651a:	e7d3      	b.n	80064c4 <UART_SetConfig+0x6c>
 800651c:	2210      	movs	r2, #16
 800651e:	e7d1      	b.n	80064c4 <UART_SetConfig+0x6c>
 8006520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006524:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006528:	f002 020c 	and.w	r2, r2, #12
 800652c:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8006530:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8006534:	2a0c      	cmp	r2, #12
 8006536:	d80e      	bhi.n	8006556 <UART_SetConfig+0xfe>
 8006538:	e8df f002 	tbb	[pc, r2]
 800653c:	0d0d0d07 	.word	0x0d0d0d07
 8006540:	0d0d0d09 	.word	0x0d0d0d09
 8006544:	0d0d0d26 	.word	0x0d0d0d26
 8006548:	0b          	.byte	0x0b
 8006549:	00          	.byte	0x00
 800654a:	2200      	movs	r2, #0
 800654c:	e7ba      	b.n	80064c4 <UART_SetConfig+0x6c>
 800654e:	2204      	movs	r2, #4
 8006550:	e7b8      	b.n	80064c4 <UART_SetConfig+0x6c>
 8006552:	2208      	movs	r2, #8
 8006554:	e7b6      	b.n	80064c4 <UART_SetConfig+0x6c>
 8006556:	2210      	movs	r2, #16
 8006558:	e7b4      	b.n	80064c4 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800655a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800655e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006562:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006566:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800656a:	d00f      	beq.n	800658c <UART_SetConfig+0x134>
 800656c:	d805      	bhi.n	800657a <UART_SetConfig+0x122>
 800656e:	b17a      	cbz	r2, 8006590 <UART_SetConfig+0x138>
 8006570:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006574:	d10e      	bne.n	8006594 <UART_SetConfig+0x13c>
 8006576:	2204      	movs	r2, #4
 8006578:	e7a4      	b.n	80064c4 <UART_SetConfig+0x6c>
 800657a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800657e:	d10b      	bne.n	8006598 <UART_SetConfig+0x140>
 8006580:	2208      	movs	r2, #8
 8006582:	e79f      	b.n	80064c4 <UART_SetConfig+0x6c>
 8006584:	2202      	movs	r2, #2
 8006586:	e79d      	b.n	80064c4 <UART_SetConfig+0x6c>
 8006588:	2202      	movs	r2, #2
 800658a:	e79b      	b.n	80064c4 <UART_SetConfig+0x6c>
 800658c:	2202      	movs	r2, #2
 800658e:	e799      	b.n	80064c4 <UART_SetConfig+0x6c>
 8006590:	2200      	movs	r2, #0
 8006592:	e797      	b.n	80064c4 <UART_SetConfig+0x6c>
 8006594:	2210      	movs	r2, #16
 8006596:	e795      	b.n	80064c4 <UART_SetConfig+0x6c>
 8006598:	2210      	movs	r2, #16
 800659a:	e793      	b.n	80064c4 <UART_SetConfig+0x6c>
    switch (clocksource)
 800659c:	2a08      	cmp	r2, #8
 800659e:	f200 809c 	bhi.w	80066da <UART_SetConfig+0x282>
 80065a2:	e8df f002 	tbb	[pc, r2]
 80065a6:	9a08      	.short	0x9a08
 80065a8:	9a379a3a 	.word	0x9a379a3a
 80065ac:	9a9a      	.short	0x9a9a
 80065ae:	05          	.byte	0x05
 80065af:	00          	.byte	0x00
 80065b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80065b4:	e004      	b.n	80065c0 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b6:	f7fe fb0f 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80065ba:	2800      	cmp	r0, #0
 80065bc:	f000 808f 	beq.w	80066de <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065c2:	4b4c      	ldr	r3, [pc, #304]	; (80066f4 <UART_SetConfig+0x29c>)
 80065c4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80065c8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065cc:	6865      	ldr	r5, [r4, #4]
 80065ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80065d2:	4299      	cmp	r1, r3
 80065d4:	f200 8094 	bhi.w	8006700 <UART_SetConfig+0x2a8>
 80065d8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80065dc:	f200 8092 	bhi.w	8006704 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065e0:	2600      	movs	r6, #0
 80065e2:	4633      	mov	r3, r6
 80065e4:	4631      	mov	r1, r6
 80065e6:	f7fa fadf 	bl	8000ba8 <__aeabi_uldivmod>
 80065ea:	0209      	lsls	r1, r1, #8
 80065ec:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80065f0:	0200      	lsls	r0, r0, #8
 80065f2:	086b      	lsrs	r3, r5, #1
 80065f4:	18c0      	adds	r0, r0, r3
 80065f6:	462a      	mov	r2, r5
 80065f8:	4633      	mov	r3, r6
 80065fa:	f141 0100 	adc.w	r1, r1, #0
 80065fe:	f7fa fad3 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006602:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006606:	4b3c      	ldr	r3, [pc, #240]	; (80066f8 <UART_SetConfig+0x2a0>)
 8006608:	429a      	cmp	r2, r3
 800660a:	d87d      	bhi.n	8006708 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	60d8      	str	r0, [r3, #12]
 8006610:	4630      	mov	r0, r6
 8006612:	e050      	b.n	80066b6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006614:	f7fd fdd8 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
        break;
 8006618:	e7cf      	b.n	80065ba <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800661a:	4838      	ldr	r0, [pc, #224]	; (80066fc <UART_SetConfig+0x2a4>)
 800661c:	e7d0      	b.n	80065c0 <UART_SetConfig+0x168>
    switch (clocksource)
 800661e:	2a08      	cmp	r2, #8
 8006620:	d874      	bhi.n	800670c <UART_SetConfig+0x2b4>
 8006622:	e8df f002 	tbb	[pc, r2]
 8006626:	2707      	.short	0x2707
 8006628:	732a7305 	.word	0x732a7305
 800662c:	7373      	.short	0x7373
 800662e:	0b          	.byte	0x0b
 800662f:	00          	.byte	0x00
 8006630:	4832      	ldr	r0, [pc, #200]	; (80066fc <UART_SetConfig+0x2a4>)
 8006632:	e003      	b.n	800663c <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006634:	f7fe fad0 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006638:	2800      	cmp	r0, #0
 800663a:	d069      	beq.n	8006710 <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800663c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800663e:	4b2d      	ldr	r3, [pc, #180]	; (80066f4 <UART_SetConfig+0x29c>)
 8006640:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006644:	fbb0 f0f3 	udiv	r0, r0, r3
 8006648:	6862      	ldr	r2, [r4, #4]
 800664a:	0853      	lsrs	r3, r2, #1
 800664c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006650:	fbb0 f0f2 	udiv	r0, r0, r2
 8006654:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006656:	f1a0 0210 	sub.w	r2, r0, #16
 800665a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800665e:	429a      	cmp	r2, r3
 8006660:	d858      	bhi.n	8006714 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006662:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006666:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800666a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	60d8      	str	r0, [r3, #12]
 8006670:	2000      	movs	r0, #0
 8006672:	e020      	b.n	80066b6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006674:	f7fe fac0 	bl	8004bf8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006678:	e7de      	b.n	8006638 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800667a:	f7fd fda5 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
        break;
 800667e:	e7db      	b.n	8006638 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8006680:	481e      	ldr	r0, [pc, #120]	; (80066fc <UART_SetConfig+0x2a4>)
 8006682:	e003      	b.n	800668c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006684:	f7fe faa8 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006688:	2800      	cmp	r0, #0
 800668a:	d047      	beq.n	800671c <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800668c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800668e:	4b19      	ldr	r3, [pc, #100]	; (80066f4 <UART_SetConfig+0x29c>)
 8006690:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006694:	fbb0 f0f3 	udiv	r0, r0, r3
 8006698:	6863      	ldr	r3, [r4, #4]
 800669a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800669e:	fbb0 f0f3 	udiv	r0, r0, r3
 80066a2:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066a4:	f1a0 0210 	sub.w	r2, r0, #16
 80066a8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d837      	bhi.n	8006720 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	60d8      	str	r0, [r3, #12]
 80066b4:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066bc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80066c4:	6763      	str	r3, [r4, #116]	; 0x74
}
 80066c6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c8:	f7fe fa96 	bl	8004bf8 <HAL_RCC_GetPCLK2Freq>
        break;
 80066cc:	e7dc      	b.n	8006688 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80066ce:	f7fd fd7b 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
        break;
 80066d2:	e7d9      	b.n	8006688 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80066d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80066d8:	e7d8      	b.n	800668c <UART_SetConfig+0x234>
    switch (clocksource)
 80066da:	2001      	movs	r0, #1
 80066dc:	e7eb      	b.n	80066b6 <UART_SetConfig+0x25e>
 80066de:	2000      	movs	r0, #0
 80066e0:	e7e9      	b.n	80066b6 <UART_SetConfig+0x25e>
 80066e2:	bf00      	nop
 80066e4:	cfff69f3 	.word	0xcfff69f3
 80066e8:	40008000 	.word	0x40008000
 80066ec:	40013800 	.word	0x40013800
 80066f0:	40004400 	.word	0x40004400
 80066f4:	080122fc 	.word	0x080122fc
 80066f8:	000ffcff 	.word	0x000ffcff
 80066fc:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8006700:	2001      	movs	r0, #1
 8006702:	e7d8      	b.n	80066b6 <UART_SetConfig+0x25e>
 8006704:	2001      	movs	r0, #1
 8006706:	e7d6      	b.n	80066b6 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006708:	2001      	movs	r0, #1
 800670a:	e7d4      	b.n	80066b6 <UART_SetConfig+0x25e>
    switch (clocksource)
 800670c:	2001      	movs	r0, #1
 800670e:	e7d2      	b.n	80066b6 <UART_SetConfig+0x25e>
 8006710:	2000      	movs	r0, #0
 8006712:	e7d0      	b.n	80066b6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006714:	2001      	movs	r0, #1
 8006716:	e7ce      	b.n	80066b6 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006718:	2001      	movs	r0, #1
 800671a:	e7cc      	b.n	80066b6 <UART_SetConfig+0x25e>
 800671c:	2000      	movs	r0, #0
 800671e:	e7ca      	b.n	80066b6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006720:	2001      	movs	r0, #1
 8006722:	e7c8      	b.n	80066b6 <UART_SetConfig+0x25e>

08006724 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006724:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006726:	f013 0f01 	tst.w	r3, #1
 800672a:	d006      	beq.n	800673a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800672c:	6802      	ldr	r2, [r0, #0]
 800672e:	6853      	ldr	r3, [r2, #4]
 8006730:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006734:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006736:	430b      	orrs	r3, r1
 8006738:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800673a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800673c:	f013 0f02 	tst.w	r3, #2
 8006740:	d006      	beq.n	8006750 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006742:	6802      	ldr	r2, [r0, #0]
 8006744:	6853      	ldr	r3, [r2, #4]
 8006746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800674a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800674c:	430b      	orrs	r3, r1
 800674e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006750:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006752:	f013 0f04 	tst.w	r3, #4
 8006756:	d006      	beq.n	8006766 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006758:	6802      	ldr	r2, [r0, #0]
 800675a:	6853      	ldr	r3, [r2, #4]
 800675c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006760:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006762:	430b      	orrs	r3, r1
 8006764:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006766:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006768:	f013 0f08 	tst.w	r3, #8
 800676c:	d006      	beq.n	800677c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800676e:	6802      	ldr	r2, [r0, #0]
 8006770:	6853      	ldr	r3, [r2, #4]
 8006772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006776:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006778:	430b      	orrs	r3, r1
 800677a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800677c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800677e:	f013 0f10 	tst.w	r3, #16
 8006782:	d006      	beq.n	8006792 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006784:	6802      	ldr	r2, [r0, #0]
 8006786:	6893      	ldr	r3, [r2, #8]
 8006788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800678c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800678e:	430b      	orrs	r3, r1
 8006790:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006792:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006794:	f013 0f20 	tst.w	r3, #32
 8006798:	d006      	beq.n	80067a8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800679a:	6802      	ldr	r2, [r0, #0]
 800679c:	6893      	ldr	r3, [r2, #8]
 800679e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80067a4:	430b      	orrs	r3, r1
 80067a6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80067aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80067ae:	d00a      	beq.n	80067c6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b0:	6802      	ldr	r2, [r0, #0]
 80067b2:	6853      	ldr	r3, [r2, #4]
 80067b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067b8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80067ba:	430b      	orrs	r3, r1
 80067bc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80067c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c4:	d00b      	beq.n	80067de <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80067c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067cc:	d006      	beq.n	80067dc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ce:	6802      	ldr	r2, [r0, #0]
 80067d0:	6853      	ldr	r3, [r2, #4]
 80067d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80067d6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80067d8:	430b      	orrs	r3, r1
 80067da:	6053      	str	r3, [r2, #4]
}
 80067dc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067de:	6802      	ldr	r2, [r0, #0]
 80067e0:	6853      	ldr	r3, [r2, #4]
 80067e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80067e6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80067e8:	430b      	orrs	r3, r1
 80067ea:	6053      	str	r3, [r2, #4]
 80067ec:	e7eb      	b.n	80067c6 <UART_AdvFeatureConfig+0xa2>

080067ee <UART_WaitOnFlagUntilTimeout>:
{
 80067ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f2:	4605      	mov	r5, r0
 80067f4:	460f      	mov	r7, r1
 80067f6:	4616      	mov	r6, r2
 80067f8:	4699      	mov	r9, r3
 80067fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067fe:	682c      	ldr	r4, [r5, #0]
 8006800:	69e4      	ldr	r4, [r4, #28]
 8006802:	ea37 0304 	bics.w	r3, r7, r4
 8006806:	bf0c      	ite	eq
 8006808:	f04f 0c01 	moveq.w	ip, #1
 800680c:	f04f 0c00 	movne.w	ip, #0
 8006810:	45b4      	cmp	ip, r6
 8006812:	d157      	bne.n	80068c4 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8006814:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006818:	d0f1      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681a:	f7fb f83d 	bl	8001898 <HAL_GetTick>
 800681e:	eba0 0009 	sub.w	r0, r0, r9
 8006822:	4540      	cmp	r0, r8
 8006824:	d82f      	bhi.n	8006886 <UART_WaitOnFlagUntilTimeout+0x98>
 8006826:	f1b8 0f00 	cmp.w	r8, #0
 800682a:	d02c      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	f012 0f04 	tst.w	r2, #4
 8006834:	d0e3      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800683c:	d0df      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006842:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006844:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	e852 3f00 	ldrex	r3, [r2]
 800684a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	e842 3100 	strex	r1, r3, [r2]
 8006852:	2900      	cmp	r1, #0
 8006854:	d1f6      	bne.n	8006844 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006856:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	f102 0308 	add.w	r3, r2, #8
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	3208      	adds	r2, #8
 8006866:	e842 3100 	strex	r1, r3, [r2]
 800686a:	2900      	cmp	r1, #0
 800686c:	d1f3      	bne.n	8006856 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800686e:	2320      	movs	r3, #32
 8006870:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006874:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006878:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800687c:	2300      	movs	r3, #0
 800687e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8006882:	2003      	movs	r0, #3
 8006884:	e01f      	b.n	80068c6 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006886:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	e852 3f00 	ldrex	r3, [r2]
 800688c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006890:	e842 3100 	strex	r1, r3, [r2]
 8006894:	2900      	cmp	r1, #0
 8006896:	d1f6      	bne.n	8006886 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006898:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	f102 0308 	add.w	r3, r2, #8
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	3208      	adds	r2, #8
 80068a8:	e842 3100 	strex	r1, r3, [r2]
 80068ac:	2900      	cmp	r1, #0
 80068ae:	d1f3      	bne.n	8006898 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80068b0:	2320      	movs	r3, #32
 80068b2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80068b6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80068ba:	2300      	movs	r3, #0
 80068bc:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80068c0:	2003      	movs	r0, #3
 80068c2:	e000      	b.n	80068c6 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 80068c4:	2000      	movs	r0, #0
}
 80068c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080068ca <UART_CheckIdleState>:
{
 80068ca:	b530      	push	{r4, r5, lr}
 80068cc:	b083      	sub	sp, #12
 80068ce:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d0:	2300      	movs	r3, #0
 80068d2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80068d6:	f7fa ffdf 	bl	8001898 <HAL_GetTick>
 80068da:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	f012 0f08 	tst.w	r2, #8
 80068e4:	d10f      	bne.n	8006906 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f013 0f04 	tst.w	r3, #4
 80068ee:	d118      	bne.n	8006922 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80068f0:	2320      	movs	r3, #32
 80068f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80068f6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068fa:	2000      	movs	r0, #0
 80068fc:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80068fe:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006902:	b003      	add	sp, #12
 8006904:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006906:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	4603      	mov	r3, r0
 800690e:	2200      	movs	r2, #0
 8006910:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff ff6a 	bl	80067ee <UART_WaitOnFlagUntilTimeout>
 800691a:	2800      	cmp	r0, #0
 800691c:	d0e3      	beq.n	80068e6 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800691e:	2003      	movs	r0, #3
 8006920:	e7ef      	b.n	8006902 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006922:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	462b      	mov	r3, r5
 800692a:	2200      	movs	r2, #0
 800692c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006930:	4620      	mov	r0, r4
 8006932:	f7ff ff5c 	bl	80067ee <UART_WaitOnFlagUntilTimeout>
 8006936:	2800      	cmp	r0, #0
 8006938:	d0da      	beq.n	80068f0 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800693a:	2003      	movs	r0, #3
 800693c:	e7e1      	b.n	8006902 <UART_CheckIdleState+0x38>

0800693e <HAL_UART_Init>:
  if (huart == NULL)
 800693e:	b378      	cbz	r0, 80069a0 <HAL_UART_Init+0x62>
{
 8006940:	b510      	push	{r4, lr}
 8006942:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006944:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006948:	b30b      	cbz	r3, 800698e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800694a:	2324      	movs	r3, #36	; 0x24
 800694c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	6813      	ldr	r3, [r2, #0]
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800695a:	4620      	mov	r0, r4
 800695c:	f7ff fd7c 	bl	8006458 <UART_SetConfig>
 8006960:	2801      	cmp	r0, #1
 8006962:	d013      	beq.n	800698c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006964:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006966:	b9bb      	cbnz	r3, 8006998 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	6853      	ldr	r3, [r2, #4]
 800696c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006970:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006972:	6822      	ldr	r2, [r4, #0]
 8006974:	6893      	ldr	r3, [r2, #8]
 8006976:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800697a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800697c:	6822      	ldr	r2, [r4, #0]
 800697e:	6813      	ldr	r3, [r2, #0]
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006986:	4620      	mov	r0, r4
 8006988:	f7ff ff9f 	bl	80068ca <UART_CheckIdleState>
}
 800698c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800698e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006992:	f7fb f971 	bl	8001c78 <HAL_UART_MspInit>
 8006996:	e7d8      	b.n	800694a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006998:	4620      	mov	r0, r4
 800699a:	f7ff fec3 	bl	8006724 <UART_AdvFeatureConfig>
 800699e:	e7e3      	b.n	8006968 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80069a0:	2001      	movs	r0, #1
}
 80069a2:	4770      	bx	lr

080069a4 <UART_Start_Receive_IT>:
{
 80069a4:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80069a6:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 80069a8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80069ac:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80069b4:	6883      	ldr	r3, [r0, #8]
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ba:	d006      	beq.n	80069ca <UART_Start_Receive_IT+0x26>
 80069bc:	b9a3      	cbnz	r3, 80069e8 <UART_Start_Receive_IT+0x44>
 80069be:	6903      	ldr	r3, [r0, #16]
 80069c0:	b973      	cbnz	r3, 80069e0 <UART_Start_Receive_IT+0x3c>
 80069c2:	23ff      	movs	r3, #255	; 0xff
 80069c4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80069c8:	e014      	b.n	80069f4 <UART_Start_Receive_IT+0x50>
 80069ca:	6903      	ldr	r3, [r0, #16]
 80069cc:	b923      	cbnz	r3, 80069d8 <UART_Start_Receive_IT+0x34>
 80069ce:	f240 13ff 	movw	r3, #511	; 0x1ff
 80069d2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80069d6:	e00d      	b.n	80069f4 <UART_Start_Receive_IT+0x50>
 80069d8:	23ff      	movs	r3, #255	; 0xff
 80069da:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80069de:	e009      	b.n	80069f4 <UART_Start_Receive_IT+0x50>
 80069e0:	237f      	movs	r3, #127	; 0x7f
 80069e2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80069e6:	e005      	b.n	80069f4 <UART_Start_Receive_IT+0x50>
 80069e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ec:	d030      	beq.n	8006a50 <UART_Start_Receive_IT+0xac>
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069fa:	2322      	movs	r3, #34	; 0x22
 80069fc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a00:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	f101 0308 	add.w	r3, r1, #8
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	3108      	adds	r1, #8
 8006a10:	e841 3400 	strex	r4, r3, [r1]
 8006a14:	2c00      	cmp	r4, #0
 8006a16:	d1f3      	bne.n	8006a00 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a18:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a1e:	d021      	beq.n	8006a64 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a20:	6883      	ldr	r3, [r0, #8]
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a26:	d048      	beq.n	8006aba <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 8006a28:	4b2c      	ldr	r3, [pc, #176]	; (8006adc <UART_Start_Receive_IT+0x138>)
 8006a2a:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a32:	6903      	ldr	r3, [r0, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d046      	beq.n	8006ac6 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a38:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	e852 3f00 	ldrex	r3, [r2]
 8006a3e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	e842 3100 	strex	r1, r3, [r2]
 8006a46:	2900      	cmp	r1, #0
 8006a48:	d1f6      	bne.n	8006a38 <UART_Start_Receive_IT+0x94>
}
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	bc10      	pop	{r4}
 8006a4e:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006a50:	6903      	ldr	r3, [r0, #16]
 8006a52:	b91b      	cbnz	r3, 8006a5c <UART_Start_Receive_IT+0xb8>
 8006a54:	237f      	movs	r3, #127	; 0x7f
 8006a56:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006a5a:	e7cb      	b.n	80069f4 <UART_Start_Receive_IT+0x50>
 8006a5c:	233f      	movs	r3, #63	; 0x3f
 8006a5e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006a62:	e7c7      	b.n	80069f4 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a64:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d8d9      	bhi.n	8006a20 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a6c:	6883      	ldr	r3, [r0, #8]
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a72:	d01c      	beq.n	8006aae <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a74:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <UART_Start_Receive_IT+0x13c>)
 8006a76:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006a7e:	6903      	ldr	r3, [r0, #16]
 8006a80:	b143      	cbz	r3, 8006a94 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	e852 3f00 	ldrex	r3, [r2]
 8006a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	e842 3100 	strex	r1, r3, [r2]
 8006a90:	2900      	cmp	r1, #0
 8006a92:	d1f6      	bne.n	8006a82 <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a94:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	f102 0308 	add.w	r3, r2, #8
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	3208      	adds	r2, #8
 8006aa4:	e842 3100 	strex	r1, r3, [r2]
 8006aa8:	2900      	cmp	r1, #0
 8006aaa:	d1f3      	bne.n	8006a94 <UART_Start_Receive_IT+0xf0>
 8006aac:	e7cd      	b.n	8006a4a <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aae:	6903      	ldr	r3, [r0, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1df      	bne.n	8006a74 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <UART_Start_Receive_IT+0x140>)
 8006ab6:	6703      	str	r3, [r0, #112]	; 0x70
 8006ab8:	e7de      	b.n	8006a78 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aba:	6903      	ldr	r3, [r0, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1b3      	bne.n	8006a28 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006ac0:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <UART_Start_Receive_IT+0x144>)
 8006ac2:	6703      	str	r3, [r0, #112]	; 0x70
 8006ac4:	e7b2      	b.n	8006a2c <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ac6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	e852 3f00 	ldrex	r3, [r2]
 8006acc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	e842 3100 	strex	r1, r3, [r2]
 8006ad4:	2900      	cmp	r1, #0
 8006ad6:	d1f6      	bne.n	8006ac6 <UART_Start_Receive_IT+0x122>
 8006ad8:	e7b7      	b.n	8006a4a <UART_Start_Receive_IT+0xa6>
 8006ada:	bf00      	nop
 8006adc:	08005fb5 	.word	0x08005fb5
 8006ae0:	08006119 	.word	0x08006119
 8006ae4:	080062b9 	.word	0x080062b9
 8006ae8:	08006067 	.word	0x08006067

08006aec <HAL_UART_Receive_IT>:
{
 8006aec:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aee:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d11e      	bne.n	8006b34 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8006af6:	b1f9      	cbz	r1, 8006b38 <HAL_UART_Receive_IT+0x4c>
 8006af8:	b302      	cbz	r2, 8006b3c <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8006afa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d01e      	beq.n	8006b40 <HAL_UART_Receive_IT+0x54>
 8006b02:	2301      	movs	r3, #1
 8006b04:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b0c:	6803      	ldr	r3, [r0, #0]
 8006b0e:	4c0d      	ldr	r4, [pc, #52]	; (8006b44 <HAL_UART_Receive_IT+0x58>)
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d00c      	beq.n	8006b2e <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006b1a:	d008      	beq.n	8006b2e <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b1c:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	e854 3f00 	ldrex	r3, [r4]
 8006b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	e844 3500 	strex	r5, r3, [r4]
 8006b2a:	2d00      	cmp	r5, #0
 8006b2c:	d1f6      	bne.n	8006b1c <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006b2e:	f7ff ff39 	bl	80069a4 <UART_Start_Receive_IT>
 8006b32:	e000      	b.n	8006b36 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8006b34:	2002      	movs	r0, #2
}
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006b38:	2001      	movs	r0, #1
 8006b3a:	e7fc      	b.n	8006b36 <HAL_UART_Receive_IT+0x4a>
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	e7fa      	b.n	8006b36 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8006b40:	2002      	movs	r0, #2
 8006b42:	e7f8      	b.n	8006b36 <HAL_UART_Receive_IT+0x4a>
 8006b44:	40008000 	.word	0x40008000

08006b48 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006b48:	b082      	sub	sp, #8
 8006b4a:	ab02      	add	r3, sp, #8
 8006b4c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006b50:	6802      	ldr	r2, [r0, #0]
 8006b52:	6853      	ldr	r3, [r2, #4]
 8006b54:	f023 0310 	bic.w	r3, r3, #16
 8006b58:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006b60:	6802      	ldr	r2, [r0, #0]
 8006b62:	6853      	ldr	r3, [r2, #4]
 8006b64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b68:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006b6c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006b70:	6053      	str	r3, [r2, #4]
}
 8006b72:	b002      	add	sp, #8
 8006b74:	4770      	bx	lr
	...

08006b78 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b78:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006b7a:	b92b      	cbnz	r3, 8006b88 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b82:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006b86:	4770      	bx	lr
{
 8006b88:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b8a:	6803      	ldr	r3, [r0, #0]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b92:	6899      	ldr	r1, [r3, #8]
 8006b94:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b96:	4d09      	ldr	r5, [pc, #36]	; (8006bbc <UARTEx_SetNbDataToProcess+0x44>)
 8006b98:	5c6b      	ldrb	r3, [r5, r1]
 8006b9a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b9c:	4c08      	ldr	r4, [pc, #32]	; (8006bc0 <UARTEx_SetNbDataToProcess+0x48>)
 8006b9e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ba0:	fb93 f3f1 	sdiv	r3, r3, r1
 8006ba4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ba8:	5cab      	ldrb	r3, [r5, r2]
 8006baa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bac:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bae:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bb2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006bb6:	bc30      	pop	{r4, r5}
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	0801231c 	.word	0x0801231c
 8006bc0:	08012314 	.word	0x08012314

08006bc4 <HAL_UARTEx_WakeupCallback>:
}
 8006bc4:	4770      	bx	lr

08006bc6 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006bc8:	4770      	bx	lr

08006bca <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	ab04      	add	r3, sp, #16
 8006bd0:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8006bd4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d035      	beq.n	8006c48 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	2301      	movs	r3, #1
 8006be0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006be4:	2324      	movs	r3, #36	; 0x24
 8006be6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006bea:	6802      	ldr	r2, [r0, #0]
 8006bec:	6813      	ldr	r3, [r2, #0]
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006bf4:	6801      	ldr	r1, [r0, #0]
 8006bf6:	688b      	ldr	r3, [r1, #8]
 8006bf8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006bfc:	9a02      	ldr	r2, [sp, #8]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006c02:	b1aa      	cbz	r2, 8006c30 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006c04:	6822      	ldr	r2, [r4, #0]
 8006c06:	6813      	ldr	r3, [r2, #0]
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006c0e:	f7fa fe43 	bl	8001898 <HAL_GetTick>
 8006c12:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c14:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006c18:	9200      	str	r2, [sp, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7ff fde4 	bl	80067ee <UART_WaitOnFlagUntilTimeout>
 8006c26:	b948      	cbnz	r0, 8006c3c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006c28:	2320      	movs	r3, #32
 8006c2a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006c2e:	e006      	b.n	8006c3e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006c30:	ab04      	add	r3, sp, #16
 8006c32:	e913 0006 	ldmdb	r3, {r1, r2}
 8006c36:	f7ff ff87 	bl	8006b48 <UARTEx_Wakeup_AddressConfig>
 8006c3a:	e7e3      	b.n	8006c04 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006c3c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006c44:	b004      	add	sp, #16
 8006c46:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006c48:	2002      	movs	r0, #2
 8006c4a:	e7fb      	b.n	8006c44 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006c4c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006c4c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d010      	beq.n	8006c76 <HAL_UARTEx_EnableStopMode+0x2a>
 8006c54:	2301      	movs	r3, #1
 8006c56:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006c5a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	e852 3f00 	ldrex	r3, [r2]
 8006c60:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	e842 3100 	strex	r1, r3, [r2]
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	d1f6      	bne.n	8006c5a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006c72:	4618      	mov	r0, r3
 8006c74:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006c76:	2002      	movs	r0, #2
}
 8006c78:	4770      	bx	lr

08006c7a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006c7a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d01d      	beq.n	8006cbe <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006c82:	b510      	push	{r4, lr}
 8006c84:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006c86:	2301      	movs	r3, #1
 8006c88:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006c8c:	2324      	movs	r3, #36	; 0x24
 8006c8e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c92:	6802      	ldr	r2, [r0, #0]
 8006c94:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006c96:	6811      	ldr	r1, [r2, #0]
 8006c98:	f021 0101 	bic.w	r1, r1, #1
 8006c9c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006ca2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006ca6:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ca8:	6802      	ldr	r2, [r0, #0]
 8006caa:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006cac:	f7ff ff64 	bl	8006b78 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006cb0:	2320      	movs	r3, #32
 8006cb2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006cbc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006cbe:	2002      	movs	r0, #2
}
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006cc2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006cc4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d01d      	beq.n	8006d08 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006ccc:	4604      	mov	r4, r0
 8006cce:	2301      	movs	r3, #1
 8006cd0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006cd4:	2324      	movs	r3, #36	; 0x24
 8006cd6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cda:	6803      	ldr	r3, [r0, #0]
 8006cdc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	f022 0201 	bic.w	r2, r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ce6:	6802      	ldr	r2, [r0, #0]
 8006ce8:	6893      	ldr	r3, [r2, #8]
 8006cea:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006cee:	4319      	orrs	r1, r3
 8006cf0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006cf2:	f7ff ff41 	bl	8006b78 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006cfa:	2320      	movs	r3, #32
 8006cfc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d00:	2000      	movs	r0, #0
 8006d02:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006d08:	2002      	movs	r0, #2
 8006d0a:	e7fc      	b.n	8006d06 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006d0c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006d0c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006d0e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d01d      	beq.n	8006d52 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006d16:	4604      	mov	r4, r0
 8006d18:	2301      	movs	r3, #1
 8006d1a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006d1e:	2324      	movs	r3, #36	; 0x24
 8006d20:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d24:	6803      	ldr	r3, [r0, #0]
 8006d26:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d30:	6802      	ldr	r2, [r0, #0]
 8006d32:	6893      	ldr	r3, [r2, #8]
 8006d34:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006d38:	4319      	orrs	r1, r3
 8006d3a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006d3c:	f7ff ff1c 	bl	8006b78 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006d44:	2320      	movs	r3, #32
 8006d46:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006d50:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006d52:	2002      	movs	r0, #2
 8006d54:	e7fc      	b.n	8006d50 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006d58 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006d58:	2804      	cmp	r0, #4
 8006d5a:	d807      	bhi.n	8006d6c <LmHandlerPackageIsInitialized+0x14>
{
 8006d5c:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <LmHandlerPackageIsInitialized+0x1c>)
 8006d60:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	b11b      	cbz	r3, 8006d70 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006d68:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006d6a:	bd08      	pop	{r3, pc}
        return false;
 8006d6c:	2000      	movs	r0, #0
}
 8006d6e:	4770      	bx	lr
        return false;
 8006d70:	2000      	movs	r0, #0
 8006d72:	e7fa      	b.n	8006d6a <LmHandlerPackageIsInitialized+0x12>
 8006d74:	20000574 	.word	0x20000574

08006d78 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006d7e:	2400      	movs	r4, #0
 8006d80:	e005      	b.n	8006d8e <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	b10b      	cbz	r3, 8006d8a <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006d86:	4630      	mov	r0, r6
 8006d88:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006d8a:	3401      	adds	r4, #1
 8006d8c:	b264      	sxtb	r4, r4
 8006d8e:	2c04      	cmp	r4, #4
 8006d90:	dc24      	bgt.n	8006ddc <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8006d92:	4b13      	ldr	r3, [pc, #76]	; (8006de0 <LmHandlerPackagesNotify+0x68>)
 8006d94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0f6      	beq.n	8006d8a <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8006d9c:	2d03      	cmp	r5, #3
 8006d9e:	d8f4      	bhi.n	8006d8a <LmHandlerPackagesNotify+0x12>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <LmHandlerPackagesNotify+0x30>)
 8006da2:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006d83 	.word	0x08006d83
 8006dac:	08006db9 	.word	0x08006db9
 8006db0:	08006dc5 	.word	0x08006dc5
 8006db4:	08006dd1 	.word	0x08006dd1
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0e5      	beq.n	8006d8a <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4798      	blx	r3
 8006dc2:	e7e2      	b.n	8006d8a <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0df      	beq.n	8006d8a <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006dca:	4630      	mov	r0, r6
 8006dcc:	4798      	blx	r3
 8006dce:	e7dc      	b.n	8006d8a <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0d9      	beq.n	8006d8a <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	4798      	blx	r3
 8006dda:	e7d6      	b.n	8006d8a <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 8006ddc:	bd70      	pop	{r4, r5, r6, pc}
 8006dde:	bf00      	nop
 8006de0:	20000574 	.word	0x20000574

08006de4 <MlmeIndication>:
{
 8006de4:	b510      	push	{r4, lr}
 8006de6:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006de8:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <MlmeIndication+0x58>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8006dee:	7842      	ldrb	r2, [r0, #1]
 8006df0:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8006df2:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8006df6:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8006df8:	f9b1 2000 	ldrsh.w	r2, [r1]
 8006dfc:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8006dfe:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8006e02:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8006e04:	78ca      	ldrb	r2, [r1, #3]
 8006e06:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8006e08:	6842      	ldr	r2, [r0, #4]
 8006e0a:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 8006e0c:	7803      	ldrb	r3, [r0, #0]
 8006e0e:	2b0a      	cmp	r3, #10
 8006e10:	d007      	beq.n	8006e22 <MlmeIndication+0x3e>
 8006e12:	2b0e      	cmp	r3, #14
 8006e14:	d005      	beq.n	8006e22 <MlmeIndication+0x3e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8006e16:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <MlmeIndication+0x5c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	4907      	ldr	r1, [pc, #28]	; (8006e3c <MlmeIndication+0x58>)
 8006e1e:	2000      	movs	r0, #0
 8006e20:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8006e22:	4621      	mov	r1, r4
 8006e24:	2003      	movs	r0, #3
 8006e26:	f7ff ffa7 	bl	8006d78 <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 8006e2a:	7823      	ldrb	r3, [r4, #0]
 8006e2c:	2b06      	cmp	r3, #6
 8006e2e:	d000      	beq.n	8006e32 <MlmeIndication+0x4e>
}
 8006e30:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 8006e32:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <MlmeIndication+0x60>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
}
 8006e38:	e7fa      	b.n	8006e30 <MlmeIndication+0x4c>
 8006e3a:	bf00      	nop
 8006e3c:	20000098 	.word	0x20000098
 8006e40:	20000570 	.word	0x20000570
 8006e44:	2000056c 	.word	0x2000056c

08006e48 <McpsConfirm>:
{
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006e4c:	480c      	ldr	r0, [pc, #48]	; (8006e80 <McpsConfirm+0x38>)
 8006e4e:	2301      	movs	r3, #1
 8006e50:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006e52:	7863      	ldrb	r3, [r4, #1]
 8006e54:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006e56:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006e5a:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006e5c:	68e3      	ldr	r3, [r4, #12]
 8006e5e:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006e60:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8006e64:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8006e66:	6923      	ldr	r3, [r4, #16]
 8006e68:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006e6a:	7923      	ldrb	r3, [r4, #4]
 8006e6c:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <McpsConfirm+0x3c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006e76:	4621      	mov	r1, r4
 8006e78:	2000      	movs	r0, #0
 8006e7a:	f7ff ff7d 	bl	8006d78 <LmHandlerPackagesNotify>
}
 8006e7e:	bd10      	pop	{r4, pc}
 8006e80:	200000ac 	.word	0x200000ac
 8006e84:	20000570 	.word	0x20000570

08006e88 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 8006e88:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006e8a:	2400      	movs	r4, #0
 8006e8c:	e001      	b.n	8006e92 <LmHandlerPackageIsTxPending+0xa>
 8006e8e:	3401      	adds	r4, #1
 8006e90:	b264      	sxtb	r4, r4
 8006e92:	2c04      	cmp	r4, #4
 8006e94:	dc0a      	bgt.n	8006eac <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <LmHandlerPackageIsTxPending+0x2c>)
 8006e98:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0f6      	beq.n	8006e8e <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	4798      	blx	r3
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d0f1      	beq.n	8006e8e <LmHandlerPackageIsTxPending+0x6>
 8006eaa:	e000      	b.n	8006eae <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000574 	.word	0x20000574

08006eb8 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8006eb8:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006eba:	2400      	movs	r4, #0
 8006ebc:	e001      	b.n	8006ec2 <LmHandlerPackagesProcess+0xa>
 8006ebe:	3401      	adds	r4, #1
 8006ec0:	b264      	sxtb	r4, r4
 8006ec2:	2c04      	cmp	r4, #4
 8006ec4:	dc12      	bgt.n	8006eec <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <LmHandlerPackagesProcess+0x38>)
 8006ec8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f6      	beq.n	8006ebe <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006ed0:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0f3      	beq.n	8006ebe <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8006ed6:	b2e0      	uxtb	r0, r4
 8006ed8:	f7ff ff3e 	bl	8006d58 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d0ee      	beq.n	8006ebe <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8006ee0:	4b03      	ldr	r3, [pc, #12]	; (8006ef0 <LmHandlerPackagesProcess+0x38>)
 8006ee2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	4798      	blx	r3
 8006eea:	e7e8      	b.n	8006ebe <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8006eec:	bd38      	pop	{r3, r4, r5, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000574 	.word	0x20000574

08006ef4 <LmHandlerJoin>:
{
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	b08e      	sub	sp, #56	; 0x38
 8006ef8:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006f00:	4b26      	ldr	r3, [pc, #152]	; (8006f9c <LmHandlerJoin+0xa8>)
 8006f02:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8006f06:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 8006f0a:	2802      	cmp	r0, #2
 8006f0c:	d021      	beq.n	8006f52 <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006f0e:	2101      	movs	r1, #1
 8006f10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8006f14:	4b22      	ldr	r3, [pc, #136]	; (8006fa0 <LmHandlerJoin+0xac>)
 8006f16:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8006f18:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 8006f1e:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 8006f20:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <LmHandlerJoin+0xb0>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	b1f3      	cbz	r3, 8006f64 <LmHandlerJoin+0x70>
        LoRaMacStart();
 8006f26:	f003 fa4d 	bl	800a3c4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006f30:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006f34:	4668      	mov	r0, sp
 8006f36:	f003 fc4d 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 8006f3a:	4b1a      	ldr	r3, [pc, #104]	; (8006fa4 <LmHandlerJoin+0xb0>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <LmHandlerJoin+0x4e>
 8006f40:	b114      	cbz	r4, 8006f48 <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 8006f42:	a809      	add	r0, sp, #36	; 0x24
 8006f44:	f003 fecc 	bl	800ace0 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8006f48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f4a:	4b17      	ldr	r3, [pc, #92]	; (8006fa8 <LmHandlerJoin+0xb4>)
 8006f4c:	601a      	str	r2, [r3, #0]
}
 8006f4e:	b00e      	add	sp, #56	; 0x38
 8006f50:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8006f52:	2202      	movs	r2, #2
 8006f54:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8006f58:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <LmHandlerJoin+0xac>)
 8006f5a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8006f5c:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 8006f5e:	f003 fa31 	bl	800a3c4 <LoRaMacStart>
 8006f62:	e7ea      	b.n	8006f3a <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8006f64:	231f      	movs	r3, #31
 8006f66:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8006f6a:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006f6e:	4668      	mov	r0, sp
 8006f70:	f003 fc30 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8006f74:	2320      	movs	r3, #32
 8006f76:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8006f7a:	4b08      	ldr	r3, [pc, #32]	; (8006f9c <LmHandlerJoin+0xa8>)
 8006f7c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006f80:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006f84:	4668      	mov	r0, sp
 8006f86:	f003 fc25 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8006f8a:	2329      	movs	r3, #41	; 0x29
 8006f8c:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8006f90:	4b06      	ldr	r3, [pc, #24]	; (8006fac <LmHandlerJoin+0xb8>)
 8006f92:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8006f94:	4668      	mov	r0, sp
 8006f96:	f003 fc1d 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
 8006f9a:	e7c4      	b.n	8006f26 <LmHandlerJoin+0x32>
 8006f9c:	20000588 	.word	0x20000588
 8006fa0:	20000090 	.word	0x20000090
 8006fa4:	20000566 	.word	0x20000566
 8006fa8:	20000568 	.word	0x20000568
 8006fac:	01000400 	.word	0x01000400

08006fb0 <LmHandlerDeviceTimeReq>:
{
 8006fb0:	b500      	push	{lr}
 8006fb2:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8006fb4:	2309      	movs	r3, #9
 8006fb6:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8006fba:	a801      	add	r0, sp, #4
 8006fbc:	f003 fe90 	bl	800ace0 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8006fc0:	9a05      	ldr	r2, [sp, #20]
 8006fc2:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <LmHandlerDeviceTimeReq+0x24>)
 8006fc4:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8006fc6:	b910      	cbnz	r0, 8006fce <LmHandlerDeviceTimeReq+0x1e>
}
 8006fc8:	b007      	add	sp, #28
 8006fca:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8006fce:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd2:	e7f9      	b.n	8006fc8 <LmHandlerDeviceTimeReq+0x18>
 8006fd4:	20000568 	.word	0x20000568

08006fd8 <LmHandlerGetDutyCycleWaitTime>:
}
 8006fd8:	4b01      	ldr	r3, [pc, #4]	; (8006fe0 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20000568 	.word	0x20000568

08006fe4 <LmHandlerJoinStatus>:
{
 8006fe4:	b500      	push	{lr}
 8006fe6:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8006fee:	a801      	add	r0, sp, #4
 8006ff0:	f003 faa2 	bl	800a538 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8006ff4:	b920      	cbnz	r0, 8007000 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006ff6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006ffa:	b110      	cbz	r0, 8007002 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	e000      	b.n	8007002 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8007000:	2000      	movs	r0, #0
}
 8007002:	b00b      	add	sp, #44	; 0x2c
 8007004:	f85d fb04 	ldr.w	pc, [sp], #4

08007008 <LmHandlerSend>:
{
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	4604      	mov	r4, r0
 800700e:	460d      	mov	r5, r1
 8007010:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 8007012:	f002 ff91 	bl	8009f38 <LoRaMacIsBusy>
 8007016:	2800      	cmp	r0, #0
 8007018:	d164      	bne.n	80070e4 <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800701a:	f7ff ffe3 	bl	8006fe4 <LmHandlerJoinStatus>
 800701e:	2801      	cmp	r0, #1
 8007020:	d137      	bne.n	8007092 <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 8007022:	4b33      	ldr	r3, [pc, #204]	; (80070f0 <LmHandlerSend+0xe8>)
 8007024:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8007026:	3d00      	subs	r5, #0
 8007028:	bf18      	it	ne
 800702a:	2501      	movne	r5, #1
 800702c:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007030:	4b30      	ldr	r3, [pc, #192]	; (80070f4 <LmHandlerSend+0xec>)
 8007032:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007036:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800703a:	4669      	mov	r1, sp
 800703c:	7860      	ldrb	r0, [r4, #1]
 800703e:	f003 fa0f 	bl	800a460 <LoRaMacQueryTxPossible>
 8007042:	b370      	cbz	r0, 80070a2 <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007044:	2300      	movs	r3, #0
 8007046:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800704a:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800704c:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8007050:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8007054:	4b26      	ldr	r3, [pc, #152]	; (80070f0 <LmHandlerSend+0xe8>)
 8007056:	f103 0c10 	add.w	ip, r3, #16
 800705a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800705e:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007062:	4a24      	ldr	r2, [pc, #144]	; (80070f4 <LmHandlerSend+0xec>)
 8007064:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007068:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800706a:	4631      	mov	r1, r6
 800706c:	a801      	add	r0, sp, #4
 800706e:	f003 ff31 	bl	800aed4 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8007072:	9a05      	ldr	r2, [sp, #20]
 8007074:	4b20      	ldr	r3, [pc, #128]	; (80070f8 <LmHandlerSend+0xf0>)
 8007076:	601a      	str	r2, [r3, #0]
    switch (status)
 8007078:	2811      	cmp	r0, #17
 800707a:	d830      	bhi.n	80070de <LmHandlerSend+0xd6>
 800707c:	e8df f000 	tbb	[pc, r0]
 8007080:	2f2f1c21 	.word	0x2f2f1c21
 8007084:	352f2f2f 	.word	0x352f2f2f
 8007088:	2c2f2f2f 	.word	0x2c2f2f2f
 800708c:	1c1c2f2f 	.word	0x1c1c2f2f
 8007090:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8007092:	4b1a      	ldr	r3, [pc, #104]	; (80070fc <LmHandlerSend+0xf4>)
 8007094:	79d9      	ldrb	r1, [r3, #7]
 8007096:	7998      	ldrb	r0, [r3, #6]
 8007098:	f7ff ff2c 	bl	8006ef4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800709c:	f06f 0502 	mvn.w	r5, #2
 80070a0:	e00c      	b.n	80070bc <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80070a2:	7823      	ldrb	r3, [r4, #0]
 80070a4:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80070a8:	7863      	ldrb	r3, [r4, #1]
 80070aa:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 80070b2:	f04f 35ff 	mov.w	r5, #4294967295
 80070b6:	e7cd      	b.n	8007054 <LmHandlerSend+0x4c>
    switch (status)
 80070b8:	f06f 0501 	mvn.w	r5, #1
}
 80070bc:	4628      	mov	r0, r5
 80070be:	b006      	add	sp, #24
 80070c0:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 80070c2:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <LmHandlerSend+0xf8>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 80070c8:	f115 0f07 	cmn.w	r5, #7
 80070cc:	d0f6      	beq.n	80070bc <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80070ce:	2500      	movs	r5, #0
 80070d0:	e7f4      	b.n	80070bc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80070d2:	f06f 0504 	mvn.w	r5, #4
            break;
 80070d6:	e7f1      	b.n	80070bc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80070d8:	f06f 0505 	mvn.w	r5, #5
            break;
 80070dc:	e7ee      	b.n	80070bc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80070de:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 80070e2:	e7eb      	b.n	80070bc <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80070e4:	f06f 0501 	mvn.w	r5, #1
 80070e8:	e7e8      	b.n	80070bc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80070ea:	f06f 0502 	mvn.w	r5, #2
 80070ee:	e7e5      	b.n	80070bc <LmHandlerSend+0xb4>
 80070f0:	200000ac 	.word	0x200000ac
 80070f4:	20000588 	.word	0x20000588
 80070f8:	20000568 	.word	0x20000568
 80070fc:	20000090 	.word	0x20000090
 8007100:	2000056c 	.word	0x2000056c

08007104 <LmHandlerProcess>:
{
 8007104:	b500      	push	{lr}
 8007106:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8007108:	f002 ff30 	bl	8009f6c <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800710c:	f7ff fed4 	bl	8006eb8 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007110:	f7ff feba 	bl	8006e88 <LmHandlerPackageIsTxPending>
 8007114:	b910      	cbnz	r0, 800711c <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <LmHandlerProcess+0x40>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	b913      	cbnz	r3, 8007122 <LmHandlerProcess+0x1e>
}
 800711c:	b003      	add	sp, #12
 800711e:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8007122:	2200      	movs	r2, #0
 8007124:	f88d 2000 	strb.w	r2, [sp]
 8007128:	f88d 2001 	strb.w	r2, [sp, #1]
 800712c:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800712e:	4b06      	ldr	r3, [pc, #24]	; (8007148 <LmHandlerProcess+0x44>)
 8007130:	78d9      	ldrb	r1, [r3, #3]
 8007132:	4668      	mov	r0, sp
 8007134:	f7ff ff68 	bl	8007008 <LmHandlerSend>
 8007138:	2800      	cmp	r0, #0
 800713a:	d1ef      	bne.n	800711c <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800713c:	4b01      	ldr	r3, [pc, #4]	; (8007144 <LmHandlerProcess+0x40>)
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e7eb      	b.n	800711c <LmHandlerProcess+0x18>
 8007144:	2000056c 	.word	0x2000056c
 8007148:	20000588 	.word	0x20000588

0800714c <LmHandlerRequestClass>:
{
 800714c:	b510      	push	{r4, lr}
 800714e:	b08a      	sub	sp, #40	; 0x28
 8007150:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 8007152:	f002 fef1 	bl	8009f38 <LoRaMacIsBusy>
 8007156:	2800      	cmp	r0, #0
 8007158:	d136      	bne.n	80071c8 <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800715a:	f7ff ff43 	bl	8006fe4 <LmHandlerJoinStatus>
 800715e:	2801      	cmp	r0, #1
 8007160:	d135      	bne.n	80071ce <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 8007162:	2300      	movs	r3, #0
 8007164:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007168:	a801      	add	r0, sp, #4
 800716a:	f003 f9e5 	bl	800a538 <LoRaMacMibGetRequestConfirm>
 800716e:	bb88      	cbnz	r0, 80071d4 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 8007170:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 8007174:	42a3      	cmp	r3, r4
 8007176:	d030      	beq.n	80071da <LmHandlerRequestClass+0x8e>
        switch( newClass )
 8007178:	2c01      	cmp	r4, #1
 800717a:	d030      	beq.n	80071de <LmHandlerRequestClass+0x92>
 800717c:	2c02      	cmp	r4, #2
 800717e:	d014      	beq.n	80071aa <LmHandlerRequestClass+0x5e>
 8007180:	b114      	cbz	r4, 8007188 <LmHandlerRequestClass+0x3c>
 8007182:	2000      	movs	r0, #0
}
 8007184:	b00a      	add	sp, #40	; 0x28
 8007186:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8007188:	b90b      	cbnz	r3, 800718e <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800718a:	2000      	movs	r0, #0
 800718c:	e7fa      	b.n	8007184 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 800718e:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007192:	a801      	add	r0, sp, #4
 8007194:	f003 fb1e 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
 8007198:	bb20      	cbnz	r0, 80071e4 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800719a:	4b19      	ldr	r3, [pc, #100]	; (8007200 <LmHandlerRequestClass+0xb4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a0:	b31b      	cbz	r3, 80071ea <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80071a2:	4620      	mov	r0, r4
 80071a4:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071a6:	2000      	movs	r0, #0
 80071a8:	e7ec      	b.n	8007184 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 80071aa:	bb03      	cbnz	r3, 80071ee <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 80071ac:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80071b0:	a801      	add	r0, sp, #4
 80071b2:	f003 fb0f 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
 80071b6:	b9e8      	cbnz	r0, 80071f4 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80071b8:	4b11      	ldr	r3, [pc, #68]	; (8007200 <LmHandlerRequestClass+0xb4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	b1e3      	cbz	r3, 80071fa <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80071c0:	4620      	mov	r0, r4
 80071c2:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071c4:	2000      	movs	r0, #0
 80071c6:	e7dd      	b.n	8007184 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80071c8:	f06f 0001 	mvn.w	r0, #1
 80071cc:	e7da      	b.n	8007184 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80071ce:	f06f 0002 	mvn.w	r0, #2
 80071d2:	e7d7      	b.n	8007184 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 80071d4:	f04f 30ff 	mov.w	r0, #4294967295
 80071d8:	e7d4      	b.n	8007184 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071da:	2000      	movs	r0, #0
 80071dc:	e7d2      	b.n	8007184 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 80071de:	f04f 30ff 	mov.w	r0, #4294967295
 80071e2:	e7cf      	b.n	8007184 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295
 80071e8:	e7cc      	b.n	8007184 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071ea:	2000      	movs	r0, #0
 80071ec:	e7ca      	b.n	8007184 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80071ee:	f04f 30ff 	mov.w	r0, #4294967295
 80071f2:	e7c7      	b.n	8007184 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
 80071f8:	e7c4      	b.n	8007184 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80071fa:	2000      	movs	r0, #0
 80071fc:	e7c2      	b.n	8007184 <LmHandlerRequestClass+0x38>
 80071fe:	bf00      	nop
 8007200:	20000570 	.word	0x20000570

08007204 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8007204:	b170      	cbz	r0, 8007224 <LmHandlerGetCurrentClass+0x20>
{
 8007206:	b510      	push	{r4, lr}
 8007208:	b08a      	sub	sp, #40	; 0x28
 800720a:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800720c:	2300      	movs	r3, #0
 800720e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8007212:	a801      	add	r0, sp, #4
 8007214:	f003 f990 	bl	800a538 <LoRaMacMibGetRequestConfirm>
 8007218:	b938      	cbnz	r0, 800722a <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800721a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800721e:	7023      	strb	r3, [r4, #0]
}
 8007220:	b00a      	add	sp, #40	; 0x28
 8007222:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007228:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800722a:	f04f 30ff 	mov.w	r0, #4294967295
 800722e:	e7f7      	b.n	8007220 <LmHandlerGetCurrentClass+0x1c>

08007230 <McpsIndication>:
{
 8007230:	b530      	push	{r4, r5, lr}
 8007232:	b085      	sub	sp, #20
 8007234:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8007236:	2200      	movs	r2, #0
 8007238:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800723c:	491d      	ldr	r1, [pc, #116]	; (80072b4 <McpsIndication+0x84>)
 800723e:	2201      	movs	r2, #1
 8007240:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 8007242:	7842      	ldrb	r2, [r0, #1]
 8007244:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007246:	bb5a      	cbnz	r2, 80072a0 <McpsIndication+0x70>
 8007248:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800724a:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800724e:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007250:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007254:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 8007256:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800725a:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800725c:	78db      	ldrb	r3, [r3, #3]
 800725e:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007260:	6903      	ldr	r3, [r0, #16]
 8007262:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8007264:	78c3      	ldrb	r3, [r0, #3]
 8007266:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800726a:	7b03      	ldrb	r3, [r0, #12]
 800726c:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8007270:	6883      	ldr	r3, [r0, #8]
 8007272:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8007274:	4d10      	ldr	r5, [pc, #64]	; (80072b8 <McpsIndication+0x88>)
 8007276:	682b      	ldr	r3, [r5, #0]
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	a802      	add	r0, sp, #8
 800727c:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007282:	b113      	cbz	r3, 800728a <McpsIndication+0x5a>
 8007284:	7e22      	ldrb	r2, [r4, #24]
 8007286:	b102      	cbz	r2, 800728a <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8007288:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800728a:	4621      	mov	r1, r4
 800728c:	2001      	movs	r0, #1
 800728e:	f7ff fd73 	bl	8006d78 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8007292:	f10d 0007 	add.w	r0, sp, #7
 8007296:	f7ff ffb5 	bl	8007204 <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800729a:	7963      	ldrb	r3, [r4, #5]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d001      	beq.n	80072a4 <McpsIndication+0x74>
}
 80072a0:	b005      	add	sp, #20
 80072a2:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 80072a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1f9      	bne.n	80072a0 <McpsIndication+0x70>
        IsUplinkTxPending = true;
 80072ac:	4b03      	ldr	r3, [pc, #12]	; (80072bc <McpsIndication+0x8c>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	e7f5      	b.n	80072a0 <McpsIndication+0x70>
 80072b4:	20000098 	.word	0x20000098
 80072b8:	20000570 	.word	0x20000570
 80072bc:	2000056c 	.word	0x2000056c

080072c0 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 80072c0:	b180      	cbz	r0, 80072e4 <LmHandlerGetTxDatarate+0x24>
{
 80072c2:	b510      	push	{r4, lr}
 80072c4:	b08a      	sub	sp, #40	; 0x28
 80072c6:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80072c8:	2320      	movs	r3, #32
 80072ca:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 80072ce:	a801      	add	r0, sp, #4
 80072d0:	f003 f932 	bl	800a538 <LoRaMacMibGetRequestConfirm>
 80072d4:	b948      	cbnz	r0, 80072ea <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 80072d6:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 80072da:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80072dc:	4a04      	ldr	r2, [pc, #16]	; (80072f0 <LmHandlerGetTxDatarate+0x30>)
 80072de:	7113      	strb	r3, [r2, #4]
}
 80072e0:	b00a      	add	sp, #40	; 0x28
 80072e2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80072e8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80072ea:	f04f 30ff 	mov.w	r0, #4294967295
 80072ee:	e7f7      	b.n	80072e0 <LmHandlerGetTxDatarate+0x20>
 80072f0:	20000588 	.word	0x20000588

080072f4 <MlmeConfirm>:
{
 80072f4:	b510      	push	{r4, lr}
 80072f6:	b08a      	sub	sp, #40	; 0x28
 80072f8:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80072fa:	4824      	ldr	r0, [pc, #144]	; (800738c <MlmeConfirm+0x98>)
 80072fc:	2300      	movs	r3, #0
 80072fe:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007300:	7863      	ldrb	r3, [r4, #1]
 8007302:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007304:	4b22      	ldr	r3, [pc, #136]	; (8007390 <MlmeConfirm+0x9c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800730c:	4621      	mov	r1, r4
 800730e:	2002      	movs	r0, #2
 8007310:	f7ff fd32 	bl	8006d78 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8007314:	7823      	ldrb	r3, [r4, #0]
 8007316:	2b04      	cmp	r3, #4
 8007318:	d029      	beq.n	800736e <MlmeConfirm+0x7a>
 800731a:	2b0b      	cmp	r3, #11
 800731c:	d02f      	beq.n	800737e <MlmeConfirm+0x8a>
 800731e:	2b01      	cmp	r3, #1
 8007320:	d001      	beq.n	8007326 <MlmeConfirm+0x32>
}
 8007322:	b00a      	add	sp, #40	; 0x28
 8007324:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8007326:	2306      	movs	r3, #6
 8007328:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800732c:	a801      	add	r0, sp, #4
 800732e:	f003 f903 	bl	800a538 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007332:	9a02      	ldr	r2, [sp, #8]
 8007334:	4b17      	ldr	r3, [pc, #92]	; (8007394 <MlmeConfirm+0xa0>)
 8007336:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007338:	4817      	ldr	r0, [pc, #92]	; (8007398 <MlmeConfirm+0xa4>)
 800733a:	f7ff ffc1 	bl	80072c0 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800733e:	7863      	ldrb	r3, [r4, #1]
 8007340:	b16b      	cbz	r3, 800735e <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8007342:	4b16      	ldr	r3, [pc, #88]	; (800739c <MlmeConfirm+0xa8>)
 8007344:	22ff      	movs	r2, #255	; 0xff
 8007346:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007348:	4b11      	ldr	r3, [pc, #68]	; (8007390 <MlmeConfirm+0x9c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	4813      	ldr	r0, [pc, #76]	; (800739c <MlmeConfirm+0xa8>)
 8007350:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007352:	7863      	ldrb	r3, [r4, #1]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e4      	bne.n	8007322 <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 8007358:	f007 fe72 	bl	800f040 <SecureElementPrintSessionKeys>
        break;
 800735c:	e7e1      	b.n	8007322 <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800735e:	4b0f      	ldr	r3, [pc, #60]	; (800739c <MlmeConfirm+0xa8>)
 8007360:	2200      	movs	r2, #0
 8007362:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007364:	4b0e      	ldr	r3, [pc, #56]	; (80073a0 <MlmeConfirm+0xac>)
 8007366:	7858      	ldrb	r0, [r3, #1]
 8007368:	f7ff fef0 	bl	800714c <LmHandlerRequestClass>
 800736c:	e7ec      	b.n	8007348 <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <MlmeConfirm+0xb0>)
 8007370:	2201      	movs	r2, #1
 8007372:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007374:	7a22      	ldrb	r2, [r4, #8]
 8007376:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007378:	7a62      	ldrb	r2, [r4, #9]
 800737a:	74da      	strb	r2, [r3, #19]
        break;
 800737c:	e7d1      	b.n	8007322 <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800737e:	7863      	ldrb	r3, [r4, #1]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0ce      	beq.n	8007322 <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 8007384:	f7ff fe14 	bl	8006fb0 <LmHandlerDeviceTimeReq>
}
 8007388:	e7cb      	b.n	8007322 <MlmeConfirm+0x2e>
 800738a:	bf00      	nop
 800738c:	200000ac 	.word	0x200000ac
 8007390:	20000570 	.word	0x20000570
 8007394:	20000078 	.word	0x20000078
 8007398:	20000094 	.word	0x20000094
 800739c:	20000090 	.word	0x20000090
 80073a0:	20000588 	.word	0x20000588
 80073a4:	20000098 	.word	0x20000098

080073a8 <LmHandlerSetSystemMaxRxError>:
{
 80073a8:	b500      	push	{lr}
 80073aa:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80073ac:	2323      	movs	r3, #35	; 0x23
 80073ae:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 80073b2:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80073b4:	a801      	add	r0, sp, #4
 80073b6:	f003 fa0d 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
 80073ba:	b910      	cbnz	r0, 80073c2 <LmHandlerSetSystemMaxRxError+0x1a>
}
 80073bc:	b00b      	add	sp, #44	; 0x2c
 80073be:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	e7f9      	b.n	80073bc <LmHandlerSetSystemMaxRxError+0x14>

080073c8 <LmHandlerConfigure>:
{
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	b090      	sub	sp, #64	; 0x40
 80073cc:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80073ce:	4c78      	ldr	r4, [pc, #480]	; (80075b0 <LmHandlerConfigure+0x1e8>)
 80073d0:	2214      	movs	r2, #20
 80073d2:	4620      	mov	r0, r4
 80073d4:	f009 ff5a 	bl	801128c <UTIL_MEM_cpy_8>
    IsUplinkTxPending = false;
 80073d8:	4b76      	ldr	r3, [pc, #472]	; (80075b4 <LmHandlerConfigure+0x1ec>)
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 80073de:	f7fb f9ff 	bl	80027e0 <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80073e2:	7822      	ldrb	r2, [r4, #0]
 80073e4:	2301      	movs	r3, #1
 80073e6:	4093      	lsls	r3, r2
 80073e8:	6841      	ldr	r1, [r0, #4]
 80073ea:	420b      	tst	r3, r1
 80073ec:	d106      	bne.n	80073fc <LmHandlerConfigure+0x34>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 80073ee:	4b72      	ldr	r3, [pc, #456]	; (80075b8 <LmHandlerConfigure+0x1f0>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	2100      	movs	r1, #0
 80073f4:	4608      	mov	r0, r1
 80073f6:	f009 fe33 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 80073fa:	e7fe      	b.n	80073fa <LmHandlerConfigure+0x32>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80073fc:	496f      	ldr	r1, [pc, #444]	; (80075bc <LmHandlerConfigure+0x1f4>)
 80073fe:	4870      	ldr	r0, [pc, #448]	; (80075c0 <LmHandlerConfigure+0x1f8>)
 8007400:	f002 fdfe 	bl	800a000 <LoRaMacInitialization>
 8007404:	2800      	cmp	r0, #0
 8007406:	f040 80cf 	bne.w	80075a8 <LmHandlerConfigure+0x1e0>
    mibReq.Type = MIB_NVM_CTXS;
 800740a:	2327      	movs	r3, #39	; 0x27
 800740c:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007410:	a807      	add	r0, sp, #28
 8007412:	f003 f9df 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
 8007416:	2800      	cmp	r0, #0
 8007418:	f040 8087 	bne.w	800752a <LmHandlerConfigure+0x162>
        CtxRestoreDone = true;
 800741c:	4b69      	ldr	r3, [pc, #420]	; (80075c4 <LmHandlerConfigure+0x1fc>)
 800741e:	2201      	movs	r2, #1
 8007420:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 8007422:	4b68      	ldr	r3, [pc, #416]	; (80075c4 <LmHandlerConfigure+0x1fc>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 80a8 	beq.w	800757c <LmHandlerConfigure+0x1b4>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800742c:	4b66      	ldr	r3, [pc, #408]	; (80075c8 <LmHandlerConfigure+0x200>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	b10b      	cbz	r3, 8007438 <LmHandlerConfigure+0x70>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8007434:	2000      	movs	r0, #0
 8007436:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 8007438:	2306      	movs	r3, #6
 800743a:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800743e:	a807      	add	r0, sp, #28
 8007440:	f003 f87a 	bl	800a538 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007444:	9a08      	ldr	r2, [sp, #32]
 8007446:	4b61      	ldr	r3, [pc, #388]	; (80075cc <LmHandlerConfigure+0x204>)
 8007448:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 800744a:	2327      	movs	r3, #39	; 0x27
 800744c:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007450:	a807      	add	r0, sp, #28
 8007452:	f003 f871 	bl	800a538 <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 8007456:	9a08      	ldr	r2, [sp, #32]
 8007458:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 800745c:	4b54      	ldr	r3, [pc, #336]	; (80075b0 <LmHandlerConfigure+0x1e8>)
 800745e:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 8007460:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 8007464:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 8007466:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 800746a:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 800746c:	2502      	movs	r5, #2
 800746e:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007472:	a807      	add	r0, sp, #28
 8007474:	f003 f860 	bl	800a538 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8007478:	4c54      	ldr	r4, [pc, #336]	; (80075cc <LmHandlerConfigure+0x204>)
 800747a:	2208      	movs	r2, #8
 800747c:	9908      	ldr	r1, [sp, #32]
 800747e:	4620      	mov	r0, r4
 8007480:	f007 ff45 	bl	800f30e <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8007484:	2303      	movs	r3, #3
 8007486:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800748a:	a807      	add	r0, sp, #28
 800748c:	f003 f854 	bl	800a538 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8007490:	2208      	movs	r2, #8
 8007492:	9908      	ldr	r1, [sp, #32]
 8007494:	18a0      	adds	r0, r4, r2
 8007496:	f007 ff3a 	bl	800f30e <memcpy1>
    SecureElementPrintKeys();
 800749a:	f007 fd71 	bl	800ef80 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800749e:	7de3      	ldrb	r3, [r4, #23]
 80074a0:	7da2      	ldrb	r2, [r4, #22]
 80074a2:	7d61      	ldrb	r1, [r4, #21]
 80074a4:	7d20      	ldrb	r0, [r4, #20]
 80074a6:	9003      	str	r0, [sp, #12]
 80074a8:	9102      	str	r1, [sp, #8]
 80074aa:	9201      	str	r2, [sp, #4]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	4b48      	ldr	r3, [pc, #288]	; (80075d0 <LmHandlerConfigure+0x208>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	4611      	mov	r1, r2
 80074b4:	4628      	mov	r0, r5
 80074b6:	f009 fdd3 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80074ba:	260f      	movs	r6, #15
 80074bc:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80074c0:	2301      	movs	r3, #1
 80074c2:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80074c6:	a807      	add	r0, sp, #28
 80074c8:	f003 f984 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80074cc:	2310      	movs	r3, #16
 80074ce:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80074d2:	2500      	movs	r5, #0
 80074d4:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80074d8:	a807      	add	r0, sp, #28
 80074da:	f003 f97b 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80074de:	2304      	movs	r3, #4
 80074e0:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80074e4:	4c32      	ldr	r4, [pc, #200]	; (80075b0 <LmHandlerConfigure+0x1e8>)
 80074e6:	78a3      	ldrb	r3, [r4, #2]
 80074e8:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80074ec:	a807      	add	r0, sp, #28
 80074ee:	f003 f971 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 80074f2:	2338      	movs	r3, #56	; 0x38
 80074f4:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80074fc:	a807      	add	r0, sp, #28
 80074fe:	f003 f969 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007502:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007506:	a905      	add	r1, sp, #20
 8007508:	7820      	ldrb	r0, [r4, #0]
 800750a:	f004 fe6d 	bl	800c1e8 <RegionGetPhyParam>
 800750e:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007510:	1b43      	subs	r3, r0, r5
 8007512:	bf18      	it	ne
 8007514:	2301      	movne	r3, #1
 8007516:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 8007518:	2014      	movs	r0, #20
 800751a:	f7ff ff45 	bl	80073a8 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800751e:	79a0      	ldrb	r0, [r4, #6]
 8007520:	f003 fdc6 	bl	800b0b0 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8007524:	4628      	mov	r0, r5
}
 8007526:	b010      	add	sp, #64	; 0x40
 8007528:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800752a:	2328      	movs	r3, #40	; 0x28
 800752c:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 8007530:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <LmHandlerConfigure+0x200>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	b14b      	cbz	r3, 800754c <LmHandlerConfigure+0x184>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007538:	a807      	add	r0, sp, #28
 800753a:	f002 fffd 	bl	800a538 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800753e:	4b22      	ldr	r3, [pc, #136]	; (80075c8 <LmHandlerConfigure+0x200>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	f240 518c 	movw	r1, #1420	; 0x58c
 8007548:	9808      	ldr	r0, [sp, #32]
 800754a:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800754c:	2327      	movs	r3, #39	; 0x27
 800754e:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007552:	a807      	add	r0, sp, #28
 8007554:	f003 f93e 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
 8007558:	2800      	cmp	r0, #0
 800755a:	f47f af62 	bne.w	8007422 <LmHandlerConfigure+0x5a>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800755e:	2301      	movs	r3, #1
 8007560:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007564:	a807      	add	r0, sp, #28
 8007566:	f002 ffe7 	bl	800a538 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800756a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f43f af57 	beq.w	8007422 <LmHandlerConfigure+0x5a>
                CtxRestoreDone = true;
 8007574:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <LmHandlerConfigure+0x1fc>)
 8007576:	2201      	movs	r2, #1
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	e752      	b.n	8007422 <LmHandlerConfigure+0x5a>
        mibReq.Type = MIB_NET_ID;
 800757c:	2305      	movs	r3, #5
 800757e:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8007582:	2300      	movs	r3, #0
 8007584:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8007586:	a807      	add	r0, sp, #28
 8007588:	f003 f924 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800758c:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <LmHandlerConfigure+0x200>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	4798      	blx	r3
 8007594:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <LmHandlerConfigure+0x204>)
 8007596:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 8007598:	2306      	movs	r3, #6
 800759a:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800759e:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80075a0:	a807      	add	r0, sp, #28
 80075a2:	f003 f917 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
 80075a6:	e761      	b.n	800746c <LmHandlerConfigure+0xa4>
        return LORAMAC_HANDLER_ERROR;
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	e7bb      	b.n	8007526 <LmHandlerConfigure+0x15e>
 80075ae:	bf00      	nop
 80075b0:	20000588 	.word	0x20000588
 80075b4:	2000056c 	.word	0x2000056c
 80075b8:	08012324 	.word	0x08012324
 80075bc:	200005ac 	.word	0x200005ac
 80075c0:	200005c0 	.word	0x200005c0
 80075c4:	20000566 	.word	0x20000566
 80075c8:	20000570 	.word	0x20000570
 80075cc:	20000078 	.word	0x20000078
 80075d0:	08012370 	.word	0x08012370

080075d4 <LmHandlerPackageRegister>:
    switch( id )
 80075d4:	b9f0      	cbnz	r0, 8007614 <LmHandlerPackageRegister+0x40>
{
 80075d6:	b538      	push	{r3, r4, r5, lr}
 80075d8:	460c      	mov	r4, r1
 80075da:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 80075dc:	f000 fb76 	bl	8007ccc <LmhpCompliancePackageFactory>
    if( package != NULL )
 80075e0:	b1a8      	cbz	r0, 800760e <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 80075e2:	4a0e      	ldr	r2, [pc, #56]	; (800761c <LmHandlerPackageRegister+0x48>)
 80075e4:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80075e8:	4a0d      	ldr	r2, [pc, #52]	; (8007620 <LmHandlerPackageRegister+0x4c>)
 80075ea:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 80075ec:	4a0d      	ldr	r2, [pc, #52]	; (8007624 <LmHandlerPackageRegister+0x50>)
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80075f2:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 80075f4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80075f6:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80075f8:	490b      	ldr	r1, [pc, #44]	; (8007628 <LmHandlerPackageRegister+0x54>)
 80075fa:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80075fc:	6992      	ldr	r2, [r2, #24]
 80075fe:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8007600:	6843      	ldr	r3, [r0, #4]
 8007602:	22f2      	movs	r2, #242	; 0xf2
 8007604:	4909      	ldr	r1, [pc, #36]	; (800762c <LmHandlerPackageRegister+0x58>)
 8007606:	4620      	mov	r0, r4
 8007608:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800760a:	2000      	movs	r0, #0
}
 800760c:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 800760e:	f04f 30ff 	mov.w	r0, #4294967295
 8007612:	e7fb      	b.n	800760c <LmHandlerPackageRegister+0x38>
 8007614:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	20000574 	.word	0x20000574
 8007620:	08006ef5 	.word	0x08006ef5
 8007624:	20000570 	.word	0x20000570
 8007628:	08006fb1 	.word	0x08006fb1
 800762c:	20000474 	.word	0x20000474

08007630 <LmHandlerInit>:
{
 8007630:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8007632:	4b13      	ldr	r3, [pc, #76]	; (8007680 <LmHandlerInit+0x50>)
 8007634:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <LmHandlerInit+0x54>)
 8007638:	4a13      	ldr	r2, [pc, #76]	; (8007688 <LmHandlerInit+0x58>)
 800763a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800763c:	4a13      	ldr	r2, [pc, #76]	; (800768c <LmHandlerInit+0x5c>)
 800763e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007640:	4a13      	ldr	r2, [pc, #76]	; (8007690 <LmHandlerInit+0x60>)
 8007642:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007644:	4a13      	ldr	r2, [pc, #76]	; (8007694 <LmHandlerInit+0x64>)
 8007646:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007648:	6802      	ldr	r2, [r0, #0]
 800764a:	4b13      	ldr	r3, [pc, #76]	; (8007698 <LmHandlerInit+0x68>)
 800764c:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800764e:	6842      	ldr	r2, [r0, #4]
 8007650:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8007652:	6882      	ldr	r2, [r0, #8]
 8007654:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8007656:	4a11      	ldr	r2, [pc, #68]	; (800769c <LmHandlerInit+0x6c>)
 8007658:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800765a:	6982      	ldr	r2, [r0, #24]
 800765c:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800765e:	4b10      	ldr	r3, [pc, #64]	; (80076a0 <LmHandlerInit+0x70>)
 8007660:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8007662:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007664:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 8007666:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007668:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800766a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800766c:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800766e:	4619      	mov	r1, r3
 8007670:	2000      	movs	r0, #0
 8007672:	f7ff ffaf 	bl	80075d4 <LmHandlerPackageRegister>
 8007676:	b900      	cbnz	r0, 800767a <LmHandlerInit+0x4a>
}
 8007678:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 800767a:	f04f 30ff 	mov.w	r0, #4294967295
 800767e:	e7fb      	b.n	8007678 <LmHandlerInit+0x48>
 8007680:	20000570 	.word	0x20000570
 8007684:	200005c0 	.word	0x200005c0
 8007688:	08006e49 	.word	0x08006e49
 800768c:	08007231 	.word	0x08007231
 8007690:	080072f5 	.word	0x080072f5
 8007694:	08006de5 	.word	0x08006de5
 8007698:	200005ac 	.word	0x200005ac
 800769c:	0800c191 	.word	0x0800c191
 80076a0:	2000059c 	.word	0x2000059c

080076a4 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 80076a4:	b161      	cbz	r1, 80076c0 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 80076a6:	b118      	cbz	r0, 80076b0 <LmHandlerGetVersion+0xc>
 80076a8:	2801      	cmp	r0, #1
 80076aa:	d005      	beq.n	80076b8 <LmHandlerGetVersion+0x14>
 80076ac:	2000      	movs	r0, #0
 80076ae:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 80076b0:	4a05      	ldr	r2, [pc, #20]	; (80076c8 <LmHandlerGetVersion+0x24>)
 80076b2:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 80076b4:	2000      	movs	r0, #0
            break;
 80076b6:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 80076b8:	4a04      	ldr	r2, [pc, #16]	; (80076cc <LmHandlerGetVersion+0x28>)
 80076ba:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80076bc:	2000      	movs	r0, #0
            break;
 80076be:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80076c0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	01000400 	.word	0x01000400
 80076cc:	02010001 	.word	0x02010001

080076d0 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 80076d0:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 80076d2:	f003 fd01 	bl	800b0d8 <LoRaMacDeInitialization>
 80076d6:	b900      	cbnz	r0, 80076da <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80076d8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80076da:	f06f 0001 	mvn.w	r0, #1
 80076de:	e7fb      	b.n	80076d8 <LmHandlerStop+0x8>

080076e0 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 80076e0:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 80076e2:	f002 fe8b 	bl	800a3fc <LoRaMacHalt>
 80076e6:	b900      	cbnz	r0, 80076ea <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80076e8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80076ea:	f06f 0001 	mvn.w	r0, #1
 80076ee:	e7fb      	b.n	80076e8 <LmHandlerHalt+0x8>

080076f0 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80076f0:	b510      	push	{r4, lr}
 80076f2:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 80076f4:	f7ff fff4 	bl	80076e0 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 80076f8:	4604      	mov	r4, r0
 80076fa:	b148      	cbz	r0, 8007710 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 80076fc:	b92c      	cbnz	r4, 800770a <LmHandlerNvmDataStore+0x1a>
 80076fe:	4b18      	ldr	r3, [pc, #96]	; (8007760 <LmHandlerNvmDataStore+0x70>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	b10b      	cbz	r3, 800770a <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8007706:	2001      	movs	r0, #1
 8007708:	4798      	blx	r3
    }

    return lmhStatus;
}
 800770a:	4620      	mov	r0, r4
 800770c:	b00a      	add	sp, #40	; 0x28
 800770e:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8007710:	f004 fd46 	bl	800c1a0 <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 8007714:	f110 0f02 	cmn.w	r0, #2
 8007718:	d012      	beq.n	8007740 <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800771a:	b9d0      	cbnz	r0, 8007752 <LmHandlerNvmDataStore+0x62>
 800771c:	4b10      	ldr	r3, [pc, #64]	; (8007760 <LmHandlerNvmDataStore+0x70>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	b1cb      	cbz	r3, 8007758 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 8007724:	2327      	movs	r3, #39	; 0x27
 8007726:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800772a:	a801      	add	r0, sp, #4
 800772c:	f002 ff04 	bl	800a538 <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 8007730:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <LmHandlerNvmDataStore+0x70>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 800773a:	9802      	ldr	r0, [sp, #8]
 800773c:	4798      	blx	r3
 800773e:	e001      	b.n	8007744 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8007740:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8007744:	f004 fd3c 	bl	800c1c0 <NvmDataMgmtStoreEnd>
 8007748:	2800      	cmp	r0, #0
 800774a:	d0d7      	beq.n	80076fc <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800774c:	f04f 34ff 	mov.w	r4, #4294967295
 8007750:	e7db      	b.n	800770a <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007752:	f04f 34ff 	mov.w	r4, #4294967295
 8007756:	e7f5      	b.n	8007744 <LmHandlerNvmDataStore+0x54>
 8007758:	f04f 34ff 	mov.w	r4, #4294967295
 800775c:	e7f2      	b.n	8007744 <LmHandlerNvmDataStore+0x54>
 800775e:	bf00      	nop
 8007760:	20000570 	.word	0x20000570

08007764 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8007764:	4b01      	ldr	r3, [pc, #4]	; (800776c <LmhpComplianceIsInitialized+0x8>)
 8007766:	7818      	ldrb	r0, [r3, #0]
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	200005d4 	.word	0x200005d4

08007770 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8007770:	4b01      	ldr	r3, [pc, #4]	; (8007778 <LmhpComplianceIsTxPending+0x8>)
 8007772:	7858      	ldrb	r0, [r3, #1]
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	200005d4 	.word	0x200005d4

0800777c <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800777c:	4770      	bx	lr

0800777e <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800777e:	4770      	bx	lr

08007780 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 8007780:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 8007782:	4b03      	ldr	r3, [pc, #12]	; (8007790 <OnProcessTimer+0x10>)
 8007784:	2201      	movs	r2, #1
 8007786:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 8007788:	4b02      	ldr	r3, [pc, #8]	; (8007794 <OnProcessTimer+0x14>)
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	4798      	blx	r3
}
 800778e:	bd08      	pop	{r3, pc}
 8007790:	200005d4 	.word	0x200005d4
 8007794:	200000c8 	.word	0x200000c8

08007798 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8007798:	4b8d      	ldr	r3, [pc, #564]	; (80079d0 <LmhpComplianceOnMcpsIndication+0x238>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 81fd 	beq.w	8007b9c <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 80077a2:	78c3      	ldrb	r3, [r0, #3]
 80077a4:	b90b      	cbnz	r3, 80077aa <LmhpComplianceOnMcpsIndication+0x12>
 80077a6:	7b83      	ldrb	r3, [r0, #14]
 80077a8:	b11b      	cbz	r3, 80077b2 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 80077aa:	4a89      	ldr	r2, [pc, #548]	; (80079d0 <LmhpComplianceOnMcpsIndication+0x238>)
 80077ac:	8a13      	ldrh	r3, [r2, #16]
 80077ae:	3301      	adds	r3, #1
 80077b0:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 80077b2:	7b43      	ldrb	r3, [r0, #13]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 81f1 	beq.w	8007b9c <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80077ba:	78c3      	ldrb	r3, [r0, #3]
 80077bc:	2be0      	cmp	r3, #224	; 0xe0
 80077be:	f040 81ed 	bne.w	8007b9c <LmhpComplianceOnMcpsIndication+0x404>
{
 80077c2:	b570      	push	{r4, r5, r6, lr}
 80077c4:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 80077c6:	4b82      	ldr	r3, [pc, #520]	; (80079d0 <LmhpComplianceOnMcpsIndication+0x238>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 80077cc:	6884      	ldr	r4, [r0, #8]
 80077ce:	7823      	ldrb	r3, [r4, #0]
 80077d0:	2b7f      	cmp	r3, #127	; 0x7f
 80077d2:	f200 8093 	bhi.w	80078fc <LmhpComplianceOnMcpsIndication+0x164>
 80077d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80077da:	0080      	.short	0x0080
 80077dc:	00a600a1 	.word	0x00a600a1
 80077e0:	00b400ac 	.word	0x00b400ac
 80077e4:	00c800c1 	.word	0x00c800c1
 80077e8:	00f200e1 	.word	0x00f200e1
 80077ec:	0133011f 	.word	0x0133011f
 80077f0:	00910091 	.word	0x00910091
 80077f4:	00910091 	.word	0x00910091
 80077f8:	00910091 	.word	0x00910091
 80077fc:	00910091 	.word	0x00910091
 8007800:	00910091 	.word	0x00910091
 8007804:	00910091 	.word	0x00910091
 8007808:	00910091 	.word	0x00910091
 800780c:	00910091 	.word	0x00910091
 8007810:	00910091 	.word	0x00910091
 8007814:	00910091 	.word	0x00910091
 8007818:	01370091 	.word	0x01370091
 800781c:	0142013e 	.word	0x0142013e
 8007820:	00910091 	.word	0x00910091
 8007824:	00910091 	.word	0x00910091
 8007828:	00910091 	.word	0x00910091
 800782c:	00910091 	.word	0x00910091
 8007830:	00910091 	.word	0x00910091
 8007834:	00910091 	.word	0x00910091
 8007838:	00910091 	.word	0x00910091
 800783c:	00910091 	.word	0x00910091
 8007840:	00910091 	.word	0x00910091
 8007844:	00910091 	.word	0x00910091
 8007848:	00910091 	.word	0x00910091
 800784c:	00910091 	.word	0x00910091
 8007850:	00910091 	.word	0x00910091
 8007854:	00910091 	.word	0x00910091
 8007858:	00910091 	.word	0x00910091
 800785c:	00910091 	.word	0x00910091
 8007860:	00910091 	.word	0x00910091
 8007864:	00910091 	.word	0x00910091
 8007868:	00910091 	.word	0x00910091
 800786c:	00910091 	.word	0x00910091
 8007870:	00910091 	.word	0x00910091
 8007874:	00910091 	.word	0x00910091
 8007878:	00910091 	.word	0x00910091
 800787c:	00910091 	.word	0x00910091
 8007880:	00910091 	.word	0x00910091
 8007884:	00910091 	.word	0x00910091
 8007888:	00910091 	.word	0x00910091
 800788c:	00910091 	.word	0x00910091
 8007890:	00910091 	.word	0x00910091
 8007894:	00910091 	.word	0x00910091
 8007898:	00910091 	.word	0x00910091
 800789c:	00910091 	.word	0x00910091
 80078a0:	00910091 	.word	0x00910091
 80078a4:	00910091 	.word	0x00910091
 80078a8:	00910091 	.word	0x00910091
 80078ac:	00910091 	.word	0x00910091
 80078b0:	00910091 	.word	0x00910091
 80078b4:	00910091 	.word	0x00910091
 80078b8:	00910091 	.word	0x00910091
 80078bc:	00910091 	.word	0x00910091
 80078c0:	00910091 	.word	0x00910091
 80078c4:	00910091 	.word	0x00910091
 80078c8:	00910091 	.word	0x00910091
 80078cc:	00910091 	.word	0x00910091
 80078d0:	00910091 	.word	0x00910091
 80078d4:	016e014d 	.word	0x016e014d
 80078d8:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 80078da:	4b3d      	ldr	r3, [pc, #244]	; (80079d0 <LmhpComplianceOnMcpsIndication+0x238>)
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	2101      	movs	r1, #1
 80078e0:	7299      	strb	r1, [r3, #10]
 80078e2:	2000      	movs	r0, #0
 80078e4:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 80078e6:	68d8      	ldr	r0, [r3, #12]
 80078e8:	7a9a      	ldrb	r2, [r3, #10]
 80078ea:	1854      	adds	r4, r2, r1
 80078ec:	729c      	strb	r4, [r3, #10]
 80078ee:	2406      	movs	r4, #6
 80078f0:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 80078f2:	68d8      	ldr	r0, [r3, #12]
 80078f4:	7a9a      	ldrb	r2, [r3, #10]
 80078f6:	1854      	adds	r4, r2, r1
 80078f8:	729c      	strb	r4, [r3, #10]
 80078fa:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 80078fc:	4b34      	ldr	r3, [pc, #208]	; (80079d0 <LmhpComplianceOnMcpsIndication+0x238>)
 80078fe:	7a9b      	ldrb	r3, [r3, #10]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 8144 	beq.w	8007b8e <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 8007906:	4c33      	ldr	r4, [pc, #204]	; (80079d4 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007908:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800790c:	4620      	mov	r0, r4
 800790e:	f009 ff9b 	bl	8011848 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 8007912:	4620      	mov	r0, r4
 8007914:	f009 ff52 	bl	80117bc <UTIL_TIMER_Start>
}
 8007918:	b014      	add	sp, #80	; 0x50
 800791a:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 800791c:	4b2c      	ldr	r3, [pc, #176]	; (80079d0 <LmhpComplianceOnMcpsIndication+0x238>)
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8007924:	e7ea      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8007926:	4b2c      	ldr	r3, [pc, #176]	; (80079d8 <LmhpComplianceOnMcpsIndication+0x240>)
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	2101      	movs	r1, #1
 800792c:	2002      	movs	r0, #2
 800792e:	4798      	blx	r3
        break;
 8007930:	e7e4      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8007932:	7862      	ldrb	r2, [r4, #1]
 8007934:	4b26      	ldr	r3, [pc, #152]	; (80079d0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007936:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 8007940:	e7dc      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 8007942:	2304      	movs	r3, #4
 8007944:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8007948:	7863      	ldrb	r3, [r4, #1]
 800794a:	3b00      	subs	r3, #0
 800794c:	bf18      	it	ne
 800794e:	2301      	movne	r3, #1
 8007950:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007954:	4668      	mov	r0, sp
 8007956:	f002 ff3d 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
        break;
 800795a:	e7cf      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800795c:	7860      	ldrb	r0, [r4, #1]
 800795e:	3800      	subs	r0, #0
 8007960:	bf18      	it	ne
 8007962:	2001      	movne	r0, #1
 8007964:	f003 fba4 	bl	800b0b0 <LoRaMacTestSetDutyCycleOn>
        break;
 8007968:	e7c8      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800796a:	466d      	mov	r5, sp
 800796c:	4e1b      	ldr	r6, [pc, #108]	; (80079dc <LmhpComplianceOnMcpsIndication+0x244>)
 800796e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007972:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007976:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800797a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800797e:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8007980:	2b0a      	cmp	r3, #10
 8007982:	d8bb      	bhi.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8007984:	4a16      	ldr	r2, [pc, #88]	; (80079e0 <LmhpComplianceOnMcpsIndication+0x248>)
 8007986:	6812      	ldr	r2, [r2, #0]
 8007988:	6852      	ldr	r2, [r2, #4]
 800798a:	2a00      	cmp	r2, #0
 800798c:	d0b6      	beq.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800798e:	a914      	add	r1, sp, #80	; 0x50
 8007990:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007994:	f853 0c50 	ldr.w	r0, [r3, #-80]
 8007998:	4790      	blx	r2
        break;
 800799a:	e7af      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800799c:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800799e:	1e53      	subs	r3, r2, #1
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d8aa      	bhi.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80079a6:	1e50      	subs	r0, r2, #1
 80079a8:	bf18      	it	ne
 80079aa:	2001      	movne	r0, #1
 80079ac:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <LmhpComplianceOnMcpsIndication+0x238>)
 80079ae:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <LmhpComplianceOnMcpsIndication+0x248>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0a0      	beq.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 80079ba:	4798      	blx	r3
 80079bc:	e79e      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 80079be:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <LmhpComplianceOnMcpsIndication+0x238>)
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	2101      	movs	r1, #1
 80079c4:	7299      	strb	r1, [r3, #10]
 80079c6:	2308      	movs	r3, #8
 80079c8:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80079ca:	460b      	mov	r3, r1
 80079cc:	e01b      	b.n	8007a06 <LmhpComplianceOnMcpsIndication+0x26e>
 80079ce:	bf00      	nop
 80079d0:	200005d4 	.word	0x200005d4
 80079d4:	2000060c 	.word	0x2000060c
 80079d8:	200000c8 	.word	0x200000c8
 80079dc:	08011d54 	.word	0x08011d54
 80079e0:	200005d0 	.word	0x200005d0
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80079e4:	6882      	ldr	r2, [r0, #8]
 80079e6:	f101 0c01 	add.w	ip, r1, #1
 80079ea:	5c52      	ldrb	r2, [r2, r1]
 80079ec:	496c      	ldr	r1, [pc, #432]	; (8007ba0 <LmhpComplianceOnMcpsIndication+0x408>)
 80079ee:	68cd      	ldr	r5, [r1, #12]
 80079f0:	7a8c      	ldrb	r4, [r1, #10]
 80079f2:	f104 0e01 	add.w	lr, r4, #1
 80079f6:	f881 e00a 	strb.w	lr, [r1, #10]
 80079fa:	3201      	adds	r2, #1
 80079fc:	552a      	strb	r2, [r5, r4]
             i++ )
 80079fe:	3301      	adds	r3, #1
 8007a00:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007a02:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007a06:	4a66      	ldr	r2, [pc, #408]	; (8007ba0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007a08:	7a52      	ldrb	r2, [r2, #9]
 8007a0a:	7b04      	ldrb	r4, [r0, #12]
 8007a0c:	42a2      	cmp	r2, r4
 8007a0e:	bf28      	it	cs
 8007a10:	4622      	movcs	r2, r4
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d8e6      	bhi.n	80079e4 <LmhpComplianceOnMcpsIndication+0x24c>
 8007a16:	e771      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8007a18:	4b61      	ldr	r3, [pc, #388]	; (8007ba0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	7299      	strb	r1, [r3, #10]
 8007a20:	2109      	movs	r1, #9
 8007a22:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8007a24:	8a18      	ldrh	r0, [r3, #16]
 8007a26:	68d9      	ldr	r1, [r3, #12]
 8007a28:	7a9a      	ldrb	r2, [r3, #10]
 8007a2a:	1c54      	adds	r4, r2, #1
 8007a2c:	729c      	strb	r4, [r3, #10]
 8007a2e:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8007a30:	8a1a      	ldrh	r2, [r3, #16]
 8007a32:	68d8      	ldr	r0, [r3, #12]
 8007a34:	7a99      	ldrb	r1, [r3, #10]
 8007a36:	1c4c      	adds	r4, r1, #1
 8007a38:	729c      	strb	r4, [r3, #10]
 8007a3a:	0a13      	lsrs	r3, r2, #8
 8007a3c:	5443      	strb	r3, [r0, r1]
        break;
 8007a3e:	e75d      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 8007a40:	4b57      	ldr	r3, [pc, #348]	; (8007ba0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	821a      	strh	r2, [r3, #16]
        break;
 8007a46:	e759      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 8007a48:	2304      	movs	r3, #4
 8007a4a:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 8007a4e:	4668      	mov	r0, sp
 8007a50:	f003 f946 	bl	800ace0 <LoRaMacMlmeRequest>
        break;
 8007a54:	e752      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 8007a56:	4b53      	ldr	r3, [pc, #332]	; (8007ba4 <LmhpComplianceOnMcpsIndication+0x40c>)
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	4798      	blx	r3
        break;
 8007a5c:	e74e      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8007a5e:	7860      	ldrb	r0, [r4, #1]
 8007a60:	4b4f      	ldr	r3, [pc, #316]	; (8007ba0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007a62:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8007a64:	4b50      	ldr	r3, [pc, #320]	; (8007ba8 <LmhpComplianceOnMcpsIndication+0x410>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f43f af46 	beq.w	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8007a70:	4798      	blx	r3
 8007a72:	e743      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 8007a74:	7b03      	ldrb	r3, [r0, #12]
 8007a76:	2b07      	cmp	r3, #7
 8007a78:	f47f af40 	bne.w	80078fc <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 8007a7c:	2305      	movs	r3, #5
 8007a7e:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8007a82:	7863      	ldrb	r3, [r4, #1]
 8007a84:	78a2      	ldrb	r2, [r4, #2]
 8007a86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 8007a8a:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007a8e:	78e3      	ldrb	r3, [r4, #3]
 8007a90:	7922      	ldrb	r2, [r4, #4]
 8007a92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007a96:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007a98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007a9c:	2264      	movs	r2, #100	; 0x64
 8007a9e:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 8007aa2:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8007aa4:	6883      	ldr	r3, [r0, #8]
 8007aa6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007aaa:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 8007aae:	4668      	mov	r0, sp
 8007ab0:	f003 f916 	bl	800ace0 <LoRaMacMlmeRequest>
        break;
 8007ab4:	e722      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8007ab6:	2339      	movs	r3, #57	; 0x39
 8007ab8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 8007abc:	2300      	movs	r3, #0
 8007abe:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007ac2:	a80b      	add	r0, sp, #44	; 0x2c
 8007ac4:	f002 fe86 	bl	800a7d4 <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 8007ac8:	4b35      	ldr	r3, [pc, #212]	; (8007ba0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8007ad0:	e714      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 8007ad2:	232a      	movs	r3, #42	; 0x2a
 8007ad4:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007ad8:	4668      	mov	r0, sp
 8007ada:	f002 fd2d 	bl	800a538 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8007ade:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8007ae0:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8007ae2:	4b2f      	ldr	r3, [pc, #188]	; (8007ba0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007ae4:	68dc      	ldr	r4, [r3, #12]
 8007ae6:	7a98      	ldrb	r0, [r3, #10]
 8007ae8:	1c45      	adds	r5, r0, #1
 8007aea:	729d      	strb	r5, [r3, #10]
 8007aec:	257f      	movs	r5, #127	; 0x7f
 8007aee:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8007af0:	482d      	ldr	r0, [pc, #180]	; (8007ba8 <LmhpComplianceOnMcpsIndication+0x410>)
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	68dd      	ldr	r5, [r3, #12]
 8007af6:	7a9c      	ldrb	r4, [r3, #10]
 8007af8:	1c66      	adds	r6, r4, #1
 8007afa:	729e      	strb	r6, [r3, #10]
 8007afc:	78c6      	ldrb	r6, [r0, #3]
 8007afe:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8007b00:	68dd      	ldr	r5, [r3, #12]
 8007b02:	7a9c      	ldrb	r4, [r3, #10]
 8007b04:	1c66      	adds	r6, r4, #1
 8007b06:	729e      	strb	r6, [r3, #10]
 8007b08:	7886      	ldrb	r6, [r0, #2]
 8007b0a:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8007b0c:	68dd      	ldr	r5, [r3, #12]
 8007b0e:	7a9c      	ldrb	r4, [r3, #10]
 8007b10:	1c66      	adds	r6, r4, #1
 8007b12:	729e      	strb	r6, [r3, #10]
 8007b14:	7846      	ldrb	r6, [r0, #1]
 8007b16:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8007b18:	68dd      	ldr	r5, [r3, #12]
 8007b1a:	7a9c      	ldrb	r4, [r3, #10]
 8007b1c:	1c66      	adds	r6, r4, #1
 8007b1e:	729e      	strb	r6, [r3, #10]
 8007b20:	7800      	ldrb	r0, [r0, #0]
 8007b22:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8007b24:	68dc      	ldr	r4, [r3, #12]
 8007b26:	7a98      	ldrb	r0, [r3, #10]
 8007b28:	1c45      	adds	r5, r0, #1
 8007b2a:	729d      	strb	r5, [r3, #10]
 8007b2c:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8007b30:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8007b32:	68dc      	ldr	r4, [r3, #12]
 8007b34:	7a98      	ldrb	r0, [r3, #10]
 8007b36:	1c45      	adds	r5, r0, #1
 8007b38:	729d      	strb	r5, [r3, #10]
 8007b3a:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007b3e:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8007b40:	68dc      	ldr	r4, [r3, #12]
 8007b42:	7a98      	ldrb	r0, [r3, #10]
 8007b44:	1c45      	adds	r5, r0, #1
 8007b46:	729d      	strb	r5, [r3, #10]
 8007b48:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8007b4c:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8007b4e:	68dc      	ldr	r4, [r3, #12]
 8007b50:	7a98      	ldrb	r0, [r3, #10]
 8007b52:	1c45      	adds	r5, r0, #1
 8007b54:	729d      	strb	r5, [r3, #10]
 8007b56:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8007b58:	68d8      	ldr	r0, [r3, #12]
 8007b5a:	7a99      	ldrb	r1, [r3, #10]
 8007b5c:	1c4c      	adds	r4, r1, #1
 8007b5e:	729c      	strb	r4, [r3, #10]
 8007b60:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8007b64:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8007b66:	68d8      	ldr	r0, [r3, #12]
 8007b68:	7a99      	ldrb	r1, [r3, #10]
 8007b6a:	1c4c      	adds	r4, r1, #1
 8007b6c:	729c      	strb	r4, [r3, #10]
 8007b6e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007b72:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8007b74:	68d8      	ldr	r0, [r3, #12]
 8007b76:	7a99      	ldrb	r1, [r3, #10]
 8007b78:	1c4c      	adds	r4, r1, #1
 8007b7a:	729c      	strb	r4, [r3, #10]
 8007b7c:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8007b80:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8007b82:	68d8      	ldr	r0, [r3, #12]
 8007b84:	7a99      	ldrb	r1, [r3, #10]
 8007b86:	1c4c      	adds	r4, r1, #1
 8007b88:	729c      	strb	r4, [r3, #10]
 8007b8a:	5442      	strb	r2, [r0, r1]
        break;
 8007b8c:	e6b6      	b.n	80078fc <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 8007b8e:	4807      	ldr	r0, [pc, #28]	; (8007bac <LmhpComplianceOnMcpsIndication+0x414>)
 8007b90:	f009 fdba 	bl	8011708 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8007b94:	4b02      	ldr	r3, [pc, #8]	; (8007ba0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	705a      	strb	r2, [r3, #1]
 8007b9a:	e6bd      	b.n	8007918 <LmhpComplianceOnMcpsIndication+0x180>
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	200005d4 	.word	0x200005d4
 8007ba4:	200000c8 	.word	0x200000c8
 8007ba8:	200005d0 	.word	0x200005d0
 8007bac:	2000060c 	.word	0x2000060c

08007bb0 <LmhpComplianceProcess>:
{
 8007bb0:	b530      	push	{r4, r5, lr}
 8007bb2:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8007bb4:	4b28      	ldr	r3, [pc, #160]	; (8007c58 <LmhpComplianceProcess+0xa8>)
 8007bb6:	785b      	ldrb	r3, [r3, #1]
 8007bb8:	b993      	cbnz	r3, 8007be0 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8007bba:	4b27      	ldr	r3, [pc, #156]	; (8007c58 <LmhpComplianceProcess+0xa8>)
 8007bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d13f      	bne.n	8007c44 <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 8007bc4:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <LmhpComplianceProcess+0xa8>)
 8007bc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bca:	b13b      	cbz	r3, 8007bdc <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8007bcc:	4b22      	ldr	r3, [pc, #136]	; (8007c58 <LmhpComplianceProcess+0xa8>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 8007bd4:	4b21      	ldr	r3, [pc, #132]	; (8007c5c <LmhpComplianceProcess+0xac>)
 8007bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd8:	b103      	cbz	r3, 8007bdc <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8007bda:	4798      	blx	r3
}
 8007bdc:	b003      	add	sp, #12
 8007bde:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8007be0:	f009 fd52 	bl	8011688 <UTIL_TIMER_GetCurrentTime>
 8007be4:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8007be6:	4b1c      	ldr	r3, [pc, #112]	; (8007c58 <LmhpComplianceProcess+0xa8>)
 8007be8:	685d      	ldr	r5, [r3, #4]
 8007bea:	f7ff f9f5 	bl	8006fd8 <LmHandlerGetDutyCycleWaitTime>
 8007bee:	4405      	add	r5, r0
 8007bf0:	42a5      	cmp	r5, r4
 8007bf2:	d2e7      	bcs.n	8007bc4 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8007bf4:	4b18      	ldr	r3, [pc, #96]	; (8007c58 <LmhpComplianceProcess+0xa8>)
 8007bf6:	7a9b      	ldrb	r3, [r3, #10]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0e3      	beq.n	8007bc4 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 8007bfc:	22e0      	movs	r2, #224	; 0xe0
 8007bfe:	f88d 2000 	strb.w	r2, [sp]
 8007c02:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8007c06:	4b14      	ldr	r3, [pc, #80]	; (8007c58 <LmhpComplianceProcess+0xa8>)
 8007c08:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 8007c0a:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	7a19      	ldrb	r1, [r3, #8]
 8007c10:	4668      	mov	r0, sp
 8007c12:	f7ff f9f9 	bl	8007008 <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 8007c16:	f110 0f02 	cmn.w	r0, #2
 8007c1a:	d009      	beq.n	8007c30 <LmhpComplianceProcess+0x80>
 8007c1c:	f110 0f06 	cmn.w	r0, #6
 8007c20:	d006      	beq.n	8007c30 <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 8007c22:	4b0d      	ldr	r3, [pc, #52]	; (8007c58 <LmhpComplianceProcess+0xa8>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8007c28:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8007c2a:	4b0b      	ldr	r3, [pc, #44]	; (8007c58 <LmhpComplianceProcess+0xa8>)
 8007c2c:	605c      	str	r4, [r3, #4]
 8007c2e:	e7c9      	b.n	8007bc4 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 8007c30:	4d0b      	ldr	r5, [pc, #44]	; (8007c60 <LmhpComplianceProcess+0xb0>)
 8007c32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c36:	4628      	mov	r0, r5
 8007c38:	f009 fe06 	bl	8011848 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f009 fdbd 	bl	80117bc <UTIL_TIMER_Start>
 8007c42:	e7f2      	b.n	8007c2a <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 8007c44:	4b04      	ldr	r3, [pc, #16]	; (8007c58 <LmhpComplianceProcess+0xa8>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8007c4c:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8007c50:	f7ff fa7c 	bl	800714c <LmHandlerRequestClass>
 8007c54:	e7b6      	b.n	8007bc4 <LmhpComplianceProcess+0x14>
 8007c56:	bf00      	nop
 8007c58:	200005d4 	.word	0x200005d4
 8007c5c:	200000c8 	.word	0x200000c8
 8007c60:	2000060c 	.word	0x2000060c

08007c64 <LmhpComplianceInit>:
{
 8007c64:	b530      	push	{r4, r5, lr}
 8007c66:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8007c68:	b188      	cbz	r0, 8007c8e <LmhpComplianceInit+0x2a>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	b179      	cbz	r1, 8007c8e <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 8007c6e:	4813      	ldr	r0, [pc, #76]	; (8007cbc <LmhpComplianceInit+0x58>)
 8007c70:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8007c72:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <LmhpComplianceInit+0x5c>)
 8007c74:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8007c76:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8007c78:	2201      	movs	r2, #1
 8007c7a:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	9200      	str	r2, [sp, #0]
 8007c80:	4b10      	ldr	r3, [pc, #64]	; (8007cc4 <LmhpComplianceInit+0x60>)
 8007c82:	f04f 31ff 	mov.w	r1, #4294967295
 8007c86:	4810      	ldr	r0, [pc, #64]	; (8007cc8 <LmhpComplianceInit+0x64>)
 8007c88:	f009 fce0 	bl	801164c <UTIL_TIMER_Create>
 8007c8c:	e004      	b.n	8007c98 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	4a0a      	ldr	r2, [pc, #40]	; (8007cbc <LmhpComplianceInit+0x58>)
 8007c92:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8007c94:	4a0a      	ldr	r2, [pc, #40]	; (8007cc0 <LmhpComplianceInit+0x5c>)
 8007c96:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8007c98:	4c09      	ldr	r4, [pc, #36]	; (8007cc0 <LmhpComplianceInit+0x5c>)
 8007c9a:	2500      	movs	r5, #0
 8007c9c:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	f104 0014 	add.w	r0, r4, #20
 8007ca6:	f007 fb4a 	bl	800f33e <memset1>
    ComplianceTestState.IsTxPending = false;
 8007caa:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8007cac:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8007cae:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8007cb2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8007cb6:	b003      	add	sp, #12
 8007cb8:	bd30      	pop	{r4, r5, pc}
 8007cba:	bf00      	nop
 8007cbc:	200005d0 	.word	0x200005d0
 8007cc0:	200005d4 	.word	0x200005d4
 8007cc4:	08007781 	.word	0x08007781
 8007cc8:	2000060c 	.word	0x2000060c

08007ccc <LmhpCompliancePackageFactory>:
}
 8007ccc:	4800      	ldr	r0, [pc, #0]	; (8007cd0 <LmhpCompliancePackageFactory+0x4>)
 8007cce:	4770      	bx	lr
 8007cd0:	200000c8 	.word	0x200000c8

08007cd4 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8007cd4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8007cd6:	4a06      	ldr	r2, [pc, #24]	; (8007cf0 <OnRadioRxError+0x1c>)
 8007cd8:	7813      	ldrb	r3, [r2, #0]
 8007cda:	f043 0304 	orr.w	r3, r3, #4
 8007cde:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007ce0:	4b04      	ldr	r3, [pc, #16]	; (8007cf4 <OnRadioRxError+0x20>)
 8007ce2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007ce6:	b113      	cbz	r3, 8007cee <OnRadioRxError+0x1a>
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	b103      	cbz	r3, 8007cee <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007cec:	4798      	blx	r3
    }
}
 8007cee:	bd08      	pop	{r3, pc}
 8007cf0:	20000624 	.word	0x20000624
 8007cf4:	20000628 	.word	0x20000628

08007cf8 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007cf8:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <UpdateRxSlotIdleState+0x20>)
 8007cfa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d004      	beq.n	8007d0c <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8007d02:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <UpdateRxSlotIdleState+0x24>)
 8007d04:	2206      	movs	r2, #6
 8007d06:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 8007d0a:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007d0c:	4b03      	ldr	r3, [pc, #12]	; (8007d1c <UpdateRxSlotIdleState+0x24>)
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	20008000 	.word	0x20008000
 8007d1c:	20000628 	.word	0x20000628

08007d20 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8007d20:	4b01      	ldr	r3, [pc, #4]	; (8007d28 <LoRaMacEnableRequests+0x8>)
 8007d22:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 8007d26:	4770      	bx	lr
 8007d28:	20000628 	.word	0x20000628

08007d2c <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8007d2c:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8007d2e:	4b15      	ldr	r3, [pc, #84]	; (8007d84 <LoRaMacHandleIndicationEvents+0x58>)
 8007d30:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007d34:	f013 0f08 	tst.w	r3, #8
 8007d38:	d00e      	beq.n	8007d58 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8007d3a:	4812      	ldr	r0, [pc, #72]	; (8007d84 <LoRaMacHandleIndicationEvents+0x58>)
 8007d3c:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8007d40:	f36f 03c3 	bfc	r3, #3, #1
 8007d44:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8007d48:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 8007d52:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 8007d56:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007d58:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <LoRaMacHandleIndicationEvents+0x58>)
 8007d5a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007d5e:	f013 0f02 	tst.w	r3, #2
 8007d62:	d00e      	beq.n	8007d82 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8007d64:	4807      	ldr	r0, [pc, #28]	; (8007d84 <LoRaMacHandleIndicationEvents+0x58>)
 8007d66:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8007d6a:	f36f 0341 	bfc	r3, #1, #1
 8007d6e:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8007d72:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 8007d7c:	f200 4024 	addw	r0, r0, #1060	; 0x424
 8007d80:	4798      	blx	r3
    }
}
 8007d82:	bd08      	pop	{r3, pc}
 8007d84:	20000628 	.word	0x20000628

08007d88 <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8007d88:	b110      	cbz	r0, 8007d90 <CheckForMinimumAbpDatarate+0x8>
 8007d8a:	2901      	cmp	r1, #1
 8007d8c:	d001      	beq.n	8007d92 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8007d8e:	2000      	movs	r0, #0
}
 8007d90:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8007d92:	2a00      	cmp	r2, #0
 8007d94:	d0fc      	beq.n	8007d90 <CheckForMinimumAbpDatarate+0x8>
    return false;
 8007d96:	2000      	movs	r0, #0
 8007d98:	4770      	bx	lr
	...

08007d9c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <LoRaMacCheckForRxAbort+0x20>)
 8007d9e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007da2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007da6:	d008      	beq.n	8007dba <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8007da8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007dac:	4a03      	ldr	r2, [pc, #12]	; (8007dbc <LoRaMacCheckForRxAbort+0x20>)
 8007dae:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007db2:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8007db6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8007dba:	4770      	bx	lr
 8007dbc:	20000628 	.word	0x20000628

08007dc0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007dc0:	4b06      	ldr	r3, [pc, #24]	; (8007ddc <CalculateBackOff+0x1c>)
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc4:	b94b      	cbnz	r3, 8007dda <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007dc6:	4a05      	ldr	r2, [pc, #20]	; (8007ddc <CalculateBackOff+0x1c>)
 8007dc8:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 8007dcc:	4904      	ldr	r1, [pc, #16]	; (8007de0 <CalculateBackOff+0x20>)
 8007dce:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	fb01 f303 	mul.w	r3, r1, r3
 8007dd8:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8007dda:	4770      	bx	lr
 8007ddc:	20008000 	.word	0x20008000
 8007de0:	20000628 	.word	0x20000628

08007de4 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007de4:	b508      	push	{r3, lr}
 8007de6:	4684      	mov	ip, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <SetTxContinuousWave+0x24>)
 8007dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df0:	4662      	mov	r2, ip
 8007df2:	b249      	sxtb	r1, r1
 8007df4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007df6:	4a05      	ldr	r2, [pc, #20]	; (8007e0c <SetTxContinuousWave+0x28>)
 8007df8:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8007dfc:	f043 0302 	orr.w	r3, r3, #2
 8007e00:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8007e04:	2000      	movs	r0, #0
 8007e06:	bd08      	pop	{r3, pc}
 8007e08:	08012a8c 	.word	0x08012a8c
 8007e0c:	20000628 	.word	0x20000628

08007e10 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8007e10:	4602      	mov	r2, r0
 8007e12:	b1f8      	cbz	r0, 8007e54 <DetermineFrameType+0x44>
 8007e14:	b301      	cbz	r1, 8007e58 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8007e16:	7b03      	ldrb	r3, [r0, #12]
 8007e18:	f013 030f 	ands.w	r3, r3, #15
 8007e1c:	d005      	beq.n	8007e2a <DetermineFrameType+0x1a>
 8007e1e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007e22:	b110      	cbz	r0, 8007e2a <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8007e24:	2000      	movs	r0, #0
 8007e26:	7008      	strb	r0, [r1, #0]
 8007e28:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8007e2a:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8007e2e:	b910      	cbnz	r0, 8007e36 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8007e30:	2301      	movs	r3, #1
 8007e32:	700b      	strb	r3, [r1, #0]
 8007e34:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8007e36:	b92b      	cbnz	r3, 8007e44 <DetermineFrameType+0x34>
 8007e38:	f892 0020 	ldrb.w	r0, [r2, #32]
 8007e3c:	b910      	cbnz	r0, 8007e44 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	700b      	strb	r3, [r1, #0]
 8007e42:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8007e44:	b953      	cbnz	r3, 8007e5c <DetermineFrameType+0x4c>
 8007e46:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007e4a:	b14a      	cbz	r2, 8007e60 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8007e4c:	2203      	movs	r2, #3
 8007e4e:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8007e50:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8007e52:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007e54:	2003      	movs	r0, #3
 8007e56:	4770      	bx	lr
 8007e58:	2003      	movs	r0, #3
 8007e5a:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8007e5c:	2018      	movs	r0, #24
 8007e5e:	4770      	bx	lr
 8007e60:	2018      	movs	r0, #24
}
 8007e62:	4770      	bx	lr

08007e64 <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8007e64:	4288      	cmp	r0, r1
 8007e66:	d201      	bcs.n	8007e6c <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8007e68:	2000      	movs	r0, #0
 8007e6a:	4770      	bx	lr
        return true;
 8007e6c:	2001      	movs	r0, #1
}
 8007e6e:	4770      	bx	lr

08007e70 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8007e70:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8007e72:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <CheckRetransUnconfirmedUplink+0x30>)
 8007e74:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8007e78:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <CheckRetransUnconfirmedUplink+0x34>)
 8007e7a:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 8007e7e:	f7ff fff1 	bl	8007e64 <CheckRetrans>
 8007e82:	b950      	cbnz	r0, 8007e9a <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007e84:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <CheckRetransUnconfirmedUplink+0x34>)
 8007e86:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007e8a:	f013 0f02 	tst.w	r3, #2
 8007e8e:	d004      	beq.n	8007e9a <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8007e90:	4b04      	ldr	r3, [pc, #16]	; (8007ea4 <CheckRetransUnconfirmedUplink+0x34>)
 8007e92:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d900      	bls.n	8007e9c <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8007e9a:	bd08      	pop	{r3, pc}
            return true;
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	e7fc      	b.n	8007e9a <CheckRetransUnconfirmedUplink+0x2a>
 8007ea0:	20008000 	.word	0x20008000
 8007ea4:	20000628 	.word	0x20000628

08007ea8 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8007ea8:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8007eaa:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <CheckRetransConfirmedUplink+0x28>)
 8007eac:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8007eb0:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <CheckRetransConfirmedUplink+0x2c>)
 8007eb2:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 8007eb6:	f7ff ffd5 	bl	8007e64 <CheckRetrans>
 8007eba:	b940      	cbnz	r0, 8007ece <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007ebc:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <CheckRetransConfirmedUplink+0x2c>)
 8007ebe:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007ec2:	f013 0f02 	tst.w	r3, #2
 8007ec6:	d002      	beq.n	8007ece <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <CheckRetransConfirmedUplink+0x2c>)
 8007eca:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 8007ece:	bd08      	pop	{r3, pc}
 8007ed0:	20008000 	.word	0x20008000
 8007ed4:	20000628 	.word	0x20000628

08007ed8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8007ed8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007edc:	d000      	beq.n	8007ee0 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 8007ede:	3001      	adds	r0, #1
    }
    return counter;
}
 8007ee0:	4770      	bx	lr
	...

08007ee4 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8007ee4:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007ee6:	4b12      	ldr	r3, [pc, #72]	; (8007f30 <StopRetransmission+0x4c>)
 8007ee8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007eec:	f013 0f02 	tst.w	r3, #2
 8007ef0:	d004      	beq.n	8007efc <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8007ef2:	4b0f      	ldr	r3, [pc, #60]	; (8007f30 <StopRetransmission+0x4c>)
 8007ef4:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d908      	bls.n	8007f0e <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8007efc:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <StopRetransmission+0x50>)
 8007efe:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8007f02:	b123      	cbz	r3, 8007f0e <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8007f04:	4c0b      	ldr	r4, [pc, #44]	; (8007f34 <StopRetransmission+0x50>)
 8007f06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007f08:	f7ff ffe6 	bl	8007ed8 <IncreaseAdrAckCounter>
 8007f0c:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007f0e:	4b08      	ldr	r3, [pc, #32]	; (8007f30 <StopRetransmission+0x4c>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 8007f16:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8007f1a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007f1e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007f22:	f022 0202 	bic.w	r2, r2, #2
 8007f26:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	bd10      	pop	{r4, pc}
 8007f2e:	bf00      	nop
 8007f30:	20000628 	.word	0x20000628
 8007f34:	20008000 	.word	0x20008000

08007f38 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8007f38:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007f3a:	4b04      	ldr	r3, [pc, #16]	; (8007f4c <CallNvmDataChangeCallback+0x14>)
 8007f3c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007f40:	b113      	cbz	r3, 8007f48 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8007f42:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007f44:	b103      	cbz	r3, 8007f48 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8007f46:	4798      	blx	r3
    }
}
 8007f48:	bd08      	pop	{r3, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000628 	.word	0x20000628

08007f50 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007f50:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <IsRequestPending+0x14>)
 8007f52:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 8007f56:	f010 0005 	ands.w	r0, r0, #5
 8007f5a:	d100      	bne.n	8007f5e <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8007f5c:	4770      	bx	lr
        return 1;
 8007f5e:	2001      	movs	r0, #1
 8007f60:	e7fc      	b.n	8007f5c <IsRequestPending+0xc>
 8007f62:	bf00      	nop
 8007f64:	20000628 	.word	0x20000628

08007f68 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8007f68:	b500      	push	{lr}
 8007f6a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007f6e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8007f72:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8007f76:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007f7a:	220d      	movs	r2, #13
 8007f7c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007f80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f84:	b113      	cbz	r3, 8007f8c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007f86:	230e      	movs	r3, #14
 8007f88:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007f8c:	a902      	add	r1, sp, #8
 8007f8e:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007f90:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007f94:	f004 f928 	bl	800c1e8 <RegionGetPhyParam>
 8007f98:	9001      	str	r0, [sp, #4]
}
 8007f9a:	b2c0      	uxtb	r0, r0
 8007f9c:	b005      	add	sp, #20
 8007f9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fa2:	bf00      	nop
 8007fa4:	20008000 	.word	0x20008000

08007fa8 <ValidatePayloadLength>:
{
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4605      	mov	r5, r0
 8007fac:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007fae:	4608      	mov	r0, r1
 8007fb0:	f7ff ffda 	bl	8007f68 <GetMaxAppPayloadWithoutFOptsLength>
 8007fb4:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8007fb6:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d303      	bcc.n	8007fc4 <ValidatePayloadLength+0x1c>
 8007fbc:	2aff      	cmp	r2, #255	; 0xff
 8007fbe:	d903      	bls.n	8007fc8 <ValidatePayloadLength+0x20>
    return false;
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e000      	b.n	8007fc6 <ValidatePayloadLength+0x1e>
 8007fc4:	2000      	movs	r0, #0
}
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8007fc8:	2001      	movs	r0, #1
 8007fca:	e7fc      	b.n	8007fc6 <ValidatePayloadLength+0x1e>

08007fcc <ProcessRadioTxDone>:
{
 8007fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fce:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007fd0:	4b35      	ldr	r3, [pc, #212]	; (80080a8 <ProcessRadioTxDone+0xdc>)
 8007fd2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d002      	beq.n	8007fe0 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8007fda:	4b34      	ldr	r3, [pc, #208]	; (80080ac <ProcessRadioTxDone+0xe0>)
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8007fe0:	4c33      	ldr	r4, [pc, #204]	; (80080b0 <ProcessRadioTxDone+0xe4>)
 8007fe2:	f504 7560 	add.w	r5, r4, #896	; 0x380
 8007fe6:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8007fea:	4628      	mov	r0, r5
 8007fec:	f009 fc2c 	bl	8011848 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f009 fbe3 	bl	80117bc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8007ff6:	f504 7566 	add.w	r5, r4, #920	; 0x398
 8007ffa:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007ffe:	4628      	mov	r0, r5
 8008000:	f009 fc22 	bl	8011848 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008004:	4628      	mov	r0, r5
 8008006:	f009 fbd9 	bl	80117bc <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 800800a:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800800e:	2b00      	cmp	r3, #0
 8008010:	d134      	bne.n	800807c <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008012:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <ProcessRadioTxDone+0xe4>)
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800801a:	4b26      	ldr	r3, [pc, #152]	; (80080b4 <ProcessRadioTxDone+0xe8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4c22      	ldr	r4, [pc, #136]	; (80080a8 <ProcessRadioTxDone+0xdc>)
 8008020:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8008022:	4f23      	ldr	r7, [pc, #140]	; (80080b0 <ProcessRadioTxDone+0xe4>)
 8008024:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 8008028:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800802c:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800802e:	ae0c      	add	r6, sp, #48	; 0x30
 8008030:	4630      	mov	r0, r6
 8008032:	f009 fa9d 	bl	8011570 <SysTimeGetMcuTime>
 8008036:	ad02      	add	r5, sp, #8
 8008038:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8008042:	e896 0006 	ldmia.w	r6, {r1, r2}
 8008046:	4628      	mov	r0, r5
 8008048:	f009 fa2f 	bl	80114aa <SysTimeSub>
 800804c:	ab07      	add	r3, sp, #28
 800804e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008052:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008056:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800805a:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800805c:	2301      	movs	r3, #1
 800805e:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008062:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8008066:	b90b      	cbnz	r3, 800806c <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 8008068:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800806c:	a904      	add	r1, sp, #16
 800806e:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <ProcessRadioTxDone+0xdc>)
 8008070:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008074:	f004 f8d0 	bl	800c218 <RegionSetBandTxDone>
}
 8008078:	b00f      	add	sp, #60	; 0x3c
 800807a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800807c:	2315      	movs	r3, #21
 800807e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008082:	a90a      	add	r1, sp, #40	; 0x28
 8008084:	4b08      	ldr	r3, [pc, #32]	; (80080a8 <ProcessRadioTxDone+0xdc>)
 8008086:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800808a:	f004 f8ad 	bl	800c1e8 <RegionGetPhyParam>
 800808e:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008090:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8008094:	f204 4404 	addw	r4, r4, #1028	; 0x404
 8008098:	4401      	add	r1, r0
 800809a:	4620      	mov	r0, r4
 800809c:	f009 fbd4 	bl	8011848 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 80080a0:	4620      	mov	r0, r4
 80080a2:	f009 fb8b 	bl	80117bc <UTIL_TIMER_Start>
 80080a6:	e7b8      	b.n	800801a <ProcessRadioTxDone+0x4e>
 80080a8:	20008000 	.word	0x20008000
 80080ac:	08012a8c 	.word	0x08012a8c
 80080b0:	20000628 	.word	0x20000628
 80080b4:	20000be8 	.word	0x20000be8

080080b8 <OnRetransmitTimeoutTimerEvent>:
{
 80080b8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80080ba:	4c09      	ldr	r4, [pc, #36]	; (80080e0 <OnRetransmitTimeoutTimerEvent+0x28>)
 80080bc:	f204 4004 	addw	r0, r4, #1028	; 0x404
 80080c0:	f009 fb22 	bl	8011708 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80080c4:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 80080c8:	b113      	cbz	r3, 80080d0 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 80080ca:	2201      	movs	r2, #1
 80080cc:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80080d0:	4b03      	ldr	r3, [pc, #12]	; (80080e0 <OnRetransmitTimeoutTimerEvent+0x28>)
 80080d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80080d6:	b113      	cbz	r3, 80080de <OnRetransmitTimeoutTimerEvent+0x26>
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	b103      	cbz	r3, 80080de <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80080dc:	4798      	blx	r3
}
 80080de:	bd10      	pop	{r4, pc}
 80080e0:	20000628 	.word	0x20000628

080080e4 <PrepareRxDoneAbort>:
{
 80080e4:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80080e6:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <PrepareRxDoneAbort+0x3c>)
 80080e8:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80080ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80080f0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80080f4:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 80080f8:	b973      	cbnz	r3, 8008118 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80080fa:	4b09      	ldr	r3, [pc, #36]	; (8008120 <PrepareRxDoneAbort+0x3c>)
 80080fc:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8008100:	f042 0202 	orr.w	r2, r2, #2
 8008104:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	f042 0220 	orr.w	r2, r2, #32
 800810e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8008112:	f7ff fdf1 	bl	8007cf8 <UpdateRxSlotIdleState>
}
 8008116:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 8008118:	2000      	movs	r0, #0
 800811a:	f7ff ffcd 	bl	80080b8 <OnRetransmitTimeoutTimerEvent>
 800811e:	e7ec      	b.n	80080fa <PrepareRxDoneAbort+0x16>
 8008120:	20000628 	.word	0x20000628

08008124 <LoRaMacCheckForBeaconAcquisition>:
{
 8008124:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008126:	200b      	movs	r0, #11
 8008128:	f003 faf2 	bl	800b710 <LoRaMacConfirmQueueIsCmdActive>
 800812c:	b188      	cbz	r0, 8008152 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800812e:	4b0b      	ldr	r3, [pc, #44]	; (800815c <LoRaMacCheckForBeaconAcquisition+0x38>)
 8008130:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008134:	f010 0f01 	tst.w	r0, #1
 8008138:	d10d      	bne.n	8008156 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800813a:	f010 0004 	ands.w	r0, r0, #4
 800813e:	d009      	beq.n	8008154 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008140:	461a      	mov	r2, r3
 8008142:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008146:	f023 0302 	bic.w	r3, r3, #2
 800814a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800814e:	2001      	movs	r0, #1
 8008150:	e000      	b.n	8008154 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8008152:	2000      	movs	r0, #0
}
 8008154:	bd08      	pop	{r3, pc}
    return 0x00;
 8008156:	2000      	movs	r0, #0
 8008158:	e7fc      	b.n	8008154 <LoRaMacCheckForBeaconAcquisition+0x30>
 800815a:	bf00      	nop
 800815c:	20000628 	.word	0x20000628

08008160 <GetFCntDown>:
{
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	9c04      	ldr	r4, [sp, #16]
 8008164:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8008166:	b1f2      	cbz	r2, 80081a6 <GetFCntDown+0x46>
 8008168:	4694      	mov	ip, r2
 800816a:	b1f4      	cbz	r4, 80081aa <GetFCntDown+0x4a>
 800816c:	b1fd      	cbz	r5, 80081ae <GetFCntDown+0x4e>
    switch( addrID )
 800816e:	b188      	cbz	r0, 8008194 <GetFCntDown+0x34>
 8008170:	2801      	cmp	r0, #1
 8008172:	d11e      	bne.n	80081b2 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8008174:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008178:	2b01      	cmp	r3, #1
 800817a:	d002      	beq.n	8008182 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800817c:	2303      	movs	r3, #3
 800817e:	7023      	strb	r3, [r4, #0]
 8008180:	e00a      	b.n	8008198 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8008182:	b121      	cbz	r1, 800818e <GetFCntDown+0x2e>
 8008184:	2903      	cmp	r1, #3
 8008186:	d002      	beq.n	800818e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8008188:	2301      	movs	r3, #1
 800818a:	7023      	strb	r3, [r4, #0]
 800818c:	e004      	b.n	8008198 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800818e:	2302      	movs	r3, #2
 8008190:	7023      	strb	r3, [r4, #0]
 8008192:	e001      	b.n	8008198 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8008194:	2304      	movs	r3, #4
 8008196:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8008198:	462a      	mov	r2, r5
 800819a:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800819e:	7820      	ldrb	r0, [r4, #0]
 80081a0:	f003 fcd8 	bl	800bb54 <LoRaMacCryptoGetFCntDown>
}
 80081a4:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80081a6:	2009      	movs	r0, #9
 80081a8:	e7fc      	b.n	80081a4 <GetFCntDown+0x44>
 80081aa:	2009      	movs	r0, #9
 80081ac:	e7fa      	b.n	80081a4 <GetFCntDown+0x44>
 80081ae:	2009      	movs	r0, #9
 80081b0:	e7f8      	b.n	80081a4 <GetFCntDown+0x44>
    switch( addrID )
 80081b2:	2005      	movs	r0, #5
 80081b4:	e7f6      	b.n	80081a4 <GetFCntDown+0x44>

080081b6 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80081b6:	2801      	cmp	r0, #1
 80081b8:	d900      	bls.n	80081bc <RemoveMacCommands+0x6>
 80081ba:	4770      	bx	lr
{
 80081bc:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 80081be:	2a01      	cmp	r2, #1
 80081c0:	d105      	bne.n	80081ce <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 80081c2:	f011 0f20 	tst.w	r1, #32
 80081c6:	d004      	beq.n	80081d2 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80081c8:	f003 f93e 	bl	800b448 <LoRaMacCommandsRemoveStickyAnsCmds>
 80081cc:	e001      	b.n	80081d2 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80081ce:	f003 f93b 	bl	800b448 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80081d2:	bd08      	pop	{r3, pc}

080081d4 <ProcessMacCommands>:
{
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	b08f      	sub	sp, #60	; 0x3c
 80081da:	4698      	mov	r8, r3
    uint8_t status = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80081e2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80081e6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	f200 82d9 	bhi.w	80087a2 <ProcessMacCommands+0x5ce>
 80081f0:	4605      	mov	r5, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 80081f6:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 80081fa:	42bc      	cmp	r4, r7
 80081fc:	f080 82d1 	bcs.w	80087a2 <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8008200:	5d28      	ldrb	r0, [r5, r4]
 8008202:	f003 f989 	bl	800b518 <LoRaMacCommandsGetCmdSize>
 8008206:	4420      	add	r0, r4
 8008208:	42b8      	cmp	r0, r7
 800820a:	f300 82ca 	bgt.w	80087a2 <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 800820e:	1c66      	adds	r6, r4, #1
 8008210:	b2f6      	uxtb	r6, r6
 8008212:	5d2b      	ldrb	r3, [r5, r4]
 8008214:	3b02      	subs	r3, #2
 8008216:	2b11      	cmp	r3, #17
 8008218:	f200 82c3 	bhi.w	80087a2 <ProcessMacCommands+0x5ce>
 800821c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008220:	00280012 	.word	0x00280012
 8008224:	00c000ad 	.word	0x00c000ad
 8008228:	011e0106 	.word	0x011e0106
 800822c:	01740157 	.word	0x01740157
 8008230:	02c101bf 	.word	0x02c101bf
 8008234:	01ef02c1 	.word	0x01ef02c1
 8008238:	02c102c1 	.word	0x02c102c1
 800823c:	02680251 	.word	0x02680251
 8008240:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8008244:	2004      	movs	r0, #4
 8008246:	f003 fa63 	bl	800b710 <LoRaMacConfirmQueueIsCmdActive>
 800824a:	b908      	cbnz	r0, 8008250 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800824c:	4634      	mov	r4, r6
 800824e:	e7d4      	b.n	80081fa <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8008250:	2104      	movs	r1, #4
 8008252:	2000      	movs	r0, #0
 8008254:	f003 fa10 	bl	800b678 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008258:	1ca3      	adds	r3, r4, #2
 800825a:	b2db      	uxtb	r3, r3
 800825c:	5da9      	ldrb	r1, [r5, r6]
 800825e:	4aa7      	ldr	r2, [pc, #668]	; (80084fc <ProcessMacCommands+0x328>)
 8008260:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008264:	3403      	adds	r4, #3
 8008266:	b2e4      	uxtb	r4, r4
 8008268:	5ceb      	ldrb	r3, [r5, r3]
 800826a:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 800826e:	e7c4      	b.n	80081fa <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8008270:	2300      	movs	r3, #0
 8008272:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008276:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800827a:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800827e:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8008282:	f1b9 0f00 	cmp.w	r9, #0
 8008286:	d036      	beq.n	80082f6 <ProcessMacCommands+0x122>
                    macIndex += 4;
 8008288:	3405      	adds	r4, #5
 800828a:	b2e4      	uxtb	r4, r4
 800828c:	e7b5      	b.n	80081fa <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800828e:	2305      	movs	r3, #5
 8008290:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8008294:	e050      	b.n	8008338 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8008296:	4b9a      	ldr	r3, [pc, #616]	; (8008500 <ProcessMacCommands+0x32c>)
 8008298:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800829c:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	da03      	bge.n	80082ac <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 80082a4:	4b96      	ldr	r3, [pc, #600]	; (8008500 <ProcessMacCommands+0x32c>)
 80082a6:	2101      	movs	r1, #1
 80082a8:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80082ac:	4b94      	ldr	r3, [pc, #592]	; (8008500 <ProcessMacCommands+0x32c>)
 80082ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80082b2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80082b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80082ba:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80082be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80082c2:	e04d      	b.n	8008360 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80082c4:	2201      	movs	r2, #1
 80082c6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80082ca:	2003      	movs	r0, #3
 80082cc:	f003 f85c 	bl	800b388 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80082d0:	3401      	adds	r4, #1
 80082d2:	b2e4      	uxtb	r4, r4
 80082d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80082d8:	498a      	ldr	r1, [pc, #552]	; (8008504 <ProcessMacCommands+0x330>)
 80082da:	fba1 2103 	umull	r2, r1, r1, r3
 80082de:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 80082e2:	d3ef      	bcc.n	80082c4 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 80082e4:	441e      	add	r6, r3
 80082e6:	b2f6      	uxtb	r6, r6
 80082e8:	1e74      	subs	r4, r6, #1
 80082ea:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 80082ec:	42a7      	cmp	r7, r4
 80082ee:	d93a      	bls.n	8008366 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80082f0:	5d2b      	ldrb	r3, [r5, r4]
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d136      	bne.n	8008364 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80082f6:	1e73      	subs	r3, r6, #1
 80082f8:	442b      	add	r3, r5
 80082fa:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80082fc:	4b80      	ldr	r3, [pc, #512]	; (8008500 <ProcessMacCommands+0x32c>)
 80082fe:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8008302:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008306:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 800830a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800830e:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8008312:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008316:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800831a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800831e:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8008322:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008326:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800832a:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800832c:	2a00      	cmp	r2, #0
 800832e:	d0ae      	beq.n	800828e <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008330:	1bbb      	subs	r3, r7, r6
 8008332:	3301      	adds	r3, #1
 8008334:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8008338:	ab05      	add	r3, sp, #20
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	ab03      	add	r3, sp, #12
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	f10d 030b 	add.w	r3, sp, #11
 8008344:	f10d 020a 	add.w	r2, sp, #10
 8008348:	a907      	add	r1, sp, #28
 800834a:	486d      	ldr	r0, [pc, #436]	; (8008500 <ProcessMacCommands+0x32c>)
 800834c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8008350:	f003 ffe2 	bl	800c318 <RegionLinkAdrReq>
 8008354:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8008358:	f000 0007 	and.w	r0, r0, #7
 800835c:	2807      	cmp	r0, #7
 800835e:	d09a      	beq.n	8008296 <ProcessMacCommands+0xc2>
{
 8008360:	2400      	movs	r4, #0
 8008362:	e7b7      	b.n	80082d4 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008364:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 8008366:	42bc      	cmp	r4, r7
 8008368:	d204      	bcs.n	8008374 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800836a:	3c01      	subs	r4, #1
 800836c:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800836e:	f04f 0901 	mov.w	r9, #1
 8008372:	e742      	b.n	80081fa <ProcessMacCommands+0x26>
 8008374:	f04f 0901 	mov.w	r9, #1
                break;
 8008378:	e73f      	b.n	80081fa <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800837a:	3402      	adds	r4, #2
 800837c:	b2e4      	uxtb	r4, r4
 800837e:	5dab      	ldrb	r3, [r5, r6]
 8008380:	f003 030f 	and.w	r3, r3, #15
 8008384:	495e      	ldr	r1, [pc, #376]	; (8008500 <ProcessMacCommands+0x32c>)
 8008386:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800838a:	2201      	movs	r2, #1
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008394:	2200      	movs	r2, #0
 8008396:	a90b      	add	r1, sp, #44	; 0x2c
 8008398:	2004      	movs	r0, #4
 800839a:	f002 fff5 	bl	800b388 <LoRaMacCommandsAddCmd>
                break;
 800839e:	e72c      	b.n	80081fa <ProcessMacCommands+0x26>
                status = 0x07;
 80083a0:	2307      	movs	r3, #7
 80083a2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80083a6:	5dab      	ldrb	r3, [r5, r6]
 80083a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80083ac:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80083b0:	57ab      	ldrsb	r3, [r5, r6]
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80083ba:	1ca3      	adds	r3, r4, #2
 80083bc:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80083be:	1ce1      	adds	r1, r4, #3
 80083c0:	b2c9      	uxtb	r1, r1
 80083c2:	5ceb      	ldrb	r3, [r5, r3]
 80083c4:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80083c6:	1d22      	adds	r2, r4, #4
 80083c8:	b2d2      	uxtb	r2, r2
 80083ca:	5c69      	ldrb	r1, [r5, r1]
 80083cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80083d0:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083d2:	3405      	adds	r4, #5
 80083d4:	b2e4      	uxtb	r4, r4
 80083d6:	5caa      	ldrb	r2, [r5, r2]
 80083d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083dc:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 80083de:	2264      	movs	r2, #100	; 0x64
 80083e0:	fb02 f303 	mul.w	r3, r2, r3
 80083e4:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80083e6:	a907      	add	r1, sp, #28
 80083e8:	4b45      	ldr	r3, [pc, #276]	; (8008500 <ProcessMacCommands+0x32c>)
 80083ea:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80083ee:	f003 ffaf 	bl	800c350 <RegionRxParamSetupReq>
 80083f2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 80083f6:	f000 0307 	and.w	r3, r0, #7
 80083fa:	2b07      	cmp	r3, #7
 80083fc:	d007      	beq.n	800840e <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 80083fe:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8008402:	2201      	movs	r2, #1
 8008404:	a90b      	add	r1, sp, #44	; 0x2c
 8008406:	2005      	movs	r0, #5
 8008408:	f002 ffbe 	bl	800b388 <LoRaMacCommandsAddCmd>
                break;
 800840c:	e6f5      	b.n	80081fa <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800840e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008412:	4b3b      	ldr	r3, [pc, #236]	; (8008500 <ProcessMacCommands+0x32c>)
 8008414:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008418:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800841c:	9a08      	ldr	r2, [sp, #32]
 800841e:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8008420:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8008422:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8008426:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800842a:	e7e8      	b.n	80083fe <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800842c:	4b33      	ldr	r3, [pc, #204]	; (80084fc <ProcessMacCommands+0x328>)
 800842e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008432:	b17b      	cbz	r3, 8008454 <ProcessMacCommands+0x280>
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	b17b      	cbz	r3, 8008458 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008438:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800843a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800843e:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8008442:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008446:	2202      	movs	r2, #2
 8008448:	a90b      	add	r1, sp, #44	; 0x2c
 800844a:	2006      	movs	r0, #6
 800844c:	f002 ff9c 	bl	800b388 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8008450:	4634      	mov	r4, r6
                break;
 8008452:	e6d2      	b.n	80081fa <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008454:	20ff      	movs	r0, #255	; 0xff
 8008456:	e7f0      	b.n	800843a <ProcessMacCommands+0x266>
 8008458:	20ff      	movs	r0, #255	; 0xff
 800845a:	e7ee      	b.n	800843a <ProcessMacCommands+0x266>
                status = 0x03;
 800845c:	2303      	movs	r3, #3
 800845e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8008462:	1ca3      	adds	r3, r4, #2
 8008464:	b2db      	uxtb	r3, r3
 8008466:	57aa      	ldrsb	r2, [r5, r6]
 8008468:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800846c:	aa07      	add	r2, sp, #28
 800846e:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008470:	1ce2      	adds	r2, r4, #3
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	5ceb      	ldrb	r3, [r5, r3]
 8008476:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008478:	1d21      	adds	r1, r4, #4
 800847a:	b2c9      	uxtb	r1, r1
 800847c:	5caa      	ldrb	r2, [r5, r2]
 800847e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008482:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008484:	1d62      	adds	r2, r4, #5
 8008486:	b2d2      	uxtb	r2, r2
 8008488:	5c69      	ldrb	r1, [r5, r1]
 800848a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800848e:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8008490:	2164      	movs	r1, #100	; 0x64
 8008492:	fb01 f303 	mul.w	r3, r1, r3
 8008496:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800849c:	3406      	adds	r4, #6
 800849e:	b2e4      	uxtb	r4, r4
 80084a0:	56ab      	ldrsb	r3, [r5, r2]
 80084a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80084a6:	a905      	add	r1, sp, #20
 80084a8:	4b15      	ldr	r3, [pc, #84]	; (8008500 <ProcessMacCommands+0x32c>)
 80084aa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80084ae:	f003 ff5e 	bl	800c36e <RegionNewChannelReq>
 80084b2:	b2c3      	uxtb	r3, r0
 80084b4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80084b8:	2800      	cmp	r0, #0
 80084ba:	f6ff ae9e 	blt.w	80081fa <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80084be:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80084c2:	2201      	movs	r2, #1
 80084c4:	a90b      	add	r1, sp, #44	; 0x2c
 80084c6:	2007      	movs	r0, #7
 80084c8:	f002 ff5e 	bl	800b388 <LoRaMacCommandsAddCmd>
                break;
 80084cc:	e695      	b.n	80081fa <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80084ce:	3402      	adds	r4, #2
 80084d0:	b2e4      	uxtb	r4, r4
 80084d2:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 80084d4:	f013 030f 	ands.w	r3, r3, #15
 80084d8:	d100      	bne.n	80084dc <ProcessMacCommands+0x308>
                    delay++;
 80084da:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80084dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80084e0:	fb02 f303 	mul.w	r3, r2, r3
 80084e4:	4a06      	ldr	r2, [pc, #24]	; (8008500 <ProcessMacCommands+0x32c>)
 80084e6:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80084e8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80084ec:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80084ee:	2200      	movs	r2, #0
 80084f0:	a90b      	add	r1, sp, #44	; 0x2c
 80084f2:	2008      	movs	r0, #8
 80084f4:	f002 ff48 	bl	800b388 <LoRaMacCommandsAddCmd>
                break;
 80084f8:	e67f      	b.n	80081fa <ProcessMacCommands+0x26>
 80084fa:	bf00      	nop
 80084fc:	20000628 	.word	0x20000628
 8008500:	20008000 	.word	0x20008000
 8008504:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8008508:	3402      	adds	r4, #2
 800850a:	b2e4      	uxtb	r4, r4
 800850c:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800850e:	2200      	movs	r2, #0
 8008510:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8008514:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008518:	f013 0f20 	tst.w	r3, #32
 800851c:	d002      	beq.n	8008524 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800851e:	2201      	movs	r2, #1
 8008520:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008524:	f013 0f10 	tst.w	r3, #16
 8008528:	d002      	beq.n	8008530 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800852a:	2201      	movs	r2, #1
 800852c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008530:	f003 030f 	and.w	r3, r3, #15
 8008534:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008538:	a903      	add	r1, sp, #12
 800853a:	4b9b      	ldr	r3, [pc, #620]	; (80087a8 <ProcessMacCommands+0x5d4>)
 800853c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008540:	f003 ff24 	bl	800c38c <RegionTxParamSetupReq>
 8008544:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008548:	f43f ae57 	beq.w	80081fa <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800854c:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8008550:	4e95      	ldr	r6, [pc, #596]	; (80087a8 <ProcessMacCommands+0x5d4>)
 8008552:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8008556:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800855a:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800855e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008562:	4a92      	ldr	r2, [pc, #584]	; (80087ac <ProcessMacCommands+0x5d8>)
 8008564:	5cd0      	ldrb	r0, [r2, r3]
 8008566:	f7f8 f931 	bl	80007cc <__aeabi_ui2f>
 800856a:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800856c:	2302      	movs	r3, #2
 800856e:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008572:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008576:	a907      	add	r1, sp, #28
 8008578:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800857c:	f003 fe34 	bl	800c1e8 <RegionGetPhyParam>
 8008580:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008582:	b240      	sxtb	r0, r0
 8008584:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8008588:	4298      	cmp	r0, r3
 800858a:	bfb8      	it	lt
 800858c:	4618      	movlt	r0, r3
 800858e:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008592:	2200      	movs	r2, #0
 8008594:	a90b      	add	r1, sp, #44	; 0x2c
 8008596:	2009      	movs	r0, #9
 8008598:	f002 fef6 	bl	800b388 <LoRaMacCommandsAddCmd>
                break;
 800859c:	e62d      	b.n	80081fa <ProcessMacCommands+0x26>
                status = 0x03;
 800859e:	2303      	movs	r3, #3
 80085a0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80085a4:	1ca3      	adds	r3, r4, #2
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	5daa      	ldrb	r2, [r5, r6]
 80085aa:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80085ae:	1ce1      	adds	r1, r4, #3
 80085b0:	b2c9      	uxtb	r1, r1
 80085b2:	5ceb      	ldrb	r3, [r5, r3]
 80085b4:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80085b6:	1d22      	adds	r2, r4, #4
 80085b8:	b2d2      	uxtb	r2, r2
 80085ba:	5c69      	ldrb	r1, [r5, r1]
 80085bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80085c0:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80085c2:	3405      	adds	r4, #5
 80085c4:	b2e4      	uxtb	r4, r4
 80085c6:	5caa      	ldrb	r2, [r5, r2]
 80085c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085cc:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 80085ce:	2264      	movs	r2, #100	; 0x64
 80085d0:	fb02 f303 	mul.w	r3, r2, r3
 80085d4:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80085d6:	a907      	add	r1, sp, #28
 80085d8:	4b73      	ldr	r3, [pc, #460]	; (80087a8 <ProcessMacCommands+0x5d4>)
 80085da:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80085de:	f003 fee4 	bl	800c3aa <RegionDlChannelReq>
 80085e2:	b2c3      	uxtb	r3, r0
 80085e4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80085e8:	2800      	cmp	r0, #0
 80085ea:	f6ff ae06 	blt.w	80081fa <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80085ee:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80085f2:	2201      	movs	r2, #1
 80085f4:	a90b      	add	r1, sp, #44	; 0x2c
 80085f6:	200a      	movs	r0, #10
 80085f8:	f002 fec6 	bl	800b388 <LoRaMacCommandsAddCmd>
                break;
 80085fc:	e5fd      	b.n	80081fa <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80085fe:	2009      	movs	r0, #9
 8008600:	f003 f886 	bl	800b710 <LoRaMacConfirmQueueIsCmdActive>
 8008604:	b928      	cbnz	r0, 8008612 <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008606:	4b6a      	ldr	r3, [pc, #424]	; (80087b0 <ProcessMacCommands+0x5dc>)
 8008608:	2200      	movs	r2, #0
 800860a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 800860e:	4634      	mov	r4, r6
 8008610:	e5f3      	b.n	80081fa <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8008612:	2109      	movs	r1, #9
 8008614:	2000      	movs	r0, #0
 8008616:	f003 f82f 	bl	800b678 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800861a:	a803      	add	r0, sp, #12
 800861c:	2300      	movs	r3, #0
 800861e:	9303      	str	r3, [sp, #12]
 8008620:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8008622:	f10d 0a14 	add.w	sl, sp, #20
 8008626:	9305      	str	r3, [sp, #20]
 8008628:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800862a:	f10d 0b1c 	add.w	fp, sp, #28
 800862e:	9307      	str	r3, [sp, #28]
 8008630:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008632:	1ca1      	adds	r1, r4, #2
 8008634:	b2c9      	uxtb	r1, r1
 8008636:	5dab      	ldrb	r3, [r5, r6]
 8008638:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800863a:	1ce2      	adds	r2, r4, #3
 800863c:	b2d2      	uxtb	r2, r2
 800863e:	5c69      	ldrb	r1, [r5, r1]
 8008640:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008644:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008646:	1d21      	adds	r1, r4, #4
 8008648:	b2c9      	uxtb	r1, r1
 800864a:	5caa      	ldrb	r2, [r5, r2]
 800864c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008650:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008652:	1d62      	adds	r2, r4, #5
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	5c69      	ldrb	r1, [r5, r1]
 8008658:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800865c:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800865e:	3406      	adds	r4, #6
 8008660:	b2e4      	uxtb	r4, r4
 8008662:	5caa      	ldrb	r2, [r5, r2]
 8008664:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008668:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800866c:	fb01 f202 	mul.w	r2, r1, r2
 8008670:	0a12      	lsrs	r2, r2, #8
 8008672:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008676:	c803      	ldmia	r0, {r0, r1}
 8008678:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800867c:	4a4d      	ldr	r2, [pc, #308]	; (80087b4 <ProcessMacCommands+0x5e0>)
 800867e:	441a      	add	r2, r3
 8008680:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8008682:	4658      	mov	r0, fp
 8008684:	f008 ff52 	bl	801152c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008688:	4e49      	ldr	r6, [pc, #292]	; (80087b0 <ProcessMacCommands+0x5dc>)
 800868a:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 8008694:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8008698:	a80c      	add	r0, sp, #48	; 0x30
 800869a:	f008 ff06 	bl	80114aa <SysTimeSub>
 800869e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a4:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80086a8:	4650      	mov	r0, sl
 80086aa:	f008 fedf 	bl	801146c <SysTimeAdd>
                    SysTimeSet( sysTime );
 80086ae:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80086b2:	f008 ff19 	bl	80114e8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80086b6:	f002 fdcb 	bl	800b250 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 80086c0:	e59b      	b.n	80081fa <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80086c2:	200c      	movs	r0, #12
 80086c4:	f003 f824 	bl	800b710 <LoRaMacConfirmQueueIsCmdActive>
 80086c8:	b908      	cbnz	r0, 80086ce <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 80086ca:	4634      	mov	r4, r6
 80086cc:	e595      	b.n	80081fa <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80086ce:	210c      	movs	r1, #12
 80086d0:	2000      	movs	r0, #0
 80086d2:	f002 ffd1 	bl	800b678 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80086d6:	4b36      	ldr	r3, [pc, #216]	; (80087b0 <ProcessMacCommands+0x5dc>)
 80086d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80086dc:	3b04      	subs	r3, #4
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d801      	bhi.n	80086e8 <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 80086e4:	4634      	mov	r4, r6
 80086e6:	e588      	b.n	80081fa <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 80086e8:	f002 fdae 	bl	800b248 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80086ec:	4634      	mov	r4, r6
 80086ee:	e584      	b.n	80081fa <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 80086f0:	1ca2      	adds	r2, r4, #2
 80086f2:	b2d2      	uxtb	r2, r2
 80086f4:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80086f6:	1ce1      	adds	r1, r4, #3
 80086f8:	b2c9      	uxtb	r1, r1
 80086fa:	5caa      	ldrb	r2, [r5, r2]
 80086fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008700:	1d22      	adds	r2, r4, #4
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	5c69      	ldrb	r1, [r5, r1]
 8008706:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800870a:	3405      	adds	r4, #5
 800870c:	b2e4      	uxtb	r4, r4
 800870e:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008710:	2164      	movs	r1, #100	; 0x64
 8008712:	fb03 f101 	mul.w	r1, r3, r1
 8008716:	f000 000f 	and.w	r0, r0, #15
 800871a:	f002 fd96 	bl	800b24a <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800871e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8008722:	2201      	movs	r2, #1
 8008724:	a90b      	add	r1, sp, #44	; 0x2c
 8008726:	2011      	movs	r0, #17
 8008728:	f002 fe2e 	bl	800b388 <LoRaMacCommandsAddCmd>
                break;
 800872c:	e565      	b.n	80081fa <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800872e:	200d      	movs	r0, #13
 8008730:	f002 ffee 	bl	800b710 <LoRaMacConfirmQueueIsCmdActive>
 8008734:	b908      	cbnz	r0, 800873a <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 8008736:	4634      	mov	r4, r6
 8008738:	e55f      	b.n	80081fa <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800873a:	210d      	movs	r1, #13
 800873c:	2000      	movs	r0, #0
 800873e:	f002 ff9b 	bl	800b678 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008742:	1ca2      	adds	r2, r4, #2
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008748:	1ce3      	adds	r3, r4, #3
 800874a:	b2db      	uxtb	r3, r3
 800874c:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800874e:	3404      	adds	r4, #4
 8008750:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008752:	4a19      	ldr	r2, [pc, #100]	; (80087b8 <ProcessMacCommands+0x5e4>)
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	5ce9      	ldrb	r1, [r5, r3]
 8008758:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800875c:	f002 fd77 	bl	800b24e <LoRaMacClassBBeaconTimingAns>
 8008760:	e54b      	b.n	80081fa <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 8008762:	1ca1      	adds	r1, r4, #2
 8008764:	b2c9      	uxtb	r1, r1
 8008766:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008768:	1ce2      	adds	r2, r4, #3
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	5c68      	ldrb	r0, [r5, r1]
 800876e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008772:	3404      	adds	r4, #4
 8008774:	b2e4      	uxtb	r4, r4
 8008776:	5ca8      	ldrb	r0, [r5, r2]
 8008778:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800877c:	2064      	movs	r0, #100	; 0x64
 800877e:	fb03 f000 	mul.w	r0, r3, r0
 8008782:	f002 fd66 	bl	800b252 <LoRaMacClassBBeaconFreqReq>
 8008786:	b140      	cbz	r0, 800879a <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 8008788:	2301      	movs	r3, #1
 800878a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800878e:	2201      	movs	r2, #1
 8008790:	a90b      	add	r1, sp, #44	; 0x2c
 8008792:	2013      	movs	r0, #19
 8008794:	f002 fdf8 	bl	800b388 <LoRaMacCommandsAddCmd>
                break;
 8008798:	e52f      	b.n	80081fa <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80087a0:	e7f5      	b.n	800878e <ProcessMacCommands+0x5ba>
}
 80087a2:	b00f      	add	sp, #60	; 0x3c
 80087a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a8:	20008000 	.word	0x20008000
 80087ac:	080123dc 	.word	0x080123dc
 80087b0:	20000628 	.word	0x20000628
 80087b4:	12d53d80 	.word	0x12d53d80
 80087b8:	20000bd8 	.word	0x20000bd8

080087bc <ProcessRadioRxDone>:
{
 80087bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087c0:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 80087c2:	4b96      	ldr	r3, [pc, #600]	; (8008a1c <ProcessRadioRxDone+0x260>)
 80087c4:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80087c6:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80087c8:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80087cc:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80087d4:	4a92      	ldr	r2, [pc, #584]	; (8008a20 <ProcessRadioRxDone+0x264>)
 80087d6:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80087da:	4a92      	ldr	r2, [pc, #584]	; (8008a24 <ProcessRadioRxDone+0x268>)
 80087dc:	7811      	ldrb	r1, [r2, #0]
 80087de:	f363 0100 	bfi	r1, r3, #0, #1
 80087e2:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 80087e4:	4c90      	ldr	r4, [pc, #576]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 80087e6:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 80087ea:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 80087ee:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80087f2:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 80087f6:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 80087fa:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 80087fe:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 8008802:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 8008806:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800880a:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800880e:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 8008812:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008816:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800881a:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800881e:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008822:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8008826:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 800882a:	4b80      	ldr	r3, [pc, #512]	; (8008a2c <ProcessRadioRxDone+0x270>)
 800882c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882e:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8008830:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008834:	b1c3      	cbz	r3, 8008868 <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008836:	4629      	mov	r1, r5
 8008838:	4630      	mov	r0, r6
 800883a:	f002 fcf2 	bl	800b222 <LoRaMacClassBRxBeacon>
 800883e:	b9c0      	cbnz	r0, 8008872 <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008840:	4b77      	ldr	r3, [pc, #476]	; (8008a20 <ProcessRadioRxDone+0x264>)
 8008842:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008846:	2b01      	cmp	r3, #1
 8008848:	d019      	beq.n	800887e <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 800884a:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800884c:	0963      	lsrs	r3, r4, #5
 800884e:	3b01      	subs	r3, #1
 8008850:	2b06      	cmp	r3, #6
 8008852:	f200 82d4 	bhi.w	8008dfe <ProcessRadioRxDone+0x642>
 8008856:	e8df f013 	tbh	[pc, r3, lsl #1]
 800885a:	002f      	.short	0x002f
 800885c:	00b502d2 	.word	0x00b502d2
 8008860:	00b102d2 	.word	0x00b102d2
 8008864:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 8008868:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800886c:	f008 ff4c 	bl	8011708 <UTIL_TIMER_Stop>
 8008870:	e7e1      	b.n	8008836 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008872:	4b6d      	ldr	r3, [pc, #436]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 8008874:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008878:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 800887c:	e2bc      	b.n	8008df8 <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800887e:	f002 fcd4 	bl	800b22a <LoRaMacClassBIsPingExpected>
 8008882:	b150      	cbz	r0, 800889a <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008884:	2000      	movs	r0, #0
 8008886:	f002 fcc5 	bl	800b214 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800888a:	2000      	movs	r0, #0
 800888c:	f002 fcc7 	bl	800b21e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008890:	4b65      	ldr	r3, [pc, #404]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 8008892:	2204      	movs	r2, #4
 8008894:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 8008898:	e7d7      	b.n	800884a <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800889a:	f002 fcc8 	bl	800b22e <LoRaMacClassBIsMulticastExpected>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d0d3      	beq.n	800884a <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80088a2:	2000      	movs	r0, #0
 80088a4:	f002 fcb7 	bl	800b216 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80088a8:	2000      	movs	r0, #0
 80088aa:	f002 fcb9 	bl	800b220 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80088ae:	4b5e      	ldr	r3, [pc, #376]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 80088b0:	2205      	movs	r2, #5
 80088b2:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 80088b6:	e7c8      	b.n	800884a <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80088b8:	2d10      	cmp	r5, #16
 80088ba:	d962      	bls.n	8008982 <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 80088bc:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 80088be:	b2ed      	uxtb	r5, r5
 80088c0:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80088c4:	4b56      	ldr	r3, [pc, #344]	; (8008a20 <ProcessRadioRxDone+0x264>)
 80088c6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d160      	bne.n	8008990 <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80088ce:	f006 fced 	bl	800f2ac <SecureElementGetJoinEui>
 80088d2:	4601      	mov	r1, r0
 80088d4:	aa04      	add	r2, sp, #16
 80088d6:	20ff      	movs	r0, #255	; 0xff
 80088d8:	f003 fa90 	bl	800bdfc <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80088dc:	2800      	cmp	r0, #0
 80088de:	d163      	bne.n	80089a8 <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80088e0:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80088e4:	4b4e      	ldr	r3, [pc, #312]	; (8008a20 <ProcessRadioRxDone+0x264>)
 80088e6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80088ea:	f89d 101a 	ldrb.w	r1, [sp, #26]
 80088ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80088f2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80088f6:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80088fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80088fe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008902:	9a07      	ldr	r2, [sp, #28]
 8008904:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008908:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800890c:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8008910:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008914:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008918:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800891c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008920:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8008924:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8008926:	b90a      	cbnz	r2, 800892c <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008928:	2201      	movs	r2, #1
 800892a:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800892c:	4c3c      	ldr	r4, [pc, #240]	; (8008a20 <ProcessRadioRxDone+0x264>)
 800892e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008934:	fb02 f303 	mul.w	r3, r2, r3
 8008938:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800893a:	4413      	add	r3, r2
 800893c:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008944:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8008948:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 800894a:	3d11      	subs	r5, #17
 800894c:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 8008950:	4b35      	ldr	r3, [pc, #212]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 8008952:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 8008956:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800895a:	a91d      	add	r1, sp, #116	; 0x74
 800895c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008960:	f003 fc86 	bl	800c270 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008964:	2302      	movs	r3, #2
 8008966:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800896a:	2001      	movs	r0, #1
 800896c:	f002 fed0 	bl	800b710 <LoRaMacConfirmQueueIsCmdActive>
 8008970:	b9a8      	cbnz	r0, 800899e <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8008972:	4a2d      	ldr	r2, [pc, #180]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 8008974:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008978:	f043 0308 	orr.w	r3, r3, #8
 800897c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 8008980:	e227      	b.n	8008dd2 <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008982:	4b29      	ldr	r3, [pc, #164]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800898a:	f7ff fbab 	bl	80080e4 <PrepareRxDoneAbort>
                return;
 800898e:	e233      	b.n	8008df8 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008990:	4b25      	ldr	r3, [pc, #148]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008998:	f7ff fba4 	bl	80080e4 <PrepareRxDoneAbort>
                return;
 800899c:	e22c      	b.n	8008df8 <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800899e:	2101      	movs	r1, #1
 80089a0:	2000      	movs	r0, #0
 80089a2:	f002 fe69 	bl	800b678 <LoRaMacConfirmQueueSetStatus>
 80089a6:	e7e4      	b.n	8008972 <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80089a8:	2001      	movs	r0, #1
 80089aa:	f002 feb1 	bl	800b710 <LoRaMacConfirmQueueIsCmdActive>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d0df      	beq.n	8008972 <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80089b2:	2101      	movs	r1, #1
 80089b4:	2007      	movs	r0, #7
 80089b6:	f002 fe5f 	bl	800b678 <LoRaMacConfirmQueueSetStatus>
 80089ba:	e7da      	b.n	8008972 <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80089bc:	4b1a      	ldr	r3, [pc, #104]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80089c4:	4b16      	ldr	r3, [pc, #88]	; (8008a20 <ProcessRadioRxDone+0x264>)
 80089c6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80089ca:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80089ce:	4a16      	ldr	r2, [pc, #88]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 80089d0:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 80089d4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80089d8:	220d      	movs	r2, #13
 80089da:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80089de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089e2:	b113      	cbz	r3, 80089ea <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80089e4:	230e      	movs	r3, #14
 80089e6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80089ea:	a91b      	add	r1, sp, #108	; 0x6c
 80089ec:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <ProcessRadioRxDone+0x264>)
 80089ee:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80089f2:	f003 fbf9 	bl	800c1e8 <RegionGetPhyParam>
 80089f6:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80089f8:	f1a5 030d 	sub.w	r3, r5, #13
 80089fc:	b21b      	sxth	r3, r3
 80089fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a02:	b200      	sxth	r0, r0
 8008a04:	4283      	cmp	r3, r0
 8008a06:	dc01      	bgt.n	8008a0c <ProcessRadioRxDone+0x250>
 8008a08:	2d0b      	cmp	r5, #11
 8008a0a:	d811      	bhi.n	8008a30 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008a0c:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <ProcessRadioRxDone+0x26c>)
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008a14:	f7ff fb66 	bl	80080e4 <PrepareRxDoneAbort>
                return;
 8008a18:	e1ee      	b.n	8008df8 <ProcessRadioRxDone+0x63c>
 8008a1a:	bf00      	nop
 8008a1c:	20000bd8 	.word	0x20000bd8
 8008a20:	20008000 	.word	0x20008000
 8008a24:	20000624 	.word	0x20000624
 8008a28:	20000628 	.word	0x20000628
 8008a2c:	08012a8c 	.word	0x08012a8c
            macMsgData.Buffer = payload;
 8008a30:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 8008a32:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008a36:	4bba      	ldr	r3, [pc, #744]	; (8008d20 <ProcessRadioRxDone+0x564>)
 8008a38:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008a3a:	23ff      	movs	r3, #255	; 0xff
 8008a3c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008a40:	a80e      	add	r0, sp, #56	; 0x38
 8008a42:	f003 faa1 	bl	800bf88 <LoRaMacParserData>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d142      	bne.n	8008ad0 <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008a4a:	4bb6      	ldr	r3, [pc, #728]	; (8008d24 <ProcessRadioRxDone+0x568>)
 8008a4c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d044      	beq.n	8008ade <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008a54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a56:	4bb4      	ldr	r3, [pc, #720]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008a58:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008a5c:	f10d 010a 	add.w	r1, sp, #10
 8008a60:	a80e      	add	r0, sp, #56	; 0x38
 8008a62:	f7ff f9d5 	bl	8007e10 <DetermineFrameType>
 8008a66:	4605      	mov	r5, r0
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d163      	bne.n	8008b34 <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d065      	beq.n	8008b42 <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8008a76:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008a78:	2d01      	cmp	r5, #1
 8008a7a:	d10a      	bne.n	8008a92 <ProcessRadioRxDone+0x2d6>
 8008a7c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	f040 808a 	bne.w	8008b9a <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8008a86:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8008a8a:	f013 0f60 	tst.w	r3, #96	; 0x60
 8008a8e:	f040 8084 	bne.w	8008b9a <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8008a92:	ab03      	add	r3, sp, #12
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	f10d 030b 	add.w	r3, sp, #11
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	4ba1      	ldr	r3, [pc, #644]	; (8008d24 <ProcessRadioRxDone+0x568>)
 8008a9e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008aa2:	aa0e      	add	r2, sp, #56	; 0x38
 8008aa4:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff fb59 	bl	8008160 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d07f      	beq.n	8008bb2 <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008ab2:	2807      	cmp	r0, #7
 8008ab4:	d078      	beq.n	8008ba8 <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ab6:	4b9c      	ldr	r3, [pc, #624]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008abe:	9a03      	ldr	r2, [sp, #12]
 8008ac0:	4b99      	ldr	r3, [pc, #612]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008ac2:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008ac6:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 8008aca:	f7ff fb0b 	bl	80080e4 <PrepareRxDoneAbort>
                return;
 8008ace:	e193      	b.n	8008df8 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ad0:	4b95      	ldr	r3, [pc, #596]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008ad8:	f7ff fb04 	bl	80080e4 <PrepareRxDoneAbort>
                return;
 8008adc:	e18c      	b.n	8008df8 <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8008ade:	f002 fba4 	bl	800b22a <LoRaMacClassBIsPingExpected>
 8008ae2:	b188      	cbz	r0, 8008b08 <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f002 fb95 	bl	800b214 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8008aea:	2000      	movs	r0, #0
 8008aec:	f002 fb97 	bl	800b21e <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008af0:	4b8d      	ldr	r3, [pc, #564]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008af2:	2204      	movs	r2, #4
 8008af4:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008af8:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008afc:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008b00:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b02:	f002 fbab 	bl	800b25c <LoRaMacClassBSetFPendingBit>
 8008b06:	e7a5      	b.n	8008a54 <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008b08:	f002 fb91 	bl	800b22e <LoRaMacClassBIsMulticastExpected>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d0a1      	beq.n	8008a54 <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008b10:	2000      	movs	r0, #0
 8008b12:	f002 fb80 	bl	800b216 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008b16:	2000      	movs	r0, #0
 8008b18:	f002 fb82 	bl	800b220 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008b1c:	4b82      	ldr	r3, [pc, #520]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008b1e:	2205      	movs	r2, #5
 8008b20:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008b24:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008b28:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008b2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b2e:	f002 fb95 	bl	800b25c <LoRaMacClassBSetFPendingBit>
 8008b32:	e78f      	b.n	8008a54 <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b34:	4b7c      	ldr	r3, [pc, #496]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008b3c:	f7ff fad2 	bl	80080e4 <PrepareRxDoneAbort>
                return;
 8008b40:	e15a      	b.n	8008df8 <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008b42:	4618      	mov	r0, r3
 8008b44:	4a77      	ldr	r2, [pc, #476]	; (8008d24 <ProcessRadioRxDone+0x568>)
 8008b46:	212c      	movs	r1, #44	; 0x2c
 8008b48:	fb01 2203 	mla	r2, r1, r3, r2
 8008b4c:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8008b50:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b52:	428a      	cmp	r2, r1
 8008b54:	d002      	beq.n	8008b5c <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008b56:	3301      	adds	r3, #1
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	e78a      	b.n	8008a72 <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008b5c:	4971      	ldr	r1, [pc, #452]	; (8008d24 <ProcessRadioRxDone+0x568>)
 8008b5e:	262c      	movs	r6, #44	; 0x2c
 8008b60:	fb06 1103 	mla	r1, r6, r3, r1
 8008b64:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	d0f4      	beq.n	8008b56 <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008b6c:	4b6d      	ldr	r3, [pc, #436]	; (8008d24 <ProcessRadioRxDone+0x568>)
 8008b6e:	fb06 3000 	mla	r0, r6, r0, r3
 8008b72:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008b76:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 8008b7a:	6809      	ldr	r1, [r1, #0]
 8008b7c:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008b7e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d002      	beq.n	8008b8c <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008b86:	4690      	mov	r8, r2
                    multicast = 1;
 8008b88:	2501      	movs	r5, #1
 8008b8a:	e775      	b.n	8008a78 <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008b8c:	4b66      	ldr	r3, [pc, #408]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008b8e:	2103      	movs	r1, #3
 8008b90:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008b94:	4690      	mov	r8, r2
                    multicast = 1;
 8008b96:	2501      	movs	r5, #1
 8008b98:	e76e      	b.n	8008a78 <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b9a:	4b63      	ldr	r3, [pc, #396]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008ba2:	f7ff fa9f 	bl	80080e4 <PrepareRxDoneAbort>
                return;
 8008ba6:	e127      	b.n	8008df8 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008ba8:	4b5f      	ldr	r3, [pc, #380]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008baa:	2208      	movs	r2, #8
 8008bac:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8008bb0:	e785      	b.n	8008abe <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008bb2:	ab0e      	add	r3, sp, #56	; 0x38
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8008bbc:	4641      	mov	r1, r8
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f003 f870 	bl	800bca4 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d13d      	bne.n	8008c44 <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008bc8:	4b57      	ldr	r3, [pc, #348]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008bca:	2100      	movs	r1, #0
 8008bcc:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 8008bd0:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008bd4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008bd8:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8008bdc:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 8008be0:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 8008be4:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008be8:	9803      	ldr	r0, [sp, #12]
 8008bea:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008bee:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008bf2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008bf6:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008bfa:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008bfe:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008c02:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 8008c06:	2801      	cmp	r0, #1
 8008c08:	d92a      	bls.n	8008c60 <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 8008c0a:	2d01      	cmp	r5, #1
 8008c0c:	d02e      	beq.n	8008c6c <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008c0e:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008c12:	2ca0      	cmp	r4, #160	; 0xa0
 8008c14:	d02f      	beq.n	8008c76 <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008c16:	2300      	movs	r3, #0
 8008c18:	4a42      	ldr	r2, [pc, #264]	; (8008d24 <ProcessRadioRxDone+0x568>)
 8008c1a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008c1e:	4a42      	ldr	r2, [pc, #264]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008c20:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008c24:	4b40      	ldr	r3, [pc, #256]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008c26:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 8008c2a:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008c2e:	f7ff fac2 	bl	80081b6 <RemoveMacCommands>
            switch( fType )
 8008c32:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	f200 809a 	bhi.w	8008d70 <ProcessRadioRxDone+0x5b4>
 8008c3c:	e8df f003 	tbb	[pc, r3]
 8008c40:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8008c44:	2802      	cmp	r0, #2
 8008c46:	d006      	beq.n	8008c56 <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008c48:	4b37      	ldr	r3, [pc, #220]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008c4a:	220b      	movs	r2, #11
 8008c4c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008c50:	f7ff fa48 	bl	80080e4 <PrepareRxDoneAbort>
                return;
 8008c54:	e0d0      	b.n	8008df8 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8008c56:	4b34      	ldr	r3, [pc, #208]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008c58:	220a      	movs	r2, #10
 8008c5a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8008c5e:	e7f7      	b.n	8008c50 <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8008c60:	4b30      	ldr	r3, [pc, #192]	; (8008d24 <ProcessRadioRxDone+0x568>)
 8008c62:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8008c6a:	e7ce      	b.n	8008c0a <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008c6c:	4b2e      	ldr	r3, [pc, #184]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8008c74:	e7d6      	b.n	8008c24 <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8008c76:	4b2b      	ldr	r3, [pc, #172]	; (8008d24 <ProcessRadioRxDone+0x568>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008c7e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8008c82:	b913      	cbnz	r3, 8008c8a <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8008c84:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c86:	4b27      	ldr	r3, [pc, #156]	; (8008d24 <ProcessRadioRxDone+0x568>)
 8008c88:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008c8a:	4b27      	ldr	r3, [pc, #156]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8008c92:	4290      	cmp	r0, r2
 8008c94:	d9c6      	bls.n	8008c24 <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8008c96:	4b23      	ldr	r3, [pc, #140]	; (8008d24 <ProcessRadioRxDone+0x568>)
 8008c98:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008c9c:	4b22      	ldr	r3, [pc, #136]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008c9e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8008ca2:	4a22      	ldr	r2, [pc, #136]	; (8008d2c <ProcessRadioRxDone+0x570>)
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 8008caa:	e7bb      	b.n	8008c24 <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008cac:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008cb0:	4c1d      	ldr	r4, [pc, #116]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008cb2:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	463b      	mov	r3, r7
 8008cba:	f002 020f 	and.w	r2, r2, #15
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	a812      	add	r0, sp, #72	; 0x48
 8008cc2:	f7ff fa87 	bl	80081d4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008cc6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008cca:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008cce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cd0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008cd4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8008cd8:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8008ce2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008ce6:	2be0      	cmp	r3, #224	; 0xe0
 8008ce8:	d049      	beq.n	8008d7e <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008cea:	4a0f      	ldr	r2, [pc, #60]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008cec:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008cf0:	f043 0302 	orr.w	r3, r3, #2
 8008cf4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 8008cf8:	e06b      	b.n	8008dd2 <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008cfa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008cfe:	4c0a      	ldr	r4, [pc, #40]	; (8008d28 <ProcessRadioRxDone+0x56c>)
 8008d00:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	463b      	mov	r3, r7
 8008d08:	f002 020f 	and.w	r2, r2, #15
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	a812      	add	r0, sp, #72	; 0x48
 8008d10:	f7ff fa60 	bl	80081d4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d14:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008d18:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 8008d1c:	e7e1      	b.n	8008ce2 <ProcessRadioRxDone+0x526>
 8008d1e:	bf00      	nop
 8008d20:	20000860 	.word	0x20000860
 8008d24:	20008000 	.word	0x20008000
 8008d28:	20000628 	.word	0x20000628
 8008d2c:	20000bd8 	.word	0x20000bd8
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8008d30:	4c3d      	ldr	r4, [pc, #244]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008d32:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	463b      	mov	r3, r7
 8008d3a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8008d3e:	2100      	movs	r1, #0
 8008d40:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d42:	f7ff fa47 	bl	80081d4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d46:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008d4a:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 8008d4e:	e7c8      	b.n	8008ce2 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d50:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8008d54:	4b34      	ldr	r3, [pc, #208]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008d56:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008d5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d5c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008d60:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8008d64:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 8008d6e:	e7b8      	b.n	8008ce2 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d70:	4b2d      	ldr	r3, [pc, #180]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 8008d78:	f7ff f9b4 	bl	80080e4 <PrepareRxDoneAbort>
                    break;
 8008d7c:	e7b1      	b.n	8008ce2 <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8008d7e:	4a2b      	ldr	r2, [pc, #172]	; (8008e2c <ProcessRadioRxDone+0x670>)
 8008d80:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	d1b0      	bne.n	8008cea <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d88:	4a27      	ldr	r2, [pc, #156]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008d8a:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 8008d94:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 8008d98:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 8008d9c:	e7a5      	b.n	8008cea <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008d9e:	1e6a      	subs	r2, r5, #1
 8008da0:	4c21      	ldr	r4, [pc, #132]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008da2:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8008da6:	b292      	uxth	r2, r2
 8008da8:	1c71      	adds	r1, r6, #1
 8008daa:	4638      	mov	r0, r7
 8008dac:	f006 faaf 	bl	800f30e <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008db0:	2303      	movs	r3, #3
 8008db2:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008dbc:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8008dc0:	3d01      	subs	r5, #1
 8008dc2:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008dc6:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 8008dca:	f043 0302 	orr.w	r3, r3, #2
 8008dce:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008dd2:	4b15      	ldr	r3, [pc, #84]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008dd4:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d917      	bls.n	8008e0c <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8008ddc:	4b12      	ldr	r3, [pc, #72]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008dde:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d006      	beq.n	8008df4 <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8008de6:	4a10      	ldr	r2, [pc, #64]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008de8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008dec:	f043 0320 	orr.w	r3, r3, #32
 8008df0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8008df4:	f7fe ff80 	bl	8007cf8 <UpdateRxSlotIdleState>
}
 8008df8:	b021      	add	sp, #132	; 0x84
 8008dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008dfe:	4b0a      	ldr	r3, [pc, #40]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 8008e06:	f7ff f96d 	bl	80080e4 <PrepareRxDoneAbort>
            break;
 8008e0a:	e7e2      	b.n	8008dd2 <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 8008e0c:	4b06      	ldr	r3, [pc, #24]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008e0e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0e2      	beq.n	8008ddc <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8008e16:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <ProcessRadioRxDone+0x66c>)
 8008e18:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0dd      	beq.n	8008ddc <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 8008e20:	2000      	movs	r0, #0
 8008e22:	f7ff f949 	bl	80080b8 <OnRetransmitTimeoutTimerEvent>
 8008e26:	e7d9      	b.n	8008ddc <ProcessRadioRxDone+0x620>
 8008e28:	20000628 	.word	0x20000628
 8008e2c:	20008000 	.word	0x20008000

08008e30 <ProcessRadioTxTimeout>:
{
 8008e30:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008e32:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <ProcessRadioTxTimeout+0x40>)
 8008e34:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d002      	beq.n	8008e42 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8008e3c:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <ProcessRadioTxTimeout+0x44>)
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008e42:	f7fe ff59 	bl	8007cf8 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008e46:	4c0c      	ldr	r4, [pc, #48]	; (8008e78 <ProcessRadioTxTimeout+0x48>)
 8008e48:	2002      	movs	r0, #2
 8008e4a:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008e4e:	f002 fc41 	bl	800b6d4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008e52:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8008e56:	b113      	cbz	r3, 8008e5e <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008e5e:	4a06      	ldr	r2, [pc, #24]	; (8008e78 <ProcessRadioTxTimeout+0x48>)
 8008e60:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008e64:	f043 0320 	orr.w	r3, r3, #32
 8008e68:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 8008e6c:	bd10      	pop	{r4, pc}
 8008e6e:	bf00      	nop
 8008e70:	20008000 	.word	0x20008000
 8008e74:	08012a8c 	.word	0x08012a8c
 8008e78:	20000628 	.word	0x20000628

08008e7c <CheckForClassBCollision>:
{
 8008e7c:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008e7e:	f002 f9d2 	bl	800b226 <LoRaMacClassBIsBeaconExpected>
 8008e82:	b978      	cbnz	r0, 8008ea4 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008e84:	4b09      	ldr	r3, [pc, #36]	; (8008eac <CheckForClassBCollision+0x30>)
 8008e86:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d001      	beq.n	8008e92 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8008e8e:	2000      	movs	r0, #0
}
 8008e90:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008e92:	f002 f9ca 	bl	800b22a <LoRaMacClassBIsPingExpected>
 8008e96:	b938      	cbnz	r0, 8008ea8 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008e98:	f002 f9c9 	bl	800b22e <LoRaMacClassBIsMulticastExpected>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d0f7      	beq.n	8008e90 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008ea0:	200f      	movs	r0, #15
 8008ea2:	e7f5      	b.n	8008e90 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008ea4:	200e      	movs	r0, #14
 8008ea6:	e7f3      	b.n	8008e90 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008ea8:	200f      	movs	r0, #15
 8008eaa:	e7f1      	b.n	8008e90 <CheckForClassBCollision+0x14>
 8008eac:	20008000 	.word	0x20008000

08008eb0 <HandleRadioRxErrorTimeout>:
{
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008eb6:	4b34      	ldr	r3, [pc, #208]	; (8008f88 <HandleRadioRxErrorTimeout+0xd8>)
 8008eb8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d002      	beq.n	8008ec6 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008ec0:	4b32      	ldr	r3, [pc, #200]	; (8008f8c <HandleRadioRxErrorTimeout+0xdc>)
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008ec6:	f002 f9ae 	bl	800b226 <LoRaMacClassBIsBeaconExpected>
 8008eca:	4606      	mov	r6, r0
 8008ecc:	bb50      	cbnz	r0, 8008f24 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008ece:	4b2e      	ldr	r3, [pc, #184]	; (8008f88 <HandleRadioRxErrorTimeout+0xd8>)
 8008ed0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d02c      	beq.n	8008f32 <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 8008ed8:	2e00      	cmp	r6, #0
 8008eda:	d152      	bne.n	8008f82 <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008edc:	4b2c      	ldr	r3, [pc, #176]	; (8008f90 <HandleRadioRxErrorTimeout+0xe0>)
 8008ede:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d13c      	bne.n	8008f60 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 8008ee6:	4b2a      	ldr	r3, [pc, #168]	; (8008f90 <HandleRadioRxErrorTimeout+0xe0>)
 8008ee8:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8008eec:	b113      	cbz	r3, 8008ef4 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008eee:	4b28      	ldr	r3, [pc, #160]	; (8008f90 <HandleRadioRxErrorTimeout+0xe0>)
 8008ef0:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	f002 fbed 	bl	800b6d4 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8008efa:	4b23      	ldr	r3, [pc, #140]	; (8008f88 <HandleRadioRxErrorTimeout+0xd8>)
 8008efc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008efe:	f008 fbcd 	bl	801169c <UTIL_TIMER_GetElapsedTime>
 8008f02:	4b23      	ldr	r3, [pc, #140]	; (8008f90 <HandleRadioRxErrorTimeout+0xe0>)
 8008f04:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008f08:	4298      	cmp	r0, r3
 8008f0a:	d33a      	bcc.n	8008f82 <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008f0c:	4c20      	ldr	r4, [pc, #128]	; (8008f90 <HandleRadioRxErrorTimeout+0xe0>)
 8008f0e:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008f12:	f008 fbf9 	bl	8011708 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008f16:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 8008f1a:	f043 0320 	orr.w	r3, r3, #32
 8008f1e:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 8008f22:	e02e      	b.n	8008f82 <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008f24:	2002      	movs	r0, #2
 8008f26:	f002 f974 	bl	800b212 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	f002 f976 	bl	800b21c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8008f30:	e7cd      	b.n	8008ece <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008f32:	f002 f97a 	bl	800b22a <LoRaMacClassBIsPingExpected>
 8008f36:	4607      	mov	r7, r0
 8008f38:	b950      	cbnz	r0, 8008f50 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008f3a:	f002 f978 	bl	800b22e <LoRaMacClassBIsMulticastExpected>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d0ca      	beq.n	8008ed8 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008f42:	2000      	movs	r0, #0
 8008f44:	f002 f967 	bl	800b216 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008f48:	2000      	movs	r0, #0
 8008f4a:	f002 f969 	bl	800b220 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8008f4e:	e018      	b.n	8008f82 <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008f50:	2000      	movs	r0, #0
 8008f52:	f002 f95f 	bl	800b214 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008f56:	2000      	movs	r0, #0
 8008f58:	f002 f961 	bl	800b21e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008f5c:	463e      	mov	r6, r7
 8008f5e:	e7ec      	b.n	8008f3a <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 8008f60:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <HandleRadioRxErrorTimeout+0xe0>)
 8008f62:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8008f66:	b113      	cbz	r3, 8008f6e <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008f68:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <HandleRadioRxErrorTimeout+0xe0>)
 8008f6a:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f002 fbb0 	bl	800b6d4 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8008f74:	4a06      	ldr	r2, [pc, #24]	; (8008f90 <HandleRadioRxErrorTimeout+0xe0>)
 8008f76:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008f7a:	f043 0320 	orr.w	r3, r3, #32
 8008f7e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8008f82:	f7fe feb9 	bl	8007cf8 <UpdateRxSlotIdleState>
}
 8008f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f88:	20008000 	.word	0x20008000
 8008f8c:	08012a8c 	.word	0x08012a8c
 8008f90:	20000628 	.word	0x20000628

08008f94 <ProcessRadioRxError>:
{
 8008f94:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008f96:	2106      	movs	r1, #6
 8008f98:	2005      	movs	r0, #5
 8008f9a:	f7ff ff89 	bl	8008eb0 <HandleRadioRxErrorTimeout>
}
 8008f9e:	bd08      	pop	{r3, pc}

08008fa0 <ProcessRadioRxTimeout>:
{
 8008fa0:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008fa2:	2104      	movs	r1, #4
 8008fa4:	2003      	movs	r0, #3
 8008fa6:	f7ff ff83 	bl	8008eb0 <HandleRadioRxErrorTimeout>
}
 8008faa:	bd08      	pop	{r3, pc}

08008fac <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008fb0:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8008fb2:	4a14      	ldr	r2, [pc, #80]	; (8009004 <LoRaMacHandleIrqEvents+0x58>)
 8008fb4:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fba:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8008fbe:	b303      	cbz	r3, 8009002 <LoRaMacHandleIrqEvents+0x56>
{
 8008fc0:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8008fc2:	b2dc      	uxtb	r4, r3
 8008fc4:	f013 0f20 	tst.w	r3, #32
 8008fc8:	d10c      	bne.n	8008fe4 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8008fca:	f014 0f10 	tst.w	r4, #16
 8008fce:	d10c      	bne.n	8008fea <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8008fd0:	f014 0f08 	tst.w	r4, #8
 8008fd4:	d10c      	bne.n	8008ff0 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8008fd6:	f014 0f04 	tst.w	r4, #4
 8008fda:	d10c      	bne.n	8008ff6 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8008fdc:	f014 0f02 	tst.w	r4, #2
 8008fe0:	d10c      	bne.n	8008ffc <LoRaMacHandleIrqEvents+0x50>
}
 8008fe2:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8008fe4:	f7fe fff2 	bl	8007fcc <ProcessRadioTxDone>
 8008fe8:	e7ef      	b.n	8008fca <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8008fea:	f7ff fbe7 	bl	80087bc <ProcessRadioRxDone>
 8008fee:	e7ef      	b.n	8008fd0 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8008ff0:	f7ff ff1e 	bl	8008e30 <ProcessRadioTxTimeout>
 8008ff4:	e7ef      	b.n	8008fd6 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8008ff6:	f7ff ffcd 	bl	8008f94 <ProcessRadioRxError>
 8008ffa:	e7ef      	b.n	8008fdc <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8008ffc:	f7ff ffd0 	bl	8008fa0 <ProcessRadioRxTimeout>
}
 8009000:	e7ef      	b.n	8008fe2 <LoRaMacHandleIrqEvents+0x36>
 8009002:	4770      	bx	lr
 8009004:	20000624 	.word	0x20000624

08009008 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 8009008:	b909      	cbnz	r1, 800900e <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800900a:	2000      	movs	r0, #0
}
 800900c:	4770      	bx	lr
{
 800900e:	b510      	push	{r4, lr}
 8009010:	4604      	mov	r4, r0
 8009012:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8009014:	f008 fb42 	bl	801169c <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8009018:	42a0      	cmp	r0, r4
 800901a:	d801      	bhi.n	8009020 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800901c:	2000      	movs	r0, #0
}
 800901e:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 8009020:	4b02      	ldr	r3, [pc, #8]	; (800902c <LoRaMacHandleResponseTimeout+0x24>)
 8009022:	2200      	movs	r2, #0
 8009024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 8009028:	2001      	movs	r0, #1
 800902a:	e7f8      	b.n	800901e <LoRaMacHandleResponseTimeout+0x16>
 800902c:	20008000 	.word	0x20008000

08009030 <LoRaMacHandleMlmeRequest>:
{
 8009030:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009032:	4b14      	ldr	r3, [pc, #80]	; (8009084 <LoRaMacHandleMlmeRequest+0x54>)
 8009034:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009038:	f013 0f04 	tst.w	r3, #4
 800903c:	d100      	bne.n	8009040 <LoRaMacHandleMlmeRequest+0x10>
}
 800903e:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009040:	2001      	movs	r0, #1
 8009042:	f002 fb65 	bl	800b710 <LoRaMacConfirmQueueIsCmdActive>
 8009046:	b178      	cbz	r0, 8009068 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009048:	2001      	movs	r0, #1
 800904a:	f002 fb2b 	bl	800b6a4 <LoRaMacConfirmQueueGetStatus>
 800904e:	b918      	cbnz	r0, 8009058 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8009050:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <LoRaMacHandleMlmeRequest+0x54>)
 8009052:	2200      	movs	r2, #0
 8009054:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009058:	4a0a      	ldr	r2, [pc, #40]	; (8009084 <LoRaMacHandleMlmeRequest+0x54>)
 800905a:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800905e:	f023 0302 	bic.w	r3, r3, #2
 8009062:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8009066:	e7ea      	b.n	800903e <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8009068:	2005      	movs	r0, #5
 800906a:	f002 fb51 	bl	800b710 <LoRaMacConfirmQueueIsCmdActive>
 800906e:	2800      	cmp	r0, #0
 8009070:	d0e5      	beq.n	800903e <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009072:	4a04      	ldr	r2, [pc, #16]	; (8009084 <LoRaMacHandleMlmeRequest+0x54>)
 8009074:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009078:	f023 0302 	bic.w	r3, r3, #2
 800907c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8009080:	e7dd      	b.n	800903e <LoRaMacHandleMlmeRequest+0xe>
 8009082:	bf00      	nop
 8009084:	20000628 	.word	0x20000628

08009088 <SerializeTxFrame>:
{
 8009088:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800908a:	4b0f      	ldr	r3, [pc, #60]	; (80090c8 <SerializeTxFrame+0x40>)
 800908c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009090:	b11b      	cbz	r3, 800909a <SerializeTxFrame+0x12>
 8009092:	2b04      	cmp	r3, #4
 8009094:	d00a      	beq.n	80090ac <SerializeTxFrame+0x24>
 8009096:	2003      	movs	r0, #3
}
 8009098:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800909a:	480c      	ldr	r0, [pc, #48]	; (80090cc <SerializeTxFrame+0x44>)
 800909c:	f002 ffd3 	bl	800c046 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80090a0:	b968      	cbnz	r0, 80090be <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80090a2:	4b09      	ldr	r3, [pc, #36]	; (80090c8 <SerializeTxFrame+0x40>)
 80090a4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80090a8:	801a      	strh	r2, [r3, #0]
            break;
 80090aa:	e7f5      	b.n	8009098 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80090ac:	4807      	ldr	r0, [pc, #28]	; (80090cc <SerializeTxFrame+0x44>)
 80090ae:	f003 f800 	bl	800c0b2 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80090b2:	b930      	cbnz	r0, 80090c2 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <SerializeTxFrame+0x40>)
 80090b6:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80090ba:	801a      	strh	r2, [r3, #0]
            break;
 80090bc:	e7ec      	b.n	8009098 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80090be:	2011      	movs	r0, #17
 80090c0:	e7ea      	b.n	8009098 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80090c2:	2011      	movs	r0, #17
 80090c4:	e7e8      	b.n	8009098 <SerializeTxFrame+0x10>
 80090c6:	bf00      	nop
 80090c8:	20000628 	.word	0x20000628
 80090cc:	20000730 	.word	0x20000730

080090d0 <ComputeRxWindowParameters>:
{
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80090d4:	4c1d      	ldr	r4, [pc, #116]	; (800914c <ComputeRxWindowParameters+0x7c>)
 80090d6:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80090da:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 80090de:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 80090e2:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 80090e6:	4630      	mov	r0, r6
 80090e8:	f003 f993 	bl	800c412 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80090ec:	4d18      	ldr	r5, [pc, #96]	; (8009150 <ComputeRxWindowParameters+0x80>)
 80090ee:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80090f6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80090fa:	b241      	sxtb	r1, r0
 80090fc:	4630      	mov	r0, r6
 80090fe:	f003 f8d4 	bl	800c2aa <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009102:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800910a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800910e:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8009112:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009116:	f003 f8c8 	bl	800c2aa <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800911a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800911c:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 8009120:	440b      	add	r3, r1
 8009122:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009126:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009128:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800912c:	4413      	add	r3, r2
 800912e:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009132:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009136:	b93b      	cbnz	r3, 8009148 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800913a:	4419      	add	r1, r3
 800913c:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009140:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009142:	440a      	add	r2, r1
 8009144:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8009148:	b002      	add	sp, #8
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	20008000 	.word	0x20008000
 8009150:	20000628 	.word	0x20000628

08009154 <VerifyTxFrame>:
{
 8009154:	b510      	push	{r4, lr}
 8009156:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800915c:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <VerifyTxFrame+0x40>)
 800915e:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 8009162:	b914      	cbnz	r4, 800916a <VerifyTxFrame+0x16>
}
 8009164:	4620      	mov	r0, r4
 8009166:	b002      	add	sp, #8
 8009168:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800916a:	a801      	add	r0, sp, #4
 800916c:	f002 f980 	bl	800b470 <LoRaMacCommandsGetSizeSerializedCmds>
 8009170:	4604      	mov	r4, r0
 8009172:	b968      	cbnz	r0, 8009190 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8009174:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009178:	4b06      	ldr	r3, [pc, #24]	; (8009194 <VerifyTxFrame+0x40>)
 800917a:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800917e:	4b06      	ldr	r3, [pc, #24]	; (8009198 <VerifyTxFrame+0x44>)
 8009180:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8009184:	f7fe ff10 	bl	8007fa8 <ValidatePayloadLength>
 8009188:	2800      	cmp	r0, #0
 800918a:	d1eb      	bne.n	8009164 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800918c:	2408      	movs	r4, #8
 800918e:	e7e9      	b.n	8009164 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009190:	2413      	movs	r4, #19
 8009192:	e7e7      	b.n	8009164 <VerifyTxFrame+0x10>
 8009194:	20008000 	.word	0x20008000
 8009198:	20000628 	.word	0x20000628

0800919c <SecureFrame>:
{
 800919c:	b530      	push	{r4, r5, lr}
 800919e:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 80091a4:	4b18      	ldr	r3, [pc, #96]	; (8009208 <SecureFrame+0x6c>)
 80091a6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80091aa:	b133      	cbz	r3, 80091ba <SecureFrame+0x1e>
 80091ac:	4605      	mov	r5, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	2b04      	cmp	r3, #4
 80091b2:	d00b      	beq.n	80091cc <SecureFrame+0x30>
 80091b4:	2003      	movs	r0, #3
}
 80091b6:	b003      	add	sp, #12
 80091b8:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80091ba:	4814      	ldr	r0, [pc, #80]	; (800920c <SecureFrame+0x70>)
 80091bc:	f002 fd08 	bl	800bbd0 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80091c0:	b9d8      	cbnz	r0, 80091fa <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80091c2:	4b11      	ldr	r3, [pc, #68]	; (8009208 <SecureFrame+0x6c>)
 80091c4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80091c8:	801a      	strh	r2, [r3, #0]
            break;
 80091ca:	e7f4      	b.n	80091b6 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80091cc:	a801      	add	r0, sp, #4
 80091ce:	f002 fcb5 	bl	800bb3c <LoRaMacCryptoGetFCntUp>
 80091d2:	b9a0      	cbnz	r0, 80091fe <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80091d4:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <SecureFrame+0x6c>)
 80091d6:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80091da:	b113      	cbz	r3, 80091e2 <SecureFrame+0x46>
                fCntUp -= 1;
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	3b01      	subs	r3, #1
 80091e0:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80091e2:	4b0a      	ldr	r3, [pc, #40]	; (800920c <SecureFrame+0x70>)
 80091e4:	4622      	mov	r2, r4
 80091e6:	4629      	mov	r1, r5
 80091e8:	9801      	ldr	r0, [sp, #4]
 80091ea:	f002 fd17 	bl	800bc1c <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80091ee:	b940      	cbnz	r0, 8009202 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80091f0:	4b05      	ldr	r3, [pc, #20]	; (8009208 <SecureFrame+0x6c>)
 80091f2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80091f6:	801a      	strh	r2, [r3, #0]
            break;
 80091f8:	e7dd      	b.n	80091b6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80091fa:	2011      	movs	r0, #17
 80091fc:	e7db      	b.n	80091b6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80091fe:	2012      	movs	r0, #18
 8009200:	e7d9      	b.n	80091b6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009202:	2011      	movs	r0, #17
 8009204:	e7d7      	b.n	80091b6 <SecureFrame+0x1a>
 8009206:	bf00      	nop
 8009208:	20000628 	.word	0x20000628
 800920c:	20000730 	.word	0x20000730

08009210 <SendFrameOnChannel>:
{
 8009210:	b570      	push	{r4, r5, r6, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	4606      	mov	r6, r0
    int8_t txPower = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800921c:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009220:	4d35      	ldr	r5, [pc, #212]	; (80092f8 <SendFrameOnChannel+0xe8>)
 8009222:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 8009226:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800922a:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800922e:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009232:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8009234:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009236:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009238:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800923a:	4c30      	ldr	r4, [pc, #192]	; (80092fc <SendFrameOnChannel+0xec>)
 800923c:	8823      	ldrh	r3, [r4, #0]
 800923e:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009242:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 8009246:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800924a:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 800924e:	f10d 0207 	add.w	r2, sp, #7
 8009252:	a902      	add	r1, sp, #8
 8009254:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8009258:	f003 f84b 	bl	800c2f2 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009262:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8009266:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 800926a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800926e:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8009272:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009276:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 800927a:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800927e:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8009282:	f001 ffd6 	bl	800b232 <LoRaMacClassBIsBeaconModeActive>
 8009286:	bb60      	cbnz	r0, 80092e2 <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009288:	4b1b      	ldr	r3, [pc, #108]	; (80092f8 <SendFrameOnChannel+0xe8>)
 800928a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800928e:	2b01      	cmp	r3, #1
 8009290:	d02f      	beq.n	80092f2 <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 8009292:	f001 ffd1 	bl	800b238 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8009296:	4b18      	ldr	r3, [pc, #96]	; (80092f8 <SendFrameOnChannel+0xe8>)
 8009298:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800929c:	4b17      	ldr	r3, [pc, #92]	; (80092fc <SendFrameOnChannel+0xec>)
 800929e:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 80092a2:	b2c0      	uxtb	r0, r0
 80092a4:	f7ff ff7a 	bl	800919c <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 80092a8:	4604      	mov	r4, r0
 80092aa:	b9b8      	cbnz	r0, 80092dc <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80092ac:	4813      	ldr	r0, [pc, #76]	; (80092fc <SendFrameOnChannel+0xec>)
 80092ae:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 80092b2:	f043 0302 	orr.w	r3, r3, #2
 80092b6:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 80092ba:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 80092be:	3301      	adds	r3, #1
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80092c6:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80092d0:	4b0b      	ldr	r3, [pc, #44]	; (8009300 <SendFrameOnChannel+0xf0>)
 80092d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d4:	f830 1b02 	ldrh.w	r1, [r0], #2
 80092d8:	b2c9      	uxtb	r1, r1
 80092da:	4798      	blx	r3
}
 80092dc:	4620      	mov	r0, r4
 80092de:	b006      	add	sp, #24
 80092e0:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80092e2:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 80092e6:	f001 ffb6 	bl	800b256 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d0cc      	beq.n	8009288 <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80092ee:	2410      	movs	r4, #16
 80092f0:	e7f4      	b.n	80092dc <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 80092f2:	f001 ffb2 	bl	800b25a <LoRaMacClassBStopRxSlots>
 80092f6:	e7cc      	b.n	8009292 <SendFrameOnChannel+0x82>
 80092f8:	20008000 	.word	0x20008000
 80092fc:	20000628 	.word	0x20000628
 8009300:	08012a8c 	.word	0x08012a8c

08009304 <ScheduleTx>:
{
 8009304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009308:	b08c      	sub	sp, #48	; 0x30
 800930a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800930c:	f7ff fdb6 	bl	8008e7c <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 8009310:	4604      	mov	r4, r0
 8009312:	b118      	cbz	r0, 800931c <ScheduleTx+0x18>
}
 8009314:	4620      	mov	r0, r4
 8009316:	b00c      	add	sp, #48	; 0x30
 8009318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800931c:	f7fe fd50 	bl	8007dc0 <CalculateBackOff>
    status = SerializeTxFrame( );
 8009320:	f7ff feb2 	bl	8009088 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009324:	4604      	mov	r4, r0
 8009326:	2800      	cmp	r0, #0
 8009328:	d1f4      	bne.n	8009314 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800932a:	4e36      	ldr	r6, [pc, #216]	; (8009404 <ScheduleTx+0x100>)
 800932c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800932e:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009330:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8009334:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009338:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800933c:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009340:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009344:	4640      	mov	r0, r8
 8009346:	f008 f913 	bl	8011570 <SysTimeGetMcuTime>
 800934a:	af02      	add	r7, sp, #8
 800934c:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 8009356:	e898 0006 	ldmia.w	r8, {r1, r2}
 800935a:	4638      	mov	r0, r7
 800935c:	f008 f8a5 	bl	80114aa <SysTimeSub>
 8009360:	ab07      	add	r3, sp, #28
 8009362:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009366:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800936a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800936c:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800936e:	2300      	movs	r3, #0
 8009370:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 8009374:	2301      	movs	r3, #1
 8009376:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800937a:	4b23      	ldr	r3, [pc, #140]	; (8009408 <ScheduleTx+0x104>)
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009382:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8009386:	b92b      	cbnz	r3, 8009394 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8009388:	2301      	movs	r3, #1
 800938a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800938e:	2300      	movs	r3, #0
 8009390:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8009394:	4a1c      	ldr	r2, [pc, #112]	; (8009408 <ScheduleTx+0x104>)
 8009396:	481b      	ldr	r0, [pc, #108]	; (8009404 <ScheduleTx+0x100>)
 8009398:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 80093a2:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 80093a6:	a904      	add	r1, sp, #16
 80093a8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80093ac:	f003 f81c 	bl	800c3e8 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 80093b0:	b1b0      	cbz	r0, 80093e0 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80093b2:	280b      	cmp	r0, #11
 80093b4:	d122      	bne.n	80093fc <ScheduleTx+0xf8>
 80093b6:	b31d      	cbz	r5, 8009400 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80093b8:	4b13      	ldr	r3, [pc, #76]	; (8009408 <ScheduleTx+0x104>)
 80093ba:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 80093be:	2900      	cmp	r1, #0
 80093c0:	d0a8      	beq.n	8009314 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80093c2:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80093c6:	f042 0220 	orr.w	r2, r2, #32
 80093ca:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80093ce:	f503 755a 	add.w	r5, r3, #872	; 0x368
 80093d2:	4628      	mov	r0, r5
 80093d4:	f008 fa38 	bl	8011848 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80093d8:	4628      	mov	r0, r5
 80093da:	f008 f9ef 	bl	80117bc <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 80093de:	e799      	b.n	8009314 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 80093e0:	f7ff fe76 	bl	80090d0 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 80093e4:	f7ff feb6 	bl	8009154 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80093e8:	4604      	mov	r4, r0
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d192      	bne.n	8009314 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 80093ee:	4b06      	ldr	r3, [pc, #24]	; (8009408 <ScheduleTx+0x104>)
 80093f0:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 80093f4:	f7ff ff0c 	bl	8009210 <SendFrameOnChannel>
 80093f8:	4604      	mov	r4, r0
 80093fa:	e78b      	b.n	8009314 <ScheduleTx+0x10>
            return status;
 80093fc:	4604      	mov	r4, r0
 80093fe:	e789      	b.n	8009314 <ScheduleTx+0x10>
 8009400:	4604      	mov	r4, r0
 8009402:	e787      	b.n	8009314 <ScheduleTx+0x10>
 8009404:	20008000 	.word	0x20008000
 8009408:	20000628 	.word	0x20000628

0800940c <OnTxDelayedTimerEvent>:
{
 800940c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800940e:	4c16      	ldr	r4, [pc, #88]	; (8009468 <OnTxDelayedTimerEvent+0x5c>)
 8009410:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009414:	f008 f978 	bl	8011708 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009418:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800941c:	f023 0320 	bic.w	r3, r3, #32
 8009420:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8009424:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 8009428:	4b10      	ldr	r3, [pc, #64]	; (800946c <OnTxDelayedTimerEvent+0x60>)
 800942a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800942e:	f7ff fdeb 	bl	8009008 <LoRaMacHandleResponseTimeout>
 8009432:	b100      	cbz	r0, 8009436 <OnTxDelayedTimerEvent+0x2a>
}
 8009434:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8009436:	2001      	movs	r0, #1
 8009438:	f7ff ff64 	bl	8009304 <ScheduleTx>
 800943c:	2800      	cmp	r0, #0
 800943e:	d0f9      	beq.n	8009434 <OnTxDelayedTimerEvent+0x28>
 8009440:	280b      	cmp	r0, #11
 8009442:	d0f7      	beq.n	8009434 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009444:	4b09      	ldr	r3, [pc, #36]	; (800946c <OnTxDelayedTimerEvent+0x60>)
 8009446:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800944a:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800944e:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 8009452:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009456:	2009      	movs	r0, #9
 8009458:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800945c:	f002 f93a 	bl	800b6d4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009460:	f7fe fd40 	bl	8007ee4 <StopRetransmission>
            break;
 8009464:	e7e6      	b.n	8009434 <OnTxDelayedTimerEvent+0x28>
 8009466:	bf00      	nop
 8009468:	20000628 	.word	0x20000628
 800946c:	20008000 	.word	0x20008000

08009470 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009470:	4b1c      	ldr	r3, [pc, #112]	; (80094e4 <LoRaMacHandleMcpsRequest+0x74>)
 8009472:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009476:	f013 0f01 	tst.w	r3, #1
 800947a:	d032      	beq.n	80094e2 <LoRaMacHandleMcpsRequest+0x72>
{
 800947c:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800947e:	4b19      	ldr	r3, [pc, #100]	; (80094e4 <LoRaMacHandleMcpsRequest+0x74>)
 8009480:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8009484:	b12b      	cbz	r3, 8009492 <LoRaMacHandleMcpsRequest+0x22>
 8009486:	2b03      	cmp	r3, #3
 8009488:	d003      	beq.n	8009492 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800948a:	2b01      	cmp	r3, #1
 800948c:	d006      	beq.n	800949c <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800948e:	2000      	movs	r0, #0
 8009490:	e002      	b.n	8009498 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8009492:	f7fe fced 	bl	8007e70 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 8009496:	b940      	cbnz	r0, 80094aa <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 8009498:	b1b8      	cbz	r0, 80094ca <LoRaMacHandleMcpsRequest+0x5a>
}
 800949a:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800949c:	4b11      	ldr	r3, [pc, #68]	; (80094e4 <LoRaMacHandleMcpsRequest+0x74>)
 800949e:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 80094a2:	b183      	cbz	r3, 80094c6 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 80094a4:	f7fe fd00 	bl	8007ea8 <CheckRetransConfirmedUplink>
 80094a8:	e7f5      	b.n	8009496 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 80094aa:	4c0e      	ldr	r4, [pc, #56]	; (80094e4 <LoRaMacHandleMcpsRequest+0x74>)
 80094ac:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80094b0:	f008 f92a 	bl	8011708 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80094b4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80094b8:	f023 0320 	bic.w	r3, r3, #32
 80094bc:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 80094c0:	f7fe fd10 	bl	8007ee4 <StopRetransmission>
 80094c4:	e7e9      	b.n	800949a <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 80094c6:	2001      	movs	r0, #1
 80094c8:	e7e6      	b.n	8009498 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80094ca:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <LoRaMacHandleMcpsRequest+0x74>)
 80094cc:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80094d0:	f36f 1245 	bfc	r2, #5, #1
 80094d4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 80094d8:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 80094dc:	f7ff ff96 	bl	800940c <OnTxDelayedTimerEvent>
}
 80094e0:	e7db      	b.n	800949a <LoRaMacHandleMcpsRequest+0x2a>
 80094e2:	4770      	bx	lr
 80094e4:	20000628 	.word	0x20000628

080094e8 <LoRaMacHandleRequestEvents>:
{
 80094e8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80094ea:	4b22      	ldr	r3, [pc, #136]	; (8009574 <LoRaMacHandleRequestEvents+0x8c>)
 80094ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80094f0:	bb7b      	cbnz	r3, 8009552 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80094f2:	4b20      	ldr	r3, [pc, #128]	; (8009574 <LoRaMacHandleRequestEvents+0x8c>)
 80094f4:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 80094f8:	f014 0501 	ands.w	r5, r4, #1
 80094fc:	d005      	beq.n	800950a <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80094fe:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009502:	f36f 0200 	bfc	r2, #0, #1
 8009506:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800950a:	4b1a      	ldr	r3, [pc, #104]	; (8009574 <LoRaMacHandleRequestEvents+0x8c>)
 800950c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009510:	f013 0f04 	tst.w	r3, #4
 8009514:	d006      	beq.n	8009524 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009516:	4b17      	ldr	r3, [pc, #92]	; (8009574 <LoRaMacHandleRequestEvents+0x8c>)
 8009518:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800951c:	f36f 0282 	bfc	r2, #2, #1
 8009520:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009524:	2001      	movs	r0, #1
 8009526:	f7fe fbfb 	bl	8007d20 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800952a:	b135      	cbz	r5, 800953a <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800952c:	4811      	ldr	r0, [pc, #68]	; (8009574 <LoRaMacHandleRequestEvents+0x8c>)
 800952e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f200 4044 	addw	r0, r0, #1092	; 0x444
 8009538:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800953a:	f014 0f04 	tst.w	r4, #4
 800953e:	d109      	bne.n	8009554 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8009540:	f001 fe7b 	bl	800b23a <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009544:	4b0b      	ldr	r3, [pc, #44]	; (8009574 <LoRaMacHandleRequestEvents+0x8c>)
 8009546:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800954a:	f36f 1245 	bfc	r2, #5, #1
 800954e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 8009552:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009554:	4808      	ldr	r0, [pc, #32]	; (8009578 <LoRaMacHandleRequestEvents+0x90>)
 8009556:	f002 f8e7 	bl	800b728 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800955a:	f002 f917 	bl	800b78c <LoRaMacConfirmQueueGetCnt>
 800955e:	2800      	cmp	r0, #0
 8009560:	d0ee      	beq.n	8009540 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009562:	4a04      	ldr	r2, [pc, #16]	; (8009574 <LoRaMacHandleRequestEvents+0x8c>)
 8009564:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8009568:	f043 0304 	orr.w	r3, r3, #4
 800956c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8009570:	e7e6      	b.n	8009540 <LoRaMacHandleRequestEvents+0x58>
 8009572:	bf00      	nop
 8009574:	20000628 	.word	0x20000628
 8009578:	20000a80 	.word	0x20000a80

0800957c <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800957c:	4b07      	ldr	r3, [pc, #28]	; (800959c <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800957e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009582:	b103      	cbz	r3, 8009586 <LoRaMacHandleScheduleUplinkEvent+0xa>
 8009584:	4770      	bx	lr
{
 8009586:	b500      	push	{lr}
 8009588:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800958a:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800958e:	f10d 0007 	add.w	r0, sp, #7
 8009592:	f001 ffab 	bl	800b4ec <LoRaMacCommandsStickyCmdsPending>
}
 8009596:	b003      	add	sp, #12
 8009598:	f85d fb04 	ldr.w	pc, [sp], #4
 800959c:	20000628 	.word	0x20000628

080095a0 <OpenContinuousRxCWindow>:
{
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80095a4:	4c16      	ldr	r4, [pc, #88]	; (8009600 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80095a6:	4d17      	ldr	r5, [pc, #92]	; (8009604 <OpenContinuousRxCWindow+0x64>)
 80095a8:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 80095ac:	9600      	str	r6, [sp, #0]
 80095ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80095b0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80095b4:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 80095b8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80095bc:	f002 fe75 	bl	800c2aa <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80095c0:	2302      	movs	r3, #2
 80095c2:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80095c6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80095ca:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80095ce:	2301      	movs	r3, #1
 80095d0:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80095d4:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 80095d8:	4631      	mov	r1, r6
 80095da:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80095de:	f002 fe78 	bl	800c2d2 <RegionRxConfig>
 80095e2:	b158      	cbz	r0, 80095fc <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80095e4:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 80095e8:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 80095ec:	4b06      	ldr	r3, [pc, #24]	; (8009608 <OpenContinuousRxCWindow+0x68>)
 80095ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f0:	2000      	movs	r0, #0
 80095f2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80095f4:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 80095f8:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 80095fc:	b002      	add	sp, #8
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	20008000 	.word	0x20008000
 8009604:	20000628 	.word	0x20000628
 8009608:	08012a8c 	.word	0x08012a8c

0800960c <RxWindowSetup>:
{
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8009610:	f008 f87a 	bl	8011708 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009614:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <RxWindowSetup+0x3c>)
 8009616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009618:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800961a:	4a0c      	ldr	r2, [pc, #48]	; (800964c <RxWindowSetup+0x40>)
 800961c:	4621      	mov	r1, r4
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <RxWindowSetup+0x44>)
 8009620:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009624:	f002 fe55 	bl	800c2d2 <RegionRxConfig>
 8009628:	b160      	cbz	r0, 8009644 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800962a:	4d0a      	ldr	r5, [pc, #40]	; (8009654 <RxWindowSetup+0x48>)
 800962c:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 8009630:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009634:	4b04      	ldr	r3, [pc, #16]	; (8009648 <RxWindowSetup+0x3c>)
 8009636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009638:	4a05      	ldr	r2, [pc, #20]	; (8009650 <RxWindowSetup+0x44>)
 800963a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800963c:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800963e:	7ce3      	ldrb	r3, [r4, #19]
 8009640:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 8009644:	bd38      	pop	{r3, r4, r5, pc}
 8009646:	bf00      	nop
 8009648:	08012a8c 	.word	0x08012a8c
 800964c:	20000a50 	.word	0x20000a50
 8009650:	20008000 	.word	0x20008000
 8009654:	20000628 	.word	0x20000628

08009658 <OnRxWindow2TimerEvent>:
{
 8009658:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800965a:	4b13      	ldr	r3, [pc, #76]	; (80096a8 <OnRxWindow2TimerEvent+0x50>)
 800965c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8009660:	b903      	cbnz	r3, 8009664 <OnRxWindow2TimerEvent+0xc>
}
 8009662:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009664:	4810      	ldr	r0, [pc, #64]	; (80096a8 <OnRxWindow2TimerEvent+0x50>)
 8009666:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800966a:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800966e:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <OnRxWindow2TimerEvent+0x54>)
 8009670:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009672:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009676:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800967a:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800967e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8009682:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009686:	2200      	movs	r2, #0
 8009688:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800968c:	2201      	movs	r2, #1
 800968e:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009692:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009696:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800969a:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800969e:	f500 7066 	add.w	r0, r0, #920	; 0x398
 80096a2:	f7ff ffb3 	bl	800960c <RxWindowSetup>
 80096a6:	e7dc      	b.n	8009662 <OnRxWindow2TimerEvent+0xa>
 80096a8:	20000628 	.word	0x20000628
 80096ac:	20008000 	.word	0x20008000

080096b0 <OnRxWindow1TimerEvent>:
{
 80096b0:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80096b2:	4811      	ldr	r0, [pc, #68]	; (80096f8 <OnRxWindow1TimerEvent+0x48>)
 80096b4:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 80096b8:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80096bc:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <OnRxWindow1TimerEvent+0x4c>)
 80096be:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 80096c2:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80096c6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80096ca:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80096ce:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80096d2:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80096d6:	2200      	movs	r2, #0
 80096d8:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80096dc:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80096e0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80096e4:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80096e8:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 80096ec:	f500 7060 	add.w	r0, r0, #896	; 0x380
 80096f0:	f7ff ff8c 	bl	800960c <RxWindowSetup>
}
 80096f4:	bd08      	pop	{r3, pc}
 80096f6:	bf00      	nop
 80096f8:	20000628 	.word	0x20000628
 80096fc:	20008000 	.word	0x20008000

08009700 <LoRaMacHandleNvm>:
{
 8009700:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 8009702:	4b30      	ldr	r3, [pc, #192]	; (80097c4 <LoRaMacHandleNvm+0xc4>)
 8009704:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009708:	b103      	cbz	r3, 800970c <LoRaMacHandleNvm+0xc>
}
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800970e:	2124      	movs	r1, #36	; 0x24
 8009710:	f005 fe1e 	bl	800f350 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009716:	4283      	cmp	r3, r0
 8009718:	d052      	beq.n	80097c0 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800971a:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800971c:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800971e:	2114      	movs	r1, #20
 8009720:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009724:	f005 fe14 	bl	800f350 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009728:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800972a:	4283      	cmp	r3, r0
 800972c:	d002      	beq.n	8009734 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800972e:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009730:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009734:	21e0      	movs	r1, #224	; 0xe0
 8009736:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800973a:	f005 fe09 	bl	800f350 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800973e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009742:	4283      	cmp	r3, r0
 8009744:	d003      	beq.n	800974e <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 8009746:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800974a:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800974e:	21bc      	movs	r1, #188	; 0xbc
 8009750:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8009754:	f005 fdfc 	bl	800f350 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009758:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800975c:	4283      	cmp	r3, r0
 800975e:	d003      	beq.n	8009768 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8009760:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009764:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009768:	2110      	movs	r1, #16
 800976a:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800976e:	f005 fdef 	bl	800f350 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009772:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 8009776:	4283      	cmp	r3, r0
 8009778:	d003      	beq.n	8009782 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800977a:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800977e:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009782:	f44f 715e 	mov.w	r1, #888	; 0x378
 8009786:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 800978a:	f005 fde1 	bl	800f350 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800978e:	f8d4 3570 	ldr.w	r3, [r4, #1392]	; 0x570
 8009792:	4283      	cmp	r3, r0
 8009794:	d003      	beq.n	800979e <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 8009796:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800979a:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800979e:	2114      	movs	r1, #20
 80097a0:	f204 5074 	addw	r0, r4, #1396	; 0x574
 80097a4:	f005 fdd4 	bl	800f350 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 80097a8:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 80097ac:	4283      	cmp	r3, r0
 80097ae:	d003      	beq.n	80097b8 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 80097b0:	f8c4 0588 	str.w	r0, [r4, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80097b4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 80097b8:	4628      	mov	r0, r5
 80097ba:	f7fe fbbd 	bl	8007f38 <CallNvmDataChangeCallback>
 80097be:	e7a4      	b.n	800970a <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80097c0:	2500      	movs	r5, #0
 80097c2:	e7ac      	b.n	800971e <LoRaMacHandleNvm+0x1e>
 80097c4:	20000628 	.word	0x20000628

080097c8 <RestoreNvmData>:
{
 80097c8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80097ca:	4b34      	ldr	r3, [pc, #208]	; (800989c <RestoreNvmData+0xd4>)
 80097cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d001      	beq.n	80097d8 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 80097d4:	2001      	movs	r0, #1
}
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80097d8:	4c31      	ldr	r4, [pc, #196]	; (80098a0 <RestoreNvmData+0xd8>)
 80097da:	2124      	movs	r1, #36	; 0x24
 80097dc:	4620      	mov	r0, r4
 80097de:	f005 fdb7 	bl	800f350 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 80097e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097e4:	4283      	cmp	r3, r0
 80097e6:	d001      	beq.n	80097ec <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80097e8:	2017      	movs	r0, #23
 80097ea:	e7f4      	b.n	80097d6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80097ec:	2114      	movs	r1, #20
 80097ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80097f2:	f005 fdad 	bl	800f350 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80097f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80097f8:	4283      	cmp	r3, r0
 80097fa:	d001      	beq.n	8009800 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80097fc:	2017      	movs	r0, #23
 80097fe:	e7ea      	b.n	80097d6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8009800:	21e0      	movs	r1, #224	; 0xe0
 8009802:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8009806:	f005 fda3 	bl	800f350 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800980a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800980e:	4283      	cmp	r3, r0
 8009810:	d001      	beq.n	8009816 <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009812:	2017      	movs	r0, #23
 8009814:	e7df      	b.n	80097d6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8009816:	21bc      	movs	r1, #188	; 0xbc
 8009818:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800981c:	f005 fd98 	bl	800f350 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 8009820:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8009824:	4283      	cmp	r3, r0
 8009826:	d001      	beq.n	800982c <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009828:	2017      	movs	r0, #23
 800982a:	e7d4      	b.n	80097d6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800982c:	2110      	movs	r1, #16
 800982e:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8009832:	f005 fd8d 	bl	800f350 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8009836:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800983a:	4283      	cmp	r3, r0
 800983c:	d001      	beq.n	8009842 <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800983e:	2017      	movs	r0, #23
 8009840:	e7c9      	b.n	80097d6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8009842:	2114      	movs	r1, #20
 8009844:	f204 5074 	addw	r0, r4, #1396	; 0x574
 8009848:	f005 fd82 	bl	800f350 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800984c:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 8009850:	4283      	cmp	r3, r0
 8009852:	d001      	beq.n	8009858 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009854:	2017      	movs	r0, #23
 8009856:	e7be      	b.n	80097d6 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009858:	4625      	mov	r5, r4
 800985a:	4c12      	ldr	r4, [pc, #72]	; (80098a4 <RestoreNvmData+0xdc>)
 800985c:	f240 528c 	movw	r2, #1420	; 0x58c
 8009860:	4629      	mov	r1, r5
 8009862:	4620      	mov	r0, r4
 8009864:	f005 fd53 	bl	800f30e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8009868:	f240 528c 	movw	r2, #1420	; 0x58c
 800986c:	2100      	movs	r1, #0
 800986e:	4628      	mov	r0, r5
 8009870:	f005 fd65 	bl	800f33e <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009874:	4b09      	ldr	r3, [pc, #36]	; (800989c <RestoreNvmData+0xd4>)
 8009876:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800987a:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800987e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009880:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009884:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 8009888:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800988c:	2201      	movs	r2, #1
 800988e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009892:	2202      	movs	r2, #2
 8009894:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 8009898:	2000      	movs	r0, #0
 800989a:	e79c      	b.n	80097d6 <RestoreNvmData+0xe>
 800989c:	20000628 	.word	0x20000628
 80098a0:	2000858c 	.word	0x2000858c
 80098a4:	20008000 	.word	0x20008000

080098a8 <OnRadioRxTimeout>:
{
 80098a8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80098aa:	4a09      	ldr	r2, [pc, #36]	; (80098d0 <OnRadioRxTimeout+0x28>)
 80098ac:	7813      	ldrb	r3, [r2, #0]
 80098ae:	f043 0302 	orr.w	r3, r3, #2
 80098b2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80098b4:	4b07      	ldr	r3, [pc, #28]	; (80098d4 <OnRadioRxTimeout+0x2c>)
 80098b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80098ba:	b113      	cbz	r3, 80098c2 <OnRadioRxTimeout+0x1a>
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	b103      	cbz	r3, 80098c2 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80098c0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80098c2:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <OnRadioRxTimeout+0x30>)
 80098c4:	2201      	movs	r2, #1
 80098c6:	2100      	movs	r1, #0
 80098c8:	2002      	movs	r0, #2
 80098ca:	f007 fbc9 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 80098ce:	bd08      	pop	{r3, pc}
 80098d0:	20000624 	.word	0x20000624
 80098d4:	20000628 	.word	0x20000628
 80098d8:	0801239c 	.word	0x0801239c

080098dc <OnRadioTxTimeout>:
{
 80098dc:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80098de:	4a09      	ldr	r2, [pc, #36]	; (8009904 <OnRadioTxTimeout+0x28>)
 80098e0:	7813      	ldrb	r3, [r2, #0]
 80098e2:	f043 0308 	orr.w	r3, r3, #8
 80098e6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80098e8:	4b07      	ldr	r3, [pc, #28]	; (8009908 <OnRadioTxTimeout+0x2c>)
 80098ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80098ee:	b113      	cbz	r3, 80098f6 <OnRadioTxTimeout+0x1a>
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	b103      	cbz	r3, 80098f6 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80098f4:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80098f6:	4b05      	ldr	r3, [pc, #20]	; (800990c <OnRadioTxTimeout+0x30>)
 80098f8:	2201      	movs	r2, #1
 80098fa:	2100      	movs	r1, #0
 80098fc:	2002      	movs	r0, #2
 80098fe:	f007 fbaf 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 8009902:	bd08      	pop	{r3, pc}
 8009904:	20000624 	.word	0x20000624
 8009908:	20000628 	.word	0x20000628
 800990c:	080123ac 	.word	0x080123ac

08009910 <OnRadioRxDone>:
{
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	4680      	mov	r8, r0
 8009916:	460f      	mov	r7, r1
 8009918:	4616      	mov	r6, r2
 800991a:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800991c:	f007 feb4 	bl	8011688 <UTIL_TIMER_GetCurrentTime>
 8009920:	4c0f      	ldr	r4, [pc, #60]	; (8009960 <OnRadioRxDone+0x50>)
 8009922:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009924:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8009928:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800992a:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800992c:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800992e:	4b0d      	ldr	r3, [pc, #52]	; (8009964 <OnRadioRxDone+0x54>)
 8009930:	781a      	ldrb	r2, [r3, #0]
 8009932:	f042 0210 	orr.w	r2, r2, #16
 8009936:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8009938:	b2d2      	uxtb	r2, r2
 800993a:	f042 0201 	orr.w	r2, r2, #1
 800993e:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009940:	4b09      	ldr	r3, [pc, #36]	; (8009968 <OnRadioRxDone+0x58>)
 8009942:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009946:	b113      	cbz	r3, 800994e <OnRadioRxDone+0x3e>
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	b103      	cbz	r3, 800994e <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800994c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800994e:	4b07      	ldr	r3, [pc, #28]	; (800996c <OnRadioRxDone+0x5c>)
 8009950:	2201      	movs	r2, #1
 8009952:	2100      	movs	r1, #0
 8009954:	2002      	movs	r0, #2
 8009956:	f007 fb83 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 800995a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800995e:	bf00      	nop
 8009960:	20000bd8 	.word	0x20000bd8
 8009964:	20000624 	.word	0x20000624
 8009968:	20000628 	.word	0x20000628
 800996c:	080123bc 	.word	0x080123bc

08009970 <OnRadioTxDone>:
{
 8009970:	b530      	push	{r4, r5, lr}
 8009972:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009974:	f007 fe88 	bl	8011688 <UTIL_TIMER_GetCurrentTime>
 8009978:	4b0f      	ldr	r3, [pc, #60]	; (80099b8 <OnRadioTxDone+0x48>)
 800997a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800997c:	4d0f      	ldr	r5, [pc, #60]	; (80099bc <OnRadioTxDone+0x4c>)
 800997e:	466c      	mov	r4, sp
 8009980:	4620      	mov	r0, r4
 8009982:	f007 fdd3 	bl	801152c <SysTimeGet>
 8009986:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800998a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800998e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8009992:	4a0b      	ldr	r2, [pc, #44]	; (80099c0 <OnRadioTxDone+0x50>)
 8009994:	7813      	ldrb	r3, [r2, #0]
 8009996:	f043 0320 	orr.w	r3, r3, #32
 800999a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800999c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 80099a0:	b113      	cbz	r3, 80099a8 <OnRadioTxDone+0x38>
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	b103      	cbz	r3, 80099a8 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80099a6:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80099a8:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <OnRadioTxDone+0x54>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	2100      	movs	r1, #0
 80099ae:	2002      	movs	r0, #2
 80099b0:	f007 fb56 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 80099b4:	b003      	add	sp, #12
 80099b6:	bd30      	pop	{r4, r5, pc}
 80099b8:	20000be8 	.word	0x20000be8
 80099bc:	20000628 	.word	0x20000628
 80099c0:	20000624 	.word	0x20000624
 80099c4:	080123cc 	.word	0x080123cc

080099c8 <ResetMacParameters>:
{
 80099c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ca:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80099cc:	4c53      	ldr	r4, [pc, #332]	; (8009b1c <ResetMacParameters+0x154>)
 80099ce:	2600      	movs	r6, #0
 80099d0:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 80099d4:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 80099d6:	4d52      	ldr	r5, [pc, #328]	; (8009b20 <ResetMacParameters+0x158>)
 80099d8:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 80099dc:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 80099e0:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 80099e4:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80099e8:	2701      	movs	r7, #1
 80099ea:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80099ee:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 80099f2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80099f6:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 80099fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80099fe:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8009a02:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009a06:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8009a0a:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 8009a0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a12:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009a16:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8009a1a:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8009a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a22:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009a26:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 8009a2a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8009a2e:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8009a32:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009a36:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8009a3a:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009a3c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8009a40:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 8009a42:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8009a46:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8009a4a:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8009a4e:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009a52:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009a56:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8009a5a:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009a5c:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 8009a60:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 8009a62:	4b30      	ldr	r3, [pc, #192]	; (8009b24 <ResetMacParameters+0x15c>)
 8009a64:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009a66:	a901      	add	r1, sp, #4
 8009a68:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009a6c:	f002 fbe2 	bl	800c234 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009a70:	f885 641f 	strb.w	r6, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009a74:	f885 63d0 	strb.w	r6, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a7a:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a7e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8009a82:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009a86:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8009a8a:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009a8e:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009a92:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009a96:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009a9a:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009a9e:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 8009aa2:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 8009aa6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009aac:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009ab0:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009ab4:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 8009abe:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8009ac0:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 8009ac2:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009ac6:	b11b      	cbz	r3, 8009ad0 <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009ac8:	685a      	ldr	r2, [r3, #4]
 8009aca:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8009ad0:	4b13      	ldr	r3, [pc, #76]	; (8009b20 <ResetMacParameters+0x158>)
 8009ad2:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 8009ad6:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009ad8:	f203 4224 	addw	r2, r3, #1060	; 0x424
 8009adc:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009ade:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 8009ae2:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009ae4:	f203 4395 	addw	r3, r3, #1173	; 0x495
 8009ae8:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009aea:	4a0c      	ldr	r2, [pc, #48]	; (8009b1c <ResetMacParameters+0x154>)
 8009aec:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 8009af0:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8009af2:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8009af6:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009af8:	f102 0344 	add.w	r3, r2, #68	; 0x44
 8009afc:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8009afe:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 8009b02:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8009b04:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 8009b08:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8009b0a:	f202 5274 	addw	r2, r2, #1396	; 0x574
 8009b0e:	a90e      	add	r1, sp, #56	; 0x38
 8009b10:	a805      	add	r0, sp, #20
 8009b12:	f001 fb7d 	bl	800b210 <LoRaMacClassBInit>
}
 8009b16:	b011      	add	sp, #68	; 0x44
 8009b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20008000 	.word	0x20008000
 8009b20:	20000628 	.word	0x20000628
 8009b24:	20000b48 	.word	0x20000b48

08009b28 <SwitchClass>:
{
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8009b2c:	4b3e      	ldr	r3, [pc, #248]	; (8009c28 <SwitchClass+0x100>)
 8009b2e:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 8009b32:	2d01      	cmp	r5, #1
 8009b34:	d065      	beq.n	8009c02 <SwitchClass+0xda>
 8009b36:	2d02      	cmp	r5, #2
 8009b38:	d06b      	beq.n	8009c12 <SwitchClass+0xea>
 8009b3a:	b10d      	cbz	r5, 8009b40 <SwitchClass+0x18>
 8009b3c:	2003      	movs	r0, #3
}
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 8009b40:	b930      	cbnz	r0, 8009b50 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009b42:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8009b46:	3364      	adds	r3, #100	; 0x64
 8009b48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b4c:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 8009b50:	2c01      	cmp	r4, #1
 8009b52:	d022      	beq.n	8009b9a <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009b54:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8009b56:	2c02      	cmp	r4, #2
 8009b58:	d1f1      	bne.n	8009b3e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009b5a:	4b33      	ldr	r3, [pc, #204]	; (8009c28 <SwitchClass+0x100>)
 8009b5c:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009b60:	4e32      	ldr	r6, [pc, #200]	; (8009c2c <SwitchClass+0x104>)
 8009b62:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 8009b66:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 8009b6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b70:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009b74:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009b78:	2302      	movs	r3, #2
 8009b7a:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	dd13      	ble.n	8009bac <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 8009b84:	4b29      	ldr	r3, [pc, #164]	; (8009c2c <SwitchClass+0x104>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 8009b8c:	4b28      	ldr	r3, [pc, #160]	; (8009c30 <SwitchClass+0x108>)
 8009b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b90:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8009b92:	f7ff fd05 	bl	80095a0 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009b96:	4628      	mov	r0, r5
 8009b98:	e7d1      	b.n	8009b3e <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f001 fb4e 	bl	800b23c <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d1d8      	bne.n	8009b56 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8009ba4:	4b20      	ldr	r3, [pc, #128]	; (8009c28 <SwitchClass+0x100>)
 8009ba6:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8009baa:	e7d4      	b.n	8009b56 <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009bac:	4618      	mov	r0, r3
 8009bae:	4a1e      	ldr	r2, [pc, #120]	; (8009c28 <SwitchClass+0x100>)
 8009bb0:	212c      	movs	r1, #44	; 0x2c
 8009bb2:	fb01 2203 	mla	r2, r1, r3, r2
 8009bb6:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 8009bba:	b912      	cbnz	r2, 8009bc2 <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	b25b      	sxtb	r3, r3
 8009bc0:	e7de      	b.n	8009b80 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009bc2:	4a19      	ldr	r2, [pc, #100]	; (8009c28 <SwitchClass+0x100>)
 8009bc4:	fb01 2000 	mla	r0, r1, r0, r2
 8009bc8:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8009bcc:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009bce:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 8009bd2:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009bd6:	4b15      	ldr	r3, [pc, #84]	; (8009c2c <SwitchClass+0x104>)
 8009bd8:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 8009bdc:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009be0:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009be4:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 8009be8:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009bec:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8009bf0:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009bf4:	2203      	movs	r2, #3
 8009bf6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8009c00:	e7c0      	b.n	8009b84 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009c02:	f001 fb1b 	bl	800b23c <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d199      	bne.n	8009b3e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009c0a:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <SwitchClass+0x100>)
 8009c0c:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8009c10:	e795      	b.n	8009b3e <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8009c12:	b938      	cbnz	r0, 8009c24 <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009c14:	4b04      	ldr	r3, [pc, #16]	; (8009c28 <SwitchClass+0x100>)
 8009c16:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 8009c1a:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <SwitchClass+0x108>)
 8009c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1e:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009c20:	4620      	mov	r0, r4
 8009c22:	e78c      	b.n	8009b3e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c24:	2003      	movs	r0, #3
 8009c26:	e78a      	b.n	8009b3e <SwitchClass+0x16>
 8009c28:	20008000 	.word	0x20008000
 8009c2c:	20000628 	.word	0x20000628
 8009c30:	08012a8c 	.word	0x08012a8c

08009c34 <SendReJoinReq>:
{
 8009c34:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 8009c36:	28ff      	cmp	r0, #255	; 0xff
 8009c38:	d003      	beq.n	8009c42 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8009c3a:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8009c3c:	f7ff fb62 	bl	8009304 <ScheduleTx>
}
 8009c40:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 8009c42:	2000      	movs	r0, #0
 8009c44:	f7ff ff70 	bl	8009b28 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009c48:	4d0e      	ldr	r5, [pc, #56]	; (8009c84 <SendReJoinReq+0x50>)
 8009c4a:	2400      	movs	r4, #0
 8009c4c:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009c50:	1cab      	adds	r3, r5, #2
 8009c52:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009c56:	23ff      	movs	r3, #255	; 0xff
 8009c58:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8009c5c:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009c60:	f005 fb24 	bl	800f2ac <SecureElementGetJoinEui>
 8009c64:	4601      	mov	r1, r0
 8009c66:	2208      	movs	r2, #8
 8009c68:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8009c6c:	f005 fb4f 	bl	800f30e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8009c70:	f005 fb06 	bl	800f280 <SecureElementGetDevEui>
 8009c74:	4601      	mov	r1, r0
 8009c76:	2208      	movs	r2, #8
 8009c78:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8009c7c:	f005 fb47 	bl	800f30e <memcpy1>
            allowDelayedTx = false;
 8009c80:	4620      	mov	r0, r4
            break;
 8009c82:	e7db      	b.n	8009c3c <SendReJoinReq+0x8>
 8009c84:	20000628 	.word	0x20000628

08009c88 <PrepareFrame>:
{
 8009c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	4605      	mov	r5, r0
 8009c90:	460e      	mov	r6, r1
 8009c92:	4617      	mov	r7, r2
 8009c94:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8009c98:	4959      	ldr	r1, [pc, #356]	; (8009e00 <PrepareFrame+0x178>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8009c9e:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 8009ca2:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8009ca4:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8009ca6:	4698      	mov	r8, r3
 8009ca8:	b1cb      	cbz	r3, 8009cde <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009caa:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8009e00 <PrepareFrame+0x178>
 8009cae:	4622      	mov	r2, r4
 8009cb0:	4641      	mov	r1, r8
 8009cb2:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8009cb6:	f005 fb2a 	bl	800f30e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009cba:	b2e0      	uxtb	r0, r4
 8009cbc:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009cc0:	782b      	ldrb	r3, [r5, #0]
 8009cc2:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8009cc6:	782b      	ldrb	r3, [r5, #0]
 8009cc8:	095b      	lsrs	r3, r3, #5
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d009      	beq.n	8009ce2 <PrepareFrame+0x5a>
 8009cce:	2b07      	cmp	r3, #7
 8009cd0:	d079      	beq.n	8009dc6 <PrepareFrame+0x13e>
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d009      	beq.n	8009cea <PrepareFrame+0x62>
 8009cd6:	2002      	movs	r0, #2
}
 8009cd8:	b003      	add	sp, #12
 8009cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8009cde:	4614      	mov	r4, r2
 8009ce0:	e7e3      	b.n	8009caa <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8009ce2:	4b47      	ldr	r3, [pc, #284]	; (8009e00 <PrepareFrame+0x178>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009cea:	4b45      	ldr	r3, [pc, #276]	; (8009e00 <PrepareFrame+0x178>)
 8009cec:	2204      	movs	r2, #4
 8009cee:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009cf2:	1c9a      	adds	r2, r3, #2
 8009cf4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009cf8:	22ff      	movs	r2, #255	; 0xff
 8009cfa:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8009cfe:	782a      	ldrb	r2, [r5, #0]
 8009d00:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009d04:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009d08:	4a3e      	ldr	r2, [pc, #248]	; (8009e04 <PrepareFrame+0x17c>)
 8009d0a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8009d0e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009d12:	7832      	ldrb	r2, [r6, #0]
 8009d14:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009d18:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8009d1c:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8009d20:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009d24:	a801      	add	r0, sp, #4
 8009d26:	f001 ff09 	bl	800bb3c <LoRaMacCryptoGetFCntUp>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d15c      	bne.n	8009de8 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8009d2e:	9a01      	ldr	r2, [sp, #4]
 8009d30:	4b33      	ldr	r3, [pc, #204]	; (8009e00 <PrepareFrame+0x178>)
 8009d32:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 8009d36:	2100      	movs	r1, #0
 8009d38:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 8009d3c:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009d40:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009d44:	4668      	mov	r0, sp
 8009d46:	f001 fb93 	bl	800b470 <LoRaMacCommandsGetSizeSerializedCmds>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d14e      	bne.n	8009dec <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 8009d4e:	9b00      	ldr	r3, [sp, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d0c1      	beq.n	8009cd8 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8009d54:	4b2b      	ldr	r3, [pc, #172]	; (8009e04 <PrepareFrame+0x17c>)
 8009d56:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009d5a:	f7fe f905 	bl	8007f68 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009d5e:	4b28      	ldr	r3, [pc, #160]	; (8009e00 <PrepareFrame+0x178>)
 8009d60:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009d64:	b113      	cbz	r3, 8009d6c <PrepareFrame+0xe4>
 8009d66:	9a00      	ldr	r2, [sp, #0]
 8009d68:	2a0f      	cmp	r2, #15
 8009d6a:	d915      	bls.n	8009d98 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009d6c:	b113      	cbz	r3, 8009d74 <PrepareFrame+0xec>
 8009d6e:	9b00      	ldr	r3, [sp, #0]
 8009d70:	2b0f      	cmp	r3, #15
 8009d72:	d821      	bhi.n	8009db8 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009d74:	4a24      	ldr	r2, [pc, #144]	; (8009e08 <PrepareFrame+0x180>)
 8009d76:	4669      	mov	r1, sp
 8009d78:	f001 fb86 	bl	800b488 <LoRaMacCommandsSerializeCmds>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d13b      	bne.n	8009df8 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009d80:	4b1f      	ldr	r3, [pc, #124]	; (8009e00 <PrepareFrame+0x178>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8009d88:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 8009d8c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009d90:	9a00      	ldr	r2, [sp, #0]
 8009d92:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8009d96:	e79f      	b.n	8009cd8 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009d98:	4a1c      	ldr	r2, [pc, #112]	; (8009e0c <PrepareFrame+0x184>)
 8009d9a:	4669      	mov	r1, sp
 8009d9c:	200f      	movs	r0, #15
 8009d9e:	f001 fb73 	bl	800b488 <LoRaMacCommandsSerializeCmds>
 8009da2:	bb28      	cbnz	r0, 8009df0 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009da4:	7833      	ldrb	r3, [r6, #0]
 8009da6:	9a00      	ldr	r2, [sp, #0]
 8009da8:	f362 0303 	bfi	r3, r2, #0, #4
 8009dac:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	4b13      	ldr	r3, [pc, #76]	; (8009e00 <PrepareFrame+0x178>)
 8009db2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8009db6:	e78f      	b.n	8009cd8 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009db8:	4a13      	ldr	r2, [pc, #76]	; (8009e08 <PrepareFrame+0x180>)
 8009dba:	4669      	mov	r1, sp
 8009dbc:	f001 fb64 	bl	800b488 <LoRaMacCommandsSerializeCmds>
 8009dc0:	b1c0      	cbz	r0, 8009df4 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009dc2:	2013      	movs	r0, #19
 8009dc4:	e788      	b.n	8009cd8 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8009dc6:	f1b8 0f00 	cmp.w	r8, #0
 8009dca:	d017      	beq.n	8009dfc <PrepareFrame+0x174>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d083      	beq.n	8009cd8 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8009dd0:	4c0b      	ldr	r4, [pc, #44]	; (8009e00 <PrepareFrame+0x178>)
 8009dd2:	b282      	uxth	r2, r0
 8009dd4:	4641      	mov	r1, r8
 8009dd6:	1ce0      	adds	r0, r4, #3
 8009dd8:	f005 fa99 	bl	800f30e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8009ddc:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8009de0:	3301      	adds	r3, #1
 8009de2:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8009de4:	2000      	movs	r0, #0
 8009de6:	e777      	b.n	8009cd8 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009de8:	2012      	movs	r0, #18
 8009dea:	e775      	b.n	8009cd8 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009dec:	2013      	movs	r0, #19
 8009dee:	e773      	b.n	8009cd8 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009df0:	2013      	movs	r0, #19
 8009df2:	e771      	b.n	8009cd8 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8009df4:	200a      	movs	r0, #10
 8009df6:	e76f      	b.n	8009cd8 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009df8:	2013      	movs	r0, #19
 8009dfa:	e76d      	b.n	8009cd8 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	e76b      	b.n	8009cd8 <PrepareFrame+0x50>
 8009e00:	20000628 	.word	0x20000628
 8009e04:	20008000 	.word	0x20008000
 8009e08:	20000ac8 	.word	0x20000ac8
 8009e0c:	20000740 	.word	0x20000740

08009e10 <Send>:
{
 8009e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e14:	b08a      	sub	sp, #40	; 0x28
 8009e16:	4617      	mov	r7, r2
 8009e18:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009e1a:	4c45      	ldr	r4, [pc, #276]	; (8009f30 <Send+0x120>)
 8009e1c:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8009e20:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009e24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009e26:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009e28:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d07c      	beq.n	8009f2a <Send+0x11a>
 8009e30:	4605      	mov	r5, r0
 8009e32:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8009e34:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 8009e38:	b90b      	cbnz	r3, 8009e3e <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009e44:	483a      	ldr	r0, [pc, #232]	; (8009f30 <Send+0x120>)
 8009e46:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 8009e4a:	f361 13c7 	bfi	r3, r1, #7, #1
 8009e4e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009e52:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d054      	beq.n	8009f04 <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8009e5a:	4b35      	ldr	r3, [pc, #212]	; (8009f30 <Send+0x120>)
 8009e5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e60:	b12b      	cbz	r3, 8009e6e <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 8009e62:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009e66:	f043 0320 	orr.w	r3, r3, #32
 8009e6a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009e74:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009e78:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009e7a:	4b2e      	ldr	r3, [pc, #184]	; (8009f34 <Send+0x124>)
 8009e7c:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8009e80:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8009e84:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8009e88:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009e8c:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009e90:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009e94:	4926      	ldr	r1, [pc, #152]	; (8009f30 <Send+0x120>)
 8009e96:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 8009e9a:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e9e:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8009ea2:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009ea6:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8009eaa:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009eae:	ab08      	add	r3, sp, #32
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	f101 0360 	add.w	r3, r1, #96	; 0x60
 8009eb6:	f101 0238 	add.w	r2, r1, #56	; 0x38
 8009eba:	3139      	adds	r1, #57	; 0x39
 8009ebc:	a803      	add	r0, sp, #12
 8009ebe:	f001 f92d 	bl	800b11c <LoRaMacAdrCalcNext>
 8009ec2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009ec6:	f360 1386 	bfi	r3, r0, #6, #1
 8009eca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8009ece:	f8cd 8000 	str.w	r8, [sp]
 8009ed2:	463b      	mov	r3, r7
 8009ed4:	4632      	mov	r2, r6
 8009ed6:	a909      	add	r1, sp, #36	; 0x24
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7ff fed5 	bl	8009c88 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009ede:	4604      	mov	r4, r0
 8009ee0:	b108      	cbz	r0, 8009ee6 <Send+0xd6>
 8009ee2:	280a      	cmp	r0, #10
 8009ee4:	d104      	bne.n	8009ef0 <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009ee6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8009eea:	f7ff fa0b 	bl	8009304 <ScheduleTx>
 8009eee:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8009ef0:	b17c      	cbz	r4, 8009f12 <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009ef2:	4b0f      	ldr	r3, [pc, #60]	; (8009f30 <Send+0x120>)
 8009ef4:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8009ef8:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 8009efc:	4620      	mov	r0, r4
 8009efe:	b00a      	add	sp, #40	; 0x28
 8009f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 8009f04:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009f08:	f043 0310 	orr.w	r3, r3, #16
 8009f0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009f10:	e7a3      	b.n	8009e5a <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009f12:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <Send+0x120>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009f1a:	9a08      	ldr	r2, [sp, #32]
 8009f1c:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009f1e:	f001 fa7b 	bl	800b418 <LoRaMacCommandsRemoveNoneStickyCmds>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d0ea      	beq.n	8009efc <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f26:	2413      	movs	r4, #19
 8009f28:	e7e8      	b.n	8009efc <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009f2a:	2407      	movs	r4, #7
 8009f2c:	e7e6      	b.n	8009efc <Send+0xec>
 8009f2e:	bf00      	nop
 8009f30:	20008000 	.word	0x20008000
 8009f34:	20000628 	.word	0x20000628

08009f38 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8009f38:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <LoRaMacIsBusy+0x2c>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	f013 0f01 	tst.w	r3, #1
 8009f40:	d10a      	bne.n	8009f58 <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009f42:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <LoRaMacIsBusy+0x30>)
 8009f44:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009f48:	b943      	cbnz	r3, 8009f5c <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009f4a:	4b07      	ldr	r3, [pc, #28]	; (8009f68 <LoRaMacIsBusy+0x30>)
 8009f4c:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d005      	beq.n	8009f60 <LoRaMacIsBusy+0x28>
    return true;
 8009f54:	2001      	movs	r0, #1
 8009f56:	4770      	bx	lr
        return true;
 8009f58:	2001      	movs	r0, #1
 8009f5a:	4770      	bx	lr
    return true;
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	4770      	bx	lr
        return false;
 8009f60:	2000      	movs	r0, #0
}
 8009f62:	4770      	bx	lr
 8009f64:	20000624 	.word	0x20000624
 8009f68:	20000628 	.word	0x20000628

08009f6c <LoRaMacProcess>:
{
 8009f6c:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 8009f6e:	f7ff f81d 	bl	8008fac <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8009f72:	f001 f974 	bl	800b25e <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009f76:	4b20      	ldr	r3, [pc, #128]	; (8009ff8 <LoRaMacProcess+0x8c>)
 8009f78:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009f7c:	f013 0f20 	tst.w	r3, #32
 8009f80:	d10d      	bne.n	8009f9e <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 8009f82:	f7fd fed3 	bl	8007d2c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009f86:	4b1c      	ldr	r3, [pc, #112]	; (8009ff8 <LoRaMacProcess+0x8c>)
 8009f88:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d024      	beq.n	8009fda <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8009f90:	4b19      	ldr	r3, [pc, #100]	; (8009ff8 <LoRaMacProcess+0x8c>)
 8009f92:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009f96:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f9a:	d121      	bne.n	8009fe0 <LoRaMacProcess+0x74>
}
 8009f9c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	f7fd febe 	bl	8007d20 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8009fa4:	f7fd fefa 	bl	8007d9c <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8009fa8:	f7fd ffd2 	bl	8007f50 <IsRequestPending>
 8009fac:	b110      	cbz	r0, 8009fb4 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8009fae:	f7fe f8b9 	bl	8008124 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 8009fb2:	b918      	cbnz	r0, 8009fbc <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 8009fb4:	f7ff f83c 	bl	8009030 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8009fb8:	f7ff fa5a 	bl	8009470 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 8009fbc:	f7ff fa94 	bl	80094e8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8009fc0:	f7ff fadc 	bl	800957c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	f7fd feab 	bl	8007d20 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8009fca:	4a0b      	ldr	r2, [pc, #44]	; (8009ff8 <LoRaMacProcess+0x8c>)
 8009fcc:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8009fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fd4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8009fd8:	e7d3      	b.n	8009f82 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 8009fda:	f7ff fae1 	bl	80095a0 <OpenContinuousRxCWindow>
 8009fde:	e7d7      	b.n	8009f90 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8009fe0:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <LoRaMacProcess+0x8c>)
 8009fe2:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009fe6:	f36f 1286 	bfc	r2, #6, #1
 8009fea:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 8009fee:	4803      	ldr	r0, [pc, #12]	; (8009ffc <LoRaMacProcess+0x90>)
 8009ff0:	f7ff fb86 	bl	8009700 <LoRaMacHandleNvm>
}
 8009ff4:	e7d2      	b.n	8009f9c <LoRaMacProcess+0x30>
 8009ff6:	bf00      	nop
 8009ff8:	20000628 	.word	0x20000628
 8009ffc:	20008000 	.word	0x20008000

0800a000 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800a006:	2800      	cmp	r0, #0
 800a008:	f000 81a4 	beq.w	800a354 <LoRaMacInitialization+0x354>
 800a00c:	460f      	mov	r7, r1
 800a00e:	4691      	mov	r9, r2
 800a010:	4680      	mov	r8, r0
 800a012:	2900      	cmp	r1, #0
 800a014:	f000 81a0 	beq.w	800a358 <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a018:	6803      	ldr	r3, [r0, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 819e 	beq.w	800a35c <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a020:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 819c 	beq.w	800a360 <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a028:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f000 819a 	beq.w	800a364 <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 800a030:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 8198 	beq.w	800a368 <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a038:	4610      	mov	r0, r2
 800a03a:	f002 f8cb 	bl	800c1d4 <RegionIsActive>
 800a03e:	2800      	cmp	r0, #0
 800a040:	f000 8194 	beq.w	800a36c <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a044:	4640      	mov	r0, r8
 800a046:	f001 fac9 	bl	800b5dc <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a04a:	4ccc      	ldr	r4, [pc, #816]	; (800a37c <LoRaMacInitialization+0x37c>)
 800a04c:	f240 528c 	movw	r2, #1420	; 0x58c
 800a050:	2100      	movs	r1, #0
 800a052:	4620      	mov	r0, r4
 800a054:	f005 f973 	bl	800f33e <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a058:	4dc9      	ldr	r5, [pc, #804]	; (800a380 <LoRaMacInitialization+0x380>)
 800a05a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800a05e:	2100      	movs	r1, #0
 800a060:	4628      	mov	r0, r5
 800a062:	f005 f96c 	bl	800f33e <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800a066:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a06a:	2600      	movs	r6, #0
 800a06c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800a070:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a074:	4bc3      	ldr	r3, [pc, #780]	; (800a384 <LoRaMacInitialization+0x384>)
 800a076:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a07a:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a07e:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800a082:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a084:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800a088:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800a08a:	4bbf      	ldr	r3, [pc, #764]	; (800a388 <LoRaMacInitialization+0x388>)
 800a08c:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a08e:	a905      	add	r1, sp, #20
 800a090:	4648      	mov	r0, r9
 800a092:	f002 f8cf 	bl	800c234 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a096:	230f      	movs	r3, #15
 800a098:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a09c:	a90a      	add	r1, sp, #40	; 0x28
 800a09e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a0a2:	f002 f8a1 	bl	800c1e8 <RegionGetPhyParam>
 800a0a6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a0a8:	1b80      	subs	r0, r0, r6
 800a0aa:	bf18      	it	ne
 800a0ac:	2001      	movne	r0, #1
 800a0ae:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a0b2:	f04f 0a0a 	mov.w	sl, #10
 800a0b6:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a0ba:	a90a      	add	r1, sp, #40	; 0x28
 800a0bc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a0c0:	f002 f892 	bl	800c1e8 <RegionGetPhyParam>
 800a0c4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a0c6:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a0ca:	f04f 0906 	mov.w	r9, #6
 800a0ce:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a0d2:	a90a      	add	r1, sp, #40	; 0x28
 800a0d4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a0d8:	f002 f886 	bl	800c1e8 <RegionGetPhyParam>
 800a0dc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a0de:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a0e2:	2310      	movs	r3, #16
 800a0e4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a0e8:	a90a      	add	r1, sp, #40	; 0x28
 800a0ea:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a0ee:	f002 f87b 	bl	800c1e8 <RegionGetPhyParam>
 800a0f2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a0f4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a0f8:	2311      	movs	r3, #17
 800a0fa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a0fe:	a90a      	add	r1, sp, #40	; 0x28
 800a100:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a104:	f002 f870 	bl	800c1e8 <RegionGetPhyParam>
 800a108:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a10a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a10e:	2312      	movs	r3, #18
 800a110:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a114:	a90a      	add	r1, sp, #40	; 0x28
 800a116:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a11a:	f002 f865 	bl	800c1e8 <RegionGetPhyParam>
 800a11e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a120:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a124:	2313      	movs	r3, #19
 800a126:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a12a:	a90a      	add	r1, sp, #40	; 0x28
 800a12c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a130:	f002 f85a 	bl	800c1e8 <RegionGetPhyParam>
 800a134:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a136:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a13a:	2314      	movs	r3, #20
 800a13c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a140:	a90a      	add	r1, sp, #40	; 0x28
 800a142:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a146:	f002 f84f 	bl	800c1e8 <RegionGetPhyParam>
 800a14a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a14c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a150:	2316      	movs	r3, #22
 800a152:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a156:	a90a      	add	r1, sp, #40	; 0x28
 800a158:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a15c:	f002 f844 	bl	800c1e8 <RegionGetPhyParam>
 800a160:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a162:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a166:	2317      	movs	r3, #23
 800a168:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a16c:	a90a      	add	r1, sp, #40	; 0x28
 800a16e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a172:	f002 f839 	bl	800c1e8 <RegionGetPhyParam>
 800a176:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a178:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a17c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a180:	2318      	movs	r3, #24
 800a182:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a186:	a90a      	add	r1, sp, #40	; 0x28
 800a188:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a18c:	f002 f82c 	bl	800c1e8 <RegionGetPhyParam>
 800a190:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a192:	b2c0      	uxtb	r0, r0
 800a194:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a198:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a19c:	231d      	movs	r3, #29
 800a19e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1a2:	a90a      	add	r1, sp, #40	; 0x28
 800a1a4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1a8:	f002 f81e 	bl	800c1e8 <RegionGetPhyParam>
 800a1ac:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a1ae:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a1b2:	231e      	movs	r3, #30
 800a1b4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1b8:	a90a      	add	r1, sp, #40	; 0x28
 800a1ba:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1be:	f002 f813 	bl	800c1e8 <RegionGetPhyParam>
 800a1c2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a1c4:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a1c8:	231f      	movs	r3, #31
 800a1ca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1ce:	a90a      	add	r1, sp, #40	; 0x28
 800a1d0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1d4:	f002 f808 	bl	800c1e8 <RegionGetPhyParam>
 800a1d8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1dc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a1e0:	2320      	movs	r3, #32
 800a1e2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1e6:	a90a      	add	r1, sp, #40	; 0x28
 800a1e8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1ec:	f001 fffc 	bl	800c1e8 <RegionGetPhyParam>
 800a1f0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a1f8:	230b      	movs	r3, #11
 800a1fa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1fe:	a90a      	add	r1, sp, #40	; 0x28
 800a200:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a204:	f001 fff0 	bl	800c1e8 <RegionGetPhyParam>
 800a208:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800a20a:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a20e:	230c      	movs	r3, #12
 800a210:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a214:	a90a      	add	r1, sp, #40	; 0x28
 800a216:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a21a:	f001 ffe5 	bl	800c1e8 <RegionGetPhyParam>
 800a21e:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800a220:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a224:	f04f 0b01 	mov.w	fp, #1
 800a228:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a22c:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a230:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a234:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a238:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a23c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a240:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a242:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a246:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a248:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a24c:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a24e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a252:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a254:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a258:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a25a:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800a25e:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800a262:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 800a266:	f7ff fbaf 	bl	80099c8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a26a:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800a26e:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800a272:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 800a276:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a27a:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a27c:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a27e:	9600      	str	r6, [sp, #0]
 800a280:	4b42      	ldr	r3, [pc, #264]	; (800a38c <LoRaMacInitialization+0x38c>)
 800a282:	4632      	mov	r2, r6
 800a284:	f04f 31ff 	mov.w	r1, #4294967295
 800a288:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800a28c:	f007 f9de 	bl	801164c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a290:	9600      	str	r6, [sp, #0]
 800a292:	4b3f      	ldr	r3, [pc, #252]	; (800a390 <LoRaMacInitialization+0x390>)
 800a294:	4632      	mov	r2, r6
 800a296:	f04f 31ff 	mov.w	r1, #4294967295
 800a29a:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800a29e:	f007 f9d5 	bl	801164c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a2a2:	9600      	str	r6, [sp, #0]
 800a2a4:	4b3b      	ldr	r3, [pc, #236]	; (800a394 <LoRaMacInitialization+0x394>)
 800a2a6:	4632      	mov	r2, r6
 800a2a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a2ac:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800a2b0:	f007 f9cc 	bl	801164c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800a2b4:	9600      	str	r6, [sp, #0]
 800a2b6:	4b38      	ldr	r3, [pc, #224]	; (800a398 <LoRaMacInitialization+0x398>)
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	f04f 31ff 	mov.w	r1, #4294967295
 800a2be:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800a2c2:	f007 f9c3 	bl	801164c <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a2c6:	f10d 0808 	add.w	r8, sp, #8
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	f007 f950 	bl	8011570 <SysTimeGetMcuTime>
 800a2d0:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800a2d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a2d8:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800a2dc:	4b2f      	ldr	r3, [pc, #188]	; (800a39c <LoRaMacInitialization+0x39c>)
 800a2de:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a2e0:	4b2f      	ldr	r3, [pc, #188]	; (800a3a0 <LoRaMacInitialization+0x3a0>)
 800a2e2:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a2e6:	4b2f      	ldr	r3, [pc, #188]	; (800a3a4 <LoRaMacInitialization+0x3a4>)
 800a2e8:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a2ec:	4b2e      	ldr	r3, [pc, #184]	; (800a3a8 <LoRaMacInitialization+0x3a8>)
 800a2ee:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a2f2:	4b2e      	ldr	r3, [pc, #184]	; (800a3ac <LoRaMacInitialization+0x3ac>)
 800a2f4:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a2f8:	4b2d      	ldr	r3, [pc, #180]	; (800a3b0 <LoRaMacInitialization+0x3b0>)
 800a2fa:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a2fe:	4b2d      	ldr	r3, [pc, #180]	; (800a3b4 <LoRaMacInitialization+0x3b4>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800a306:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800a30e:	f004 fd59 	bl	800edc4 <SecureElementInit>
 800a312:	bb80      	cbnz	r0, 800a376 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a314:	4620      	mov	r0, r4
 800a316:	f001 fbf1 	bl	800bafc <LoRaMacCryptoInit>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d14c      	bne.n	800a3b8 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a31e:	f001 f823 	bl	800b368 <LoRaMacCommandsInit>
 800a322:	2800      	cmp	r0, #0
 800a324:	d14a      	bne.n	800a3bc <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a326:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800a32a:	f001 fc39 	bl	800bba0 <LoRaMacCryptoSetMulticastReference>
 800a32e:	4604      	mov	r4, r0
 800a330:	2800      	cmp	r0, #0
 800a332:	d145      	bne.n	800a3c0 <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a334:	4d1f      	ldr	r5, [pc, #124]	; (800a3b4 <LoRaMacInitialization+0x3b4>)
 800a336:	696b      	ldr	r3, [r5, #20]
 800a338:	4798      	blx	r3
 800a33a:	f004 ffd5 	bl	800f2e8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a33e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a340:	4a0e      	ldr	r2, [pc, #56]	; (800a37c <LoRaMacInitialization+0x37c>)
 800a342:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800a346:	4798      	blx	r3
    Radio.Sleep( );
 800a348:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a34a:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a34c:	4658      	mov	r0, fp
 800a34e:	f7fd fce7 	bl	8007d20 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800a352:	e00c      	b.n	800a36e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a354:	2403      	movs	r4, #3
 800a356:	e00a      	b.n	800a36e <LoRaMacInitialization+0x36e>
 800a358:	2403      	movs	r4, #3
 800a35a:	e008      	b.n	800a36e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a35c:	2403      	movs	r4, #3
 800a35e:	e006      	b.n	800a36e <LoRaMacInitialization+0x36e>
 800a360:	2403      	movs	r4, #3
 800a362:	e004      	b.n	800a36e <LoRaMacInitialization+0x36e>
 800a364:	2403      	movs	r4, #3
 800a366:	e002      	b.n	800a36e <LoRaMacInitialization+0x36e>
 800a368:	2403      	movs	r4, #3
 800a36a:	e000      	b.n	800a36e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a36c:	2409      	movs	r4, #9
}
 800a36e:	4620      	mov	r0, r4
 800a370:	b00d      	add	sp, #52	; 0x34
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a376:	2411      	movs	r4, #17
 800a378:	e7f9      	b.n	800a36e <LoRaMacInitialization+0x36e>
 800a37a:	bf00      	nop
 800a37c:	20008000 	.word	0x20008000
 800a380:	20000628 	.word	0x20000628
 800a384:	01000400 	.word	0x01000400
 800a388:	20000b48 	.word	0x20000b48
 800a38c:	0800940d 	.word	0x0800940d
 800a390:	080096b1 	.word	0x080096b1
 800a394:	08009659 	.word	0x08009659
 800a398:	080080b9 	.word	0x080080b9
 800a39c:	20000624 	.word	0x20000624
 800a3a0:	08009971 	.word	0x08009971
 800a3a4:	08009911 	.word	0x08009911
 800a3a8:	08007cd5 	.word	0x08007cd5
 800a3ac:	080098dd 	.word	0x080098dd
 800a3b0:	080098a9 	.word	0x080098a9
 800a3b4:	08012a8c 	.word	0x08012a8c
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a3b8:	2411      	movs	r4, #17
 800a3ba:	e7d8      	b.n	800a36e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a3bc:	2413      	movs	r4, #19
 800a3be:	e7d6      	b.n	800a36e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a3c0:	2411      	movs	r4, #17
 800a3c2:	e7d4      	b.n	800a36e <LoRaMacInitialization+0x36e>

0800a3c4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	4b02      	ldr	r3, [pc, #8]	; (800a3d0 <LoRaMacStart+0xc>)
 800a3c8:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	20000628 	.word	0x20000628

0800a3d4 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800a3d4:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800a3d6:	f7ff fdaf 	bl	8009f38 <LoRaMacIsBusy>
 800a3da:	b130      	cbz	r0, 800a3ea <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800a3dc:	4b06      	ldr	r3, [pc, #24]	; (800a3f8 <LoRaMacStop+0x24>)
 800a3de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d006      	beq.n	800a3f4 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800a3e6:	2001      	movs	r0, #1
}
 800a3e8:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800a3ea:	4b03      	ldr	r3, [pc, #12]	; (800a3f8 <LoRaMacStop+0x24>)
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800a3f2:	e7f9      	b.n	800a3e8 <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	e7f7      	b.n	800a3e8 <LoRaMacStop+0x14>
 800a3f8:	20000628 	.word	0x20000628

0800a3fc <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800a3fc:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800a3fe:	4c14      	ldr	r4, [pc, #80]	; (800a450 <LoRaMacHalt+0x54>)
 800a400:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a404:	f007 f980 	bl	8011708 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800a408:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800a40c:	f007 f97c 	bl	8011708 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a410:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a414:	f007 f978 	bl	8011708 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800a418:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800a41c:	f007 f974 	bl	8011708 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800a420:	f000 ff0a 	bl	800b238 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800a424:	4b0b      	ldr	r3, [pc, #44]	; (800a454 <LoRaMacHalt+0x58>)
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800a42a:	2500      	movs	r5, #0
 800a42c:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800a430:	4e09      	ldr	r6, [pc, #36]	; (800a458 <LoRaMacHalt+0x5c>)
 800a432:	4630      	mov	r0, r6
 800a434:	f7ff f964 	bl	8009700 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a438:	f240 528c 	movw	r2, #1420	; 0x58c
 800a43c:	4631      	mov	r1, r6
 800a43e:	4807      	ldr	r0, [pc, #28]	; (800a45c <LoRaMacHalt+0x60>)
 800a440:	f004 ff65 	bl	800f30e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800a444:	2301      	movs	r3, #1
 800a446:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800a44a:	4628      	mov	r0, r5
 800a44c:	bd70      	pop	{r4, r5, r6, pc}
 800a44e:	bf00      	nop
 800a450:	20000628 	.word	0x20000628
 800a454:	08012a8c 	.word	0x08012a8c
 800a458:	20008000 	.word	0x20008000
 800a45c:	2000858c 	.word	0x2000858c

0800a460 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a460:	b530      	push	{r4, r5, lr}
 800a462:	b08b      	sub	sp, #44	; 0x2c
 800a464:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a466:	4b32      	ldr	r3, [pc, #200]	; (800a530 <LoRaMacQueryTxPossible+0xd0>)
 800a468:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a46a:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a46c:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800a470:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a474:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800a478:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800a47c:	4b2d      	ldr	r3, [pc, #180]	; (800a534 <LoRaMacQueryTxPossible+0xd4>)
 800a47e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800a482:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800a48a:	2900      	cmp	r1, #0
 800a48c:	d049      	beq.n	800a522 <LoRaMacQueryTxPossible+0xc2>
 800a48e:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a490:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a494:	4b26      	ldr	r3, [pc, #152]	; (800a530 <LoRaMacQueryTxPossible+0xd0>)
 800a496:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800a49a:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a49e:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a4a0:	4924      	ldr	r1, [pc, #144]	; (800a534 <LoRaMacQueryTxPossible+0xd4>)
 800a4a2:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 800a4a6:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800a4aa:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 800a4ae:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a4b2:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a4b6:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a4ba:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800a4be:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a4c2:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a4c6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a4ca:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800a4ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800a4d6:	ab04      	add	r3, sp, #16
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	f10d 030d 	add.w	r3, sp, #13
 800a4de:	f10d 020e 	add.w	r2, sp, #14
 800a4e2:	f10d 010f 	add.w	r1, sp, #15
 800a4e6:	a805      	add	r0, sp, #20
 800a4e8:	f000 fe18 	bl	800b11c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a4ec:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800a4f0:	f7fd fd3a 	bl	8007f68 <GetMaxAppPayloadWithoutFOptsLength>
 800a4f4:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a4f6:	a802      	add	r0, sp, #8
 800a4f8:	f000 ffba 	bl	800b470 <LoRaMacCommandsGetSizeSerializedCmds>
 800a4fc:	b998      	cbnz	r0, 800a526 <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a4fe:	9b02      	ldr	r3, [sp, #8]
 800a500:	2b0f      	cmp	r3, #15
 800a502:	d80a      	bhi.n	800a51a <LoRaMacQueryTxPossible+0xba>
 800a504:	786a      	ldrb	r2, [r5, #1]
 800a506:	4293      	cmp	r3, r2
 800a508:	d807      	bhi.n	800a51a <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a50e:	9b02      	ldr	r3, [sp, #8]
 800a510:	441c      	add	r4, r3
 800a512:	42a2      	cmp	r2, r4
 800a514:	d309      	bcc.n	800a52a <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a516:	b00b      	add	sp, #44	; 0x2c
 800a518:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a51e:	2008      	movs	r0, #8
 800a520:	e7f9      	b.n	800a516 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a522:	2003      	movs	r0, #3
 800a524:	e7f7      	b.n	800a516 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a526:	2013      	movs	r0, #19
 800a528:	e7f5      	b.n	800a516 <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a52a:	2008      	movs	r0, #8
 800a52c:	e7f3      	b.n	800a516 <LoRaMacQueryTxPossible+0xb6>
 800a52e:	bf00      	nop
 800a530:	20008000 	.word	0x20008000
 800a534:	20000628 	.word	0x20000628

0800a538 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a538:	2800      	cmp	r0, #0
 800a53a:	f000 813d 	beq.w	800a7b8 <LoRaMacMibGetRequestConfirm+0x280>
{
 800a53e:	b510      	push	{r4, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a544:	7800      	ldrb	r0, [r0, #0]
 800a546:	2839      	cmp	r0, #57	; 0x39
 800a548:	f200 8132 	bhi.w	800a7b0 <LoRaMacMibGetRequestConfirm+0x278>
 800a54c:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a550:	0040003a 	.word	0x0040003a
 800a554:	004b0046 	.word	0x004b0046
 800a558:	00560050 	.word	0x00560050
 800a55c:	0130005c 	.word	0x0130005c
 800a560:	01300130 	.word	0x01300130
 800a564:	01300130 	.word	0x01300130
 800a568:	01300130 	.word	0x01300130
 800a56c:	00620130 	.word	0x00620130
 800a570:	006e0068 	.word	0x006e0068
 800a574:	0083007b 	.word	0x0083007b
 800a578:	0093008b 	.word	0x0093008b
 800a57c:	009b00a8 	.word	0x009b00a8
 800a580:	00bb00b5 	.word	0x00bb00b5
 800a584:	00c500c0 	.word	0x00c500c0
 800a588:	00cf00ca 	.word	0x00cf00ca
 800a58c:	00e500d4 	.word	0x00e500d4
 800a590:	00f700eb 	.word	0x00f700eb
 800a594:	00fd00f1 	.word	0x00fd00f1
 800a598:	01080102 	.word	0x01080102
 800a59c:	010d0115 	.word	0x010d0115
 800a5a0:	01300111 	.word	0x01300111
 800a5a4:	0130011b 	.word	0x0130011b
 800a5a8:	01300130 	.word	0x01300130
 800a5ac:	01300130 	.word	0x01300130
 800a5b0:	01300130 	.word	0x01300130
 800a5b4:	01300130 	.word	0x01300130
 800a5b8:	01300130 	.word	0x01300130
 800a5bc:	01300130 	.word	0x01300130
 800a5c0:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a5c4:	4b7d      	ldr	r3, [pc, #500]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a5c6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a5ca:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a5cc:	b004      	add	sp, #16
 800a5ce:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a5d0:	4b7a      	ldr	r3, [pc, #488]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a5d2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800a5d6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5d8:	2000      	movs	r0, #0
            break;
 800a5da:	e7f7      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a5dc:	f004 fe50 	bl	800f280 <SecureElementGetDevEui>
 800a5e0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5e2:	2000      	movs	r0, #0
            break;
 800a5e4:	e7f2      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a5e6:	f004 fe61 	bl	800f2ac <SecureElementGetJoinEui>
 800a5ea:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5ec:	2000      	movs	r0, #0
            break;
 800a5ee:	e7ed      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a5f0:	4b72      	ldr	r3, [pc, #456]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a5f2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800a5f6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5f8:	2000      	movs	r0, #0
            break;
 800a5fa:	e7e7      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a5fc:	4b6f      	ldr	r3, [pc, #444]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a5fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a602:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a604:	2000      	movs	r0, #0
            break;
 800a606:	e7e1      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800a608:	4b6c      	ldr	r3, [pc, #432]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a60a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a60e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a610:	2000      	movs	r0, #0
            break;
 800a612:	e7db      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a614:	4b69      	ldr	r3, [pc, #420]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a616:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800a61a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a61c:	2000      	movs	r0, #0
            break;
 800a61e:	e7d5      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a620:	4b66      	ldr	r3, [pc, #408]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a622:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a626:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a628:	2000      	movs	r0, #0
            break;
 800a62a:	e7cf      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 800a62c:	231c      	movs	r3, #28
 800a62e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a632:	a902      	add	r1, sp, #8
 800a634:	4b61      	ldr	r3, [pc, #388]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a636:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a63a:	f001 fdd5 	bl	800c1e8 <RegionGetPhyParam>
 800a63e:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800a640:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a642:	2000      	movs	r0, #0
            break;
 800a644:	e7c2      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a646:	3404      	adds	r4, #4
 800a648:	4b5d      	ldr	r3, [pc, #372]	; (800a7c0 <LoRaMacMibGetRequestConfirm+0x288>)
 800a64a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a64e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a652:	2000      	movs	r0, #0
            break;
 800a654:	e7ba      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a656:	3404      	adds	r4, #4
 800a658:	4b5a      	ldr	r3, [pc, #360]	; (800a7c4 <LoRaMacMibGetRequestConfirm+0x28c>)
 800a65a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a65e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a662:	2000      	movs	r0, #0
            break;
 800a664:	e7b2      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a666:	3404      	adds	r4, #4
 800a668:	4b57      	ldr	r3, [pc, #348]	; (800a7c8 <LoRaMacMibGetRequestConfirm+0x290>)
 800a66a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a66e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a672:	2000      	movs	r0, #0
            break;
 800a674:	e7aa      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a676:	3404      	adds	r4, #4
 800a678:	4b54      	ldr	r3, [pc, #336]	; (800a7cc <LoRaMacMibGetRequestConfirm+0x294>)
 800a67a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a67e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a682:	2000      	movs	r0, #0
            break;
 800a684:	e7a2      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a686:	231a      	movs	r3, #26
 800a688:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a68c:	a902      	add	r1, sp, #8
 800a68e:	4b4b      	ldr	r3, [pc, #300]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a690:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a694:	f001 fda8 	bl	800c1e8 <RegionGetPhyParam>
 800a698:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a69a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a69c:	2000      	movs	r0, #0
            break;
 800a69e:	e795      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a6a0:	2319      	movs	r3, #25
 800a6a2:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a6a6:	a902      	add	r1, sp, #8
 800a6a8:	4b44      	ldr	r3, [pc, #272]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a6aa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a6ae:	f001 fd9b 	bl	800c1e8 <RegionGetPhyParam>
 800a6b2:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a6b4:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6b6:	2000      	movs	r0, #0
            break;
 800a6b8:	e788      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a6ba:	4b40      	ldr	r3, [pc, #256]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a6bc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a6c0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6c2:	2000      	movs	r0, #0
            break;
 800a6c4:	e782      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800a6c6:	4b3d      	ldr	r3, [pc, #244]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ca:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6cc:	2000      	movs	r0, #0
            break;
 800a6ce:	e77d      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800a6d0:	4b3a      	ldr	r3, [pc, #232]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a6d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6d4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6d6:	2000      	movs	r0, #0
            break;
 800a6d8:	e778      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800a6da:	4b38      	ldr	r3, [pc, #224]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6de:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6e0:	2000      	movs	r0, #0
            break;
 800a6e2:	e773      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800a6e4:	4b35      	ldr	r3, [pc, #212]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a6e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6ea:	2000      	movs	r0, #0
            break;
 800a6ec:	e76e      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800a6ee:	4b33      	ldr	r3, [pc, #204]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6f4:	2000      	movs	r0, #0
            break;
 800a6f6:	e769      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a6fe:	4b2f      	ldr	r3, [pc, #188]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a700:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a704:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a708:	a902      	add	r1, sp, #8
 800a70a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a70e:	f001 fd6b 	bl	800c1e8 <RegionGetPhyParam>
 800a712:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800a714:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a716:	2000      	movs	r0, #0
            break;
 800a718:	e758      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a71a:	4b28      	ldr	r3, [pc, #160]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a71c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800a720:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a722:	2000      	movs	r0, #0
            break;
 800a724:	e752      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a726:	4b25      	ldr	r3, [pc, #148]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a728:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a72c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a72e:	2000      	movs	r0, #0
            break;
 800a730:	e74c      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a732:	4b22      	ldr	r3, [pc, #136]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a734:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800a738:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a73a:	2000      	movs	r0, #0
            break;
 800a73c:	e746      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a73e:	4b1f      	ldr	r3, [pc, #124]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a740:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a744:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a746:	2000      	movs	r0, #0
            break;
 800a748:	e740      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800a74a:	4b1c      	ldr	r3, [pc, #112]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a74e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a750:	2000      	movs	r0, #0
            break;
 800a752:	e73b      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800a754:	4b19      	ldr	r3, [pc, #100]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a756:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a75a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a75c:	2000      	movs	r0, #0
            break;
 800a75e:	e735      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a760:	4b16      	ldr	r3, [pc, #88]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a764:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a766:	2000      	movs	r0, #0
            break;
 800a768:	e730      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 800a76a:	4b14      	ldr	r3, [pc, #80]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a76c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a76e:	2000      	movs	r0, #0
            break;
 800a770:	e72c      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 800a772:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <LoRaMacMibGetRequestConfirm+0x298>)
 800a774:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a776:	2000      	movs	r0, #0
            break;
 800a778:	e728      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a77a:	4b10      	ldr	r3, [pc, #64]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a77c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a780:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a782:	2000      	movs	r0, #0
            break;
 800a784:	e722      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800a786:	4b0d      	ldr	r3, [pc, #52]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a788:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a78c:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a78e:	f001 fe53 	bl	800c438 <RegionGetVersion>
 800a792:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a794:	2000      	movs	r0, #0
            break;
 800a796:	e719      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a798:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a79a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a79e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7a0:	2000      	movs	r0, #0
            break;
 800a7a2:	e713      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800a7a4:	4b05      	ldr	r3, [pc, #20]	; (800a7bc <LoRaMacMibGetRequestConfirm+0x284>)
 800a7a6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800a7aa:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7ac:	2000      	movs	r0, #0
            break;
 800a7ae:	e70d      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fd45 	bl	800b240 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800a7b6:	e709      	b.n	800a5cc <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a7b8:	2003      	movs	r0, #3
}
 800a7ba:	4770      	bx	lr
 800a7bc:	20008000 	.word	0x20008000
 800a7c0:	20008064 	.word	0x20008064
 800a7c4:	200080a8 	.word	0x200080a8
 800a7c8:	2000806c 	.word	0x2000806c
 800a7cc:	200080b0 	.word	0x200080b0
 800a7d0:	2000858c 	.word	0x2000858c

0800a7d4 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	f000 8254 	beq.w	800ac82 <LoRaMacMibSetRequestConfirm+0x4ae>
{
 800a7da:	b530      	push	{r4, r5, lr}
 800a7dc:	b085      	sub	sp, #20
 800a7de:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a7e0:	4ba3      	ldr	r3, [pc, #652]	; (800aa70 <LoRaMacMibSetRequestConfirm+0x29c>)
 800a7e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a7e6:	f013 0f02 	tst.w	r3, #2
 800a7ea:	f040 824c 	bne.w	800ac86 <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800a7ee:	7805      	ldrb	r5, [r0, #0]
 800a7f0:	2d39      	cmp	r5, #57	; 0x39
 800a7f2:	f200 8243 	bhi.w	800ac7c <LoRaMacMibSetRequestConfirm+0x4a8>
 800a7f6:	e8df f015 	tbh	[pc, r5, lsl #1]
 800a7fa:	003a      	.short	0x003a
 800a7fc:	00500047 	.word	0x00500047
 800a800:	005e0057 	.word	0x005e0057
 800a804:	006a0064 	.word	0x006a0064
 800a808:	007b0070 	.word	0x007b0070
 800a80c:	00910086 	.word	0x00910086
 800a810:	00a7009c 	.word	0x00a7009c
 800a814:	00bd00b2 	.word	0x00bd00b2
 800a818:	00d400c9 	.word	0x00d400c9
 800a81c:	00da0241 	.word	0x00da0241
 800a820:	011a0100 	.word	0x011a0100
 800a824:	017d0153 	.word	0x017d0153
 800a828:	018d016d 	.word	0x018d016d
 800a82c:	019d0198 	.word	0x019d0198
 800a830:	01a701a2 	.word	0x01a701a2
 800a834:	024101ac 	.word	0x024101ac
 800a838:	01c601b1 	.word	0x01c601b1
 800a83c:	01df01f3 	.word	0x01df01f3
 800a840:	020e0207 	.word	0x020e0207
 800a844:	021b0216 	.word	0x021b0216
 800a848:	02410221 	.word	0x02410221
 800a84c:	02410224 	.word	0x02410224
 800a850:	02410241 	.word	0x02410241
 800a854:	02410241 	.word	0x02410241
 800a858:	02410241 	.word	0x02410241
 800a85c:	02410241 	.word	0x02410241
 800a860:	02410241 	.word	0x02410241
 800a864:	02410241 	.word	0x02410241
 800a868:	02350241 	.word	0x02350241
 800a86c:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a86e:	7900      	ldrb	r0, [r0, #4]
 800a870:	f7ff f95a 	bl	8009b28 <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 800a874:	b930      	cbnz	r0, 800a884 <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a876:	4a7e      	ldr	r2, [pc, #504]	; (800aa70 <LoRaMacMibSetRequestConfirm+0x29c>)
 800a878:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a880:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800a884:	b005      	add	sp, #20
 800a886:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800a888:	7903      	ldrb	r3, [r0, #4]
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	f000 81fd 	beq.w	800ac8a <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800a890:	4a78      	ldr	r2, [pc, #480]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a892:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a896:	2000      	movs	r0, #0
 800a898:	e7ed      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a89a:	6840      	ldr	r0, [r0, #4]
 800a89c:	f004 fce2 	bl	800f264 <SecureElementSetDevEui>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d0e8      	beq.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8a4:	2003      	movs	r0, #3
 800a8a6:	e7ed      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a8a8:	6840      	ldr	r0, [r0, #4]
 800a8aa:	f004 fcef 	bl	800f28c <SecureElementSetJoinEui>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d0e1      	beq.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	e7e6      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800a8b6:	7902      	ldrb	r2, [r0, #4]
 800a8b8:	4b6e      	ldr	r3, [pc, #440]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a8ba:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8be:	2000      	movs	r0, #0
 800a8c0:	e7d9      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800a8c2:	6842      	ldr	r2, [r0, #4]
 800a8c4:	4b6b      	ldr	r3, [pc, #428]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a8c6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	e7d3      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800a8ce:	6842      	ldr	r2, [r0, #4]
 800a8d0:	4b68      	ldr	r3, [pc, #416]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a8d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	e7cd      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 800a8da:	6841      	ldr	r1, [r0, #4]
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	f000 81d6 	beq.w	800ac8e <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	f001 fa6e 	bl	800bdc4 <LoRaMacCryptoSetKey>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d0c4      	beq.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a8ec:	2011      	movs	r0, #17
 800a8ee:	e7c9      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 800a8f0:	6841      	ldr	r1, [r0, #4]
 800a8f2:	2900      	cmp	r1, #0
 800a8f4:	f000 81cd 	beq.w	800ac92 <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	f001 fa63 	bl	800bdc4 <LoRaMacCryptoSetKey>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d0b9      	beq.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a902:	2011      	movs	r0, #17
 800a904:	e7be      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 800a906:	6841      	ldr	r1, [r0, #4]
 800a908:	2900      	cmp	r1, #0
 800a90a:	f000 81c4 	beq.w	800ac96 <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800a90e:	2002      	movs	r0, #2
 800a910:	f001 fa58 	bl	800bdc4 <LoRaMacCryptoSetKey>
 800a914:	2800      	cmp	r0, #0
 800a916:	d0ae      	beq.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a918:	2011      	movs	r0, #17
 800a91a:	e7b3      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 800a91c:	6841      	ldr	r1, [r0, #4]
 800a91e:	2900      	cmp	r1, #0
 800a920:	f000 81bb 	beq.w	800ac9a <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800a924:	2003      	movs	r0, #3
 800a926:	f001 fa4d 	bl	800bdc4 <LoRaMacCryptoSetKey>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d0a3      	beq.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a92e:	2011      	movs	r0, #17
 800a930:	e7a8      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 800a932:	6841      	ldr	r1, [r0, #4]
 800a934:	2900      	cmp	r1, #0
 800a936:	f000 81b2 	beq.w	800ac9e <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800a93a:	207f      	movs	r0, #127	; 0x7f
 800a93c:	f001 fa42 	bl	800bdc4 <LoRaMacCryptoSetKey>
 800a940:	2800      	cmp	r0, #0
 800a942:	d098      	beq.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a944:	2011      	movs	r0, #17
 800a946:	e79d      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 800a948:	6841      	ldr	r1, [r0, #4]
 800a94a:	2900      	cmp	r1, #0
 800a94c:	f000 81a9 	beq.w	800aca2 <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800a950:	2080      	movs	r0, #128	; 0x80
 800a952:	f001 fa37 	bl	800bdc4 <LoRaMacCryptoSetKey>
 800a956:	2800      	cmp	r0, #0
 800a958:	d08d      	beq.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a95a:	2011      	movs	r0, #17
 800a95c:	e792      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800a95e:	6841      	ldr	r1, [r0, #4]
 800a960:	2900      	cmp	r1, #0
 800a962:	f000 81a0 	beq.w	800aca6 <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800a966:	2081      	movs	r0, #129	; 0x81
 800a968:	f001 fa2c 	bl	800bdc4 <LoRaMacCryptoSetKey>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d082      	beq.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a970:	2011      	movs	r0, #17
 800a972:	e787      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800a974:	6841      	ldr	r1, [r0, #4]
 800a976:	2900      	cmp	r1, #0
 800a978:	f000 8197 	beq.w	800acaa <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800a97c:	2082      	movs	r0, #130	; 0x82
 800a97e:	f001 fa21 	bl	800bdc4 <LoRaMacCryptoSetKey>
 800a982:	2800      	cmp	r0, #0
 800a984:	f43f af77 	beq.w	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a988:	2011      	movs	r0, #17
 800a98a:	e77b      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800a98c:	7900      	ldrb	r0, [r0, #4]
 800a98e:	4b39      	ldr	r3, [pc, #228]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a990:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a994:	4c38      	ldr	r4, [pc, #224]	; (800aa78 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800a996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a998:	4798      	blx	r3
            Radio.Sleep( );
 800a99a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a99c:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a99e:	2000      	movs	r0, #0
 800a9a0:	e769      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800a9a2:	7902      	ldrb	r2, [r0, #4]
 800a9a4:	4b33      	ldr	r3, [pc, #204]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a9a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	e763      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a9ae:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a9b2:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a9b6:	4b2f      	ldr	r3, [pc, #188]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a9b8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a9bc:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800a9c0:	2207      	movs	r2, #7
 800a9c2:	a901      	add	r1, sp, #4
 800a9c4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a9c8:	f001 fc42 	bl	800c250 <RegionVerify>
 800a9cc:	b908      	cbnz	r0, 800a9d2 <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9ce:	2003      	movs	r0, #3
 800a9d0:	e750      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800a9d2:	6863      	ldr	r3, [r4, #4]
 800a9d4:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	a901      	add	r1, sp, #4
 800a9da:	4b26      	ldr	r3, [pc, #152]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a9dc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a9e0:	f001 fc36 	bl	800c250 <RegionVerify>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	f000 8162 	beq.w	800acae <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800a9ea:	4b24      	ldr	r3, [pc, #144]	; (800aa7c <LoRaMacMibSetRequestConfirm+0x2a8>)
 800a9ec:	3404      	adds	r4, #4
 800a9ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a9f2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	e73c      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a9fa:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a9fe:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa02:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aa04:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800aa08:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800aa0c:	2207      	movs	r2, #7
 800aa0e:	a901      	add	r1, sp, #4
 800aa10:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aa14:	f001 fc1c 	bl	800c250 <RegionVerify>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	f000 814a 	beq.w	800acb2 <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800aa1e:	4b18      	ldr	r3, [pc, #96]	; (800aa80 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800aa20:	3404      	adds	r4, #4
 800aa22:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa26:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	e722      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800aa2e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800aa32:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa36:	4b0f      	ldr	r3, [pc, #60]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aa38:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800aa3c:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800aa40:	2207      	movs	r2, #7
 800aa42:	a901      	add	r1, sp, #4
 800aa44:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aa48:	f001 fc02 	bl	800c250 <RegionVerify>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	f000 8132 	beq.w	800acb6 <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800aa52:	4b08      	ldr	r3, [pc, #32]	; (800aa74 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aa54:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800aa58:	3404      	adds	r4, #4
 800aa5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa5e:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800aa62:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d00c      	beq.n	800aa84 <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	e702      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
 800aa6e:	bf00      	nop
 800aa70:	20000628 	.word	0x20000628
 800aa74:	20008000 	.word	0x20008000
 800aa78:	08012a8c 	.word	0x08012a8c
 800aa7c:	20008064 	.word	0x20008064
 800aa80:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800aa84:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800aa88:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	f43f aef1 	beq.w	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 800aa92:	4b90      	ldr	r3, [pc, #576]	; (800acd4 <LoRaMacMibSetRequestConfirm+0x500>)
 800aa94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa96:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800aa98:	f7fe fd82 	bl	80095a0 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e6e9      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800aaa0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800aaa4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aaa8:	4b8b      	ldr	r3, [pc, #556]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800aaaa:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800aaae:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800aab2:	2207      	movs	r2, #7
 800aab4:	a901      	add	r1, sp, #4
 800aab6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aaba:	f001 fbc9 	bl	800c250 <RegionVerify>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	f000 80fb 	beq.w	800acba <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800aac4:	4b85      	ldr	r3, [pc, #532]	; (800acdc <LoRaMacMibSetRequestConfirm+0x508>)
 800aac6:	3404      	adds	r4, #4
 800aac8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aacc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aad0:	2000      	movs	r0, #0
 800aad2:	e6cf      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800aad4:	6843      	ldr	r3, [r0, #4]
 800aad6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800aad8:	2301      	movs	r3, #1
 800aada:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800aade:	a902      	add	r1, sp, #8
 800aae0:	4b7d      	ldr	r3, [pc, #500]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800aae2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aae6:	f001 fbd1 	bl	800c28c <RegionChanMaskSet>
 800aaea:	b108      	cbz	r0, 800aaf0 <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaec:	2000      	movs	r0, #0
 800aaee:	e6c1      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aaf0:	2003      	movs	r0, #3
 800aaf2:	e6c7      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800aaf4:	6843      	ldr	r3, [r0, #4]
 800aaf6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800aafe:	a902      	add	r1, sp, #8
 800ab00:	4b75      	ldr	r3, [pc, #468]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab02:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ab06:	f001 fbc1 	bl	800c28c <RegionChanMaskSet>
 800ab0a:	b108      	cbz	r0, 800ab10 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	e6b1      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab10:	2003      	movs	r0, #3
 800ab12:	e6b7      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ab14:	7902      	ldrb	r2, [r0, #4]
 800ab16:	1e53      	subs	r3, r2, #1
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b0e      	cmp	r3, #14
 800ab1c:	f200 80cf 	bhi.w	800acbe <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ab20:	4b6d      	ldr	r3, [pc, #436]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab26:	2000      	movs	r0, #0
 800ab28:	e6a4      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ab2a:	6842      	ldr	r2, [r0, #4]
 800ab2c:	4b6a      	ldr	r3, [pc, #424]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab2e:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab30:	2000      	movs	r0, #0
 800ab32:	e6a0      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ab34:	6842      	ldr	r2, [r0, #4]
 800ab36:	4b68      	ldr	r3, [pc, #416]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab38:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	e69b      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ab3e:	6842      	ldr	r2, [r0, #4]
 800ab40:	4b65      	ldr	r3, [pc, #404]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab42:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab44:	2000      	movs	r0, #0
 800ab46:	e696      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800ab48:	6842      	ldr	r2, [r0, #4]
 800ab4a:	4b63      	ldr	r3, [pc, #396]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab4c:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab4e:	2000      	movs	r0, #0
 800ab50:	e691      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ab52:	6842      	ldr	r2, [r0, #4]
 800ab54:	4b60      	ldr	r3, [pc, #384]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab56:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab58:	2000      	movs	r0, #0
 800ab5a:	e68c      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ab5c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ab60:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800ab64:	2206      	movs	r2, #6
 800ab66:	a901      	add	r1, sp, #4
 800ab68:	4b5b      	ldr	r3, [pc, #364]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab6a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ab6e:	f001 fb6f 	bl	800c250 <RegionVerify>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	f000 80a5 	beq.w	800acc2 <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800ab78:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ab7c:	4b56      	ldr	r3, [pc, #344]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab7e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab82:	2000      	movs	r0, #0
 800ab84:	e676      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ab86:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ab8a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ab8e:	4b52      	ldr	r3, [pc, #328]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ab90:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ab94:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ab98:	2205      	movs	r2, #5
 800ab9a:	a901      	add	r1, sp, #4
 800ab9c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aba0:	f001 fb56 	bl	800c250 <RegionVerify>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	f000 808e 	beq.w	800acc6 <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800abaa:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800abae:	4b4a      	ldr	r3, [pc, #296]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800abb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abb4:	2000      	movs	r0, #0
 800abb6:	e65d      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800abb8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800abbc:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800abc0:	220a      	movs	r2, #10
 800abc2:	a901      	add	r1, sp, #4
 800abc4:	4b44      	ldr	r3, [pc, #272]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800abc6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800abca:	f001 fb41 	bl	800c250 <RegionVerify>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d07b      	beq.n	800acca <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800abd2:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800abd6:	4b40      	ldr	r3, [pc, #256]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800abd8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abdc:	2000      	movs	r0, #0
 800abde:	e649      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800abe0:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800abe4:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800abe8:	2209      	movs	r2, #9
 800abea:	a901      	add	r1, sp, #4
 800abec:	4b3a      	ldr	r3, [pc, #232]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800abee:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800abf2:	f001 fb2d 	bl	800c250 <RegionVerify>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d069      	beq.n	800acce <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800abfa:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800abfe:	4b36      	ldr	r3, [pc, #216]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac04:	2000      	movs	r0, #0
 800ac06:	e635      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ac08:	6842      	ldr	r2, [r0, #4]
 800ac0a:	4b33      	ldr	r3, [pc, #204]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ac10:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac12:	2000      	movs	r0, #0
 800ac14:	e62f      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800ac16:	7902      	ldrb	r2, [r0, #4]
 800ac18:	4b2f      	ldr	r3, [pc, #188]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac1a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800ac1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac22:	2000      	movs	r0, #0
 800ac24:	e627      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800ac26:	6842      	ldr	r2, [r0, #4]
 800ac28:	4b2b      	ldr	r3, [pc, #172]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac2a:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	e622      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800ac30:	6842      	ldr	r2, [r0, #4]
 800ac32:	4b29      	ldr	r3, [pc, #164]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac38:	2000      	movs	r0, #0
 800ac3a:	e61c      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 800ac3c:	f7fe fdc4 	bl	80097c8 <RestoreNvmData>
            break;
 800ac40:	e618      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800ac42:	7983      	ldrb	r3, [r0, #6]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d901      	bls.n	800ac4c <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac48:	2003      	movs	r0, #3
 800ac4a:	e61b      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800ac4c:	6842      	ldr	r2, [r0, #4]
 800ac4e:	4b22      	ldr	r3, [pc, #136]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac50:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ac54:	6840      	ldr	r0, [r0, #4]
 800ac56:	f000 ff69 	bl	800bb2c <LoRaMacCryptoSetLrWanVersion>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	f43f ae0a 	beq.w	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ac60:	2011      	movs	r0, #17
 800ac62:	e60f      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800ac64:	6842      	ldr	r2, [r0, #4]
 800ac66:	4b1c      	ldr	r3, [pc, #112]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	e602      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800ac70:	7902      	ldrb	r2, [r0, #4]
 800ac72:	4b19      	ldr	r3, [pc, #100]	; (800acd8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac74:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac78:	2000      	movs	r0, #0
 800ac7a:	e5fc      	b.n	800a876 <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800ac7c:	f000 fae2 	bl	800b244 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800ac80:	e5f8      	b.n	800a874 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ac82:	2003      	movs	r0, #3
}
 800ac84:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800ac86:	2001      	movs	r0, #1
 800ac88:	e5fc      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac8a:	2003      	movs	r0, #3
 800ac8c:	e5fa      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac8e:	2003      	movs	r0, #3
 800ac90:	e5f8      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac92:	2003      	movs	r0, #3
 800ac94:	e5f6      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac96:	2003      	movs	r0, #3
 800ac98:	e5f4      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac9a:	2003      	movs	r0, #3
 800ac9c:	e5f2      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac9e:	2003      	movs	r0, #3
 800aca0:	e5f0      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aca2:	2003      	movs	r0, #3
 800aca4:	e5ee      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aca6:	2003      	movs	r0, #3
 800aca8:	e5ec      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acaa:	2003      	movs	r0, #3
 800acac:	e5ea      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acae:	2003      	movs	r0, #3
 800acb0:	e5e8      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acb2:	2003      	movs	r0, #3
 800acb4:	e5e6      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acb6:	2003      	movs	r0, #3
 800acb8:	e5e4      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acba:	2003      	movs	r0, #3
 800acbc:	e5e2      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acbe:	2003      	movs	r0, #3
 800acc0:	e5e0      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acc2:	2003      	movs	r0, #3
 800acc4:	e5de      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acc6:	2003      	movs	r0, #3
 800acc8:	e5dc      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acca:	2003      	movs	r0, #3
 800accc:	e5da      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800acce:	2003      	movs	r0, #3
 800acd0:	e5d8      	b.n	800a884 <LoRaMacMibSetRequestConfirm+0xb0>
 800acd2:	bf00      	nop
 800acd4:	08012a8c 	.word	0x08012a8c
 800acd8:	20008000 	.word	0x20008000
 800acdc:	200080b0 	.word	0x200080b0

0800ace0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ace4:	2300      	movs	r3, #0
 800ace6:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800acea:	2800      	cmp	r0, #0
 800acec:	f000 80ea 	beq.w	800aec4 <LoRaMacMlmeRequest+0x1e4>
 800acf0:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800acf2:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800acf4:	f7ff f920 	bl	8009f38 <LoRaMacIsBusy>
 800acf8:	b118      	cbz	r0, 800ad02 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800acfa:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800acfc:	4620      	mov	r0, r4
 800acfe:	b006      	add	sp, #24
 800ad00:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800ad02:	f000 fd49 	bl	800b798 <LoRaMacConfirmQueueIsFull>
 800ad06:	b108      	cbz	r0, 800ad0c <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800ad08:	2401      	movs	r4, #1
 800ad0a:	e7f7      	b.n	800acfc <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ad0c:	f000 fd3e 	bl	800b78c <LoRaMacConfirmQueueGetCnt>
 800ad10:	b308      	cbz	r0, 800ad56 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad12:	4b6d      	ldr	r3, [pc, #436]	; (800aec8 <LoRaMacMlmeRequest+0x1e8>)
 800ad14:	2101      	movs	r1, #1
 800ad16:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ad1a:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800ad1e:	f042 0204 	orr.w	r2, r2, #4
 800ad22:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 800ad26:	782b      	ldrb	r3, [r5, #0]
 800ad28:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad2c:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800ad30:	2200      	movs	r2, #0
 800ad32:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800ad36:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800ad3a:	461c      	mov	r4, r3
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	2b0c      	cmp	r3, #12
 800ad40:	f200 80a6 	bhi.w	800ae90 <LoRaMacMlmeRequest+0x1b0>
 800ad44:	e8df f003 	tbb	[pc, r3]
 800ad48:	5aa4a40d 	.word	0x5aa4a40d
 800ad4c:	a4a4a464 	.word	0xa4a4a464
 800ad50:	7695a46d 	.word	0x7695a46d
 800ad54:	8c          	.byte	0x8c
 800ad55:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800ad56:	2214      	movs	r2, #20
 800ad58:	2100      	movs	r1, #0
 800ad5a:	485c      	ldr	r0, [pc, #368]	; (800aecc <LoRaMacMlmeRequest+0x1ec>)
 800ad5c:	f004 faef 	bl	800f33e <memset1>
 800ad60:	e7d7      	b.n	800ad12 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800ad62:	4b59      	ldr	r3, [pc, #356]	; (800aec8 <LoRaMacMlmeRequest+0x1e8>)
 800ad64:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ad68:	f013 0f20 	tst.w	r3, #32
 800ad6c:	d1c6      	bne.n	800acfc <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800ad6e:	792b      	ldrb	r3, [r5, #4]
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d003      	beq.n	800ad7c <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d021      	beq.n	800adbc <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ad78:	2402      	movs	r4, #2
 800ad7a:	e08a      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 800ad7c:	f7fe fe24 	bl	80099c8 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800ad80:	4c53      	ldr	r4, [pc, #332]	; (800aed0 <LoRaMacMlmeRequest+0x1f0>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ad88:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ad8c:	f001 fb1c 	bl	800c3c8 <RegionAlternateDr>
 800ad90:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800ad94:	2307      	movs	r3, #7
 800ad96:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800ad9a:	20ff      	movs	r0, #255	; 0xff
 800ad9c:	f7fe ff4a 	bl	8009c34 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800ada0:	4604      	mov	r4, r0
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d075      	beq.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800ada6:	4e4a      	ldr	r6, [pc, #296]	; (800aed0 <LoRaMacMlmeRequest+0x1f0>)
 800ada8:	2201      	movs	r2, #1
 800adaa:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800adae:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800adb2:	f001 fb09 	bl	800c3c8 <RegionAlternateDr>
 800adb6:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800adba:	e06a      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800adbc:	4e44      	ldr	r6, [pc, #272]	; (800aed0 <LoRaMacMlmeRequest+0x1f0>)
 800adbe:	2400      	movs	r4, #0
 800adc0:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800adc4:	2302      	movs	r3, #2
 800adc6:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800adca:	4669      	mov	r1, sp
 800adcc:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800add0:	f001 fa30 	bl	800c234 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800add4:	792b      	ldrb	r3, [r5, #4]
 800add6:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800adda:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800adde:	2301      	movs	r3, #1
 800ade0:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800ade4:	4e38      	ldr	r6, [pc, #224]	; (800aec8 <LoRaMacMlmeRequest+0x1e8>)
 800ade6:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800adee:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 800adf2:	f043 0320 	orr.w	r3, r3, #32
 800adf6:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 800adfa:	e04a      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800adfc:	2200      	movs	r2, #0
 800adfe:	a904      	add	r1, sp, #16
 800ae00:	2002      	movs	r0, #2
 800ae02:	f000 fac1 	bl	800b388 <LoRaMacCommandsAddCmd>
 800ae06:	4604      	mov	r4, r0
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d042      	beq.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae0c:	2413      	movs	r4, #19
 800ae0e:	e040      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800ae10:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800ae14:	b2d2      	uxtb	r2, r2
 800ae16:	68a9      	ldr	r1, [r5, #8]
 800ae18:	88a8      	ldrh	r0, [r5, #4]
 800ae1a:	f7fc ffe3 	bl	8007de4 <SetTxContinuousWave>
 800ae1e:	4604      	mov	r4, r0
            break;
 800ae20:	e037      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ae22:	2200      	movs	r2, #0
 800ae24:	a904      	add	r1, sp, #16
 800ae26:	200d      	movs	r0, #13
 800ae28:	f000 faae 	bl	800b388 <LoRaMacCommandsAddCmd>
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	b380      	cbz	r0, 800ae92 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae30:	2413      	movs	r4, #19
 800ae32:	e02e      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800ae34:	4b26      	ldr	r3, [pc, #152]	; (800aed0 <LoRaMacMlmeRequest+0x1f0>)
 800ae36:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ae3a:	b10b      	cbz	r3, 800ae40 <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ae3c:	2402      	movs	r4, #2
 800ae3e:	e028      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800ae40:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800ae42:	f004 0007 	and.w	r0, r4, #7
 800ae46:	f000 f9f6 	bl	800b236 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800ae4a:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800ae4e:	2201      	movs	r2, #1
 800ae50:	a904      	add	r1, sp, #16
 800ae52:	2010      	movs	r0, #16
 800ae54:	f000 fa98 	bl	800b388 <LoRaMacCommandsAddCmd>
 800ae58:	4604      	mov	r4, r0
 800ae5a:	b1d0      	cbz	r0, 800ae92 <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae5c:	2413      	movs	r4, #19
 800ae5e:	e018      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ae60:	2200      	movs	r2, #0
 800ae62:	a904      	add	r1, sp, #16
 800ae64:	2012      	movs	r0, #18
 800ae66:	f000 fa8f 	bl	800b388 <LoRaMacCommandsAddCmd>
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	b188      	cbz	r0, 800ae92 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae6e:	2413      	movs	r4, #19
 800ae70:	e00f      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 800ae72:	2301      	movs	r3, #1
 800ae74:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800ae78:	f000 f9ce 	bl	800b218 <LoRaMacClassBIsAcquisitionInProgress>
 800ae7c:	b108      	cbz	r0, 800ae82 <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 800ae7e:	2401      	movs	r4, #1
 800ae80:	e007      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800ae82:	f000 f9c6 	bl	800b212 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800ae86:	2000      	movs	r0, #0
 800ae88:	f000 f9c8 	bl	800b21c <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800ae8c:	2400      	movs	r4, #0
 800ae8e:	e000      	b.n	800ae92 <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 800ae90:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ae92:	4b0d      	ldr	r3, [pc, #52]	; (800aec8 <LoRaMacMlmeRequest+0x1e8>)
 800ae94:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800ae98:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800ae9a:	b17c      	cbz	r4, 800aebc <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ae9c:	f000 fc76 	bl	800b78c <LoRaMacConfirmQueueGetCnt>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	f47f af2b 	bne.w	800acfc <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800aea6:	4b08      	ldr	r3, [pc, #32]	; (800aec8 <LoRaMacMlmeRequest+0x1e8>)
 800aea8:	2100      	movs	r1, #0
 800aeaa:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800aeae:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800aeb2:	f361 0282 	bfi	r2, r1, #2, #1
 800aeb6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800aeba:	e71f      	b.n	800acfc <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800aebc:	a805      	add	r0, sp, #20
 800aebe:	f000 fba1 	bl	800b604 <LoRaMacConfirmQueueAdd>
 800aec2:	e71b      	b.n	800acfc <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aec4:	2403      	movs	r4, #3
 800aec6:	e719      	b.n	800acfc <LoRaMacMlmeRequest+0x1c>
 800aec8:	20000628 	.word	0x20000628
 800aecc:	20000a80 	.word	0x20000a80
 800aed0:	20008000 	.word	0x20008000

0800aed4 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed8:	b091      	sub	sp, #68	; 0x44
 800aeda:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800aedc:	2800      	cmp	r0, #0
 800aede:	f000 80de 	beq.w	800b09e <LoRaMacMcpsRequest+0x1ca>
 800aee2:	f04f 0a00 	mov.w	sl, #0
 800aee6:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800aee8:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800aeec:	f7ff f824 	bl	8009f38 <LoRaMacIsBusy>
 800aef0:	4680      	mov	r8, r0
 800aef2:	b118      	cbz	r0, 800aefc <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800aef4:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800aef6:	b011      	add	sp, #68	; 0x44
 800aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800aefc:	ac06      	add	r4, sp, #24
 800aefe:	462e      	mov	r6, r5
 800af00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800af02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af04:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800af08:	4651      	mov	r1, sl
 800af0a:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800af0e:	4c66      	ldr	r4, [pc, #408]	; (800b0a8 <LoRaMacMcpsRequest+0x1d4>)
 800af10:	2214      	movs	r2, #20
 800af12:	f204 4044 	addw	r0, r4, #1092	; 0x444
 800af16:	f004 fa12 	bl	800f33e <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800af20:	4b62      	ldr	r3, [pc, #392]	; (800b0ac <LoRaMacMcpsRequest+0x1d8>)
 800af22:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800af26:	2b02      	cmp	r3, #2
 800af28:	d065      	beq.n	800aff6 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800af2a:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800af2e:	2f01      	cmp	r7, #1
 800af30:	f000 8086 	beq.w	800b040 <LoRaMacMcpsRequest+0x16c>
 800af34:	2f03      	cmp	r7, #3
 800af36:	f000 8096 	beq.w	800b066 <LoRaMacMcpsRequest+0x192>
 800af3a:	2f00      	cmp	r7, #0
 800af3c:	d06d      	beq.n	800b01a <LoRaMacMcpsRequest+0x146>
 800af3e:	f04f 0b00 	mov.w	fp, #0
 800af42:	f8cd b014 	str.w	fp, [sp, #20]
 800af46:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800af4a:	2302      	movs	r3, #2
 800af4c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800af50:	4e56      	ldr	r6, [pc, #344]	; (800b0ac <LoRaMacMcpsRequest+0x1d8>)
 800af52:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800af56:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800af5a:	a90e      	add	r1, sp, #56	; 0x38
 800af5c:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800af60:	f001 f942 	bl	800c1e8 <RegionGetPhyParam>
 800af64:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800af66:	b244      	sxtb	r4, r0
 800af68:	45a3      	cmp	fp, r4
 800af6a:	bfb8      	it	lt
 800af6c:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800af6e:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 800af72:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 800af76:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 800af7a:	4648      	mov	r0, r9
 800af7c:	f7fc ff04 	bl	8007d88 <CheckForMinimumAbpDatarate>
 800af80:	4603      	mov	r3, r0
 800af82:	b900      	cbnz	r0, 800af86 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800af84:	465c      	mov	r4, fp
    if( readyToSend == true )
 800af86:	f1b8 0f00 	cmp.w	r8, #0
 800af8a:	f000 8082 	beq.w	800b092 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800af8e:	f1b9 0f00 	cmp.w	r9, #0
 800af92:	d000      	beq.n	800af96 <LoRaMacMcpsRequest+0xc2>
 800af94:	b19b      	cbz	r3, 800afbe <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800af96:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800af9a:	4b44      	ldr	r3, [pc, #272]	; (800b0ac <LoRaMacMcpsRequest+0x1d8>)
 800af9c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800afa0:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800afa4:	2205      	movs	r2, #5
 800afa6:	a90b      	add	r1, sp, #44	; 0x2c
 800afa8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800afac:	f001 f950 	bl	800c250 <RegionVerify>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d076      	beq.n	800b0a2 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800afb4:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800afb8:	4b3c      	ldr	r3, [pc, #240]	; (800b0ac <LoRaMacMcpsRequest+0x1d8>)
 800afba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800afbe:	4b3a      	ldr	r3, [pc, #232]	; (800b0a8 <LoRaMacMcpsRequest+0x1d4>)
 800afc0:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 800afc4:	4b39      	ldr	r3, [pc, #228]	; (800b0ac <LoRaMacMcpsRequest+0x1d8>)
 800afc6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800afca:	f7fe f81d 	bl	8009008 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	4653      	mov	r3, sl
 800afd4:	9a05      	ldr	r2, [sp, #20]
 800afd6:	9904      	ldr	r1, [sp, #16]
 800afd8:	a80c      	add	r0, sp, #48	; 0x30
 800afda:	f7fe ff19 	bl	8009e10 <Send>
        if( status == LORAMAC_STATUS_OK )
 800afde:	2800      	cmp	r0, #0
 800afe0:	d152      	bne.n	800b088 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800afe2:	4b31      	ldr	r3, [pc, #196]	; (800b0a8 <LoRaMacMcpsRequest+0x1d4>)
 800afe4:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800afe8:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800afec:	f042 0201 	orr.w	r2, r2, #1
 800aff0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800aff4:	e04e      	b.n	800b094 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800aff6:	4b2d      	ldr	r3, [pc, #180]	; (800b0ac <LoRaMacMcpsRequest+0x1d8>)
 800aff8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800affc:	2b02      	cmp	r3, #2
 800affe:	d194      	bne.n	800af2a <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b000:	4b2a      	ldr	r3, [pc, #168]	; (800b0ac <LoRaMacMcpsRequest+0x1d8>)
 800b002:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b006:	2b00      	cmp	r3, #0
 800b008:	d18f      	bne.n	800af2a <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800b00a:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d18b      	bne.n	800af2a <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800b012:	2301      	movs	r3, #1
 800b014:	f88d 3018 	strb.w	r3, [sp, #24]
 800b018:	e787      	b.n	800af2a <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b01a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b01e:	2202      	movs	r2, #2
 800b020:	f362 1347 	bfi	r3, r2, #5, #3
 800b024:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800b028:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b02c:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800b02e:	9b08      	ldr	r3, [sp, #32]
 800b030:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800b032:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800b036:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b03a:	f04f 0801 	mov.w	r8, #1
            break;
 800b03e:	e784      	b.n	800af4a <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b040:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b044:	2204      	movs	r2, #4
 800b046:	f362 1347 	bfi	r3, r2, #5, #3
 800b04a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800b04e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b052:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800b054:	9b08      	ldr	r3, [sp, #32]
 800b056:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800b058:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800b05c:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b060:	f04f 0801 	mov.w	r8, #1
            break;
 800b064:	e771      	b.n	800af4a <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b066:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b06a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b06e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800b072:	9b07      	ldr	r3, [sp, #28]
 800b074:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800b076:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800b07a:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800b07e:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800b082:	2300      	movs	r3, #0
 800b084:	9304      	str	r3, [sp, #16]
            break;
 800b086:	e760      	b.n	800af4a <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800b088:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <LoRaMacMcpsRequest+0x1d4>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800b090:	e000      	b.n	800b094 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b092:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b094:	4b04      	ldr	r3, [pc, #16]	; (800b0a8 <LoRaMacMcpsRequest+0x1d4>)
 800b096:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800b09a:	612b      	str	r3, [r5, #16]
    return status;
 800b09c:	e72b      	b.n	800aef6 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b09e:	2003      	movs	r0, #3
 800b0a0:	e729      	b.n	800aef6 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b0a2:	2003      	movs	r0, #3
 800b0a4:	e727      	b.n	800aef6 <LoRaMacMcpsRequest+0x22>
 800b0a6:	bf00      	nop
 800b0a8:	20000628 	.word	0x20000628
 800b0ac:	20008000 	.word	0x20008000

0800b0b0 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b0b6:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b0ba:	220f      	movs	r2, #15
 800b0bc:	a901      	add	r1, sp, #4
 800b0be:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b0c0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b0c4:	f001 f8c4 	bl	800c250 <RegionVerify>
 800b0c8:	b110      	cbz	r0, 800b0d0 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b0ca:	4b02      	ldr	r3, [pc, #8]	; (800b0d4 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b0cc:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800b0d0:	b002      	add	sp, #8
 800b0d2:	bd10      	pop	{r4, pc}
 800b0d4:	20008000 	.word	0x20008000

0800b0d8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800b0d8:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800b0da:	f7ff f97b 	bl	800a3d4 <LoRaMacStop>
 800b0de:	b110      	cbz	r0, 800b0e6 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800b0e0:	2401      	movs	r4, #1
    }
}
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	bd38      	pop	{r3, r4, r5, pc}
 800b0e6:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800b0e8:	4d0a      	ldr	r5, [pc, #40]	; (800b114 <LoRaMacDeInitialization+0x3c>)
 800b0ea:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800b0ee:	f006 fb0b 	bl	8011708 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800b0f2:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800b0f6:	f006 fb07 	bl	8011708 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b0fa:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800b0fe:	f006 fb03 	bl	8011708 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800b102:	f000 f899 	bl	800b238 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800b106:	f7fe fc5f 	bl	80099c8 <ResetMacParameters>
        Radio.Sleep( );
 800b10a:	4b03      	ldr	r3, [pc, #12]	; (800b118 <LoRaMacDeInitialization+0x40>)
 800b10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10e:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800b110:	e7e7      	b.n	800b0e2 <LoRaMacDeInitialization+0xa>
 800b112:	bf00      	nop
 800b114:	20000628 	.word	0x20000628
 800b118:	08012a8c 	.word	0x08012a8c

0800b11c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800b11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b120:	b08b      	sub	sp, #44	; 0x2c
 800b122:	460f      	mov	r7, r1
 800b124:	4616      	mov	r6, r2
 800b126:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800b128:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800b12c:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800b130:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b134:	6842      	ldr	r2, [r0, #4]
 800b136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b138:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800b13a:	f890 8001 	ldrb.w	r8, [r0, #1]
 800b13e:	f1b8 0f00 	cmp.w	r8, #0
 800b142:	d109      	bne.n	800b158 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800b144:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800b148:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800b14c:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800b150:	4640      	mov	r0, r8
 800b152:	b00b      	add	sp, #44	; 0x2c
 800b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b158:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b15a:	2302      	movs	r3, #2
 800b15c:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b160:	7bc3      	ldrb	r3, [r0, #15]
 800b162:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b166:	a908      	add	r1, sp, #32
 800b168:	7c00      	ldrb	r0, [r0, #16]
 800b16a:	f001 f83d 	bl	800c1e8 <RegionGetPhyParam>
 800b16e:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800b170:	b243      	sxtb	r3, r0
 800b172:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800b174:	454b      	cmp	r3, r9
 800b176:	bfb8      	it	lt
 800b178:	464b      	movlt	r3, r9
 800b17a:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800b17c:	6862      	ldr	r2, [r4, #4]
 800b17e:	8923      	ldrh	r3, [r4, #8]
 800b180:	429a      	cmp	r2, r3
 800b182:	d201      	bcs.n	800b188 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800b184:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b188:	8961      	ldrh	r1, [r4, #10]
 800b18a:	440b      	add	r3, r1
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d224      	bcs.n	800b1da <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800b190:	6863      	ldr	r3, [r4, #4]
 800b192:	8921      	ldrh	r1, [r4, #8]
 800b194:	8962      	ldrh	r2, [r4, #10]
 800b196:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800b19a:	4283      	cmp	r3, r0
 800b19c:	d332      	bcc.n	800b204 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800b19e:	1a5b      	subs	r3, r3, r1
 800b1a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1a4:	fb02 3311 	mls	r3, r2, r1, r3
 800b1a8:	bb7b      	cbnz	r3, 800b20a <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800b1aa:	9b01      	ldr	r3, [sp, #4]
 800b1ac:	4599      	cmp	r9, r3
 800b1ae:	dc03      	bgt.n	800b1b8 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800b1b0:	7823      	ldrb	r3, [r4, #0]
 800b1b2:	b9eb      	cbnz	r3, 800b1f0 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800b1b4:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b1b8:	2321      	movs	r3, #33	; 0x21
 800b1ba:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800b1be:	9b00      	ldr	r3, [sp, #0]
 800b1c0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b1c4:	7be3      	ldrb	r3, [r4, #15]
 800b1c6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b1ca:	a908      	add	r1, sp, #32
 800b1cc:	7c20      	ldrb	r0, [r4, #16]
 800b1ce:	f001 f80b 	bl	800c1e8 <RegionGetPhyParam>
 800b1d2:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800b1d4:	fa4f f980 	sxtb.w	r9, r0
 800b1d8:	e7b4      	b.n	800b144 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800b1da:	230a      	movs	r3, #10
 800b1dc:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b1e0:	a908      	add	r1, sp, #32
 800b1e2:	7c20      	ldrb	r0, [r4, #16]
 800b1e4:	f001 f800 	bl	800c1e8 <RegionGetPhyParam>
 800b1e8:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800b1ea:	fa4f fa80 	sxtb.w	sl, r0
 800b1ee:	e7cf      	b.n	800b190 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800b1f6:	a903      	add	r1, sp, #12
 800b1f8:	7c20      	ldrb	r0, [r4, #16]
 800b1fa:	f001 f81b 	bl	800c234 <RegionInitDefaults>
                    nbTrans = 1;
 800b1fe:	f04f 0b01 	mov.w	fp, #1
 800b202:	e7d9      	b.n	800b1b8 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800b204:	f8dd 9000 	ldr.w	r9, [sp]
 800b208:	e79c      	b.n	800b144 <LoRaMacAdrCalcNext+0x28>
 800b20a:	f8dd 9000 	ldr.w	r9, [sp]
 800b20e:	e799      	b.n	800b144 <LoRaMacAdrCalcNext+0x28>

0800b210 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b210:	4770      	bx	lr

0800b212 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b212:	4770      	bx	lr

0800b214 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b214:	4770      	bx	lr

0800b216 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b216:	4770      	bx	lr

0800b218 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b218:	2000      	movs	r0, #0
 800b21a:	4770      	bx	lr

0800b21c <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b21c:	4770      	bx	lr

0800b21e <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b21e:	4770      	bx	lr

0800b220 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b220:	4770      	bx	lr

0800b222 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b222:	2000      	movs	r0, #0
 800b224:	4770      	bx	lr

0800b226 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b226:	2000      	movs	r0, #0
 800b228:	4770      	bx	lr

0800b22a <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b22a:	2000      	movs	r0, #0
 800b22c:	4770      	bx	lr

0800b22e <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b22e:	2000      	movs	r0, #0
 800b230:	4770      	bx	lr

0800b232 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b232:	2000      	movs	r0, #0
 800b234:	4770      	bx	lr

0800b236 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b236:	4770      	bx	lr

0800b238 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b238:	4770      	bx	lr

0800b23a <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b23a:	4770      	bx	lr

0800b23c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b23c:	2002      	movs	r0, #2
 800b23e:	4770      	bx	lr

0800b240 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b240:	2002      	movs	r0, #2
 800b242:	4770      	bx	lr

0800b244 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b244:	2002      	movs	r0, #2
 800b246:	4770      	bx	lr

0800b248 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b248:	4770      	bx	lr

0800b24a <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b24a:	2000      	movs	r0, #0
 800b24c:	4770      	bx	lr

0800b24e <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b24e:	4770      	bx	lr

0800b250 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b250:	4770      	bx	lr

0800b252 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b252:	2000      	movs	r0, #0
 800b254:	4770      	bx	lr

0800b256 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b256:	2000      	movs	r0, #0
 800b258:	4770      	bx	lr

0800b25a <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b25a:	4770      	bx	lr

0800b25c <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b25c:	4770      	bx	lr

0800b25e <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b25e:	4770      	bx	lr

0800b260 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b260:	2300      	movs	r3, #0
 800b262:	2b0f      	cmp	r3, #15
 800b264:	d804      	bhi.n	800b270 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800b266:	5cc2      	ldrb	r2, [r0, r3]
 800b268:	b922      	cbnz	r2, 800b274 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b26a:	3301      	adds	r3, #1
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	e7f8      	b.n	800b262 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800b270:	2001      	movs	r0, #1
 800b272:	4770      	bx	lr
            return false;
 800b274:	2000      	movs	r0, #0
}
 800b276:	4770      	bx	lr

0800b278 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800b278:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800b27a:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b27c:	0125      	lsls	r5, r4, #4
 800b27e:	f105 0308 	add.w	r3, r5, #8
 800b282:	4d06      	ldr	r5, [pc, #24]	; (800b29c <MallocNewMacCommandSlot+0x24>)
 800b284:	441d      	add	r5, r3
 800b286:	4628      	mov	r0, r5
 800b288:	f7ff ffea 	bl	800b260 <IsSlotFree>
 800b28c:	b920      	cbnz	r0, 800b298 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800b28e:	3401      	adds	r4, #1
 800b290:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800b292:	2c20      	cmp	r4, #32
 800b294:	d1f2      	bne.n	800b27c <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800b296:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800b298:	4628      	mov	r0, r5
 800b29a:	bd38      	pop	{r3, r4, r5, pc}
 800b29c:	20000bec 	.word	0x20000bec

0800b2a0 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800b2a0:	b120      	cbz	r0, 800b2ac <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800b2a6:	6042      	str	r2, [r0, #4]

    return true;
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	4770      	bx	lr
        return false;
 800b2ac:	2000      	movs	r0, #0
}
 800b2ae:	4770      	bx	lr

0800b2b0 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	b160      	cbz	r0, 800b2ce <LinkedListAdd+0x1e>
 800b2b4:	b169      	cbz	r1, 800b2d2 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800b2b6:	6802      	ldr	r2, [r0, #0]
 800b2b8:	b13a      	cbz	r2, 800b2ca <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	b102      	cbz	r2, 800b2c0 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800b2be:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800b2c4:	6059      	str	r1, [r3, #4]

    return true;
 800b2c6:	2001      	movs	r0, #1
 800b2c8:	4770      	bx	lr
        list->First = element;
 800b2ca:	6001      	str	r1, [r0, #0]
 800b2cc:	e7f5      	b.n	800b2ba <LinkedListAdd+0xa>
        return false;
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	4770      	bx	lr
 800b2d2:	2000      	movs	r0, #0
}
 800b2d4:	4770      	bx	lr

0800b2d6 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b2d6:	b160      	cbz	r0, 800b2f2 <LinkedListGetPrevious+0x1c>
 800b2d8:	b161      	cbz	r1, 800b2f4 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800b2da:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800b2dc:	4281      	cmp	r1, r0
 800b2de:	d102      	bne.n	800b2e6 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800b2e0:	2000      	movs	r0, #0
    }

    return curElement;
}
 800b2e2:	4770      	bx	lr
            curElement = curElement->Next;
 800b2e4:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d0fb      	beq.n	800b2e2 <LinkedListGetPrevious+0xc>
 800b2ea:	6803      	ldr	r3, [r0, #0]
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	d1f9      	bne.n	800b2e4 <LinkedListGetPrevious+0xe>
 800b2f0:	4770      	bx	lr
 800b2f2:	4770      	bx	lr
        return NULL;
 800b2f4:	4608      	mov	r0, r1
 800b2f6:	4770      	bx	lr

0800b2f8 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b2f8:	b1b8      	cbz	r0, 800b32a <LinkedListRemove+0x32>
{
 800b2fa:	b538      	push	{r3, r4, r5, lr}
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800b300:	b1a9      	cbz	r1, 800b32e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800b302:	f7ff ffe8 	bl	800b2d6 <LinkedListGetPrevious>

    if( list->First == element )
 800b306:	682b      	ldr	r3, [r5, #0]
 800b308:	42a3      	cmp	r3, r4
 800b30a:	d009      	beq.n	800b320 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800b30c:	686b      	ldr	r3, [r5, #4]
 800b30e:	42a3      	cmp	r3, r4
 800b310:	d009      	beq.n	800b326 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800b312:	b108      	cbz	r0, 800b318 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800b314:	6823      	ldr	r3, [r4, #0]
 800b316:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800b318:	2300      	movs	r3, #0
 800b31a:	6023      	str	r3, [r4, #0]

    return true;
 800b31c:	2001      	movs	r0, #1
}
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	602b      	str	r3, [r5, #0]
 800b324:	e7f2      	b.n	800b30c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800b326:	6068      	str	r0, [r5, #4]
 800b328:	e7f3      	b.n	800b312 <LinkedListRemove+0x1a>
        return false;
 800b32a:	2000      	movs	r0, #0
}
 800b32c:	4770      	bx	lr
        return false;
 800b32e:	2000      	movs	r0, #0
 800b330:	e7f5      	b.n	800b31e <LinkedListRemove+0x26>
	...

0800b334 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800b334:	2811      	cmp	r0, #17
 800b336:	d808      	bhi.n	800b34a <IsSticky+0x16>
 800b338:	2301      	movs	r3, #1
 800b33a:	fa03 f000 	lsl.w	r0, r3, r0
 800b33e:	4b04      	ldr	r3, [pc, #16]	; (800b350 <IsSticky+0x1c>)
 800b340:	4218      	tst	r0, r3
 800b342:	bf14      	ite	ne
 800b344:	2001      	movne	r0, #1
 800b346:	2000      	moveq	r0, #0
 800b348:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800b34a:	2000      	movs	r0, #0
    }
}
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	00020720 	.word	0x00020720

0800b354 <FreeMacCommandSlot>:
    if( slot == NULL )
 800b354:	b130      	cbz	r0, 800b364 <FreeMacCommandSlot+0x10>
{
 800b356:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b358:	2210      	movs	r2, #16
 800b35a:	2100      	movs	r1, #0
 800b35c:	f003 ffef 	bl	800f33e <memset1>
    return true;
 800b360:	2001      	movs	r0, #1
}
 800b362:	bd08      	pop	{r3, pc}
        return false;
 800b364:	2000      	movs	r0, #0
}
 800b366:	4770      	bx	lr

0800b368 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800b368:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800b36a:	4c06      	ldr	r4, [pc, #24]	; (800b384 <LoRaMacCommandsInit+0x1c>)
 800b36c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800b370:	2100      	movs	r1, #0
 800b372:	4620      	mov	r0, r4
 800b374:	f003 ffe3 	bl	800f33e <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800b378:	4620      	mov	r0, r4
 800b37a:	f7ff ff91 	bl	800b2a0 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b37e:	2000      	movs	r0, #0
 800b380:	bd10      	pop	{r4, pc}
 800b382:	bf00      	nop
 800b384:	20000bec 	.word	0x20000bec

0800b388 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800b388:	b301      	cbz	r1, 800b3cc <LoRaMacCommandsAddCmd+0x44>
{
 800b38a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38c:	4605      	mov	r5, r0
 800b38e:	4614      	mov	r4, r2
 800b390:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800b392:	f7ff ff71 	bl	800b278 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800b396:	4606      	mov	r6, r0
 800b398:	b1d0      	cbz	r0, 800b3d0 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800b39a:	4601      	mov	r1, r0
 800b39c:	480e      	ldr	r0, [pc, #56]	; (800b3d8 <LoRaMacCommandsAddCmd+0x50>)
 800b39e:	f7ff ff87 	bl	800b2b0 <LinkedListAdd>
 800b3a2:	b1b8      	cbz	r0, 800b3d4 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800b3a4:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800b3a6:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b3a8:	b2a2      	uxth	r2, r4
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	1d70      	adds	r0, r6, #5
 800b3ae:	f003 ffae 	bl	800f30e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f7ff ffbe 	bl	800b334 <IsSticky>
 800b3b8:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b3ba:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <LoRaMacCommandsAddCmd+0x50>)
 800b3bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b3c0:	4414      	add	r4, r2
 800b3c2:	3401      	adds	r4, #1
 800b3c4:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800b3c8:	2000      	movs	r0, #0
}
 800b3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b3cc:	2001      	movs	r0, #1
}
 800b3ce:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b3d0:	2002      	movs	r0, #2
 800b3d2:	e7fa      	b.n	800b3ca <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800b3d4:	2005      	movs	r0, #5
 800b3d6:	e7f8      	b.n	800b3ca <LoRaMacCommandsAddCmd+0x42>
 800b3d8:	20000bec 	.word	0x20000bec

0800b3dc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800b3dc:	b1a0      	cbz	r0, 800b408 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800b3de:	b510      	push	{r4, lr}
 800b3e0:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	480b      	ldr	r0, [pc, #44]	; (800b414 <LoRaMacCommandsRemoveCmd+0x38>)
 800b3e6:	f7ff ff87 	bl	800b2f8 <LinkedListRemove>
 800b3ea:	b178      	cbz	r0, 800b40c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b3ec:	68a1      	ldr	r1, [r4, #8]
 800b3ee:	4a09      	ldr	r2, [pc, #36]	; (800b414 <LoRaMacCommandsRemoveCmd+0x38>)
 800b3f0:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800b3f4:	1a5b      	subs	r3, r3, r1
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f7ff ffa9 	bl	800b354 <FreeMacCommandSlot>
 800b402:	b128      	cbz	r0, 800b410 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b404:	2000      	movs	r0, #0
}
 800b406:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b408:	2001      	movs	r0, #1
}
 800b40a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b40c:	2003      	movs	r0, #3
 800b40e:	e7fa      	b.n	800b406 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800b410:	2005      	movs	r0, #5
 800b412:	e7f8      	b.n	800b406 <LoRaMacCommandsRemoveCmd+0x2a>
 800b414:	20000bec 	.word	0x20000bec

0800b418 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b418:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800b41a:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b41c:	b120      	cbz	r0, 800b428 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800b41e:	7b03      	ldrb	r3, [r0, #12]
 800b420:	b11b      	cbz	r3, 800b42a <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800b422:	6800      	ldr	r0, [r0, #0]
 800b424:	e7fa      	b.n	800b41c <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b426:	bd10      	pop	{r4, pc}
 800b428:	4770      	bx	lr
{
 800b42a:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800b42c:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800b42e:	f7ff ffd5 	bl	800b3dc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800b432:	4620      	mov	r0, r4
    while( curElement != NULL )
 800b434:	2800      	cmp	r0, #0
 800b436:	d0f6      	beq.n	800b426 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800b438:	7b03      	ldrb	r3, [r0, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0f6      	beq.n	800b42c <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800b43e:	6800      	ldr	r0, [r0, #0]
 800b440:	e7f8      	b.n	800b434 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800b442:	bf00      	nop
 800b444:	20000bec 	.word	0x20000bec

0800b448 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800b448:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b44a:	4b08      	ldr	r3, [pc, #32]	; (800b46c <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800b44c:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b44e:	e000      	b.n	800b452 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800b450:	462c      	mov	r4, r5
    while( curElement != NULL )
 800b452:	b14c      	cbz	r4, 800b468 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800b454:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800b456:	7920      	ldrb	r0, [r4, #4]
 800b458:	f7ff ff6c 	bl	800b334 <IsSticky>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d0f7      	beq.n	800b450 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800b460:	4620      	mov	r0, r4
 800b462:	f7ff ffbb 	bl	800b3dc <LoRaMacCommandsRemoveCmd>
 800b466:	e7f3      	b.n	800b450 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b468:	2000      	movs	r0, #0
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	20000bec 	.word	0x20000bec

0800b470 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800b470:	b128      	cbz	r0, 800b47e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800b472:	4a04      	ldr	r2, [pc, #16]	; (800b484 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b474:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800b478:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800b47a:	2000      	movs	r0, #0
 800b47c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b47e:	2001      	movs	r0, #1
}
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	20000bec 	.word	0x20000bec

0800b488 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800b488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800b48c:	4b16      	ldr	r3, [pc, #88]	; (800b4e8 <LoRaMacCommandsSerializeCmds+0x60>)
 800b48e:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b490:	b32a      	cbz	r2, 800b4de <LoRaMacCommandsSerializeCmds+0x56>
 800b492:	4607      	mov	r7, r0
 800b494:	4688      	mov	r8, r1
 800b496:	4616      	mov	r6, r2
 800b498:	b319      	cbz	r1, 800b4e2 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800b49a:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b49c:	b194      	cbz	r4, 800b4c4 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b49e:	1a7a      	subs	r2, r7, r1
 800b4a0:	68a3      	ldr	r3, [r4, #8]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d30d      	bcc.n	800b4c4 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800b4a8:	1c4d      	adds	r5, r1, #1
 800b4aa:	b2ed      	uxtb	r5, r5
 800b4ac:	7923      	ldrb	r3, [r4, #4]
 800b4ae:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b4b0:	8922      	ldrh	r2, [r4, #8]
 800b4b2:	1d61      	adds	r1, r4, #5
 800b4b4:	1970      	adds	r0, r6, r5
 800b4b6:	f003 ff2a 	bl	800f30e <memcpy1>
            itr += curElement->PayloadSize;
 800b4ba:	68a3      	ldr	r3, [r4, #8]
 800b4bc:	441d      	add	r5, r3
 800b4be:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800b4c0:	6824      	ldr	r4, [r4, #0]
 800b4c2:	e7eb      	b.n	800b49c <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800b4c4:	b12c      	cbz	r4, 800b4d2 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800b4c6:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f7ff ff87 	bl	800b3dc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800b4ce:	462c      	mov	r4, r5
 800b4d0:	e7f8      	b.n	800b4c4 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	f7ff ffcc 	bl	800b470 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b4d8:	2000      	movs	r0, #0
}
 800b4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b4de:	2001      	movs	r0, #1
 800b4e0:	e7fb      	b.n	800b4da <LoRaMacCommandsSerializeCmds+0x52>
 800b4e2:	2001      	movs	r0, #1
 800b4e4:	e7f9      	b.n	800b4da <LoRaMacCommandsSerializeCmds+0x52>
 800b4e6:	bf00      	nop
 800b4e8:	20000bec 	.word	0x20000bec

0800b4ec <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800b4ec:	4601      	mov	r1, r0
 800b4ee:	b170      	cbz	r0, 800b50e <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800b4f0:	4b08      	ldr	r3, [pc, #32]	; (800b514 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800b4f2:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b4f8:	b13b      	cbz	r3, 800b50a <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800b4fa:	7b1a      	ldrb	r2, [r3, #12]
 800b4fc:	b90a      	cbnz	r2, 800b502 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	e7fa      	b.n	800b4f8 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800b502:	2301      	movs	r3, #1
 800b504:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800b506:	2000      	movs	r0, #0
 800b508:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b50a:	2000      	movs	r0, #0
 800b50c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b50e:	2001      	movs	r0, #1
}
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	20000bec 	.word	0x20000bec

0800b518 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b518:	1e83      	subs	r3, r0, #2
 800b51a:	2b11      	cmp	r3, #17
 800b51c:	d80a      	bhi.n	800b534 <LoRaMacCommandsGetCmdSize+0x1c>
 800b51e:	e8df f003 	tbb	[pc, r3]
 800b522:	0b23      	.short	0x0b23
 800b524:	110f240d 	.word	0x110f240d
 800b528:	09171513 	.word	0x09171513
 800b52c:	09091909 	.word	0x09091909
 800b530:	211f1d1b 	.word	0x211f1d1b
 800b534:	2000      	movs	r0, #0
 800b536:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800b538:	2005      	movs	r0, #5
            break;
 800b53a:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800b53c:	2002      	movs	r0, #2
            break;
 800b53e:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800b540:	2001      	movs	r0, #1
            break;
 800b542:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800b544:	2006      	movs	r0, #6
            break;
 800b546:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800b548:	2002      	movs	r0, #2
            break;
 800b54a:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800b54c:	2002      	movs	r0, #2
            break;
 800b54e:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800b550:	2005      	movs	r0, #5
            break;
 800b552:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800b554:	2006      	movs	r0, #6
            break;
 800b556:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800b558:	2001      	movs	r0, #1
            break;
 800b55a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800b55c:	2005      	movs	r0, #5
            break;
 800b55e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800b560:	2004      	movs	r0, #4
            break;
 800b562:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800b564:	2004      	movs	r0, #4
            break;
 800b566:	4770      	bx	lr
            cidSize = 3;
 800b568:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b56a:	4770      	bx	lr

0800b56c <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b56c:	4b03      	ldr	r3, [pc, #12]	; (800b57c <IncreaseBufferPointer+0x10>)
 800b56e:	4298      	cmp	r0, r3
 800b570:	d001      	beq.n	800b576 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800b572:	3004      	adds	r0, #4
 800b574:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b576:	4802      	ldr	r0, [pc, #8]	; (800b580 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	20000e14 	.word	0x20000e14
 800b580:	20000e04 	.word	0x20000e04

0800b584 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800b584:	b108      	cbz	r0, 800b58a <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800b586:	2000      	movs	r0, #0
 800b588:	4770      	bx	lr
        return true;
 800b58a:	2001      	movs	r0, #1
}
 800b58c:	4770      	bx	lr

0800b58e <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b58e:	2804      	cmp	r0, #4
 800b590:	d801      	bhi.n	800b596 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800b592:	2000      	movs	r0, #0
 800b594:	4770      	bx	lr
        return true;
 800b596:	2001      	movs	r0, #1
}
 800b598:	4770      	bx	lr
	...

0800b59c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	4606      	mov	r6, r0
 800b5a0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b5a2:	4b0d      	ldr	r3, [pc, #52]	; (800b5d8 <GetElement+0x3c>)
 800b5a4:	f893 7020 	ldrb.w	r7, [r3, #32]
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	f7ff ffeb 	bl	800b584 <IsListEmpty>
 800b5ae:	b970      	cbnz	r0, 800b5ce <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b5b0:	2500      	movs	r5, #0
 800b5b2:	42af      	cmp	r7, r5
 800b5b4:	d909      	bls.n	800b5ca <GetElement+0x2e>
    {
        if( element->Request == request )
 800b5b6:	7823      	ldrb	r3, [r4, #0]
 800b5b8:	42b3      	cmp	r3, r6
 800b5ba:	d00a      	beq.n	800b5d2 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f7ff ffd5 	bl	800b56c <IncreaseBufferPointer>
 800b5c2:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b5c4:	3501      	adds	r5, #1
 800b5c6:	b2ed      	uxtb	r5, r5
 800b5c8:	e7f3      	b.n	800b5b2 <GetElement+0x16>
    }

    return NULL;
 800b5ca:	2000      	movs	r0, #0
}
 800b5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	e7fc      	b.n	800b5cc <GetElement+0x30>
            return element;
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	e7fa      	b.n	800b5cc <GetElement+0x30>
 800b5d6:	bf00      	nop
 800b5d8:	20000df8 	.word	0x20000df8

0800b5dc <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b5dc:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b5de:	4c08      	ldr	r4, [pc, #32]	; (800b600 <LoRaMacConfirmQueueInit+0x24>)
 800b5e0:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b5e8:	f104 000c 	add.w	r0, r4, #12
 800b5ec:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b5ee:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800b5f0:	2214      	movs	r2, #20
 800b5f2:	21ff      	movs	r1, #255	; 0xff
 800b5f4:	f003 fea3 	bl	800f33e <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800b5fe:	bd10      	pop	{r4, pc}
 800b600:	20000df8 	.word	0x20000df8

0800b604 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b608:	4b0f      	ldr	r3, [pc, #60]	; (800b648 <LoRaMacConfirmQueueAdd+0x44>)
 800b60a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b60e:	f7ff ffbe 	bl	800b58e <IsListFull>
 800b612:	b9b8      	cbnz	r0, 800b644 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b614:	4c0c      	ldr	r4, [pc, #48]	; (800b648 <LoRaMacConfirmQueueAdd+0x44>)
 800b616:	68a3      	ldr	r3, [r4, #8]
 800b618:	782a      	ldrb	r2, [r5, #0]
 800b61a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b61c:	68a3      	ldr	r3, [r4, #8]
 800b61e:	786a      	ldrb	r2, [r5, #1]
 800b620:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b622:	68a3      	ldr	r3, [r4, #8]
 800b624:	78ea      	ldrb	r2, [r5, #3]
 800b626:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800b628:	68a3      	ldr	r3, [r4, #8]
 800b62a:	78aa      	ldrb	r2, [r5, #2]
 800b62c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800b62e:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b632:	3301      	adds	r3, #1
 800b634:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b638:	68a0      	ldr	r0, [r4, #8]
 800b63a:	f7ff ff97 	bl	800b56c <IncreaseBufferPointer>
 800b63e:	60a0      	str	r0, [r4, #8]

    return true;
 800b640:	2001      	movs	r0, #1
}
 800b642:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b644:	2000      	movs	r0, #0
 800b646:	e7fc      	b.n	800b642 <LoRaMacConfirmQueueAdd+0x3e>
 800b648:	20000df8 	.word	0x20000df8

0800b64c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800b64c:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b64e:	4b09      	ldr	r3, [pc, #36]	; (800b674 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b650:	f893 4020 	ldrb.w	r4, [r3, #32]
 800b654:	4620      	mov	r0, r4
 800b656:	f7ff ff95 	bl	800b584 <IsListEmpty>
 800b65a:	b948      	cbnz	r0, 800b670 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800b65c:	4d05      	ldr	r5, [pc, #20]	; (800b674 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b65e:	3c01      	subs	r4, #1
 800b660:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b664:	6868      	ldr	r0, [r5, #4]
 800b666:	f7ff ff81 	bl	800b56c <IncreaseBufferPointer>
 800b66a:	6068      	str	r0, [r5, #4]

    return true;
 800b66c:	2001      	movs	r0, #1
}
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b670:	2000      	movs	r0, #0
 800b672:	e7fc      	b.n	800b66e <LoRaMacConfirmQueueRemoveFirst+0x22>
 800b674:	20000df8 	.word	0x20000df8

0800b678 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4605      	mov	r5, r0
 800b67c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b67e:	4b08      	ldr	r3, [pc, #32]	; (800b6a0 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b680:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b684:	f7ff ff7e 	bl	800b584 <IsListEmpty>
 800b688:	b948      	cbnz	r0, 800b69e <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b68a:	4b05      	ldr	r3, [pc, #20]	; (800b6a0 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b68c:	689a      	ldr	r2, [r3, #8]
 800b68e:	6859      	ldr	r1, [r3, #4]
 800b690:	4620      	mov	r0, r4
 800b692:	f7ff ff83 	bl	800b59c <GetElement>
        if( element != NULL )
 800b696:	b110      	cbz	r0, 800b69e <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800b698:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800b69a:	2201      	movs	r2, #1
 800b69c:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800b69e:	bd38      	pop	{r3, r4, r5, pc}
 800b6a0:	20000df8 	.word	0x20000df8

0800b6a4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b6a4:	b510      	push	{r4, lr}
 800b6a6:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b6a8:	4b09      	ldr	r3, [pc, #36]	; (800b6d0 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b6aa:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b6ae:	f7ff ff69 	bl	800b584 <IsListEmpty>
 800b6b2:	b940      	cbnz	r0, 800b6c6 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b6b4:	4b06      	ldr	r3, [pc, #24]	; (800b6d0 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b6b6:	689a      	ldr	r2, [r3, #8]
 800b6b8:	6859      	ldr	r1, [r3, #4]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f7ff ff6e 	bl	800b59c <GetElement>
        if( element != NULL )
 800b6c0:	b118      	cbz	r0, 800b6ca <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800b6c2:	7840      	ldrb	r0, [r0, #1]
 800b6c4:	e000      	b.n	800b6c8 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b6c6:	2001      	movs	r0, #1
}
 800b6c8:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	e7fc      	b.n	800b6c8 <LoRaMacConfirmQueueGetStatus+0x24>
 800b6ce:	bf00      	nop
 800b6d0:	20000df8 	.word	0x20000df8

0800b6d4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b6d8:	4b0c      	ldr	r3, [pc, #48]	; (800b70c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b6da:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800b6dc:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b6e0:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b6e4:	f7ff ff4e 	bl	800b584 <IsListEmpty>
 800b6e8:	b150      	cbz	r0, 800b700 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f7ff ff3b 	bl	800b56c <IncreaseBufferPointer>
 800b6f6:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b6f8:	4b04      	ldr	r3, [pc, #16]	; (800b70c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	4283      	cmp	r3, r0
 800b6fe:	d0f4      	beq.n	800b6ea <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800b700:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800b702:	78e3      	ldrb	r3, [r4, #3]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1f3      	bne.n	800b6f0 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800b708:	e7f0      	b.n	800b6ec <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800b70a:	bf00      	nop
 800b70c:	20000df8 	.word	0x20000df8

0800b710 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800b710:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b712:	4b04      	ldr	r3, [pc, #16]	; (800b724 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800b714:	689a      	ldr	r2, [r3, #8]
 800b716:	6859      	ldr	r1, [r3, #4]
 800b718:	f7ff ff40 	bl	800b59c <GetElement>
 800b71c:	b100      	cbz	r0, 800b720 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800b71e:	2001      	movs	r0, #1
    }
    return false;
}
 800b720:	bd08      	pop	{r3, pc}
 800b722:	bf00      	nop
 800b724:	20000df8 	.word	0x20000df8

0800b728 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800b728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b72a:	b083      	sub	sp, #12
 800b72c:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800b72e:	4b16      	ldr	r3, [pc, #88]	; (800b788 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b730:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800b734:	2400      	movs	r4, #0
 800b736:	e00d      	b.n	800b754 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800b738:	781a      	ldrb	r2, [r3, #0]
 800b73a:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800b73e:	785a      	ldrb	r2, [r3, #1]
 800b740:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800b744:	78db      	ldrb	r3, [r3, #3]
 800b746:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800b74a:	f7ff ff7f 	bl	800b64c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800b74e:	b1a5      	cbz	r5, 800b77a <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800b750:	3401      	adds	r4, #1
 800b752:	b2e4      	uxtb	r4, r4
 800b754:	42bc      	cmp	r4, r7
 800b756:	d214      	bcs.n	800b782 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800b758:	4b0b      	ldr	r3, [pc, #44]	; (800b788 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b75a:	685a      	ldr	r2, [r3, #4]
 800b75c:	7812      	ldrb	r2, [r2, #0]
 800b75e:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800b760:	685a      	ldr	r2, [r3, #4]
 800b762:	7852      	ldrb	r2, [r2, #1]
 800b764:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800b76a:	2d00      	cmp	r5, #0
 800b76c:	d0e4      	beq.n	800b738 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800b76e:	4b06      	ldr	r3, [pc, #24]	; (800b788 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	4630      	mov	r0, r6
 800b776:	4798      	blx	r3
 800b778:	e7e7      	b.n	800b74a <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800b77a:	a801      	add	r0, sp, #4
 800b77c:	f7ff ff42 	bl	800b604 <LoRaMacConfirmQueueAdd>
 800b780:	e7e6      	b.n	800b750 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800b782:	b003      	add	sp, #12
 800b784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b786:	bf00      	nop
 800b788:	20000df8 	.word	0x20000df8

0800b78c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800b78c:	4b01      	ldr	r3, [pc, #4]	; (800b794 <LoRaMacConfirmQueueGetCnt+0x8>)
 800b78e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b792:	4770      	bx	lr
 800b794:	20000df8 	.word	0x20000df8

0800b798 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800b798:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b79a:	4b03      	ldr	r3, [pc, #12]	; (800b7a8 <LoRaMacConfirmQueueIsFull+0x10>)
 800b79c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b7a0:	f7ff fef5 	bl	800b58e <IsListFull>
    }
    else
    {
        return false;
    }
}
 800b7a4:	bd08      	pop	{r3, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20000df8 	.word	0x20000df8

0800b7ac <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800b7ac:	b410      	push	{r4}
 800b7ae:	9c01      	ldr	r4, [sp, #4]
 800b7b0:	9902      	ldr	r1, [sp, #8]
 800b7b2:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800b7b4:	b1da      	cbz	r2, 800b7ee <PrepareB0+0x42>
 800b7b6:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800b7b8:	2049      	movs	r0, #73	; 0x49
 800b7ba:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800b7bc:	2000      	movs	r0, #0
 800b7be:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800b7c0:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800b7c2:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800b7c4:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800b7c6:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800b7c8:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b7ca:	0a23      	lsrs	r3, r4, #8
 800b7cc:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b7ce:	0c23      	lsrs	r3, r4, #16
 800b7d0:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b7d2:	0e24      	lsrs	r4, r4, #24
 800b7d4:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800b7d6:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b7d8:	0a0b      	lsrs	r3, r1, #8
 800b7da:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b7dc:	0c0b      	lsrs	r3, r1, #16
 800b7de:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b7e0:	0e09      	lsrs	r1, r1, #24
 800b7e2:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800b7e4:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800b7e6:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b7ea:	bc10      	pop	{r4}
 800b7ec:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b7ee:	2009      	movs	r0, #9
 800b7f0:	e7fb      	b.n	800b7ea <PrepareB0+0x3e>
	...

0800b7f4 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d80e      	bhi.n	800b818 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800b7fa:	469c      	mov	ip, r3
 800b7fc:	4a07      	ldr	r2, [pc, #28]	; (800b81c <GetKeyAddrItem+0x28>)
 800b7fe:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800b802:	4282      	cmp	r2, r0
 800b804:	d002      	beq.n	800b80c <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b806:	3301      	adds	r3, #1
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	e7f4      	b.n	800b7f6 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800b80c:	4b03      	ldr	r3, [pc, #12]	; (800b81c <GetKeyAddrItem+0x28>)
 800b80e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800b812:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800b814:	2000      	movs	r0, #0
 800b816:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b818:	200b      	movs	r0, #11
}
 800b81a:	4770      	bx	lr
 800b81c:	20000100 	.word	0x20000100

0800b820 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800b820:	460b      	mov	r3, r1
 800b822:	2900      	cmp	r1, #0
 800b824:	d024      	beq.n	800b870 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800b826:	3801      	subs	r0, #1
 800b828:	2803      	cmp	r0, #3
 800b82a:	d823      	bhi.n	800b874 <GetLastFcntDown+0x54>
 800b82c:	e8df f000 	tbb	[pc, r0]
 800b830:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800b834:	4a10      	ldr	r2, [pc, #64]	; (800b878 <GetLastFcntDown+0x58>)
 800b836:	6812      	ldr	r2, [r2, #0]
 800b838:	6911      	ldr	r1, [r2, #16]
 800b83a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800b83c:	6913      	ldr	r3, [r2, #16]
 800b83e:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800b840:	2000      	movs	r0, #0
            break;
 800b842:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800b844:	4a0c      	ldr	r2, [pc, #48]	; (800b878 <GetLastFcntDown+0x58>)
 800b846:	6812      	ldr	r2, [r2, #0]
 800b848:	6951      	ldr	r1, [r2, #20]
 800b84a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800b84c:	6953      	ldr	r3, [r2, #20]
 800b84e:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b850:	2000      	movs	r0, #0
            break;
 800b852:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800b854:	4a08      	ldr	r2, [pc, #32]	; (800b878 <GetLastFcntDown+0x58>)
 800b856:	6812      	ldr	r2, [r2, #0]
 800b858:	6991      	ldr	r1, [r2, #24]
 800b85a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b85c:	6993      	ldr	r3, [r2, #24]
 800b85e:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b860:	2000      	movs	r0, #0
            break;
 800b862:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800b864:	4a04      	ldr	r2, [pc, #16]	; (800b878 <GetLastFcntDown+0x58>)
 800b866:	6812      	ldr	r2, [r2, #0]
 800b868:	69d2      	ldr	r2, [r2, #28]
 800b86a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b86c:	2000      	movs	r0, #0
            break;
 800b86e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b870:	2009      	movs	r0, #9
 800b872:	4770      	bx	lr
    switch( fCntID )
 800b874:	2005      	movs	r0, #5
}
 800b876:	4770      	bx	lr
 800b878:	20000e1c 	.word	0x20000e1c

0800b87c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800b87c:	b510      	push	{r4, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800b886:	a901      	add	r1, sp, #4
 800b888:	f7ff ffca 	bl	800b820 <GetLastFcntDown>
 800b88c:	b948      	cbnz	r0, 800b8a2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	42a3      	cmp	r3, r4
 800b892:	d309      	bcc.n	800b8a8 <CheckFCntDown+0x2c>
 800b894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b898:	d001      	beq.n	800b89e <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800b89a:	2000      	movs	r0, #0
 800b89c:	e002      	b.n	800b8a4 <CheckFCntDown+0x28>
        return true;
 800b89e:	2001      	movs	r0, #1
 800b8a0:	e000      	b.n	800b8a4 <CheckFCntDown+0x28>
        return false;
 800b8a2:	2000      	movs	r0, #0
    }
}
 800b8a4:	b002      	add	sp, #8
 800b8a6:	bd10      	pop	{r4, pc}
        return true;
 800b8a8:	2001      	movs	r0, #1
 800b8aa:	e7fb      	b.n	800b8a4 <CheckFCntDown+0x28>

0800b8ac <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800b8ac:	3801      	subs	r0, #1
 800b8ae:	2803      	cmp	r0, #3
 800b8b0:	d812      	bhi.n	800b8d8 <UpdateFCntDown+0x2c>
 800b8b2:	e8df f000 	tbb	[pc, r0]
 800b8b6:	0602      	.short	0x0602
 800b8b8:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800b8ba:	4b08      	ldr	r3, [pc, #32]	; (800b8dc <UpdateFCntDown+0x30>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6119      	str	r1, [r3, #16]
            break;
 800b8c0:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800b8c2:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <UpdateFCntDown+0x30>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	6159      	str	r1, [r3, #20]
            break;
 800b8c8:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800b8ca:	4b04      	ldr	r3, [pc, #16]	; (800b8dc <UpdateFCntDown+0x30>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	6199      	str	r1, [r3, #24]
            break;
 800b8d0:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800b8d2:	4b02      	ldr	r3, [pc, #8]	; (800b8dc <UpdateFCntDown+0x30>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	20000e1c 	.word	0x20000e1c

0800b8e0 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800b8e0:	4b0a      	ldr	r3, [pc, #40]	; (800b90c <ResetFCnts+0x2c>)
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b8e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b8ec:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b8ee:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800b8f0:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b8f2:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	dd00      	ble.n	800b8fa <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800b8f8:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800b8fa:	1d99      	adds	r1, r3, #6
 800b8fc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b900:	f04f 30ff 	mov.w	r0, #4294967295
 800b904:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b906:	3301      	adds	r3, #1
 800b908:	e7f4      	b.n	800b8f4 <ResetFCnts+0x14>
 800b90a:	bf00      	nop
 800b90c:	20000e1c 	.word	0x20000e1c

0800b910 <ComputeCmacB0>:
{
 800b910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b914:	b088      	sub	sp, #32
 800b916:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800b918:	b1f0      	cbz	r0, 800b958 <ComputeCmacB0+0x48>
 800b91a:	460c      	mov	r4, r1
 800b91c:	4615      	mov	r5, r2
 800b91e:	461a      	mov	r2, r3
 800b920:	4680      	mov	r8, r0
 800b922:	b1de      	cbz	r6, 800b95c <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b924:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b928:	d81a      	bhi.n	800b960 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b92a:	af04      	add	r7, sp, #16
 800b92c:	9702      	str	r7, [sp, #8]
 800b92e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800b93a:	4629      	mov	r1, r5
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7ff ff35 	bl	800b7ac <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800b942:	9600      	str	r6, [sp, #0]
 800b944:	462b      	mov	r3, r5
 800b946:	4622      	mov	r2, r4
 800b948:	4641      	mov	r1, r8
 800b94a:	4638      	mov	r0, r7
 800b94c:	f003 fb87 	bl	800f05e <SecureElementComputeAesCmac>
 800b950:	b940      	cbnz	r0, 800b964 <ComputeCmacB0+0x54>
}
 800b952:	b008      	add	sp, #32
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b958:	2009      	movs	r0, #9
 800b95a:	e7fa      	b.n	800b952 <ComputeCmacB0+0x42>
 800b95c:	2009      	movs	r0, #9
 800b95e:	e7f8      	b.n	800b952 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b960:	200d      	movs	r0, #13
 800b962:	e7f6      	b.n	800b952 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b964:	200e      	movs	r0, #14
 800b966:	e7f4      	b.n	800b952 <ComputeCmacB0+0x42>

0800b968 <DeriveSessionKey10x>:
{
 800b968:	b510      	push	{r4, lr}
 800b96a:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800b96c:	2400      	movs	r4, #0
 800b96e:	9400      	str	r4, [sp, #0]
 800b970:	9401      	str	r4, [sp, #4]
 800b972:	9402      	str	r4, [sp, #8]
 800b974:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800b976:	2802      	cmp	r0, #2
 800b978:	d003      	beq.n	800b982 <DeriveSessionKey10x+0x1a>
 800b97a:	2803      	cmp	r0, #3
 800b97c:	d025      	beq.n	800b9ca <DeriveSessionKey10x+0x62>
 800b97e:	200a      	movs	r0, #10
 800b980:	e021      	b.n	800b9c6 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800b982:	2401      	movs	r4, #1
 800b984:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800b988:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800b98c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b990:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800b994:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800b998:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800b99c:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800b9a0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b9a4:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800b9a8:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800b9ac:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800b9b0:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800b9b4:	0a1b      	lsrs	r3, r3, #8
 800b9b6:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	2101      	movs	r1, #1
 800b9be:	4668      	mov	r0, sp
 800b9c0:	f003 fbec 	bl	800f19c <SecureElementDeriveAndStoreKey>
 800b9c4:	b928      	cbnz	r0, 800b9d2 <DeriveSessionKey10x+0x6a>
}
 800b9c6:	b004      	add	sp, #16
 800b9c8:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800b9ca:	2402      	movs	r4, #2
 800b9cc:	f88d 4000 	strb.w	r4, [sp]
            break;
 800b9d0:	e7da      	b.n	800b988 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b9d2:	200e      	movs	r0, #14
 800b9d4:	e7f7      	b.n	800b9c6 <DeriveSessionKey10x+0x5e>

0800b9d6 <PayloadEncrypt>:
{
 800b9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	4690      	mov	r8, r2
 800b9de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d052      	beq.n	800ba8a <PayloadEncrypt+0xb4>
 800b9e4:	460d      	mov	r5, r1
 800b9e6:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800b9e8:	2600      	movs	r6, #0
 800b9ea:	9604      	str	r6, [sp, #16]
 800b9ec:	9605      	str	r6, [sp, #20]
 800b9ee:	9606      	str	r6, [sp, #24]
 800b9f0:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800b9f2:	9600      	str	r6, [sp, #0]
 800b9f4:	9601      	str	r6, [sp, #4]
 800b9f6:	9602      	str	r6, [sp, #8]
 800b9f8:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800b9fa:	2701      	movs	r7, #1
 800b9fc:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800ba00:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800ba04:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800ba08:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800ba0c:	0a19      	lsrs	r1, r3, #8
 800ba0e:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800ba12:	0c19      	lsrs	r1, r3, #16
 800ba14:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800ba18:	0e1b      	lsrs	r3, r3, #24
 800ba1a:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800ba1e:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800ba22:	0a13      	lsrs	r3, r2, #8
 800ba24:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800ba28:	0c13      	lsrs	r3, r2, #16
 800ba2a:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800ba2e:	0e12      	lsrs	r2, r2, #24
 800ba30:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800ba34:	e014      	b.n	800ba60 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800ba36:	18f2      	adds	r2, r6, r3
 800ba38:	5ca0      	ldrb	r0, [r4, r2]
 800ba3a:	f103 0120 	add.w	r1, r3, #32
 800ba3e:	4469      	add	r1, sp
 800ba40:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800ba44:	4048      	eors	r0, r1
 800ba46:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800ba48:	3301      	adds	r3, #1
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	462a      	mov	r2, r5
 800ba4e:	2d10      	cmp	r5, #16
 800ba50:	bfa8      	it	ge
 800ba52:	2210      	movge	r2, #16
 800ba54:	4293      	cmp	r3, r2
 800ba56:	dbee      	blt.n	800ba36 <PayloadEncrypt+0x60>
        size -= 16;
 800ba58:	3d10      	subs	r5, #16
 800ba5a:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800ba5c:	3610      	adds	r6, #16
 800ba5e:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800ba60:	2d00      	cmp	r5, #0
 800ba62:	dd0e      	ble.n	800ba82 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800ba64:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800ba68:	3701      	adds	r7, #1
 800ba6a:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800ba6c:	ab04      	add	r3, sp, #16
 800ba6e:	4642      	mov	r2, r8
 800ba70:	2110      	movs	r1, #16
 800ba72:	4668      	mov	r0, sp
 800ba74:	f003 fb18 	bl	800f0a8 <SecureElementAesEncrypt>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d0e6      	beq.n	800ba4c <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba7e:	200e      	movs	r0, #14
 800ba80:	e000      	b.n	800ba84 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800ba82:	2000      	movs	r0, #0
}
 800ba84:	b008      	add	sp, #32
 800ba86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba8a:	2009      	movs	r0, #9
 800ba8c:	e7fa      	b.n	800ba84 <PayloadEncrypt+0xae>

0800ba8e <VerifyCmacB0>:
    if( msg == 0 )
 800ba8e:	b370      	cbz	r0, 800baee <VerifyCmacB0+0x60>
{
 800ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba94:	b0c8      	sub	sp, #288	; 0x120
 800ba96:	460c      	mov	r4, r1
 800ba98:	4615      	mov	r5, r2
 800ba9a:	461e      	mov	r6, r3
 800ba9c:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ba9e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800baa2:	d826      	bhi.n	800baf2 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800baa4:	af04      	add	r7, sp, #16
 800baa6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800baaa:	2100      	movs	r1, #0
 800baac:	4638      	mov	r0, r7
 800baae:	f003 fc46 	bl	800f33e <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800bab2:	9702      	str	r7, [sp, #8]
 800bab4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800bab6:	9301      	str	r3, [sp, #4]
 800bab8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800bac0:	4632      	mov	r2, r6
 800bac2:	4629      	mov	r1, r5
 800bac4:	4620      	mov	r0, r4
 800bac6:	f7ff fe71 	bl	800b7ac <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800baca:	4622      	mov	r2, r4
 800bacc:	4641      	mov	r1, r8
 800bace:	a808      	add	r0, sp, #32
 800bad0:	f003 fc1d 	bl	800f30e <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800bad4:	f104 0110 	add.w	r1, r4, #16
 800bad8:	462b      	mov	r3, r5
 800bada:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800badc:	b289      	uxth	r1, r1
 800bade:	4638      	mov	r0, r7
 800bae0:	f003 facc 	bl	800f07c <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800bae4:	b130      	cbz	r0, 800baf4 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800bae6:	2801      	cmp	r0, #1
 800bae8:	d004      	beq.n	800baf4 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800baea:	200e      	movs	r0, #14
 800baec:	e002      	b.n	800baf4 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800baee:	2009      	movs	r0, #9
}
 800baf0:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800baf2:	200d      	movs	r0, #13
}
 800baf4:	b048      	add	sp, #288	; 0x120
 800baf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800bafc <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800bafc:	b188      	cbz	r0, 800bb22 <LoRaMacCryptoInit+0x26>
{
 800bafe:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800bb00:	4c09      	ldr	r4, [pc, #36]	; (800bb28 <LoRaMacCryptoInit+0x2c>)
 800bb02:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800bb04:	2228      	movs	r2, #40	; 0x28
 800bb06:	2100      	movs	r1, #0
 800bb08:	f003 fc19 	bl	800f33e <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800bb12:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800bb14:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800bb16:	2400      	movs	r4, #0
 800bb18:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800bb1a:	f7ff fee1 	bl	800b8e0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800bb1e:	4620      	mov	r0, r4
}
 800bb20:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800bb22:	2008      	movs	r0, #8
}
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	20000e1c 	.word	0x20000e1c

0800bb2c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800bb2c:	4b02      	ldr	r3, [pc, #8]	; (800bb38 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800bb32:	2000      	movs	r0, #0
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	20000e1c 	.word	0x20000e1c

0800bb3c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800bb3c:	b130      	cbz	r0, 800bb4c <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800bb3e:	4b04      	ldr	r3, [pc, #16]	; (800bb50 <LoRaMacCryptoGetFCntUp+0x14>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	3301      	adds	r3, #1
 800bb46:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800bb48:	2000      	movs	r0, #0
 800bb4a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb4c:	2009      	movs	r0, #9
}
 800bb4e:	4770      	bx	lr
 800bb50:	20000e1c 	.word	0x20000e1c

0800bb54 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800bb54:	b530      	push	{r4, r5, lr}
 800bb56:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800bb5c:	b1f2      	cbz	r2, 800bb9c <LoRaMacCryptoGetFCntDown+0x48>
 800bb5e:	460c      	mov	r4, r1
 800bb60:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800bb62:	a901      	add	r1, sp, #4
 800bb64:	f7ff fe5c 	bl	800b820 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bb68:	b948      	cbnz	r0, 800bb7e <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800bb6a:	9b01      	ldr	r3, [sp, #4]
 800bb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb70:	d007      	beq.n	800bb82 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800bb76:	2a00      	cmp	r2, #0
 800bb78:	dd05      	ble.n	800bb86 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800bb7a:	4413      	add	r3, r2
 800bb7c:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bb7e:	b003      	add	sp, #12
 800bb80:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800bb82:	602c      	str	r4, [r5, #0]
 800bb84:	e7fb      	b.n	800bb7e <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800bb86:	b132      	cbz	r2, 800bb96 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800bb88:	0c1b      	lsrs	r3, r3, #16
 800bb8a:	041b      	lsls	r3, r3, #16
 800bb8c:	4423      	add	r3, r4
 800bb8e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bb92:	602b      	str	r3, [r5, #0]
 800bb94:	e7f3      	b.n	800bb7e <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800bb96:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800bb98:	2007      	movs	r0, #7
 800bb9a:	e7f0      	b.n	800bb7e <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb9c:	2009      	movs	r0, #9
 800bb9e:	e7ee      	b.n	800bb7e <LoRaMacCryptoGetFCntDown+0x2a>

0800bba0 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800bba0:	4601      	mov	r1, r0
 800bba2:	b908      	cbnz	r0, 800bba8 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bba4:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bba6:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bba8:	2300      	movs	r3, #0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dd01      	ble.n	800bbb2 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800bbae:	2000      	movs	r0, #0
 800bbb0:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800bbb2:	4a06      	ldr	r2, [pc, #24]	; (800bbcc <LoRaMacCryptoSetMulticastReference+0x2c>)
 800bbb4:	6812      	ldr	r2, [r2, #0]
 800bbb6:	202c      	movs	r0, #44	; 0x2c
 800bbb8:	fb00 1003 	mla	r0, r0, r3, r1
 800bbbc:	f103 0c06 	add.w	ip, r3, #6
 800bbc0:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800bbc4:	3204      	adds	r2, #4
 800bbc6:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bbc8:	3301      	adds	r3, #1
 800bbca:	e7ee      	b.n	800bbaa <LoRaMacCryptoSetMulticastReference+0xa>
 800bbcc:	20000e1c 	.word	0x20000e1c

0800bbd0 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800bbd0:	b1d8      	cbz	r0, 800bc0a <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800bbd2:	b510      	push	{r4, lr}
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800bbd8:	4b0f      	ldr	r3, [pc, #60]	; (800bc18 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	8893      	ldrh	r3, [r2, #4]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800bbe4:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bbe6:	f000 fa2e 	bl	800c046 <LoRaMacSerializerJoinRequest>
 800bbea:	b980      	cbnz	r0, 800bc0e <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bbec:	4623      	mov	r3, r4
 800bbee:	f853 1b18 	ldr.w	r1, [r3], #24
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	2213      	movs	r2, #19
 800bbf8:	f003 fa31 	bl	800f05e <SecureElementComputeAesCmac>
 800bbfc:	b950      	cbnz	r0, 800bc14 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f000 fa21 	bl	800c046 <LoRaMacSerializerJoinRequest>
 800bc04:	b120      	cbz	r0, 800bc10 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bc06:	2010      	movs	r0, #16
 800bc08:	e002      	b.n	800bc10 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc0a:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bc0c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bc0e:	2010      	movs	r0, #16
}
 800bc10:	b002      	add	sp, #8
 800bc12:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bc14:	200e      	movs	r0, #14
 800bc16:	e7fb      	b.n	800bc10 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800bc18:	20000e1c 	.word	0x20000e1c

0800bc1c <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d036      	beq.n	800bc8e <LoRaMacCryptoSecureMessage+0x72>
{
 800bc20:	b530      	push	{r4, r5, lr}
 800bc22:	b085      	sub	sp, #20
 800bc24:	4604      	mov	r4, r0
 800bc26:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800bc28:	4b1d      	ldr	r3, [pc, #116]	; (800bca0 <LoRaMacCryptoSecureMessage+0x84>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	4283      	cmp	r3, r0
 800bc30:	d82f      	bhi.n	800bc92 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800bc32:	f895 2020 	ldrb.w	r2, [r5, #32]
 800bc36:	b342      	cbz	r2, 800bc8a <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800bc38:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	d209      	bcs.n	800bc52 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800bc3e:	9401      	str	r4, [sp, #4]
 800bc40:	2300      	movs	r3, #0
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	68ab      	ldr	r3, [r5, #8]
 800bc46:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800bc4a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bc4c:	f7ff fec3 	bl	800b9d6 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bc50:	bb10      	cbnz	r0, 800bc98 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bc52:	4628      	mov	r0, r5
 800bc54:	f000 fa2d 	bl	800c0b2 <LoRaMacSerializerData>
 800bc58:	b9e8      	cbnz	r0, 800bc96 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bc5a:	7929      	ldrb	r1, [r5, #4]
 800bc5c:	3904      	subs	r1, #4
 800bc5e:	462b      	mov	r3, r5
 800bc60:	f853 0b2c 	ldr.w	r0, [r3], #44
 800bc64:	9303      	str	r3, [sp, #12]
 800bc66:	9402      	str	r4, [sp, #8]
 800bc68:	68ab      	ldr	r3, [r5, #8]
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	2202      	movs	r2, #2
 800bc72:	b289      	uxth	r1, r1
 800bc74:	f7ff fe4c 	bl	800b910 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bc78:	b970      	cbnz	r0, 800bc98 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	f000 fa19 	bl	800c0b2 <LoRaMacSerializerData>
 800bc80:	b960      	cbnz	r0, 800bc9c <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800bc82:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <LoRaMacCryptoSecureMessage+0x84>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800bc88:	e006      	b.n	800bc98 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800bc8a:	2202      	movs	r2, #2
 800bc8c:	e7d5      	b.n	800bc3a <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc8e:	2009      	movs	r0, #9
}
 800bc90:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bc92:	2006      	movs	r0, #6
 800bc94:	e000      	b.n	800bc98 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bc96:	2010      	movs	r0, #16
}
 800bc98:	b005      	add	sp, #20
 800bc9a:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bc9c:	2010      	movs	r0, #16
 800bc9e:	e7fb      	b.n	800bc98 <LoRaMacCryptoSecureMessage+0x7c>
 800bca0:	20000e1c 	.word	0x20000e1c

0800bca4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800bca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bca8:	b087      	sub	sp, #28
 800bcaa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800bcac:	2e00      	cmp	r6, #0
 800bcae:	d049      	beq.n	800bd44 <LoRaMacCryptoUnsecureMessage+0xa0>
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	4688      	mov	r8, r1
 800bcb4:	4617      	mov	r7, r2
 800bcb6:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4610      	mov	r0, r2
 800bcbc:	f7ff fdde 	bl	800b87c <CheckFCntDown>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d041      	beq.n	800bd48 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f000 f95f 	bl	800bf88 <LoRaMacParserData>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d141      	bne.n	800bd52 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800bcce:	a905      	add	r1, sp, #20
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	f7ff fd8f 	bl	800b7f4 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bcd6:	4605      	mov	r5, r0
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d136      	bne.n	800bd4a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800bcdc:	9b05      	ldr	r3, [sp, #20]
 800bcde:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800bce2:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800bce4:	68b3      	ldr	r3, [r6, #8]
 800bce6:	4543      	cmp	r3, r8
 800bce8:	d135      	bne.n	800bd56 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800bcea:	7b33      	ldrb	r3, [r6, #12]
 800bcec:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800bcf0:	491a      	ldr	r1, [pc, #104]	; (800bd5c <LoRaMacCryptoUnsecureMessage+0xb8>)
 800bcf2:	6809      	ldr	r1, [r1, #0]
 800bcf4:	7889      	ldrb	r1, [r1, #2]
 800bcf6:	b901      	cbnz	r1, 800bcfa <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800bcf8:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800bcfa:	7931      	ldrb	r1, [r6, #4]
 800bcfc:	3904      	subs	r1, #4
 800bcfe:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800bd00:	9003      	str	r0, [sp, #12]
 800bd02:	9402      	str	r4, [sp, #8]
 800bd04:	f8cd 8004 	str.w	r8, [sp, #4]
 800bd08:	2001      	movs	r0, #1
 800bd0a:	9000      	str	r0, [sp, #0]
 800bd0c:	b289      	uxth	r1, r1
 800bd0e:	6830      	ldr	r0, [r6, #0]
 800bd10:	f7ff febd 	bl	800ba8e <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bd14:	4605      	mov	r5, r0
 800bd16:	b9c0      	cbnz	r0, 800bd4a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800bd18:	f896 3020 	ldrb.w	r3, [r6, #32]
 800bd1c:	b90b      	cbnz	r3, 800bd22 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800bd1e:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800bd22:	9401      	str	r4, [sp, #4]
 800bd24:	2301      	movs	r3, #1
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	4643      	mov	r3, r8
 800bd2a:	464a      	mov	r2, r9
 800bd2c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800bd30:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800bd32:	f7ff fe50 	bl	800b9d6 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bd36:	4605      	mov	r5, r0
 800bd38:	b938      	cbnz	r0, 800bd4a <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	4638      	mov	r0, r7
 800bd3e:	f7ff fdb5 	bl	800b8ac <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800bd42:	e002      	b.n	800bd4a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd44:	2509      	movs	r5, #9
 800bd46:	e000      	b.n	800bd4a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bd48:	2506      	movs	r5, #6
}
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	b007      	add	sp, #28
 800bd4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bd52:	250f      	movs	r5, #15
 800bd54:	e7f9      	b.n	800bd4a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800bd56:	2502      	movs	r5, #2
 800bd58:	e7f7      	b.n	800bd4a <LoRaMacCryptoUnsecureMessage+0xa6>
 800bd5a:	bf00      	nop
 800bd5c:	20000e1c 	.word	0x20000e1c

0800bd60 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800bd60:	b9b1      	cbnz	r1, 800bd90 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800bd62:	b500      	push	{lr}
 800bd64:	b085      	sub	sp, #20
 800bd66:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800bd68:	2300      	movs	r3, #0
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	9302      	str	r3, [sp, #8]
 800bd70:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800bd72:	2801      	cmp	r0, #1
 800bd74:	d008      	beq.n	800bd88 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800bd76:	2204      	movs	r2, #4
 800bd78:	4661      	mov	r1, ip
 800bd7a:	4668      	mov	r0, sp
 800bd7c:	f003 fa0e 	bl	800f19c <SecureElementDeriveAndStoreKey>
 800bd80:	b940      	cbnz	r0, 800bd94 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bd82:	b005      	add	sp, #20
 800bd84:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800bd88:	2320      	movs	r3, #32
 800bd8a:	f88d 3000 	strb.w	r3, [sp]
 800bd8e:	e7f2      	b.n	800bd76 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800bd90:	200a      	movs	r0, #10
}
 800bd92:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bd94:	200e      	movs	r0, #14
 800bd96:	e7f4      	b.n	800bd82 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800bd98 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800bd98:	2804      	cmp	r0, #4
 800bd9a:	d001      	beq.n	800bda0 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800bd9c:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bd9e:	4770      	bx	lr
{
 800bda0:	b500      	push	{lr}
 800bda2:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800bda4:	2300      	movs	r3, #0
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	9302      	str	r3, [sp, #8]
 800bdac:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800bdae:	227f      	movs	r2, #127	; 0x7f
 800bdb0:	4601      	mov	r1, r0
 800bdb2:	4668      	mov	r0, sp
 800bdb4:	f003 f9f2 	bl	800f19c <SecureElementDeriveAndStoreKey>
 800bdb8:	b910      	cbnz	r0, 800bdc0 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800bdba:	b005      	add	sp, #20
 800bdbc:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdc0:	200e      	movs	r0, #14
 800bdc2:	e7fa      	b.n	800bdba <LoRaMacCryptoDeriveMcKEKey+0x22>

0800bdc4 <LoRaMacCryptoSetKey>:
{
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800bdc8:	f003 f9a6 	bl	800f118 <SecureElementSetKey>
 800bdcc:	b978      	cbnz	r0, 800bdee <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800bdce:	b104      	cbz	r4, 800bdd2 <LoRaMacCryptoSetKey+0xe>
}
 800bdd0:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800bdd2:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <LoRaMacCryptoSetKey+0x34>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	7898      	ldrb	r0, [r3, #2]
 800bdda:	f7ff ffc1 	bl	800bd60 <LoRaMacCryptoDeriveMcRootKey>
 800bdde:	b940      	cbnz	r0, 800bdf2 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bde0:	2004      	movs	r0, #4
 800bde2:	f7ff ffd9 	bl	800bd98 <LoRaMacCryptoDeriveMcKEKey>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d0f2      	beq.n	800bdd0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdea:	200e      	movs	r0, #14
 800bdec:	e7f0      	b.n	800bdd0 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdee:	200e      	movs	r0, #14
 800bdf0:	e7ee      	b.n	800bdd0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdf2:	200e      	movs	r0, #14
 800bdf4:	e7ec      	b.n	800bdd0 <LoRaMacCryptoSetKey+0xc>
 800bdf6:	bf00      	nop
 800bdf8:	20000e1c 	.word	0x20000e1c

0800bdfc <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800bdfc:	2a00      	cmp	r2, #0
 800bdfe:	d064      	beq.n	800beca <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800be00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be02:	b08f      	sub	sp, #60	; 0x3c
 800be04:	4607      	mov	r7, r0
 800be06:	460d      	mov	r5, r1
 800be08:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800be0a:	2900      	cmp	r1, #0
 800be0c:	d05f      	beq.n	800bece <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800be0e:	2600      	movs	r6, #0
 800be10:	9605      	str	r6, [sp, #20]
 800be12:	221d      	movs	r2, #29
 800be14:	4631      	mov	r1, r6
 800be16:	a806      	add	r0, sp, #24
 800be18:	f005 fefa 	bl	8011c10 <memset>
    uint8_t versionMinor         = 0;
 800be1c:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800be20:	4b2f      	ldr	r3, [pc, #188]	; (800bee0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800be26:	f10d 0313 	add.w	r3, sp, #19
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	ab05      	add	r3, sp, #20
 800be2e:	9301      	str	r3, [sp, #4]
 800be30:	7923      	ldrb	r3, [r4, #4]
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	4632      	mov	r2, r6
 800be38:	4629      	mov	r1, r5
 800be3a:	4638      	mov	r0, r7
 800be3c:	f003 f9ce 	bl	800f1dc <SecureElementProcessJoinAccept>
 800be40:	2800      	cmp	r0, #0
 800be42:	d146      	bne.n	800bed2 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800be44:	7922      	ldrb	r2, [r4, #4]
 800be46:	a905      	add	r1, sp, #20
 800be48:	6820      	ldr	r0, [r4, #0]
 800be4a:	f003 fa60 	bl	800f30e <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800be4e:	4620      	mov	r0, r4
 800be50:	f000 f848 	bl	800bee4 <LoRaMacParserJoinAccept>
 800be54:	2800      	cmp	r0, #0
 800be56:	d13f      	bne.n	800bed8 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800be58:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800be5a:	79e3      	ldrb	r3, [r4, #7]
 800be5c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800be60:	7a23      	ldrb	r3, [r4, #8]
 800be62:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800be66:	4b1e      	ldr	r3, [pc, #120]	; (800bee0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	689a      	ldr	r2, [r3, #8]
 800be6c:	42aa      	cmp	r2, r5
 800be6e:	d035      	beq.n	800bedc <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800be70:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800be72:	2100      	movs	r1, #0
 800be74:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800be78:	f7ff ff72 	bl	800bd60 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be7c:	bb50      	cbnz	r0, 800bed4 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800be7e:	2004      	movs	r0, #4
 800be80:	f7ff ff8a 	bl	800bd98 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be84:	bb30      	cbnz	r0, 800bed4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800be86:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800be88:	7aa2      	ldrb	r2, [r4, #10]
 800be8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800be8e:	7ae4      	ldrb	r4, [r4, #11]
 800be90:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800be94:	4633      	mov	r3, r6
 800be96:	4622      	mov	r2, r4
 800be98:	4629      	mov	r1, r5
 800be9a:	2003      	movs	r0, #3
 800be9c:	f7ff fd64 	bl	800b968 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bea0:	b9c0      	cbnz	r0, 800bed4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800bea2:	4633      	mov	r3, r6
 800bea4:	4622      	mov	r2, r4
 800bea6:	4629      	mov	r1, r5
 800bea8:	2002      	movs	r0, #2
 800beaa:	f7ff fd5d 	bl	800b968 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800beae:	b988      	cbnz	r0, 800bed4 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800beb0:	4b0b      	ldr	r3, [pc, #44]	; (800bee0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800beb8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800beba:	2200      	movs	r2, #0
 800bebc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800bebe:	f04f 32ff 	mov.w	r2, #4294967295
 800bec2:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bec4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bec6:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800bec8:	e004      	b.n	800bed4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800beca:	2009      	movs	r0, #9
}
 800becc:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bece:	2009      	movs	r0, #9
 800bed0:	e000      	b.n	800bed4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bed2:	200e      	movs	r0, #14
}
 800bed4:	b00f      	add	sp, #60	; 0x3c
 800bed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bed8:	200f      	movs	r0, #15
 800beda:	e7fb      	b.n	800bed4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800bedc:	2003      	movs	r0, #3
 800bede:	e7f9      	b.n	800bed4 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800bee0:	20000e1c 	.word	0x20000e1c

0800bee4 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d049      	beq.n	800bf7c <LoRaMacParserJoinAccept+0x98>
{
 800bee8:	b510      	push	{r4, lr}
 800beea:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800beec:	6801      	ldr	r1, [r0, #0]
 800beee:	2900      	cmp	r1, #0
 800bef0:	d046      	beq.n	800bf80 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bef6:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800bef8:	2203      	movs	r2, #3
 800befa:	3006      	adds	r0, #6
 800befc:	f003 fa07 	bl	800f30e <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800bf00:	4620      	mov	r0, r4
 800bf02:	f850 1b09 	ldr.w	r1, [r0], #9
 800bf06:	2203      	movs	r2, #3
 800bf08:	3104      	adds	r1, #4
 800bf0a:	f003 fa00 	bl	800f30e <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800bf0e:	6821      	ldr	r1, [r4, #0]
 800bf10:	79cb      	ldrb	r3, [r1, #7]
 800bf12:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bf14:	7a0a      	ldrb	r2, [r1, #8]
 800bf16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bf1a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bf1c:	7a4a      	ldrb	r2, [r1, #9]
 800bf1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf22:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bf24:	7a8a      	ldrb	r2, [r1, #10]
 800bf26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bf2a:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800bf2c:	7acb      	ldrb	r3, [r1, #11]
 800bf2e:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800bf30:	7b0b      	ldrb	r3, [r1, #12]
 800bf32:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800bf34:	7923      	ldrb	r3, [r4, #4]
 800bf36:	2b21      	cmp	r3, #33	; 0x21
 800bf38:	d018      	beq.n	800bf6c <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800bf3a:	2b11      	cmp	r3, #17
 800bf3c:	dc22      	bgt.n	800bf84 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800bf3e:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800bf40:	6821      	ldr	r1, [r4, #0]
 800bf42:	f102 0c01 	add.w	ip, r2, #1
 800bf46:	5c8b      	ldrb	r3, [r1, r2]
 800bf48:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bf4a:	1c90      	adds	r0, r2, #2
 800bf4c:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800bf50:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800bf54:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bf56:	3203      	adds	r2, #3
 800bf58:	5c08      	ldrb	r0, [r1, r0]
 800bf5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf5e:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bf60:	5c8a      	ldrb	r2, [r1, r2]
 800bf62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bf66:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800bf68:	2000      	movs	r0, #0
}
 800bf6a:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800bf6c:	2210      	movs	r2, #16
 800bf6e:	310d      	adds	r1, #13
 800bf70:	f104 0012 	add.w	r0, r4, #18
 800bf74:	f003 f9cb 	bl	800f30e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800bf78:	221d      	movs	r2, #29
 800bf7a:	e7e1      	b.n	800bf40 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800bf7c:	2002      	movs	r0, #2
}
 800bf7e:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800bf80:	2002      	movs	r0, #2
 800bf82:	e7f2      	b.n	800bf6a <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800bf84:	2001      	movs	r0, #1
 800bf86:	e7f0      	b.n	800bf6a <LoRaMacParserJoinAccept+0x86>

0800bf88 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d058      	beq.n	800c03e <LoRaMacParserData+0xb6>
{
 800bf8c:	b510      	push	{r4, lr}
 800bf8e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bf90:	6801      	ldr	r1, [r0, #0]
 800bf92:	2900      	cmp	r1, #0
 800bf94:	d055      	beq.n	800c042 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bf96:	780b      	ldrb	r3, [r1, #0]
 800bf98:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800bf9a:	784b      	ldrb	r3, [r1, #1]
 800bf9c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bf9e:	788a      	ldrb	r2, [r1, #2]
 800bfa0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bfa4:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800bfa6:	78ca      	ldrb	r2, [r1, #3]
 800bfa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfac:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800bfae:	790a      	ldrb	r2, [r1, #4]
 800bfb0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bfb4:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800bfb6:	794b      	ldrb	r3, [r1, #5]
 800bfb8:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800bfba:	798b      	ldrb	r3, [r1, #6]
 800bfbc:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800bfbe:	79ca      	ldrb	r2, [r1, #7]
 800bfc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bfc4:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800bfc6:	7b02      	ldrb	r2, [r0, #12]
 800bfc8:	f002 020f 	and.w	r2, r2, #15
 800bfcc:	3108      	adds	r1, #8
 800bfce:	3010      	adds	r0, #16
 800bfd0:	f003 f99d 	bl	800f30e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bfd4:	7b23      	ldrb	r3, [r4, #12]
 800bfd6:	f003 030f 	and.w	r3, r3, #15
 800bfda:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800bfe4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800bfe8:	7922      	ldrb	r2, [r4, #4]
 800bfea:	1a11      	subs	r1, r2, r0
 800bfec:	2904      	cmp	r1, #4
 800bfee:	dc16      	bgt.n	800c01e <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800bff0:	6822      	ldr	r2, [r4, #0]
 800bff2:	7923      	ldrb	r3, [r4, #4]
 800bff4:	441a      	add	r2, r3
 800bff6:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800bffa:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800bffc:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800c000:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c004:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c006:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800c00a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c00e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c010:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800c014:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c018:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800c01a:	2000      	movs	r0, #0
}
 800c01c:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c01e:	6821      	ldr	r1, [r4, #0]
 800c020:	3309      	adds	r3, #9
 800c022:	5c08      	ldrb	r0, [r1, r0]
 800c024:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c028:	1ad2      	subs	r2, r2, r3
 800c02a:	b2d2      	uxtb	r2, r2
 800c02c:	3a04      	subs	r2, #4
 800c02e:	b2d2      	uxtb	r2, r2
 800c030:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c034:	4419      	add	r1, r3
 800c036:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c038:	f003 f969 	bl	800f30e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800c03c:	e7d8      	b.n	800bff0 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800c03e:	2002      	movs	r0, #2
}
 800c040:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c042:	2002      	movs	r0, #2
 800c044:	e7ea      	b.n	800c01c <LoRaMacParserData+0x94>

0800c046 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c046:	b370      	cbz	r0, 800c0a6 <LoRaMacSerializerJoinRequest+0x60>
{
 800c048:	b510      	push	{r4, lr}
 800c04a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c04c:	6803      	ldr	r3, [r0, #0]
 800c04e:	b363      	cbz	r3, 800c0aa <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c050:	7902      	ldrb	r2, [r0, #4]
 800c052:	2a16      	cmp	r2, #22
 800c054:	d92b      	bls.n	800c0ae <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c056:	7942      	ldrb	r2, [r0, #5]
 800c058:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c05a:	4601      	mov	r1, r0
 800c05c:	f851 0b06 	ldr.w	r0, [r1], #6
 800c060:	2208      	movs	r2, #8
 800c062:	3001      	adds	r0, #1
 800c064:	f003 f95e 	bl	800f324 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c068:	4621      	mov	r1, r4
 800c06a:	f851 0b0e 	ldr.w	r0, [r1], #14
 800c06e:	2208      	movs	r2, #8
 800c070:	3009      	adds	r0, #9
 800c072:	f003 f957 	bl	800f324 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c076:	8ae2      	ldrh	r2, [r4, #22]
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c07c:	8ae3      	ldrh	r3, [r4, #22]
 800c07e:	6822      	ldr	r2, [r4, #0]
 800c080:	0a1b      	lsrs	r3, r3, #8
 800c082:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c084:	69a2      	ldr	r2, [r4, #24]
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c08a:	69a3      	ldr	r3, [r4, #24]
 800c08c:	0a1b      	lsrs	r3, r3, #8
 800c08e:	6822      	ldr	r2, [r4, #0]
 800c090:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c092:	8b62      	ldrh	r2, [r4, #26]
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c098:	7ee2      	ldrb	r2, [r4, #27]
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800c09e:	2317      	movs	r3, #23
 800c0a0:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c0a2:	2000      	movs	r0, #0
}
 800c0a4:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c0a6:	2001      	movs	r0, #1
}
 800c0a8:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c0aa:	2001      	movs	r0, #1
 800c0ac:	e7fa      	b.n	800c0a4 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c0ae:	2002      	movs	r0, #2
 800c0b0:	e7f8      	b.n	800c0a4 <LoRaMacSerializerJoinRequest+0x5e>

0800c0b2 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d066      	beq.n	800c184 <LoRaMacSerializerData+0xd2>
{
 800c0b6:	b538      	push	{r3, r4, r5, lr}
 800c0b8:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c0ba:	6801      	ldr	r1, [r0, #0]
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	d063      	beq.n	800c188 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c0c0:	7b02      	ldrb	r2, [r0, #12]
 800c0c2:	f002 020f 	and.w	r2, r2, #15
 800c0c6:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c0ca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c0ce:	b10b      	cbz	r3, 800c0d4 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800c0d0:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800c0d4:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800c0da:	7922      	ldrb	r2, [r4, #4]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d355      	bcc.n	800c18c <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c0e0:	7963      	ldrb	r3, [r4, #5]
 800c0e2:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c0e4:	68a2      	ldr	r2, [r4, #8]
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c0ea:	68a3      	ldr	r3, [r4, #8]
 800c0ec:	0a1b      	lsrs	r3, r3, #8
 800c0ee:	6822      	ldr	r2, [r4, #0]
 800c0f0:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c0f2:	8962      	ldrh	r2, [r4, #10]
 800c0f4:	6823      	ldr	r3, [r4, #0]
 800c0f6:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c0f8:	7ae2      	ldrb	r2, [r4, #11]
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	7b22      	ldrb	r2, [r4, #12]
 800c102:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c104:	89e2      	ldrh	r2, [r4, #14]
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c10a:	89e3      	ldrh	r3, [r4, #14]
 800c10c:	6822      	ldr	r2, [r4, #0]
 800c10e:	0a1b      	lsrs	r3, r3, #8
 800c110:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c112:	4621      	mov	r1, r4
 800c114:	f851 0b10 	ldr.w	r0, [r1], #16
 800c118:	7b22      	ldrb	r2, [r4, #12]
 800c11a:	f002 020f 	and.w	r2, r2, #15
 800c11e:	3008      	adds	r0, #8
 800c120:	f003 f8f5 	bl	800f30e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c124:	7b23      	ldrb	r3, [r4, #12]
 800c126:	f003 030f 	and.w	r3, r3, #15
 800c12a:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c12e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c132:	b12a      	cbz	r2, 800c140 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c134:	6822      	ldr	r2, [r4, #0]
 800c136:	f894 1020 	ldrb.w	r1, [r4, #32]
 800c13a:	5551      	strb	r1, [r2, r5]
 800c13c:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c140:	6820      	ldr	r0, [r4, #0]
 800c142:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c146:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c148:	4428      	add	r0, r5
 800c14a:	f003 f8e0 	bl	800f30e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c14e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c152:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c154:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c156:	6821      	ldr	r1, [r4, #0]
 800c158:	1c5a      	adds	r2, r3, #1
 800c15a:	b292      	uxth	r2, r2
 800c15c:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c15e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c160:	0a08      	lsrs	r0, r1, #8
 800c162:	6825      	ldr	r5, [r4, #0]
 800c164:	1c99      	adds	r1, r3, #2
 800c166:	b289      	uxth	r1, r1
 800c168:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c16a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800c16c:	6820      	ldr	r0, [r4, #0]
 800c16e:	1cda      	adds	r2, r3, #3
 800c170:	b292      	uxth	r2, r2
 800c172:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c174:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800c178:	6821      	ldr	r1, [r4, #0]
 800c17a:	3304      	adds	r3, #4
 800c17c:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800c17e:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c180:	2000      	movs	r0, #0
}
 800c182:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c184:	2001      	movs	r0, #1
}
 800c186:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c188:	2001      	movs	r0, #1
 800c18a:	e7fa      	b.n	800c182 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c18c:	2002      	movs	r0, #2
 800c18e:	e7f8      	b.n	800c182 <LoRaMacSerializerData+0xd0>

0800c190 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800c190:	4b02      	ldr	r3, [pc, #8]	; (800c19c <NvmDataMgmtEvent+0xc>)
 800c192:	881a      	ldrh	r2, [r3, #0]
 800c194:	4310      	orrs	r0, r2
 800c196:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	20000e20 	.word	0x20000e20

0800c1a0 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800c1a0:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800c1a2:	4b06      	ldr	r3, [pc, #24]	; (800c1bc <NvmDataMgmtStoreBegin+0x1c>)
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	b11b      	cbz	r3, 800c1b0 <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800c1a8:	f7fe f914 	bl	800a3d4 <LoRaMacStop>
 800c1ac:	b918      	cbnz	r0, 800c1b6 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c1ae:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800c1b0:	f06f 0001 	mvn.w	r0, #1
 800c1b4:	e7fb      	b.n	800c1ae <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800c1b6:	f06f 0002 	mvn.w	r0, #2
 800c1ba:	e7f8      	b.n	800c1ae <NvmDataMgmtStoreBegin+0xe>
 800c1bc:	20000e20 	.word	0x20000e20

0800c1c0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800c1c0:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c1c2:	2400      	movs	r4, #0
 800c1c4:	4b02      	ldr	r3, [pc, #8]	; (800c1d0 <NvmDataMgmtStoreEnd+0x10>)
 800c1c6:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800c1c8:	f7fe f8fc 	bl	800a3c4 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	bd10      	pop	{r4, pc}
 800c1d0:	20000e20 	.word	0x20000e20

0800c1d4 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c1d4:	2805      	cmp	r0, #5
 800c1d6:	d005      	beq.n	800c1e4 <RegionIsActive+0x10>
 800c1d8:	2808      	cmp	r0, #8
 800c1da:	d001      	beq.n	800c1e0 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800c1dc:	2000      	movs	r0, #0
        }
    }
}
 800c1de:	4770      	bx	lr
    switch( region )
 800c1e0:	2001      	movs	r0, #1
 800c1e2:	4770      	bx	lr
 800c1e4:	2001      	movs	r0, #1
 800c1e6:	4770      	bx	lr

0800c1e8 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c1e8:	b500      	push	{lr}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	9200      	str	r2, [sp, #0]
    switch( region )
 800c1f4:	2b05      	cmp	r3, #5
 800c1f6:	d004      	beq.n	800c202 <RegionGetPhyParam+0x1a>
 800c1f8:	2b08      	cmp	r3, #8
 800c1fa:	d009      	beq.n	800c210 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800c1fc:	9b00      	ldr	r3, [sp, #0]
 800c1fe:	9301      	str	r3, [sp, #4]
 800c200:	e002      	b.n	800c208 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800c202:	f000 fdeb 	bl	800cddc <RegionEU868GetPhyParam>
 800c206:	9001      	str	r0, [sp, #4]
        }
    }
}
 800c208:	9801      	ldr	r0, [sp, #4]
 800c20a:	b003      	add	sp, #12
 800c20c:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800c210:	f001 fbd6 	bl	800d9c0 <RegionUS915GetPhyParam>
 800c214:	9001      	str	r0, [sp, #4]
 800c216:	e7f7      	b.n	800c208 <RegionGetPhyParam+0x20>

0800c218 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800c218:	b508      	push	{r3, lr}
 800c21a:	4603      	mov	r3, r0
 800c21c:	4608      	mov	r0, r1
    switch( region )
 800c21e:	2b05      	cmp	r3, #5
 800c220:	d002      	beq.n	800c228 <RegionSetBandTxDone+0x10>
 800c222:	2b08      	cmp	r3, #8
 800c224:	d003      	beq.n	800c22e <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800c226:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800c228:	f000 fe94 	bl	800cf54 <RegionEU868SetBandTxDone>
 800c22c:	e7fb      	b.n	800c226 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800c22e:	f001 fc9d 	bl	800db6c <RegionUS915SetBandTxDone>
 800c232:	e7f8      	b.n	800c226 <RegionSetBandTxDone+0xe>

0800c234 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800c234:	b508      	push	{r3, lr}
 800c236:	4603      	mov	r3, r0
 800c238:	4608      	mov	r0, r1
    switch( region )
 800c23a:	2b05      	cmp	r3, #5
 800c23c:	d002      	beq.n	800c244 <RegionInitDefaults+0x10>
 800c23e:	2b08      	cmp	r3, #8
 800c240:	d003      	beq.n	800c24a <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800c242:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800c244:	f000 fea4 	bl	800cf90 <RegionEU868InitDefaults>
 800c248:	e7fb      	b.n	800c242 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800c24a:	f001 fcad 	bl	800dba8 <RegionUS915InitDefaults>
}
 800c24e:	e7f8      	b.n	800c242 <RegionInitDefaults+0xe>

0800c250 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c250:	b508      	push	{r3, lr}
 800c252:	4603      	mov	r3, r0
 800c254:	4608      	mov	r0, r1
 800c256:	4611      	mov	r1, r2
    switch( region )
 800c258:	2b05      	cmp	r3, #5
 800c25a:	d003      	beq.n	800c264 <RegionVerify+0x14>
 800c25c:	2b08      	cmp	r3, #8
 800c25e:	d004      	beq.n	800c26a <RegionVerify+0x1a>
 800c260:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c262:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800c264:	f000 ff00 	bl	800d068 <RegionEU868Verify>
 800c268:	e7fb      	b.n	800c262 <RegionVerify+0x12>
        US915_VERIFY( );
 800c26a:	f001 fd41 	bl	800dcf0 <RegionUS915Verify>
 800c26e:	e7f8      	b.n	800c262 <RegionVerify+0x12>

0800c270 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800c270:	b508      	push	{r3, lr}
 800c272:	4603      	mov	r3, r0
 800c274:	4608      	mov	r0, r1
    switch( region )
 800c276:	2b05      	cmp	r3, #5
 800c278:	d002      	beq.n	800c280 <RegionApplyCFList+0x10>
 800c27a:	2b08      	cmp	r3, #8
 800c27c:	d003      	beq.n	800c286 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800c27e:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800c280:	f001 fac0 	bl	800d804 <RegionEU868ApplyCFList>
 800c284:	e7fb      	b.n	800c27e <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800c286:	f001 fd6d 	bl	800dd64 <RegionUS915ApplyCFList>
}
 800c28a:	e7f8      	b.n	800c27e <RegionApplyCFList+0xe>

0800c28c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800c28c:	b508      	push	{r3, lr}
 800c28e:	4603      	mov	r3, r0
 800c290:	4608      	mov	r0, r1
    switch( region )
 800c292:	2b05      	cmp	r3, #5
 800c294:	d003      	beq.n	800c29e <RegionChanMaskSet+0x12>
 800c296:	2b08      	cmp	r3, #8
 800c298:	d004      	beq.n	800c2a4 <RegionChanMaskSet+0x18>
 800c29a:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c29c:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800c29e:	f000 ff29 	bl	800d0f4 <RegionEU868ChanMaskSet>
 800c2a2:	e7fb      	b.n	800c29c <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800c2a4:	f001 fd9c 	bl	800dde0 <RegionUS915ChanMaskSet>
 800c2a8:	e7f8      	b.n	800c29c <RegionChanMaskSet+0x10>

0800c2aa <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c2aa:	b508      	push	{r3, lr}
 800c2ac:	4684      	mov	ip, r0
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	461a      	mov	r2, r3
    switch( region )
 800c2b4:	f1bc 0f05 	cmp.w	ip, #5
 800c2b8:	d003      	beq.n	800c2c2 <RegionComputeRxWindowParameters+0x18>
 800c2ba:	f1bc 0f08 	cmp.w	ip, #8
 800c2be:	d004      	beq.n	800c2ca <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800c2c0:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c2c2:	9b02      	ldr	r3, [sp, #8]
 800c2c4:	f000 ff34 	bl	800d130 <RegionEU868ComputeRxWindowParameters>
 800c2c8:	e7fa      	b.n	800c2c0 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c2ca:	9b02      	ldr	r3, [sp, #8]
 800c2cc:	f001 fdca 	bl	800de64 <RegionUS915ComputeRxWindowParameters>
}
 800c2d0:	e7f6      	b.n	800c2c0 <RegionComputeRxWindowParameters+0x16>

0800c2d2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c2d2:	b508      	push	{r3, lr}
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	4608      	mov	r0, r1
 800c2d8:	4611      	mov	r1, r2
    switch( region )
 800c2da:	2b05      	cmp	r3, #5
 800c2dc:	d003      	beq.n	800c2e6 <RegionRxConfig+0x14>
 800c2de:	2b08      	cmp	r3, #8
 800c2e0:	d004      	beq.n	800c2ec <RegionRxConfig+0x1a>
 800c2e2:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c2e4:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800c2e6:	f000 ff59 	bl	800d19c <RegionEU868RxConfig>
 800c2ea:	e7fb      	b.n	800c2e4 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800c2ec:	f001 fde8 	bl	800dec0 <RegionUS915RxConfig>
 800c2f0:	e7f8      	b.n	800c2e4 <RegionRxConfig+0x12>

0800c2f2 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c2f2:	b508      	push	{r3, lr}
 800c2f4:	4684      	mov	ip, r0
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	461a      	mov	r2, r3
    switch( region )
 800c2fc:	f1bc 0f05 	cmp.w	ip, #5
 800c300:	d004      	beq.n	800c30c <RegionTxConfig+0x1a>
 800c302:	f1bc 0f08 	cmp.w	ip, #8
 800c306:	d004      	beq.n	800c312 <RegionTxConfig+0x20>
 800c308:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c30a:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800c30c:	f000 ffca 	bl	800d2a4 <RegionEU868TxConfig>
 800c310:	e7fb      	b.n	800c30a <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800c312:	f001 fe2f 	bl	800df74 <RegionUS915TxConfig>
 800c316:	e7f8      	b.n	800c30a <RegionTxConfig+0x18>

0800c318 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c318:	b500      	push	{lr}
 800c31a:	b083      	sub	sp, #12
 800c31c:	4684      	mov	ip, r0
 800c31e:	4608      	mov	r0, r1
 800c320:	4611      	mov	r1, r2
 800c322:	461a      	mov	r2, r3
    switch( region )
 800c324:	f1bc 0f05 	cmp.w	ip, #5
 800c328:	d006      	beq.n	800c338 <RegionLinkAdrReq+0x20>
 800c32a:	f1bc 0f08 	cmp.w	ip, #8
 800c32e:	d009      	beq.n	800c344 <RegionLinkAdrReq+0x2c>
 800c330:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c332:	b003      	add	sp, #12
 800c334:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800c338:	9b05      	ldr	r3, [sp, #20]
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	9b04      	ldr	r3, [sp, #16]
 800c33e:	f001 f849 	bl	800d3d4 <RegionEU868LinkAdrReq>
 800c342:	e7f6      	b.n	800c332 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800c344:	9b05      	ldr	r3, [sp, #20]
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	9b04      	ldr	r3, [sp, #16]
 800c34a:	f001 fe8d 	bl	800e068 <RegionUS915LinkAdrReq>
 800c34e:	e7f0      	b.n	800c332 <RegionLinkAdrReq+0x1a>

0800c350 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c350:	b508      	push	{r3, lr}
 800c352:	4603      	mov	r3, r0
 800c354:	4608      	mov	r0, r1
    switch( region )
 800c356:	2b05      	cmp	r3, #5
 800c358:	d003      	beq.n	800c362 <RegionRxParamSetupReq+0x12>
 800c35a:	2b08      	cmp	r3, #8
 800c35c:	d004      	beq.n	800c368 <RegionRxParamSetupReq+0x18>
 800c35e:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c360:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800c362:	f001 f8fb 	bl	800d55c <RegionEU868RxParamSetupReq>
 800c366:	e7fb      	b.n	800c360 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800c368:	f001 ffc0 	bl	800e2ec <RegionUS915RxParamSetupReq>
 800c36c:	e7f8      	b.n	800c360 <RegionRxParamSetupReq+0x10>

0800c36e <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800c36e:	b508      	push	{r3, lr}
 800c370:	4603      	mov	r3, r0
 800c372:	4608      	mov	r0, r1
    switch( region )
 800c374:	2b05      	cmp	r3, #5
 800c376:	d003      	beq.n	800c380 <RegionNewChannelReq+0x12>
 800c378:	2b08      	cmp	r3, #8
 800c37a:	d004      	beq.n	800c386 <RegionNewChannelReq+0x18>
 800c37c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c37e:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800c380:	f001 fa81 	bl	800d886 <RegionEU868NewChannelReq>
 800c384:	e7fb      	b.n	800c37e <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800c386:	f001 ffdc 	bl	800e342 <RegionUS915NewChannelReq>
 800c38a:	e7f8      	b.n	800c37e <RegionNewChannelReq+0x10>

0800c38c <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800c38c:	b508      	push	{r3, lr}
 800c38e:	4603      	mov	r3, r0
 800c390:	4608      	mov	r0, r1
    switch( region )
 800c392:	2b05      	cmp	r3, #5
 800c394:	d003      	beq.n	800c39e <RegionTxParamSetupReq+0x12>
 800c396:	2b08      	cmp	r3, #8
 800c398:	d004      	beq.n	800c3a4 <RegionTxParamSetupReq+0x18>
 800c39a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c39c:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800c39e:	f001 f901 	bl	800d5a4 <RegionEU868TxParamSetupReq>
 800c3a2:	e7fb      	b.n	800c39c <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800c3a4:	f001 ffd0 	bl	800e348 <RegionUS915TxParamSetupReq>
 800c3a8:	e7f8      	b.n	800c39c <RegionTxParamSetupReq+0x10>

0800c3aa <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800c3aa:	b508      	push	{r3, lr}
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	4608      	mov	r0, r1
    switch( region )
 800c3b0:	2b05      	cmp	r3, #5
 800c3b2:	d003      	beq.n	800c3bc <RegionDlChannelReq+0x12>
 800c3b4:	2b08      	cmp	r3, #8
 800c3b6:	d004      	beq.n	800c3c2 <RegionDlChannelReq+0x18>
 800c3b8:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c3ba:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800c3bc:	f001 f8f6 	bl	800d5ac <RegionEU868DlChannelReq>
 800c3c0:	e7fb      	b.n	800c3ba <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800c3c2:	f001 ffc4 	bl	800e34e <RegionUS915DlChannelReq>
 800c3c6:	e7f8      	b.n	800c3ba <RegionDlChannelReq+0x10>

0800c3c8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c3c8:	b508      	push	{r3, lr}
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	4608      	mov	r0, r1
 800c3ce:	4611      	mov	r1, r2
    switch( region )
 800c3d0:	2b05      	cmp	r3, #5
 800c3d2:	d003      	beq.n	800c3dc <RegionAlternateDr+0x14>
 800c3d4:	2b08      	cmp	r3, #8
 800c3d6:	d004      	beq.n	800c3e2 <RegionAlternateDr+0x1a>
 800c3d8:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c3da:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800c3dc:	f001 f90e 	bl	800d5fc <RegionEU868AlternateDr>
 800c3e0:	e7fb      	b.n	800c3da <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800c3e2:	f001 ffb7 	bl	800e354 <RegionUS915AlternateDr>
 800c3e6:	e7f8      	b.n	800c3da <RegionAlternateDr+0x12>

0800c3e8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c3e8:	b508      	push	{r3, lr}
 800c3ea:	4684      	mov	ip, r0
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	461a      	mov	r2, r3
    switch( region )
 800c3f2:	f1bc 0f05 	cmp.w	ip, #5
 800c3f6:	d004      	beq.n	800c402 <RegionNextChannel+0x1a>
 800c3f8:	f1bc 0f08 	cmp.w	ip, #8
 800c3fc:	d005      	beq.n	800c40a <RegionNextChannel+0x22>
 800c3fe:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800c400:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800c402:	9b02      	ldr	r3, [sp, #8]
 800c404:	f001 f8fc 	bl	800d600 <RegionEU868NextChannel>
 800c408:	e7fa      	b.n	800c400 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800c40a:	9b02      	ldr	r3, [sp, #8]
 800c40c:	f001 ffc4 	bl	800e398 <RegionUS915NextChannel>
 800c410:	e7f6      	b.n	800c400 <RegionNextChannel+0x18>

0800c412 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c412:	b508      	push	{r3, lr}
 800c414:	4684      	mov	ip, r0
 800c416:	4608      	mov	r0, r1
 800c418:	4611      	mov	r1, r2
 800c41a:	461a      	mov	r2, r3
    switch( region )
 800c41c:	f1bc 0f05 	cmp.w	ip, #5
 800c420:	d004      	beq.n	800c42c <RegionApplyDrOffset+0x1a>
 800c422:	f1bc 0f08 	cmp.w	ip, #8
 800c426:	d004      	beq.n	800c432 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c428:	b2c8      	uxtb	r0, r1
 800c42a:	e001      	b.n	800c430 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800c42c:	f001 fa56 	bl	800d8dc <RegionEU868ApplyDrOffset>
        }
    }
}
 800c430:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800c432:	f002 f85f 	bl	800e4f4 <RegionUS915ApplyDrOffset>
 800c436:	e7fb      	b.n	800c430 <RegionApplyDrOffset+0x1e>

0800c438 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c438:	4800      	ldr	r0, [pc, #0]	; (800c43c <RegionGetVersion+0x4>)
 800c43a:	4770      	bx	lr
 800c43c:	02010001 	.word	0x02010001

0800c440 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800c440:	468c      	mov	ip, r1
 800c442:	b1a9      	cbz	r1, 800c470 <FindAvailable125kHzChannels+0x30>
 800c444:	b1b2      	cbz	r2, 800c474 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800c446:	2300      	movs	r3, #0
 800c448:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800c44a:	e001      	b.n	800c450 <FindAvailable125kHzChannels+0x10>
 800c44c:	3301      	adds	r3, #1
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b07      	cmp	r3, #7
 800c452:	d80b      	bhi.n	800c46c <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800c454:	fa40 f103 	asr.w	r1, r0, r3
 800c458:	f011 0f01 	tst.w	r1, #1
 800c45c:	d0f6      	beq.n	800c44c <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800c45e:	7811      	ldrb	r1, [r2, #0]
 800c460:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800c464:	7811      	ldrb	r1, [r2, #0]
 800c466:	3101      	adds	r1, #1
 800c468:	7011      	strb	r1, [r2, #0]
 800c46a:	e7ef      	b.n	800c44c <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800c46c:	2000      	movs	r0, #0
 800c46e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c470:	2003      	movs	r0, #3
 800c472:	4770      	bx	lr
 800c474:	2003      	movs	r0, #3
}
 800c476:	4770      	bx	lr

0800c478 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800c478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c47a:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800c47c:	2300      	movs	r3, #0
 800c47e:	9302      	str	r3, [sp, #8]
 800c480:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800c482:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800c486:	2800      	cmp	r0, #0
 800c488:	d03e      	beq.n	800c508 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800c48a:	460d      	mov	r5, r1
 800c48c:	4617      	mov	r7, r2
 800c48e:	4606      	mov	r6, r0
 800c490:	2900      	cmp	r1, #0
 800c492:	d03b      	beq.n	800c50c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800c494:	2a00      	cmp	r2, #0
 800c496:	d03b      	beq.n	800c510 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800c498:	780c      	ldrb	r4, [r1, #0]
 800c49a:	e017      	b.n	800c4cc <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800c49c:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800c4a0:	0a00      	lsrs	r0, r0, #8
 800c4a2:	e019      	b.n	800c4d8 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800c4a4:	3901      	subs	r1, #1
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	f002 ff24 	bl	800f2f4 <randr>
 800c4ac:	f100 0310 	add.w	r3, r0, #16
 800c4b0:	eb0d 0003 	add.w	r0, sp, r3
 800c4b4:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800c4b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4bc:	703b      	strb	r3, [r7, #0]
 800c4be:	e016      	b.n	800c4ee <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800c4c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c4c4:	b9cb      	cbnz	r3, 800c4fa <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800c4c6:	782a      	ldrb	r2, [r5, #0]
 800c4c8:	42a2      	cmp	r2, r4
 800c4ca:	d016      	beq.n	800c4fa <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800c4cc:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800c4ce:	f014 0f01 	tst.w	r4, #1
 800c4d2:	d1e3      	bne.n	800c49c <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800c4d4:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800c4d8:	f10d 0207 	add.w	r2, sp, #7
 800c4dc:	a902      	add	r1, sp, #8
 800c4de:	f7ff ffaf 	bl	800c440 <FindAvailable125kHzChannels>
 800c4e2:	2803      	cmp	r0, #3
 800c4e4:	d00b      	beq.n	800c4fe <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800c4e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c4ea:	2900      	cmp	r1, #0
 800c4ec:	d1da      	bne.n	800c4a4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800c4ee:	3401      	adds	r4, #1
 800c4f0:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800c4f2:	2c07      	cmp	r4, #7
 800c4f4:	d9e4      	bls.n	800c4c0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800c4f6:	2400      	movs	r4, #0
 800c4f8:	e7e2      	b.n	800c4c0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800c4fa:	b913      	cbnz	r3, 800c502 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800c4fc:	2003      	movs	r0, #3
}
 800c4fe:	b005      	add	sp, #20
 800c500:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800c502:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800c504:	2000      	movs	r0, #0
 800c506:	e7fa      	b.n	800c4fe <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c508:	2003      	movs	r0, #3
 800c50a:	e7f8      	b.n	800c4fe <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800c50c:	2003      	movs	r0, #3
 800c50e:	e7f6      	b.n	800c4fe <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800c510:	2003      	movs	r0, #3
 800c512:	e7f4      	b.n	800c4fe <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800c514 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800c514:	fb02 1000 	mla	r0, r2, r0, r1
 800c518:	4770      	bx	lr

0800c51a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c51a:	b082      	sub	sp, #8
 800c51c:	f10d 0c08 	add.w	ip, sp, #8
 800c520:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800c524:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800c526:	b971      	cbnz	r1, 800c546 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c528:	4613      	mov	r3, r2
 800c52a:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800c52e:	d306      	bcc.n	800c53e <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800c530:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800c534:	4293      	cmp	r3, r2
 800c536:	d80a      	bhi.n	800c54e <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800c538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c53c:	e000      	b.n	800c540 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800c53e:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c540:	4298      	cmp	r0, r3
 800c542:	bf38      	it	cc
 800c544:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800c546:	b900      	cbnz	r0, 800c54a <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800c548:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800c54a:	b002      	add	sp, #8
 800c54c:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800c54e:	f242 7310 	movw	r3, #10000	; 0x2710
 800c552:	e7f5      	b.n	800c540 <GetDutyCycle+0x26>

0800c554 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800c554:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800c556:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800c558:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800c55a:	e001      	b.n	800c560 <CountChannels+0xc>
 800c55c:	3301      	adds	r3, #1
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	428b      	cmp	r3, r1
 800c562:	d207      	bcs.n	800c574 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c564:	2201      	movs	r2, #1
 800c566:	409a      	lsls	r2, r3
 800c568:	ea32 020c 	bics.w	r2, r2, ip
 800c56c:	d1f6      	bne.n	800c55c <CountChannels+0x8>
        {
            nbActiveBits++;
 800c56e:	3001      	adds	r0, #1
 800c570:	b2c0      	uxtb	r0, r0
 800c572:	e7f3      	b.n	800c55c <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800c574:	4770      	bx	lr
	...

0800c578 <SetMaxTimeCredits>:
{
 800c578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c57c:	b089      	sub	sp, #36	; 0x24
 800c57e:	4604      	mov	r4, r0
 800c580:	460e      	mov	r6, r1
 800c582:	ad02      	add	r5, sp, #8
 800c584:	e885 000c 	stmia.w	r5, {r2, r3}
 800c588:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800c58c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800c590:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c594:	f005 f802 	bl	801159c <SysTimeToMs>
 800c598:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800c59a:	2300      	movs	r3, #0
 800c59c:	9304      	str	r3, [sp, #16]
 800c59e:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c5a0:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f7ff ffb7 	bl	800c51a <GetDutyCycle>
 800c5ac:	4605      	mov	r5, r0
    if( joined == false )
 800c5ae:	2e00      	cmp	r6, #0
 800c5b0:	d14c      	bne.n	800c64c <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c5b2:	2864      	cmp	r0, #100	; 0x64
 800c5b4:	d025      	beq.n	800c602 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c5b6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c5ba:	d025      	beq.n	800c608 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800c5bc:	4e27      	ldr	r6, [pc, #156]	; (800c65c <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800c5be:	68a1      	ldr	r1, [r4, #8]
 800c5c0:	a806      	add	r0, sp, #24
 800c5c2:	f005 f80b 	bl	80115dc <SysTimeFromMs>
 800c5c6:	9b07      	ldr	r3, [sp, #28]
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	9b06      	ldr	r3, [sp, #24]
 800c5cc:	aa02      	add	r2, sp, #8
 800c5ce:	ca06      	ldmia	r2, {r1, r2}
 800c5d0:	a804      	add	r0, sp, #16
 800c5d2:	f004 ff6a 	bl	80114aa <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c5d6:	f1b8 0f00 	cmp.w	r8, #0
 800c5da:	d102      	bne.n	800c5e2 <SetMaxTimeCredits+0x6a>
 800c5dc:	f1b9 0f00 	cmp.w	r9, #0
 800c5e0:	d002      	beq.n	800c5e8 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c5e2:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c5e4:	42b3      	cmp	r3, r6
 800c5e6:	d012      	beq.n	800c60e <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800c5e8:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c5ea:	9b02      	ldr	r3, [sp, #8]
 800c5ec:	4a1c      	ldr	r2, [pc, #112]	; (800c660 <SetMaxTimeCredits+0xe8>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d812      	bhi.n	800c618 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800c5f2:	6863      	ldr	r3, [r4, #4]
 800c5f4:	b903      	cbnz	r3, 800c5f8 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800c5f6:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800c5f8:	6126      	str	r6, [r4, #16]
}
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	b009      	add	sp, #36	; 0x24
 800c5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800c602:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c604:	4e17      	ldr	r6, [pc, #92]	; (800c664 <SetMaxTimeCredits+0xec>)
 800c606:	e7da      	b.n	800c5be <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800c608:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800c60a:	4e17      	ldr	r6, [pc, #92]	; (800c668 <SetMaxTimeCredits+0xf0>)
 800c60c:	e7d7      	b.n	800c5be <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c60e:	9a04      	ldr	r2, [sp, #16]
 800c610:	4b16      	ldr	r3, [pc, #88]	; (800c66c <SetMaxTimeCredits+0xf4>)
 800c612:	429a      	cmp	r2, r3
 800c614:	d9ed      	bls.n	800c5f2 <SetMaxTimeCredits+0x7a>
 800c616:	e7e7      	b.n	800c5e8 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800c618:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c61c:	3b30      	subs	r3, #48	; 0x30
 800c61e:	4a14      	ldr	r2, [pc, #80]	; (800c670 <SetMaxTimeCredits+0xf8>)
 800c620:	fba2 2303 	umull	r2, r3, r2, r3
 800c624:	0c1b      	lsrs	r3, r3, #16
 800c626:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800c628:	4a12      	ldr	r2, [pc, #72]	; (800c674 <SetMaxTimeCredits+0xfc>)
 800c62a:	fb02 f303 	mul.w	r3, r2, r3
 800c62e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c630:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800c634:	3330      	adds	r3, #48	; 0x30
 800c636:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800c63e:	ab04      	add	r3, sp, #16
 800c640:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c644:	f004 ffaa 	bl	801159c <SysTimeToMs>
 800c648:	60a0      	str	r0, [r4, #8]
 800c64a:	e7d2      	b.n	800c5f2 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800c64c:	f1b8 0f00 	cmp.w	r8, #0
 800c650:	d102      	bne.n	800c658 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800c652:	4e04      	ldr	r6, [pc, #16]	; (800c664 <SetMaxTimeCredits+0xec>)
 800c654:	60e6      	str	r6, [r4, #12]
 800c656:	e7cc      	b.n	800c5f2 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c658:	4e02      	ldr	r6, [pc, #8]	; (800c664 <SetMaxTimeCredits+0xec>)
 800c65a:	e7ca      	b.n	800c5f2 <SetMaxTimeCredits+0x7a>
 800c65c:	02932e00 	.word	0x02932e00
 800c660:	0001ec2f 	.word	0x0001ec2f
 800c664:	001b7740 	.word	0x001b7740
 800c668:	0112a880 	.word	0x0112a880
 800c66c:	0001517f 	.word	0x0001517f
 800c670:	c22e4507 	.word	0xc22e4507
 800c674:	00015180 	.word	0x00015180

0800c678 <UpdateTimeCredits>:
{
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	4604      	mov	r4, r0
 800c67e:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800c680:	9301      	str	r3, [sp, #4]
 800c682:	9200      	str	r2, [sp, #0]
 800c684:	ab06      	add	r3, sp, #24
 800c686:	cb0c      	ldmia	r3, {r2, r3}
 800c688:	f7ff ff76 	bl	800c578 <SetMaxTimeCredits>
 800c68c:	4605      	mov	r5, r0
    if( joined == true )
 800c68e:	b94e      	cbnz	r6, 800c6a4 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800c690:	68e2      	ldr	r2, [r4, #12]
 800c692:	6923      	ldr	r3, [r4, #16]
 800c694:	429a      	cmp	r2, r3
 800c696:	d900      	bls.n	800c69a <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800c698:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800c69a:	9b08      	ldr	r3, [sp, #32]
 800c69c:	6063      	str	r3, [r4, #4]
}
 800c69e:	4628      	mov	r0, r5
 800c6a0:	b002      	add	sp, #8
 800c6a2:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c6a4:	6860      	ldr	r0, [r4, #4]
 800c6a6:	f004 fff9 	bl	801169c <UTIL_TIMER_GetElapsedTime>
 800c6aa:	68e3      	ldr	r3, [r4, #12]
 800c6ac:	4403      	add	r3, r0
 800c6ae:	60e3      	str	r3, [r4, #12]
 800c6b0:	e7ee      	b.n	800c690 <UpdateTimeCredits+0x18>

0800c6b2 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800c6b2:	4288      	cmp	r0, r1
 800c6b4:	db03      	blt.n	800c6be <RegionCommonValueInRange+0xc>
 800c6b6:	4290      	cmp	r0, r2
 800c6b8:	dd03      	ble.n	800c6c2 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	4770      	bx	lr
 800c6be:	2000      	movs	r0, #0
 800c6c0:	4770      	bx	lr
        return 1;
 800c6c2:	2001      	movs	r0, #1
}
 800c6c4:	4770      	bx	lr

0800c6c6 <RegionCommonChanVerifyDr>:
{
 800c6c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ca:	4682      	mov	sl, r0
 800c6cc:	460e      	mov	r6, r1
 800c6ce:	4690      	mov	r8, r2
 800c6d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800c6d4:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	4640      	mov	r0, r8
 800c6dc:	f7ff ffe9 	bl	800c6b2 <RegionCommonValueInRange>
 800c6e0:	b338      	cbz	r0, 800c732 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c6e2:	2500      	movs	r5, #0
 800c6e4:	462f      	mov	r7, r5
 800c6e6:	e01e      	b.n	800c726 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800c6e8:	3401      	adds	r4, #1
 800c6ea:	b2e4      	uxtb	r4, r4
 800c6ec:	2c0f      	cmp	r4, #15
 800c6ee:	d816      	bhi.n	800c71e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c6f0:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800c6f4:	4123      	asrs	r3, r4
 800c6f6:	f013 0f01 	tst.w	r3, #1
 800c6fa:	d0f5      	beq.n	800c6e8 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c6fc:	193b      	adds	r3, r7, r4
 800c6fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c702:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800c706:	7a19      	ldrb	r1, [r3, #8]
 800c708:	090a      	lsrs	r2, r1, #4
 800c70a:	f001 010f 	and.w	r1, r1, #15
 800c70e:	4640      	mov	r0, r8
 800c710:	f7ff ffcf 	bl	800c6b2 <RegionCommonValueInRange>
 800c714:	2801      	cmp	r0, #1
 800c716:	d1e7      	bne.n	800c6e8 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800c718:	2001      	movs	r0, #1
}
 800c71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c71e:	3710      	adds	r7, #16
 800c720:	b2ff      	uxtb	r7, r7
 800c722:	3501      	adds	r5, #1
 800c724:	b2ed      	uxtb	r5, r5
 800c726:	4557      	cmp	r7, sl
 800c728:	d201      	bcs.n	800c72e <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800c72a:	2400      	movs	r4, #0
 800c72c:	e7de      	b.n	800c6ec <RegionCommonChanVerifyDr+0x26>
    return false;
 800c72e:	2000      	movs	r0, #0
 800c730:	e7f3      	b.n	800c71a <RegionCommonChanVerifyDr+0x54>
        return false;
 800c732:	2000      	movs	r0, #0
 800c734:	e7f1      	b.n	800c71a <RegionCommonChanVerifyDr+0x54>

0800c736 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800c736:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800c73a:	0913      	lsrs	r3, r2, #4
 800c73c:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800c740:	d30e      	bcc.n	800c760 <RegionCommonChanDisable+0x2a>
 800c742:	4291      	cmp	r1, r2
 800c744:	d20e      	bcs.n	800c764 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800c746:	f001 010f 	and.w	r1, r1, #15
 800c74a:	2301      	movs	r3, #1
 800c74c:	fa03 f101 	lsl.w	r1, r3, r1
 800c750:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800c754:	ea22 0101 	bic.w	r1, r2, r1
 800c758:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800c75c:	4618      	mov	r0, r3
 800c75e:	4770      	bx	lr
        return false;
 800c760:	2000      	movs	r0, #0
 800c762:	4770      	bx	lr
 800c764:	2000      	movs	r0, #0
}
 800c766:	4770      	bx	lr

0800c768 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800c768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800c76a:	b188      	cbz	r0, 800c790 <RegionCommonCountChannels+0x28>
 800c76c:	460c      	mov	r4, r1
 800c76e:	4616      	mov	r6, r2
 800c770:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800c772:	2500      	movs	r5, #0
 800c774:	e008      	b.n	800c788 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c776:	2110      	movs	r1, #16
 800c778:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800c77c:	f7ff feea 	bl	800c554 <CountChannels>
 800c780:	4405      	add	r5, r0
 800c782:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c784:	3401      	adds	r4, #1
 800c786:	b2e4      	uxtb	r4, r4
 800c788:	42b4      	cmp	r4, r6
 800c78a:	d3f4      	bcc.n	800c776 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800c78c:	4628      	mov	r0, r5
 800c78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800c790:	2500      	movs	r5, #0
 800c792:	e7fb      	b.n	800c78c <RegionCommonCountChannels+0x24>

0800c794 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800c794:	4684      	mov	ip, r0
 800c796:	b158      	cbz	r0, 800c7b0 <RegionCommonChanMaskCopy+0x1c>
 800c798:	b109      	cbz	r1, 800c79e <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800c79a:	2300      	movs	r3, #0
 800c79c:	e006      	b.n	800c7ac <RegionCommonChanMaskCopy+0x18>
 800c79e:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800c7a0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c7a4:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d3f7      	bcc.n	800c7a0 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800c7b0:	4770      	bx	lr

0800c7b2 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	aa04      	add	r2, sp, #16
 800c7be:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c7c2:	ca0c      	ldmia	r2, {r2, r3}
 800c7c4:	f7ff fea9 	bl	800c51a <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800c7c8:	68e3      	ldr	r3, [r4, #12]
 800c7ca:	fb05 f000 	mul.w	r0, r5, r0
 800c7ce:	4283      	cmp	r3, r0
 800c7d0:	d905      	bls.n	800c7de <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800c7d2:	1a18      	subs	r0, r3, r0
 800c7d4:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800c7d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7da:	b002      	add	sp, #8
 800c7dc:	4770      	bx	lr
        band->TimeCredits = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60e3      	str	r3, [r4, #12]
}
 800c7e2:	e7f8      	b.n	800c7d6 <RegionCommonSetBandTxDone+0x24>

0800c7e4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800c7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e8:	b089      	sub	sp, #36	; 0x24
 800c7ea:	4607      	mov	r7, r0
 800c7ec:	468b      	mov	fp, r1
 800c7ee:	4691      	mov	r9, r2
 800c7f0:	4698      	mov	r8, r3
 800c7f2:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c7f6:	f004 ff47 	bl	8011688 <UTIL_TIMER_GetCurrentTime>
 800c7fa:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800c7fc:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800c7fe:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800c800:	f04f 33ff 	mov.w	r3, #4294967295
 800c804:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800c806:	e005      	b.n	800c814 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800c808:	2301      	movs	r3, #1
 800c80a:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800c80c:	441e      	add	r6, r3
 800c80e:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800c810:	3401      	adds	r4, #1
 800c812:	b2e4      	uxtb	r4, r4
 800c814:	454c      	cmp	r4, r9
 800c816:	d25d      	bcs.n	800c8d4 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800c818:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800c81c:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800c820:	9b04      	ldr	r3, [sp, #16]
 800c822:	9302      	str	r3, [sp, #8]
 800c824:	ab13      	add	r3, sp, #76	; 0x4c
 800c826:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c82a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c82e:	4653      	mov	r3, sl
 800c830:	4642      	mov	r2, r8
 800c832:	4639      	mov	r1, r7
 800c834:	4628      	mov	r0, r5
 800c836:	f7ff ff1f 	bl	800c678 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800c83a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c83c:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800c840:	68ea      	ldr	r2, [r5, #12]
 800c842:	429a      	cmp	r2, r3
 800c844:	d8e0      	bhi.n	800c808 <RegionCommonUpdateBandTimeOff+0x24>
 800c846:	f1b8 0f00 	cmp.w	r8, #0
 800c84a:	d101      	bne.n	800c850 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800c84c:	2f00      	cmp	r7, #0
 800c84e:	d1db      	bne.n	800c808 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800c850:	2100      	movs	r1, #0
 800c852:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800c854:	6929      	ldr	r1, [r5, #16]
 800c856:	4299      	cmp	r1, r3
 800c858:	d907      	bls.n	800c86a <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800c85a:	1a9b      	subs	r3, r3, r2
 800c85c:	9a05      	ldr	r2, [sp, #20]
 800c85e:	429a      	cmp	r2, r3
 800c860:	bf28      	it	cs
 800c862:	461a      	movcs	r2, r3
 800c864:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800c866:	3601      	adds	r6, #1
 800c868:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800c86a:	2f00      	cmp	r7, #0
 800c86c:	d1d0      	bne.n	800c810 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800c86e:	2300      	movs	r3, #0
 800c870:	9306      	str	r3, [sp, #24]
 800c872:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c876:	2864      	cmp	r0, #100	; 0x64
 800c878:	d024      	beq.n	800c8c4 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c87a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c87e:	d025      	beq.n	800c8cc <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c880:	4b19      	ldr	r3, [pc, #100]	; (800c8e8 <RegionCommonUpdateBandTimeOff+0x104>)
 800c882:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c886:	4a18      	ldr	r2, [pc, #96]	; (800c8e8 <RegionCommonUpdateBandTimeOff+0x104>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d90c      	bls.n	800c8a6 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800c88c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c890:	3b30      	subs	r3, #48	; 0x30
 800c892:	4a16      	ldr	r2, [pc, #88]	; (800c8ec <RegionCommonUpdateBandTimeOff+0x108>)
 800c894:	fba2 2303 	umull	r2, r3, r2, r3
 800c898:	0c1b      	lsrs	r3, r3, #16
 800c89a:	4a15      	ldr	r2, [pc, #84]	; (800c8f0 <RegionCommonUpdateBandTimeOff+0x10c>)
 800c89c:	fb03 2202 	mla	r2, r3, r2, r2
 800c8a0:	9b06      	ldr	r3, [sp, #24]
 800c8a2:	4413      	add	r3, r2
 800c8a4:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800c8a6:	ad06      	add	r5, sp, #24
 800c8a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c8ae:	e895 0006 	ldmia.w	r5, {r1, r2}
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f004 fdf9 	bl	80114aa <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800c8b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c8bc:	f004 fe6e 	bl	801159c <SysTimeToMs>
 800c8c0:	9005      	str	r0, [sp, #20]
 800c8c2:	e7a5      	b.n	800c810 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800c8c4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c8c8:	9306      	str	r3, [sp, #24]
 800c8ca:	e7db      	b.n	800c884 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800c8cc:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800c8d0:	9306      	str	r3, [sp, #24]
 800c8d2:	e7d7      	b.n	800c884 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800c8d4:	b11e      	cbz	r6, 800c8de <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800c8d6:	9805      	ldr	r0, [sp, #20]
 800c8d8:	b009      	add	sp, #36	; 0x24
 800c8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800c8de:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e2:	9305      	str	r3, [sp, #20]
 800c8e4:	e7f7      	b.n	800c8d6 <RegionCommonUpdateBandTimeOff+0xf2>
 800c8e6:	bf00      	nop
 800c8e8:	0001ec30 	.word	0x0001ec30
 800c8ec:	c22e4507 	.word	0xc22e4507
 800c8f0:	00015180 	.word	0x00015180

0800c8f4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c8f4:	7803      	ldrb	r3, [r0, #0]
 800c8f6:	2b03      	cmp	r3, #3
 800c8f8:	d001      	beq.n	800c8fe <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800c8fa:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800c8fc:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800c8fe:	7842      	ldrb	r2, [r0, #1]
 800c900:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c904:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c906:	f003 030f 	and.w	r3, r3, #15
 800c90a:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c90c:	0913      	lsrs	r3, r2, #4
 800c90e:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800c910:	7883      	ldrb	r3, [r0, #2]
 800c912:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800c914:	78c2      	ldrb	r2, [r0, #3]
 800c916:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c91a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800c91c:	7903      	ldrb	r3, [r0, #4]
 800c91e:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c920:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800c924:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800c926:	f003 030f 	and.w	r3, r3, #15
 800c92a:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800c92c:	2005      	movs	r0, #5
 800c92e:	4770      	bx	lr

0800c930 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800c930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	b085      	sub	sp, #20
 800c936:	4604      	mov	r4, r0
 800c938:	4688      	mov	r8, r1
 800c93a:	4617      	mov	r7, r2
 800c93c:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800c93e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800c940:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800c944:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800c948:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800c94c:	7943      	ldrb	r3, [r0, #5]
 800c94e:	b92b      	cbnz	r3, 800c95c <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800c950:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800c954:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800c958:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800c95c:	b355      	cbz	r5, 800c9b4 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800c95e:	f1ba 0f0f 	cmp.w	sl, #15
 800c962:	d114      	bne.n	800c98e <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800c964:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800c968:	f1b9 0f0f 	cmp.w	r9, #15
 800c96c:	d020      	beq.n	800c9b0 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800c96e:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800c972:	9303      	str	r3, [sp, #12]
 800c974:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800c978:	461c      	mov	r4, r3
 800c97a:	4619      	mov	r1, r3
 800c97c:	4648      	mov	r0, r9
 800c97e:	f7ff fe98 	bl	800c6b2 <RegionCommonValueInRange>
 800c982:	b9b8      	cbnz	r0, 800c9b4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800c984:	454c      	cmp	r4, r9
 800c986:	dc21      	bgt.n	800c9cc <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800c988:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800c98c:	e012      	b.n	800c9b4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800c98e:	69a3      	ldr	r3, [r4, #24]
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800c99c:	4652      	mov	r2, sl
 800c99e:	6921      	ldr	r1, [r4, #16]
 800c9a0:	7b20      	ldrb	r0, [r4, #12]
 800c9a2:	f7ff fe90 	bl	800c6c6 <RegionCommonChanVerifyDr>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d1de      	bne.n	800c968 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800c9aa:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800c9ae:	e7db      	b.n	800c968 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800c9b0:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800c9b4:	2d07      	cmp	r5, #7
 800c9b6:	d00c      	beq.n	800c9d2 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800c9b8:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800c9bc:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800c9c0:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	b005      	add	sp, #20
 800c9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800c9cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c9d0:	e7f0      	b.n	800c9b4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800c9d2:	f1bb 0f00 	cmp.w	fp, #0
 800c9d6:	d1ef      	bne.n	800c9b8 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800c9d8:	f04f 0b01 	mov.w	fp, #1
 800c9dc:	e7ec      	b.n	800c9b8 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800c9e0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800c9e0:	4b02      	ldr	r3, [pc, #8]	; (800c9ec <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800c9e2:	fa03 f000 	lsl.w	r0, r3, r0
}
 800c9e6:	fbb0 f0f1 	udiv	r0, r0, r1
 800c9ea:	4770      	bx	lr
 800c9ec:	000f4240 	.word	0x000f4240

0800c9f0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800c9f0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800c9f4:	fbb3 f0f0 	udiv	r0, r3, r0
 800c9f8:	4770      	bx	lr
	...

0800c9fc <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800c9fc:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c9fe:	f1a1 0c04 	sub.w	ip, r1, #4
 800ca02:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800ca06:	fb0e f202 	mul.w	r2, lr, r2
 800ca0a:	fb00 220c 	mla	r2, r0, ip, r2
 800ca0e:	0052      	lsls	r2, r2, #1
 800ca10:	d021      	beq.n	800ca56 <RegionCommonComputeRxWindowParameters+0x5a>
 800ca12:	4402      	add	r2, r0
 800ca14:	3a01      	subs	r2, #1
 800ca16:	fbb2 f2f0 	udiv	r2, r2, r0
 800ca1a:	4291      	cmp	r1, r2
 800ca1c:	bf38      	it	cc
 800ca1e:	4611      	movcc	r1, r2
 800ca20:	9a01      	ldr	r2, [sp, #4]
 800ca22:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ca24:	0082      	lsls	r2, r0, #2
 800ca26:	fb00 f101 	mul.w	r1, r0, r1
 800ca2a:	b1b9      	cbz	r1, 800ca5c <RegionCommonComputeRxWindowParameters+0x60>
 800ca2c:	3101      	adds	r1, #1
 800ca2e:	0849      	lsrs	r1, r1, #1
 800ca30:	1a51      	subs	r1, r2, r1
 800ca32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca36:	fb02 1313 	mls	r3, r2, r3, r1
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	dd10      	ble.n	800ca60 <RegionCommonComputeRxWindowParameters+0x64>
 800ca3e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800ca42:	4a0b      	ldr	r2, [pc, #44]	; (800ca70 <RegionCommonComputeRxWindowParameters+0x74>)
 800ca44:	fb82 1203 	smull	r1, r2, r2, r3
 800ca48:	17db      	asrs	r3, r3, #31
 800ca4a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ca4e:	9a02      	ldr	r2, [sp, #8]
 800ca50:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800ca52:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ca56:	fbb2 f2f0 	udiv	r2, r2, r0
 800ca5a:	e7de      	b.n	800ca1a <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ca5c:	0849      	lsrs	r1, r1, #1
 800ca5e:	e7e7      	b.n	800ca30 <RegionCommonComputeRxWindowParameters+0x34>
 800ca60:	4a03      	ldr	r2, [pc, #12]	; (800ca70 <RegionCommonComputeRxWindowParameters+0x74>)
 800ca62:	fb82 1203 	smull	r1, r2, r2, r3
 800ca66:	17db      	asrs	r3, r3, #31
 800ca68:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ca6c:	e7ef      	b.n	800ca4e <RegionCommonComputeRxWindowParameters+0x52>
 800ca6e:	bf00      	nop
 800ca70:	10624dd3 	.word	0x10624dd3

0800ca74 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	460d      	mov	r5, r1
 800ca78:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800ca7a:	0040      	lsls	r0, r0, #1
 800ca7c:	f7f3 fea6 	bl	80007cc <__aeabi_ui2f>
 800ca80:	4601      	mov	r1, r0
 800ca82:	4628      	mov	r0, r5
 800ca84:	f7f3 fdf0 	bl	8000668 <__aeabi_fsub>
 800ca88:	4621      	mov	r1, r4
 800ca8a:	f7f3 fded 	bl	8000668 <__aeabi_fsub>
 800ca8e:	f7f3 fcdf 	bl	8000450 <__aeabi_f2d>
 800ca92:	f005 f8c5 	bl	8011c20 <floor>
 800ca96:	f7f3 fdbb 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800ca9a:	b240      	sxtb	r0, r0
 800ca9c:	bd38      	pop	{r3, r4, r5, pc}

0800ca9e <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800ca9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa2:	b083      	sub	sp, #12
 800caa4:	4605      	mov	r5, r0
 800caa6:	468b      	mov	fp, r1
 800caa8:	9200      	str	r2, [sp, #0]
 800caaa:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800caac:	2600      	movs	r6, #0
 800caae:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800cab0:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800cab2:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cab4:	e04a      	b.n	800cb4c <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800cab6:	7a3a      	ldrb	r2, [r7, #8]
 800cab8:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800cabc:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800cac0:	b252      	sxtb	r2, r2
 800cac2:	b249      	sxtb	r1, r1
 800cac4:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800cac8:	f7ff fdf3 	bl	800c6b2 <RegionCommonValueInRange>
 800cacc:	b178      	cbz	r0, 800caee <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800cace:	68ea      	ldr	r2, [r5, #12]
 800cad0:	7a7b      	ldrb	r3, [r7, #9]
 800cad2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cad6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cada:	7d1b      	ldrb	r3, [r3, #20]
 800cadc:	b35b      	cbz	r3, 800cb36 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800cade:	f109 0301 	add.w	r3, r9, #1
 800cae2:	eb08 0204 	add.w	r2, r8, r4
 800cae6:	f80b 2009 	strb.w	r2, [fp, r9]
 800caea:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800caee:	3401      	adds	r4, #1
 800caf0:	b2e4      	uxtb	r4, r4
 800caf2:	2c0f      	cmp	r4, #15
 800caf4:	d824      	bhi.n	800cb40 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800caf6:	686b      	ldr	r3, [r5, #4]
 800caf8:	0072      	lsls	r2, r6, #1
 800cafa:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800cafe:	4123      	asrs	r3, r4
 800cb00:	f013 0f01 	tst.w	r3, #1
 800cb04:	d0f3      	beq.n	800caee <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800cb06:	68a8      	ldr	r0, [r5, #8]
 800cb08:	eb08 0304 	add.w	r3, r8, r4
 800cb0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cb10:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800cb14:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d0e8      	beq.n	800caee <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800cb1c:	782b      	ldrb	r3, [r5, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1c9      	bne.n	800cab6 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800cb22:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d0c6      	beq.n	800cab6 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800cb28:	5a9b      	ldrh	r3, [r3, r2]
 800cb2a:	fa43 f104 	asr.w	r1, r3, r4
 800cb2e:	f011 0f01 	tst.w	r1, #1
 800cb32:	d1c0      	bne.n	800cab6 <RegionCommonCountNbOfEnabledChannels+0x18>
 800cb34:	e7db      	b.n	800caee <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800cb36:	f10a 0a01 	add.w	sl, sl, #1
 800cb3a:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800cb3e:	e7d6      	b.n	800caee <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cb40:	f108 0810 	add.w	r8, r8, #16
 800cb44:	fa5f f888 	uxtb.w	r8, r8
 800cb48:	3601      	adds	r6, #1
 800cb4a:	b2f6      	uxtb	r6, r6
 800cb4c:	fa1f f388 	uxth.w	r3, r8
 800cb50:	8a2a      	ldrh	r2, [r5, #16]
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d201      	bcs.n	800cb5a <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800cb56:	2400      	movs	r4, #0
 800cb58:	e7cb      	b.n	800caf2 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800cb5a:	9b00      	ldr	r3, [sp, #0]
 800cb5c:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800cb60:	9b01      	ldr	r3, [sp, #4]
 800cb62:	f883 a000 	strb.w	sl, [r3]
}
 800cb66:	b003      	add	sp, #12
 800cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb6c <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800cb6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb70:	b085      	sub	sp, #20
 800cb72:	4604      	mov	r4, r0
 800cb74:	460f      	mov	r7, r1
 800cb76:	4616      	mov	r6, r2
 800cb78:	461d      	mov	r5, r3
 800cb7a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800cb7e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800cb82:	6840      	ldr	r0, [r0, #4]
 800cb84:	f004 fd8a 	bl	801169c <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800cb88:	6823      	ldr	r3, [r4, #0]
 800cb8a:	1a1b      	subs	r3, r3, r0
 800cb8c:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800cb90:	2301      	movs	r3, #1
 800cb92:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800cb96:	2300      	movs	r3, #0
 800cb98:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800cb9a:	6863      	ldr	r3, [r4, #4]
 800cb9c:	b113      	cbz	r3, 800cba4 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800cb9e:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800cba0:	4283      	cmp	r3, r0
 800cba2:	d81e      	bhi.n	800cbe2 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800cba8:	69e3      	ldr	r3, [r4, #28]
 800cbaa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800cbae:	781f      	ldrb	r7, [r3, #0]
 800cbb0:	69a3      	ldr	r3, [r4, #24]
 800cbb2:	9303      	str	r3, [sp, #12]
 800cbb4:	ab01      	add	r3, sp, #4
 800cbb6:	f104 020c 	add.w	r2, r4, #12
 800cbba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cbbe:	e883 0003 	stmia.w	r3, {r0, r1}
 800cbc2:	7d23      	ldrb	r3, [r4, #20]
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	7a23      	ldrb	r3, [r4, #8]
 800cbc8:	7a62      	ldrb	r2, [r4, #9]
 800cbca:	4661      	mov	r1, ip
 800cbcc:	4638      	mov	r0, r7
 800cbce:	f7ff fe09 	bl	800c7e4 <RegionCommonUpdateBandTimeOff>
 800cbd2:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800cbd6:	4643      	mov	r3, r8
 800cbd8:	462a      	mov	r2, r5
 800cbda:	4631      	mov	r1, r6
 800cbdc:	69e0      	ldr	r0, [r4, #28]
 800cbde:	f7ff ff5e 	bl	800ca9e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800cbe2:	782b      	ldrb	r3, [r5, #0]
 800cbe4:	b923      	cbnz	r3, 800cbf0 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800cbe6:	f898 3000 	ldrb.w	r3, [r8]
 800cbea:	b13b      	cbz	r3, 800cbfc <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800cbec:	200b      	movs	r0, #11
 800cbee:	e002      	b.n	800cbf6 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800cbf6:	b005      	add	sp, #20
 800cbf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800cbfc:	200c      	movs	r0, #12
 800cbfe:	e7fa      	b.n	800cbf6 <RegionCommonIdentifyChannels+0x8a>

0800cc00 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800cc00:	b570      	push	{r4, r5, r6, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800cc06:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800cc0a:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800cc0e:	42a6      	cmp	r6, r4
 800cc10:	d011      	beq.n	800cc36 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800cc12:	3c01      	subs	r4, #1
 800cc14:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800cc16:	42a6      	cmp	r6, r4
 800cc18:	d00e      	beq.n	800cc38 <RegionCommonGetNextLowerTxDr+0x38>
 800cc1a:	68ab      	ldr	r3, [r5, #8]
 800cc1c:	9301      	str	r3, [sp, #4]
 800cc1e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	4633      	mov	r3, r6
 800cc26:	4622      	mov	r2, r4
 800cc28:	6869      	ldr	r1, [r5, #4]
 800cc2a:	78e8      	ldrb	r0, [r5, #3]
 800cc2c:	f7ff fd4b 	bl	800c6c6 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d0ee      	beq.n	800cc12 <RegionCommonGetNextLowerTxDr+0x12>
 800cc34:	e000      	b.n	800cc38 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800cc36:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800cc38:	4620      	mov	r0, r4
 800cc3a:	b002      	add	sp, #8
 800cc3c:	bd70      	pop	{r4, r5, r6, pc}

0800cc3e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800cc3e:	4288      	cmp	r0, r1
 800cc40:	bfb8      	it	lt
 800cc42:	4608      	movlt	r0, r1
 800cc44:	4770      	bx	lr
	...

0800cc48 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800cc48:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800cc4c:	4a05      	ldr	r2, [pc, #20]	; (800cc64 <RegionCommonGetBandwidth+0x1c>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d004      	beq.n	800cc5c <RegionCommonGetBandwidth+0x14>
 800cc52:	4a05      	ldr	r2, [pc, #20]	; (800cc68 <RegionCommonGetBandwidth+0x20>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d103      	bne.n	800cc60 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800cc58:	2002      	movs	r0, #2
 800cc5a:	4770      	bx	lr
            return 1;
 800cc5c:	2001      	movs	r0, #1
 800cc5e:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800cc60:	2000      	movs	r0, #0
    }
}
 800cc62:	4770      	bx	lr
 800cc64:	0003d090 	.word	0x0003d090
 800cc68:	0007a120 	.word	0x0007a120

0800cc6c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800cc6c:	b500      	push	{lr}
 800cc6e:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800cc70:	2805      	cmp	r0, #5
 800cc72:	d80e      	bhi.n	800cc92 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800cc74:	9202      	str	r2, [sp, #8]
 800cc76:	9101      	str	r1, [sp, #4]
 800cc78:	4b0a      	ldr	r3, [pc, #40]	; (800cca4 <RegionCommonRxConfigPrint+0x38>)
 800cc7a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	4b09      	ldr	r3, [pc, #36]	; (800cca8 <RegionCommonRxConfigPrint+0x3c>)
 800cc82:	2201      	movs	r2, #1
 800cc84:	2100      	movs	r1, #0
 800cc86:	2002      	movs	r0, #2
 800cc88:	f004 f9ea 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800cc8c:	b005      	add	sp, #20
 800cc8e:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cc92:	9201      	str	r2, [sp, #4]
 800cc94:	9100      	str	r1, [sp, #0]
 800cc96:	4b05      	ldr	r3, [pc, #20]	; (800ccac <RegionCommonRxConfigPrint+0x40>)
 800cc98:	2201      	movs	r2, #1
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	2002      	movs	r0, #2
 800cc9e:	f004 f9df 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 800cca2:	e7f3      	b.n	800cc8c <RegionCommonRxConfigPrint+0x20>
 800cca4:	08012454 	.word	0x08012454
 800cca8:	080123ec 	.word	0x080123ec
 800ccac:	0801240c 	.word	0x0801240c

0800ccb0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800ccb0:	b500      	push	{lr}
 800ccb2:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800ccb4:	9101      	str	r1, [sp, #4]
 800ccb6:	9000      	str	r0, [sp, #0]
 800ccb8:	4b04      	ldr	r3, [pc, #16]	; (800cccc <RegionCommonTxConfigPrint+0x1c>)
 800ccba:	2201      	movs	r2, #1
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	2002      	movs	r0, #2
 800ccc0:	f004 f9ce 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 800ccc4:	b003      	add	sp, #12
 800ccc6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ccca:	bf00      	nop
 800cccc:	08012428 	.word	0x08012428

0800ccd0 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800ccd6:	4b1b      	ldr	r3, [pc, #108]	; (800cd44 <VerifyRfFreq+0x74>)
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	4798      	blx	r3
 800ccdc:	b130      	cbz	r0, 800ccec <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800ccde:	4b1a      	ldr	r3, [pc, #104]	; (800cd48 <VerifyRfFreq+0x78>)
 800cce0:	4423      	add	r3, r4
 800cce2:	4a1a      	ldr	r2, [pc, #104]	; (800cd4c <VerifyRfFreq+0x7c>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d802      	bhi.n	800ccee <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800cce8:	2302      	movs	r3, #2
 800ccea:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800ccec:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800ccee:	4b18      	ldr	r3, [pc, #96]	; (800cd50 <VerifyRfFreq+0x80>)
 800ccf0:	4423      	add	r3, r4
 800ccf2:	4a18      	ldr	r2, [pc, #96]	; (800cd54 <VerifyRfFreq+0x84>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d802      	bhi.n	800ccfe <VerifyRfFreq+0x2e>
        *band = 0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	702b      	strb	r3, [r5, #0]
 800ccfc:	e7f6      	b.n	800ccec <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800ccfe:	4b16      	ldr	r3, [pc, #88]	; (800cd58 <VerifyRfFreq+0x88>)
 800cd00:	4423      	add	r3, r4
 800cd02:	4a16      	ldr	r2, [pc, #88]	; (800cd5c <VerifyRfFreq+0x8c>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d802      	bhi.n	800cd0e <VerifyRfFreq+0x3e>
        *band = 1;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	702b      	strb	r3, [r5, #0]
 800cd0c:	e7ee      	b.n	800ccec <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800cd0e:	4b14      	ldr	r3, [pc, #80]	; (800cd60 <VerifyRfFreq+0x90>)
 800cd10:	4423      	add	r3, r4
 800cd12:	4a14      	ldr	r2, [pc, #80]	; (800cd64 <VerifyRfFreq+0x94>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d802      	bhi.n	800cd1e <VerifyRfFreq+0x4e>
        *band = 5;
 800cd18:	2305      	movs	r3, #5
 800cd1a:	702b      	strb	r3, [r5, #0]
 800cd1c:	e7e6      	b.n	800ccec <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800cd1e:	4b12      	ldr	r3, [pc, #72]	; (800cd68 <VerifyRfFreq+0x98>)
 800cd20:	4423      	add	r3, r4
 800cd22:	4a12      	ldr	r2, [pc, #72]	; (800cd6c <VerifyRfFreq+0x9c>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d802      	bhi.n	800cd2e <VerifyRfFreq+0x5e>
        *band = 3;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	702b      	strb	r3, [r5, #0]
 800cd2c:	e7de      	b.n	800ccec <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800cd2e:	4b10      	ldr	r3, [pc, #64]	; (800cd70 <VerifyRfFreq+0xa0>)
 800cd30:	4423      	add	r3, r4
 800cd32:	4a10      	ldr	r2, [pc, #64]	; (800cd74 <VerifyRfFreq+0xa4>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d802      	bhi.n	800cd3e <VerifyRfFreq+0x6e>
        *band = 4;
 800cd38:	2304      	movs	r3, #4
 800cd3a:	702b      	strb	r3, [r5, #0]
 800cd3c:	e7d6      	b.n	800ccec <VerifyRfFreq+0x1c>
        return false;
 800cd3e:	2000      	movs	r0, #0
 800cd40:	e7d4      	b.n	800ccec <VerifyRfFreq+0x1c>
 800cd42:	bf00      	nop
 800cd44:	08012a8c 	.word	0x08012a8c
 800cd48:	cc8faa40 	.word	0xcc8faa40
 800cd4c:	001e847f 	.word	0x001e847f
 800cd50:	cc7125c0 	.word	0xcc7125c0
 800cd54:	002dc6c0 	.word	0x002dc6c0
 800cd58:	cc435eff 	.word	0xcc435eff
 800cd5c:	000927bf 	.word	0x000927bf
 800cd60:	cc38b0a0 	.word	0xcc38b0a0
 800cd64:	0007a120 	.word	0x0007a120
 800cd68:	cc2e0240 	.word	0xcc2e0240
 800cd6c:	0003d090 	.word	0x0003d090
 800cd70:	cc296e60 	.word	0xcc296e60
 800cd74:	000493e0 	.word	0x000493e0

0800cd78 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800cd78:	b570      	push	{r4, r5, r6, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800cd80:	4b13      	ldr	r3, [pc, #76]	; (800cdd0 <GetTimeOnAir+0x58>)
 800cd82:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800cd84:	4913      	ldr	r1, [pc, #76]	; (800cdd4 <GetTimeOnAir+0x5c>)
 800cd86:	f7ff ff5f 	bl	800cc48 <RegionCommonGetBandwidth>
 800cd8a:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800cd8c:	2d07      	cmp	r5, #7
 800cd8e:	d00e      	beq.n	800cdae <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800cd90:	4b11      	ldr	r3, [pc, #68]	; (800cdd8 <GetTimeOnAir+0x60>)
 800cd92:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800cd94:	2001      	movs	r0, #1
 800cd96:	9003      	str	r0, [sp, #12]
 800cd98:	b2e4      	uxtb	r4, r4
 800cd9a:	9402      	str	r4, [sp, #8]
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9301      	str	r3, [sp, #4]
 800cda0:	2308      	movs	r3, #8
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	4603      	mov	r3, r0
 800cda6:	4632      	mov	r2, r6
 800cda8:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800cdaa:	b004      	add	sp, #16
 800cdac:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800cdae:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <GetTimeOnAir+0x60>)
 800cdb0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	9303      	str	r3, [sp, #12]
 800cdb6:	b2e4      	uxtb	r4, r4
 800cdb8:	9402      	str	r4, [sp, #8]
 800cdba:	2000      	movs	r0, #0
 800cdbc:	9001      	str	r0, [sp, #4]
 800cdbe:	2305      	movs	r3, #5
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cdc8:	fb06 f202 	mul.w	r2, r6, r2
 800cdcc:	47a8      	blx	r5
 800cdce:	e7ec      	b.n	800cdaa <GetTimeOnAir+0x32>
 800cdd0:	0801248c 	.word	0x0801248c
 800cdd4:	0801246c 	.word	0x0801246c
 800cdd8:	08012a8c 	.word	0x08012a8c

0800cddc <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800cddc:	b500      	push	{lr}
 800cdde:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800cde0:	2300      	movs	r3, #0
 800cde2:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800cde4:	7803      	ldrb	r3, [r0, #0]
 800cde6:	3b0b      	subs	r3, #11
 800cde8:	2b2d      	cmp	r3, #45	; 0x2d
 800cdea:	d82f      	bhi.n	800ce4c <RegionEU868GetPhyParam+0x70>
 800cdec:	e8df f003 	tbb	[pc, r3]
 800cdf0:	3f393633 	.word	0x3f393633
 800cdf4:	504c4845 	.word	0x504c4845
 800cdf8:	2e5c5854 	.word	0x2e5c5854
 800cdfc:	6e682e65 	.word	0x6e682e65
 800ce00:	2e2e7774 	.word	0x2e2e7774
 800ce04:	2e177f7b 	.word	0x2e177f7b
 800ce08:	2e2e2e2e 	.word	0x2e2e2e2e
 800ce0c:	2e2e2e2e 	.word	0x2e2e2e2e
 800ce10:	2e2e2e2e 	.word	0x2e2e2e2e
 800ce14:	2e8c8582 	.word	0x2e8c8582
 800ce18:	2e928f2e 	.word	0x2e928f2e
 800ce1c:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800ce1e:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ce22:	f88d 3004 	strb.w	r3, [sp, #4]
 800ce26:	2307      	movs	r3, #7
 800ce28:	f88d 3005 	strb.w	r3, [sp, #5]
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f88d 3006 	strb.w	r3, [sp, #6]
 800ce32:	2310      	movs	r3, #16
 800ce34:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800ce38:	4b3e      	ldr	r3, [pc, #248]	; (800cf34 <RegionEU868GetPhyParam+0x158>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ce40:	9202      	str	r2, [sp, #8]
 800ce42:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800ce44:	a801      	add	r0, sp, #4
 800ce46:	f7ff fedb 	bl	800cc00 <RegionCommonGetNextLowerTxDr>
 800ce4a:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800ce4c:	9804      	ldr	r0, [sp, #16]
 800ce4e:	9005      	str	r0, [sp, #20]
}
 800ce50:	b007      	add	sp, #28
 800ce52:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800ce56:	2340      	movs	r3, #64	; 0x40
 800ce58:	9304      	str	r3, [sp, #16]
            break;
 800ce5a:	e7f7      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800ce5c:	2320      	movs	r3, #32
 800ce5e:	9304      	str	r3, [sp, #16]
            break;
 800ce60:	e7f4      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800ce62:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ce66:	4a34      	ldr	r2, [pc, #208]	; (800cf38 <RegionEU868GetPhyParam+0x15c>)
 800ce68:	5cd3      	ldrb	r3, [r2, r3]
 800ce6a:	9304      	str	r3, [sp, #16]
            break;
 800ce6c:	e7ee      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800ce6e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ce72:	4a32      	ldr	r2, [pc, #200]	; (800cf3c <RegionEU868GetPhyParam+0x160>)
 800ce74:	5cd3      	ldrb	r3, [r2, r3]
 800ce76:	9304      	str	r3, [sp, #16]
            break;
 800ce78:	e7e8      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	9304      	str	r3, [sp, #16]
            break;
 800ce7e:	e7e5      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800ce80:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ce84:	9304      	str	r3, [sp, #16]
            break;
 800ce86:	e7e1      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800ce88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce8c:	9304      	str	r3, [sp, #16]
            break;
 800ce8e:	e7dd      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800ce90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ce94:	9304      	str	r3, [sp, #16]
            break;
 800ce96:	e7d9      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800ce98:	f241 3388 	movw	r3, #5000	; 0x1388
 800ce9c:	9304      	str	r3, [sp, #16]
            break;
 800ce9e:	e7d5      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800cea0:	f241 7370 	movw	r3, #6000	; 0x1770
 800cea4:	9304      	str	r3, [sp, #16]
            break;
 800cea6:	e7d1      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800cea8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ceac:	4824      	ldr	r0, [pc, #144]	; (800cf40 <RegionEU868GetPhyParam+0x164>)
 800ceae:	f002 fa21 	bl	800f2f4 <randr>
 800ceb2:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800ceb6:	9004      	str	r0, [sp, #16]
            break;
 800ceb8:	e7c8      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800ceba:	4b22      	ldr	r3, [pc, #136]	; (800cf44 <RegionEU868GetPhyParam+0x168>)
 800cebc:	9304      	str	r3, [sp, #16]
            break;
 800cebe:	e7c5      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800cec0:	4b1c      	ldr	r3, [pc, #112]	; (800cf34 <RegionEU868GetPhyParam+0x158>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800cec8:	9304      	str	r3, [sp, #16]
            break;
 800ceca:	e7bf      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800cecc:	4b19      	ldr	r3, [pc, #100]	; (800cf34 <RegionEU868GetPhyParam+0x158>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800ced4:	9304      	str	r3, [sp, #16]
            break;
 800ced6:	e7b9      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800ced8:	2310      	movs	r3, #16
 800ceda:	9304      	str	r3, [sp, #16]
            break;
 800cedc:	e7b6      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800cede:	4b15      	ldr	r3, [pc, #84]	; (800cf34 <RegionEU868GetPhyParam+0x158>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	9304      	str	r3, [sp, #16]
            break;
 800cee4:	e7b2      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800cee6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800ceea:	9304      	str	r3, [sp, #16]
            break;
 800ceec:	e7ae      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800ceee:	4b16      	ldr	r3, [pc, #88]	; (800cf48 <RegionEU868GetPhyParam+0x16c>)
 800cef0:	9304      	str	r3, [sp, #16]
            break;
 800cef2:	e7ab      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800cef4:	4b13      	ldr	r3, [pc, #76]	; (800cf44 <RegionEU868GetPhyParam+0x168>)
 800cef6:	9304      	str	r3, [sp, #16]
            break;
 800cef8:	e7a8      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800cefa:	2311      	movs	r3, #17
 800cefc:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800cf00:	2301      	movs	r3, #1
 800cf02:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800cf06:	e7a1      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800cf08:	2303      	movs	r3, #3
 800cf0a:	9304      	str	r3, [sp, #16]
            break;
 800cf0c:	e79e      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800cf0e:	4b0d      	ldr	r3, [pc, #52]	; (800cf44 <RegionEU868GetPhyParam+0x168>)
 800cf10:	9304      	str	r3, [sp, #16]
            break;
 800cf12:	e79b      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800cf14:	2303      	movs	r3, #3
 800cf16:	9304      	str	r3, [sp, #16]
            break;
 800cf18:	e798      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800cf1a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cf1e:	4a0b      	ldr	r2, [pc, #44]	; (800cf4c <RegionEU868GetPhyParam+0x170>)
 800cf20:	5cd3      	ldrb	r3, [r2, r3]
 800cf22:	9304      	str	r3, [sp, #16]
            break;
 800cf24:	e792      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800cf26:	490a      	ldr	r1, [pc, #40]	; (800cf50 <RegionEU868GetPhyParam+0x174>)
 800cf28:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800cf2c:	f7ff fe8c 	bl	800cc48 <RegionCommonGetBandwidth>
 800cf30:	9004      	str	r0, [sp, #16]
            break;
 800cf32:	e78b      	b.n	800ce4c <RegionEU868GetPhyParam+0x70>
 800cf34:	20000e28 	.word	0x20000e28
 800cf38:	08012494 	.word	0x08012494
 800cf3c:	0801249c 	.word	0x0801249c
 800cf40:	fffffc18 	.word	0xfffffc18
 800cf44:	33d3e608 	.word	0x33d3e608
 800cf48:	4009999a 	.word	0x4009999a
 800cf4c:	0801248c 	.word	0x0801248c
 800cf50:	0801246c 	.word	0x0801246c

0800cf54 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800cf54:	b510      	push	{r4, lr}
 800cf56:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800cf58:	4b0b      	ldr	r3, [pc, #44]	; (800cf88 <RegionEU868SetBandTxDone+0x34>)
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	7803      	ldrb	r3, [r0, #0]
 800cf5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cf62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf66:	7a5b      	ldrb	r3, [r3, #9]
 800cf68:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800cf6c:	4b07      	ldr	r3, [pc, #28]	; (800cf8c <RegionEU868SetBandTxDone+0x38>)
 800cf6e:	681c      	ldr	r4, [r3, #0]
 800cf70:	6903      	ldr	r3, [r0, #16]
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	68c3      	ldr	r3, [r0, #12]
 800cf76:	7842      	ldrb	r2, [r0, #1]
 800cf78:	6881      	ldr	r1, [r0, #8]
 800cf7a:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800cf7e:	f7ff fc18 	bl	800c7b2 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800cf82:	b002      	add	sp, #8
 800cf84:	bd10      	pop	{r4, pc}
 800cf86:	bf00      	nop
 800cf88:	20000e28 	.word	0x20000e28
 800cf8c:	20000e24 	.word	0x20000e24

0800cf90 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800cf90:	b530      	push	{r4, r5, lr}
 800cf92:	b0a5      	sub	sp, #148	; 0x94
 800cf94:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800cf96:	2290      	movs	r2, #144	; 0x90
 800cf98:	2100      	movs	r1, #0
 800cf9a:	4668      	mov	r0, sp
 800cf9c:	f004 fe38 	bl	8011c10 <memset>
 800cfa0:	2364      	movs	r3, #100	; 0x64
 800cfa2:	f8ad 3000 	strh.w	r3, [sp]
 800cfa6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cfaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cfae:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800cfb2:	210a      	movs	r1, #10
 800cfb4:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800cfb8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800cfbc:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800cfc0:	7b23      	ldrb	r3, [r4, #12]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d032      	beq.n	800d02c <RegionEU868InitDefaults+0x9c>
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	d03e      	beq.n	800d048 <RegionEU868InitDefaults+0xb8>
 800cfca:	b10b      	cbz	r3, 800cfd0 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800cfcc:	b025      	add	sp, #148	; 0x94
 800cfce:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800cfd0:	6823      	ldr	r3, [r4, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0fa      	beq.n	800cfcc <RegionEU868InitDefaults+0x3c>
 800cfd6:	6863      	ldr	r3, [r4, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d0f7      	beq.n	800cfcc <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800cfdc:	4d1f      	ldr	r5, [pc, #124]	; (800d05c <RegionEU868InitDefaults+0xcc>)
 800cfde:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800cfe0:	68a0      	ldr	r0, [r4, #8]
 800cfe2:	4b1f      	ldr	r3, [pc, #124]	; (800d060 <RegionEU868InitDefaults+0xd0>)
 800cfe4:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800cfe6:	2290      	movs	r2, #144	; 0x90
 800cfe8:	4669      	mov	r1, sp
 800cfea:	f002 f990 	bl	800f30e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800cfee:	682c      	ldr	r4, [r5, #0]
 800cff0:	4b1c      	ldr	r3, [pc, #112]	; (800d064 <RegionEU868InitDefaults+0xd4>)
 800cff2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800cffa:	f104 0c0c 	add.w	ip, r4, #12
 800cffe:	f103 020c 	add.w	r2, r3, #12
 800d002:	ca07      	ldmia	r2, {r0, r1, r2}
 800d004:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d008:	f104 0c18 	add.w	ip, r4, #24
 800d00c:	3318      	adds	r3, #24
 800d00e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d012:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d016:	2307      	movs	r3, #7
 800d018:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d01c:	2201      	movs	r2, #1
 800d01e:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800d022:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800d026:	f7ff fbb5 	bl	800c794 <RegionCommonChanMaskCopy>
            break;
 800d02a:	e7cf      	b.n	800cfcc <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800d02c:	4b0b      	ldr	r3, [pc, #44]	; (800d05c <RegionEU868InitDefaults+0xcc>)
 800d02e:	6818      	ldr	r0, [r3, #0]
 800d030:	2300      	movs	r3, #0
 800d032:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800d034:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800d036:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d038:	2201      	movs	r2, #1
 800d03a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800d03e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d042:	f7ff fba7 	bl	800c794 <RegionCommonChanMaskCopy>
            break;
 800d046:	e7c1      	b.n	800cfcc <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800d048:	4b04      	ldr	r3, [pc, #16]	; (800d05c <RegionEU868InitDefaults+0xcc>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800d050:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800d054:	430a      	orrs	r2, r1
 800d056:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800d05a:	e7b7      	b.n	800cfcc <RegionEU868InitDefaults+0x3c>
 800d05c:	20000e28 	.word	0x20000e28
 800d060:	20000e24 	.word	0x20000e24
 800d064:	08011d80 	.word	0x08011d80

0800d068 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d068:	b500      	push	{lr}
 800d06a:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800d06c:	290f      	cmp	r1, #15
 800d06e:	d83c      	bhi.n	800d0ea <RegionEU868Verify+0x82>
 800d070:	e8df f001 	tbb	[pc, r1]
 800d074:	3b3b3b0a 	.word	0x3b3b3b0a
 800d078:	271d133b 	.word	0x271d133b
 800d07c:	3b31313b 	.word	0x3b31313b
 800d080:	083b3b3b 	.word	0x083b3b3b
 800d084:	2001      	movs	r0, #1
 800d086:	e031      	b.n	800d0ec <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800d08e:	f10d 0107 	add.w	r1, sp, #7
 800d092:	6800      	ldr	r0, [r0, #0]
 800d094:	f7ff fe1c 	bl	800ccd0 <VerifyRfFreq>
 800d098:	e028      	b.n	800d0ec <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800d09a:	2207      	movs	r2, #7
 800d09c:	2100      	movs	r1, #0
 800d09e:	f990 0000 	ldrsb.w	r0, [r0]
 800d0a2:	f7ff fb06 	bl	800c6b2 <RegionCommonValueInRange>
 800d0a6:	3800      	subs	r0, #0
 800d0a8:	bf18      	it	ne
 800d0aa:	2001      	movne	r0, #1
 800d0ac:	e01e      	b.n	800d0ec <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d0ae:	2205      	movs	r2, #5
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	f990 0000 	ldrsb.w	r0, [r0]
 800d0b6:	f7ff fafc 	bl	800c6b2 <RegionCommonValueInRange>
 800d0ba:	3800      	subs	r0, #0
 800d0bc:	bf18      	it	ne
 800d0be:	2001      	movne	r0, #1
 800d0c0:	e014      	b.n	800d0ec <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800d0c2:	2207      	movs	r2, #7
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	f990 0000 	ldrsb.w	r0, [r0]
 800d0ca:	f7ff faf2 	bl	800c6b2 <RegionCommonValueInRange>
 800d0ce:	3800      	subs	r0, #0
 800d0d0:	bf18      	it	ne
 800d0d2:	2001      	movne	r0, #1
 800d0d4:	e00a      	b.n	800d0ec <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800d0d6:	2207      	movs	r2, #7
 800d0d8:	2100      	movs	r1, #0
 800d0da:	f990 0000 	ldrsb.w	r0, [r0]
 800d0de:	f7ff fae8 	bl	800c6b2 <RegionCommonValueInRange>
 800d0e2:	3800      	subs	r0, #0
 800d0e4:	bf18      	it	ne
 800d0e6:	2001      	movne	r0, #1
 800d0e8:	e000      	b.n	800d0ec <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800d0ea:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800d0ec:	b003      	add	sp, #12
 800d0ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d0f4 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d0f4:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800d0f6:	7903      	ldrb	r3, [r0, #4]
 800d0f8:	b11b      	cbz	r3, 800d102 <RegionEU868ChanMaskSet+0xe>
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d00b      	beq.n	800d116 <RegionEU868ChanMaskSet+0x22>
 800d0fe:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d100:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d102:	4b0a      	ldr	r3, [pc, #40]	; (800d12c <RegionEU868ChanMaskSet+0x38>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2201      	movs	r2, #1
 800d108:	6801      	ldr	r1, [r0, #0]
 800d10a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800d10e:	f7ff fb41 	bl	800c794 <RegionCommonChanMaskCopy>
    return true;
 800d112:	2001      	movs	r0, #1
            break;
 800d114:	e7f4      	b.n	800d100 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d116:	4b05      	ldr	r3, [pc, #20]	; (800d12c <RegionEU868ChanMaskSet+0x38>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2201      	movs	r2, #1
 800d11c:	6801      	ldr	r1, [r0, #0]
 800d11e:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800d122:	f7ff fb37 	bl	800c794 <RegionCommonChanMaskCopy>
    return true;
 800d126:	2001      	movs	r0, #1
            break;
 800d128:	e7ea      	b.n	800d100 <RegionEU868ChanMaskSet+0xc>
 800d12a:	bf00      	nop
 800d12c:	20000e28 	.word	0x20000e28

0800d130 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d132:	b083      	sub	sp, #12
 800d134:	460e      	mov	r6, r1
 800d136:	4617      	mov	r7, r2
 800d138:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d13a:	2807      	cmp	r0, #7
 800d13c:	bfa8      	it	ge
 800d13e:	2007      	movge	r0, #7
 800d140:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800d142:	4913      	ldr	r1, [pc, #76]	; (800d190 <RegionEU868ComputeRxWindowParameters+0x60>)
 800d144:	f7ff fd80 	bl	800cc48 <RegionCommonGetBandwidth>
 800d148:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d14a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d14e:	2b07      	cmp	r3, #7
 800d150:	d017      	beq.n	800d182 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d152:	4a0f      	ldr	r2, [pc, #60]	; (800d190 <RegionEU868ComputeRxWindowParameters+0x60>)
 800d154:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d158:	4a0e      	ldr	r2, [pc, #56]	; (800d194 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d15a:	5cd0      	ldrb	r0, [r2, r3]
 800d15c:	f7ff fc40 	bl	800c9e0 <RegionCommonComputeSymbolTimeLoRa>
 800d160:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d162:	4b0d      	ldr	r3, [pc, #52]	; (800d198 <RegionEU868ComputeRxWindowParameters+0x68>)
 800d164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d166:	4798      	blx	r3
 800d168:	4603      	mov	r3, r0
 800d16a:	f104 020c 	add.w	r2, r4, #12
 800d16e:	9201      	str	r2, [sp, #4]
 800d170:	3408      	adds	r4, #8
 800d172:	9400      	str	r4, [sp, #0]
 800d174:	463a      	mov	r2, r7
 800d176:	4631      	mov	r1, r6
 800d178:	4628      	mov	r0, r5
 800d17a:	f7ff fc3f 	bl	800c9fc <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800d17e:	b003      	add	sp, #12
 800d180:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800d182:	4a04      	ldr	r2, [pc, #16]	; (800d194 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d184:	5cd0      	ldrb	r0, [r2, r3]
 800d186:	f7ff fc33 	bl	800c9f0 <RegionCommonComputeSymbolTimeFsk>
 800d18a:	4605      	mov	r5, r0
 800d18c:	e7e9      	b.n	800d162 <RegionEU868ComputeRxWindowParameters+0x32>
 800d18e:	bf00      	nop
 800d190:	0801246c 	.word	0x0801246c
 800d194:	0801248c 	.word	0x0801248c
 800d198:	08012a8c 	.word	0x08012a8c

0800d19c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a0:	b08a      	sub	sp, #40	; 0x28
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d1a6:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d1aa:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d1ae:	4b37      	ldr	r3, [pc, #220]	; (800d28c <RegionEU868RxConfig+0xf0>)
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	4798      	blx	r3
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d167      	bne.n	800d288 <RegionEU868RxConfig+0xec>
 800d1b8:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d1ba:	7ce3      	ldrb	r3, [r4, #19]
 800d1bc:	b983      	cbnz	r3, 800d1e0 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d1be:	4b34      	ldr	r3, [pc, #208]	; (800d290 <RegionEU868RxConfig+0xf4>)
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	7823      	ldrb	r3, [r4, #0]
 800d1c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d1c8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d1cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d1d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d1d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800d1d8:	f1b8 0f00 	cmp.w	r8, #0
 800d1dc:	d100      	bne.n	800d1e0 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d1de:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800d1e0:	4b2c      	ldr	r3, [pc, #176]	; (800d294 <RegionEU868RxConfig+0xf8>)
 800d1e2:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800d1e6:	4b29      	ldr	r3, [pc, #164]	; (800d28c <RegionEU868RxConfig+0xf0>)
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	4640      	mov	r0, r8
 800d1ec:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800d1ee:	2d07      	cmp	r5, #7
 800d1f0:	d02b      	beq.n	800d24a <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d1f2:	4b26      	ldr	r3, [pc, #152]	; (800d28c <RegionEU868RxConfig+0xf0>)
 800d1f4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d1f8:	7ca3      	ldrb	r3, [r4, #18]
 800d1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d1fc:	2601      	movs	r6, #1
 800d1fe:	9608      	str	r6, [sp, #32]
 800d200:	2300      	movs	r3, #0
 800d202:	9307      	str	r3, [sp, #28]
 800d204:	9306      	str	r3, [sp, #24]
 800d206:	9305      	str	r3, [sp, #20]
 800d208:	9304      	str	r3, [sp, #16]
 800d20a:	9303      	str	r3, [sp, #12]
 800d20c:	8922      	ldrh	r2, [r4, #8]
 800d20e:	9202      	str	r2, [sp, #8]
 800d210:	2208      	movs	r2, #8
 800d212:	9201      	str	r2, [sp, #4]
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	4633      	mov	r3, r6
 800d218:	464a      	mov	r2, r9
 800d21a:	78a1      	ldrb	r1, [r4, #2]
 800d21c:	4630      	mov	r0, r6
 800d21e:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800d220:	7c63      	ldrb	r3, [r4, #17]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d02d      	beq.n	800d282 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800d226:	4b1c      	ldr	r3, [pc, #112]	; (800d298 <RegionEU868RxConfig+0xfc>)
 800d228:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d22a:	4b18      	ldr	r3, [pc, #96]	; (800d28c <RegionEU868RxConfig+0xf0>)
 800d22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d22e:	310d      	adds	r1, #13
 800d230:	b2c9      	uxtb	r1, r1
 800d232:	4630      	mov	r0, r6
 800d234:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d236:	462a      	mov	r2, r5
 800d238:	4641      	mov	r1, r8
 800d23a:	7ce0      	ldrb	r0, [r4, #19]
 800d23c:	f7ff fd16 	bl	800cc6c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800d240:	703d      	strb	r5, [r7, #0]
    return true;
 800d242:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800d244:	b00a      	add	sp, #40	; 0x28
 800d246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d24a:	4b10      	ldr	r3, [pc, #64]	; (800d28c <RegionEU868RxConfig+0xf0>)
 800d24c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d250:	7ca3      	ldrb	r3, [r4, #18]
 800d252:	9309      	str	r3, [sp, #36]	; 0x24
 800d254:	2000      	movs	r0, #0
 800d256:	9008      	str	r0, [sp, #32]
 800d258:	9007      	str	r0, [sp, #28]
 800d25a:	9006      	str	r0, [sp, #24]
 800d25c:	2301      	movs	r3, #1
 800d25e:	9305      	str	r3, [sp, #20]
 800d260:	9004      	str	r0, [sp, #16]
 800d262:	9003      	str	r0, [sp, #12]
 800d264:	8923      	ldrh	r3, [r4, #8]
 800d266:	9302      	str	r3, [sp, #8]
 800d268:	2305      	movs	r3, #5
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	4b0b      	ldr	r3, [pc, #44]	; (800d29c <RegionEU868RxConfig+0x100>)
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	4603      	mov	r3, r0
 800d272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d276:	fb02 f209 	mul.w	r2, r2, r9
 800d27a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d27e:	47d0      	blx	sl
 800d280:	e7ce      	b.n	800d220 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800d282:	4b07      	ldr	r3, [pc, #28]	; (800d2a0 <RegionEU868RxConfig+0x104>)
 800d284:	5d59      	ldrb	r1, [r3, r5]
 800d286:	e7d0      	b.n	800d22a <RegionEU868RxConfig+0x8e>
        return false;
 800d288:	2000      	movs	r0, #0
 800d28a:	e7db      	b.n	800d244 <RegionEU868RxConfig+0xa8>
 800d28c:	08012a8c 	.word	0x08012a8c
 800d290:	20000e28 	.word	0x20000e28
 800d294:	0801248c 	.word	0x0801248c
 800d298:	0801249c 	.word	0x0801249c
 800d29c:	00014585 	.word	0x00014585
 800d2a0:	08012494 	.word	0x08012494

0800d2a4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a8:	b08d      	sub	sp, #52	; 0x34
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	460f      	mov	r7, r1
 800d2ae:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d2b0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d2b4:	4a42      	ldr	r2, [pc, #264]	; (800d3c0 <RegionEU868TxConfig+0x11c>)
 800d2b6:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d2ba:	4d42      	ldr	r5, [pc, #264]	; (800d3c4 <RegionEU868TxConfig+0x120>)
 800d2bc:	682a      	ldr	r2, [r5, #0]
 800d2be:	7803      	ldrb	r3, [r0, #0]
 800d2c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d2c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2c8:	7a5b      	ldrb	r3, [r3, #9]
 800d2ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d2ce:	4a3e      	ldr	r2, [pc, #248]	; (800d3c8 <RegionEU868TxConfig+0x124>)
 800d2d0:	6812      	ldr	r2, [r2, #0]
 800d2d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d2d6:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d2da:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d2de:	f7ff fcae 	bl	800cc3e <RegionCommonLimitTxPower>
 800d2e2:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800d2e4:	4939      	ldr	r1, [pc, #228]	; (800d3cc <RegionEU868TxConfig+0x128>)
 800d2e6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d2ea:	f7ff fcad 	bl	800cc48 <RegionCommonGetBandwidth>
 800d2ee:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d2f0:	68a2      	ldr	r2, [r4, #8]
 800d2f2:	6861      	ldr	r1, [r4, #4]
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f7ff fbbd 	bl	800ca74 <RegionCommonComputeTxPower>
 800d2fa:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d2fc:	4b34      	ldr	r3, [pc, #208]	; (800d3d0 <RegionEU868TxConfig+0x12c>)
 800d2fe:	68da      	ldr	r2, [r3, #12]
 800d300:	6829      	ldr	r1, [r5, #0]
 800d302:	7823      	ldrb	r3, [r4, #0]
 800d304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d308:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d30c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800d30e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d312:	2b07      	cmp	r3, #7
 800d314:	d031      	beq.n	800d37a <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d316:	4b2e      	ldr	r3, [pc, #184]	; (800d3d0 <RegionEU868TxConfig+0x12c>)
 800d318:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800d31c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d320:	9308      	str	r3, [sp, #32]
 800d322:	2200      	movs	r2, #0
 800d324:	9207      	str	r2, [sp, #28]
 800d326:	9206      	str	r2, [sp, #24]
 800d328:	9205      	str	r2, [sp, #20]
 800d32a:	2501      	movs	r5, #1
 800d32c:	9504      	str	r5, [sp, #16]
 800d32e:	9203      	str	r2, [sp, #12]
 800d330:	2308      	movs	r3, #8
 800d332:	9302      	str	r3, [sp, #8]
 800d334:	9501      	str	r5, [sp, #4]
 800d336:	f8cd a000 	str.w	sl, [sp]
 800d33a:	464b      	mov	r3, r9
 800d33c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d33e:	4628      	mov	r0, r5
 800d340:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d342:	4b20      	ldr	r3, [pc, #128]	; (800d3c4 <RegionEU868TxConfig+0x120>)
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	7823      	ldrb	r3, [r4, #0]
 800d348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d34c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d350:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d354:	f7ff fcac 	bl	800ccb0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d358:	89a1      	ldrh	r1, [r4, #12]
 800d35a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d35e:	f7ff fd0b 	bl	800cd78 <GetTimeOnAir>
 800d362:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800d366:	4b1a      	ldr	r3, [pc, #104]	; (800d3d0 <RegionEU868TxConfig+0x12c>)
 800d368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d36a:	7b21      	ldrb	r1, [r4, #12]
 800d36c:	4628      	mov	r0, r5
 800d36e:	4798      	blx	r3

    *txPower = txPowerLimited;
 800d370:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d372:	2001      	movs	r0, #1
 800d374:	b00d      	add	sp, #52	; 0x34
 800d376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d37a:	4b15      	ldr	r3, [pc, #84]	; (800d3d0 <RegionEU868TxConfig+0x12c>)
 800d37c:	69dd      	ldr	r5, [r3, #28]
 800d37e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d382:	fb03 f30a 	mul.w	r3, r3, sl
 800d386:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800d38a:	9208      	str	r2, [sp, #32]
 800d38c:	f04f 0b00 	mov.w	fp, #0
 800d390:	f8cd b01c 	str.w	fp, [sp, #28]
 800d394:	f8cd b018 	str.w	fp, [sp, #24]
 800d398:	f8cd b014 	str.w	fp, [sp, #20]
 800d39c:	2201      	movs	r2, #1
 800d39e:	9204      	str	r2, [sp, #16]
 800d3a0:	f8cd b00c 	str.w	fp, [sp, #12]
 800d3a4:	2205      	movs	r2, #5
 800d3a6:	9202      	str	r2, [sp, #8]
 800d3a8:	f8cd b004 	str.w	fp, [sp, #4]
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	464b      	mov	r3, r9
 800d3b0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800d3b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3b6:	4658      	mov	r0, fp
 800d3b8:	47a8      	blx	r5
        modem = MODEM_FSK;
 800d3ba:	465d      	mov	r5, fp
 800d3bc:	e7c1      	b.n	800d342 <RegionEU868TxConfig+0x9e>
 800d3be:	bf00      	nop
 800d3c0:	0801248c 	.word	0x0801248c
 800d3c4:	20000e28 	.word	0x20000e28
 800d3c8:	20000e24 	.word	0x20000e24
 800d3cc:	0801246c 	.word	0x0801246c
 800d3d0:	08012a8c 	.word	0x08012a8c

0800d3d4 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d3d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3d8:	b08f      	sub	sp, #60	; 0x3c
 800d3da:	4605      	mov	r5, r0
 800d3dc:	4689      	mov	r9, r1
 800d3de:	4690      	mov	r8, r2
 800d3e0:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d3e2:	2400      	movs	r4, #0
 800d3e4:	940c      	str	r4, [sp, #48]	; 0x30
 800d3e6:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800d3ea:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800d3ee:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d3f0:	e030      	b.n	800d454 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d3f2:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800d3f6:	2607      	movs	r6, #7
 800d3f8:	e012      	b.n	800d420 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800d3fa:	4a57      	ldr	r2, [pc, #348]	; (800d558 <RegionEU868LinkAdrReq+0x184>)
 800d3fc:	6812      	ldr	r2, [r2, #0]
 800d3fe:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d402:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d406:	b13a      	cbz	r2, 800d418 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800d408:	2201      	movs	r2, #1
 800d40a:	fa02 f20c 	lsl.w	r2, r2, ip
 800d40e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800d412:	430a      	orrs	r2, r1
 800d414:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d418:	f10c 0c01 	add.w	ip, ip, #1
 800d41c:	fa5f fc8c 	uxtb.w	ip, ip
 800d420:	f1bc 0f0f 	cmp.w	ip, #15
 800d424:	d816      	bhi.n	800d454 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800d426:	2b06      	cmp	r3, #6
 800d428:	d0e7      	beq.n	800d3fa <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d42a:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800d42e:	fa4e fe0c 	asr.w	lr, lr, ip
 800d432:	f01e 0f01 	tst.w	lr, #1
 800d436:	d0ef      	beq.n	800d418 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800d438:	4a47      	ldr	r2, [pc, #284]	; (800d558 <RegionEU868LinkAdrReq+0x184>)
 800d43a:	6812      	ldr	r2, [r2, #0]
 800d43c:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d440:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d444:	2a00      	cmp	r2, #0
 800d446:	d1e7      	bne.n	800d418 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800d448:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800d44c:	e7e4      	b.n	800d418 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800d44e:	2606      	movs	r6, #6
 800d450:	e000      	b.n	800d454 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800d452:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d454:	7a2b      	ldrb	r3, [r5, #8]
 800d456:	42a3      	cmp	r3, r4
 800d458:	d918      	bls.n	800d48c <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d45a:	6868      	ldr	r0, [r5, #4]
 800d45c:	a90c      	add	r1, sp, #48	; 0x30
 800d45e:	4420      	add	r0, r4
 800d460:	f7ff fa48 	bl	800c8f4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d464:	b190      	cbz	r0, 800d48c <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800d466:	4404      	add	r4, r0
 800d468:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800d46a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d46e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d472:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d476:	b90b      	cbnz	r3, 800d47c <RegionEU868LinkAdrReq+0xa8>
 800d478:	2a00      	cmp	r2, #0
 800d47a:	d0e8      	beq.n	800d44e <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d47c:	1e5a      	subs	r2, r3, #1
 800d47e:	b2d2      	uxtb	r2, r2
 800d480:	2a04      	cmp	r2, #4
 800d482:	d9e6      	bls.n	800d452 <RegionEU868LinkAdrReq+0x7e>
 800d484:	2b06      	cmp	r3, #6
 800d486:	d9b4      	bls.n	800d3f2 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800d488:	2606      	movs	r6, #6
 800d48a:	e7e3      	b.n	800d454 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d48c:	2302      	movs	r3, #2
 800d48e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d492:	7a6b      	ldrb	r3, [r5, #9]
 800d494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800d498:	a80a      	add	r0, sp, #40	; 0x28
 800d49a:	f7ff fc9f 	bl	800cddc <RegionEU868GetPhyParam>
 800d49e:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800d4a0:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d4a4:	7aab      	ldrb	r3, [r5, #10]
 800d4a6:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d4aa:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800d4ae:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d4b2:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800d4b6:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d4ba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d4be:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d4c2:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800d4c6:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d4ca:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800d4ce:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d4d2:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800d4d6:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800d4da:	2310      	movs	r3, #16
 800d4dc:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800d4e0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800d4e4:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d4e6:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800d4ea:	2307      	movs	r3, #7
 800d4ec:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d4f0:	4a19      	ldr	r2, [pc, #100]	; (800d558 <RegionEU868LinkAdrReq+0x184>)
 800d4f2:	6812      	ldr	r2, [r2, #0]
 800d4f4:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800d4f6:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d500:	682b      	ldr	r3, [r5, #0]
 800d502:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d504:	ab0c      	add	r3, sp, #48	; 0x30
 800d506:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d50a:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800d50e:	a801      	add	r0, sp, #4
 800d510:	f7ff fa0e 	bl	800c930 <RegionCommonLinkAdrReqVerifyParams>
 800d514:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d516:	2807      	cmp	r0, #7
 800d518:	d010      	beq.n	800d53c <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d51a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800d51e:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800d522:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800d526:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800d52a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d52e:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800d530:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d532:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800d534:	4628      	mov	r0, r5
 800d536:	b00f      	add	sp, #60	; 0x3c
 800d538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800d53c:	4e06      	ldr	r6, [pc, #24]	; (800d558 <RegionEU868LinkAdrReq+0x184>)
 800d53e:	6830      	ldr	r0, [r6, #0]
 800d540:	220c      	movs	r2, #12
 800d542:	2100      	movs	r1, #0
 800d544:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d548:	f001 fef9 	bl	800f33e <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800d54c:	6833      	ldr	r3, [r6, #0]
 800d54e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800d552:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800d556:	e7e0      	b.n	800d51a <RegionEU868LinkAdrReq+0x146>
 800d558:	20000e28 	.word	0x20000e28

0800d55c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d55c:	b530      	push	{r4, r5, lr}
 800d55e:	b083      	sub	sp, #12
 800d560:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d562:	2300      	movs	r3, #0
 800d564:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800d568:	f10d 0107 	add.w	r1, sp, #7
 800d56c:	6840      	ldr	r0, [r0, #4]
 800d56e:	f7ff fbaf 	bl	800ccd0 <VerifyRfFreq>
 800d572:	b1a8      	cbz	r0, 800d5a0 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800d574:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800d576:	2207      	movs	r2, #7
 800d578:	2100      	movs	r1, #0
 800d57a:	f994 0000 	ldrsb.w	r0, [r4]
 800d57e:	f7ff f898 	bl	800c6b2 <RegionCommonValueInRange>
 800d582:	b908      	cbnz	r0, 800d588 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800d584:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800d588:	2205      	movs	r2, #5
 800d58a:	2100      	movs	r1, #0
 800d58c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d590:	f7ff f88f 	bl	800c6b2 <RegionCommonValueInRange>
 800d594:	b908      	cbnz	r0, 800d59a <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d596:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800d59a:	4628      	mov	r0, r5
 800d59c:	b003      	add	sp, #12
 800d59e:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d5a0:	2506      	movs	r5, #6
 800d5a2:	e7e8      	b.n	800d576 <RegionEU868RxParamSetupReq+0x1a>

0800d5a4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a8:	4770      	bx	lr
	...

0800d5ac <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800d5ac:	b510      	push	{r4, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800d5b8:	f10d 0107 	add.w	r1, sp, #7
 800d5bc:	6840      	ldr	r0, [r0, #4]
 800d5be:	f7ff fb87 	bl	800ccd0 <VerifyRfFreq>
 800d5c2:	b178      	cbz	r0, 800d5e4 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800d5c4:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d5c6:	4b0c      	ldr	r3, [pc, #48]	; (800d5f8 <RegionEU868DlChannelReq+0x4c>)
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	7823      	ldrb	r3, [r4, #0]
 800d5cc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d5d0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d5d4:	b909      	cbnz	r1, 800d5da <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800d5d6:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800d5da:	2803      	cmp	r0, #3
 800d5dc:	d004      	beq.n	800d5e8 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800d5de:	b240      	sxtb	r0, r0
 800d5e0:	b002      	add	sp, #8
 800d5e2:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800d5e4:	2002      	movs	r0, #2
 800d5e6:	e7ee      	b.n	800d5c6 <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800d5e8:	6861      	ldr	r1, [r4, #4]
 800d5ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d5ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5f2:	6059      	str	r1, [r3, #4]
 800d5f4:	e7f3      	b.n	800d5de <RegionEU868DlChannelReq+0x32>
 800d5f6:	bf00      	nop
 800d5f8:	20000e28 	.word	0x20000e28

0800d5fc <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800d5fc:	4770      	bx	lr
	...

0800d600 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d602:	b097      	sub	sp, #92	; 0x5c
 800d604:	4604      	mov	r4, r0
 800d606:	460f      	mov	r7, r1
 800d608:	4616      	mov	r6, r2
 800d60a:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800d60c:	2100      	movs	r1, #0
 800d60e:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800d612:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d616:	9111      	str	r1, [sp, #68]	; 0x44
 800d618:	9112      	str	r1, [sp, #72]	; 0x48
 800d61a:	9113      	str	r1, [sp, #76]	; 0x4c
 800d61c:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800d61e:	2307      	movs	r3, #7
 800d620:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800d624:	4b34      	ldr	r3, [pc, #208]	; (800d6f8 <RegionEU868NextChannel+0xf8>)
 800d626:	6818      	ldr	r0, [r3, #0]
 800d628:	2201      	movs	r2, #1
 800d62a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d62e:	f7ff f89b 	bl	800c768 <RegionCommonCountChannels>
 800d632:	b938      	cbnz	r0, 800d644 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d634:	4b30      	ldr	r3, [pc, #192]	; (800d6f8 <RegionEU868NextChannel+0xf8>)
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800d63c:	f043 0307 	orr.w	r3, r3, #7
 800d640:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d644:	7a63      	ldrb	r3, [r4, #9]
 800d646:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d64a:	7a23      	ldrb	r3, [r4, #8]
 800d64c:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d650:	4b29      	ldr	r3, [pc, #164]	; (800d6f8 <RegionEU868NextChannel+0xf8>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800d658:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d65a:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800d65c:	4b27      	ldr	r3, [pc, #156]	; (800d6fc <RegionEU868NextChannel+0xfc>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800d662:	2310      	movs	r3, #16
 800d664:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800d668:	f10d 030a 	add.w	r3, sp, #10
 800d66c:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d672:	6863      	ldr	r3, [r4, #4]
 800d674:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d676:	7aa3      	ldrb	r3, [r4, #10]
 800d678:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800d67c:	2306      	movs	r3, #6
 800d67e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d682:	ab0c      	add	r3, sp, #48	; 0x30
 800d684:	f104 020c 	add.w	r2, r4, #12
 800d688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d68c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d690:	7d23      	ldrb	r3, [r4, #20]
 800d692:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d696:	8ae1      	ldrh	r1, [r4, #22]
 800d698:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800d69c:	f7ff fb6c 	bl	800cd78 <GetTimeOnAir>
 800d6a0:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d6a2:	ab03      	add	r3, sp, #12
 800d6a4:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d6a6:	9601      	str	r6, [sp, #4]
 800d6a8:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800d6ac:	9300      	str	r3, [sp, #0]
 800d6ae:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800d6b2:	aa11      	add	r2, sp, #68	; 0x44
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	a809      	add	r0, sp, #36	; 0x24
 800d6b8:	f7ff fa58 	bl	800cb6c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d6bc:	4604      	mov	r4, r0
 800d6be:	b120      	cbz	r0, 800d6ca <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800d6c0:	280c      	cmp	r0, #12
 800d6c2:	d00f      	beq.n	800d6e4 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	b017      	add	sp, #92	; 0x5c
 800d6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d6ca:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800d6ce:	3901      	subs	r1, #1
 800d6d0:	f001 fe10 	bl	800f2f4 <randr>
 800d6d4:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800d6d8:	eb0d 0003 	add.w	r0, sp, r3
 800d6dc:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800d6e0:	703b      	strb	r3, [r7, #0]
 800d6e2:	e7ef      	b.n	800d6c4 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d6e4:	4b04      	ldr	r3, [pc, #16]	; (800d6f8 <RegionEU868NextChannel+0xf8>)
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800d6ec:	f043 0307 	orr.w	r3, r3, #7
 800d6f0:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800d6f4:	e7e6      	b.n	800d6c4 <RegionEU868NextChannel+0xc4>
 800d6f6:	bf00      	nop
 800d6f8:	20000e28 	.word	0x20000e28
 800d6fc:	20000e24 	.word	0x20000e24

0800d700 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800d700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d702:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d704:	2300      	movs	r3, #0
 800d706:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800d70a:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d70c:	2d02      	cmp	r5, #2
 800d70e:	d94f      	bls.n	800d7b0 <RegionEU868ChannelAdd+0xb0>
 800d710:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800d712:	2d0f      	cmp	r5, #15
 800d714:	d84e      	bhi.n	800d7b4 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d716:	6803      	ldr	r3, [r0, #0]
 800d718:	7a18      	ldrb	r0, [r3, #8]
 800d71a:	f340 0003 	sbfx	r0, r0, #0, #4
 800d71e:	2207      	movs	r2, #7
 800d720:	2100      	movs	r1, #0
 800d722:	b240      	sxtb	r0, r0
 800d724:	f7fe ffc5 	bl	800c6b2 <RegionCommonValueInRange>
 800d728:	2800      	cmp	r0, #0
 800d72a:	d03d      	beq.n	800d7a8 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800d72c:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d72e:	6823      	ldr	r3, [r4, #0]
 800d730:	7a18      	ldrb	r0, [r3, #8]
 800d732:	f340 1003 	sbfx	r0, r0, #4, #4
 800d736:	2207      	movs	r2, #7
 800d738:	2100      	movs	r1, #0
 800d73a:	b240      	sxtb	r0, r0
 800d73c:	f7fe ffb9 	bl	800c6b2 <RegionCommonValueInRange>
 800d740:	b900      	cbnz	r0, 800d744 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800d742:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800d744:	6820      	ldr	r0, [r4, #0]
 800d746:	7a03      	ldrb	r3, [r0, #8]
 800d748:	f343 0203 	sbfx	r2, r3, #0, #4
 800d74c:	b252      	sxtb	r2, r2
 800d74e:	f343 1303 	sbfx	r3, r3, #4, #4
 800d752:	b25b      	sxtb	r3, r3
 800d754:	429a      	cmp	r2, r3
 800d756:	dd00      	ble.n	800d75a <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800d758:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800d75a:	f10d 0107 	add.w	r1, sp, #7
 800d75e:	6800      	ldr	r0, [r0, #0]
 800d760:	f7ff fab6 	bl	800ccd0 <VerifyRfFreq>
 800d764:	b310      	cbz	r0, 800d7ac <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800d766:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800d768:	b106      	cbz	r6, 800d76c <RegionEU868ChannelAdd+0x6c>
 800d76a:	bb33      	cbnz	r3, 800d7ba <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800d76c:	bb3e      	cbnz	r6, 800d7be <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800d76e:	bb43      	cbnz	r3, 800d7c2 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800d770:	4f15      	ldr	r7, [pc, #84]	; (800d7c8 <RegionEU868ChannelAdd+0xc8>)
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	006e      	lsls	r6, r5, #1
 800d776:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800d77a:	220c      	movs	r2, #12
 800d77c:	6821      	ldr	r1, [r4, #0]
 800d77e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d782:	f001 fdc4 	bl	800f30e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	442e      	add	r6, r5
 800d78a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d78e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d792:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800d794:	2301      	movs	r3, #1
 800d796:	fa03 f505 	lsl.w	r5, r3, r5
 800d79a:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800d79e:	431d      	orrs	r5, r3
 800d7a0:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e006      	b.n	800d7b6 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800d7a8:	2601      	movs	r6, #1
 800d7aa:	e7c0      	b.n	800d72e <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	e7db      	b.n	800d768 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d7b0:	2006      	movs	r0, #6
 800d7b2:	e000      	b.n	800d7b6 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d7b4:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d7b6:	b003      	add	sp, #12
 800d7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d7ba:	2006      	movs	r0, #6
 800d7bc:	e7fb      	b.n	800d7b6 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800d7be:	2005      	movs	r0, #5
 800d7c0:	e7f9      	b.n	800d7b6 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800d7c2:	2004      	movs	r0, #4
 800d7c4:	e7f7      	b.n	800d7b6 <RegionEU868ChannelAdd+0xb6>
 800d7c6:	bf00      	nop
 800d7c8:	20000e28 	.word	0x20000e28

0800d7cc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800d7cc:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d7ce:	2902      	cmp	r1, #2
 800d7d0:	d801      	bhi.n	800d7d6 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800d7d2:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800d7d4:	4770      	bx	lr
{
 800d7d6:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800d7d8:	4b09      	ldr	r3, [pc, #36]	; (800d800 <RegionEU868ChannelsRemove+0x34>)
 800d7da:	6818      	ldr	r0, [r3, #0]
 800d7dc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800d7e0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d7e4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f840 200c 	str.w	r2, [r0, ip]
 800d7ee:	605a      	str	r2, [r3, #4]
 800d7f0:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800d7f2:	2210      	movs	r2, #16
 800d7f4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d7f8:	f7fe ff9d 	bl	800c736 <RegionCommonChanDisable>
}
 800d7fc:	bd08      	pop	{r3, pc}
 800d7fe:	bf00      	nop
 800d800:	20000e28 	.word	0x20000e28

0800d804 <RegionEU868ApplyCFList>:
{
 800d804:	b570      	push	{r4, r5, r6, lr}
 800d806:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d808:	2350      	movs	r3, #80	; 0x50
 800d80a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800d80e:	7a03      	ldrb	r3, [r0, #8]
 800d810:	2b10      	cmp	r3, #16
 800d812:	d136      	bne.n	800d882 <RegionEU868ApplyCFList+0x7e>
 800d814:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800d816:	6843      	ldr	r3, [r0, #4]
 800d818:	7bdd      	ldrb	r5, [r3, #15]
 800d81a:	2d00      	cmp	r5, #0
 800d81c:	d131      	bne.n	800d882 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d81e:	2403      	movs	r4, #3
 800d820:	e01b      	b.n	800d85a <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d822:	6872      	ldr	r2, [r6, #4]
 800d824:	5d53      	ldrb	r3, [r2, r5]
 800d826:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d828:	442a      	add	r2, r5
 800d82a:	7851      	ldrb	r1, [r2, #1]
 800d82c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d830:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800d832:	7892      	ldrb	r2, [r2, #2]
 800d834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d838:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800d83a:	2264      	movs	r2, #100	; 0x64
 800d83c:	fb02 f303 	mul.w	r3, r2, r3
 800d840:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800d842:	2300      	movs	r3, #0
 800d844:	9304      	str	r3, [sp, #16]
 800d846:	e011      	b.n	800d86c <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800d848:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800d84c:	4668      	mov	r0, sp
 800d84e:	f7ff ffbd 	bl	800d7cc <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d852:	3503      	adds	r5, #3
 800d854:	b2ed      	uxtb	r5, r5
 800d856:	3401      	adds	r4, #1
 800d858:	b2e4      	uxtb	r4, r4
 800d85a:	2c0f      	cmp	r4, #15
 800d85c:	d811      	bhi.n	800d882 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800d85e:	2c07      	cmp	r4, #7
 800d860:	d9df      	bls.n	800d822 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800d862:	2300      	movs	r3, #0
 800d864:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800d866:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800d86a:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800d86c:	9b03      	ldr	r3, [sp, #12]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d0ea      	beq.n	800d848 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800d872:	ab03      	add	r3, sp, #12
 800d874:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800d876:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800d87a:	a801      	add	r0, sp, #4
 800d87c:	f7ff ff40 	bl	800d700 <RegionEU868ChannelAdd>
 800d880:	e7e7      	b.n	800d852 <RegionEU868ApplyCFList+0x4e>
}
 800d882:	b006      	add	sp, #24
 800d884:	bd70      	pop	{r4, r5, r6, pc}

0800d886 <RegionEU868NewChannelReq>:
{
 800d886:	b500      	push	{lr}
 800d888:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800d88a:	6803      	ldr	r3, [r0, #0]
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	b952      	cbnz	r2, 800d8a6 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800d890:	7903      	ldrb	r3, [r0, #4]
 800d892:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800d896:	a801      	add	r0, sp, #4
 800d898:	f7ff ff98 	bl	800d7cc <RegionEU868ChannelsRemove>
 800d89c:	b1d0      	cbz	r0, 800d8d4 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800d89e:	2003      	movs	r0, #3
}
 800d8a0:	b005      	add	sp, #20
 800d8a2:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800d8a6:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800d8a8:	7903      	ldrb	r3, [r0, #4]
 800d8aa:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800d8ae:	a802      	add	r0, sp, #8
 800d8b0:	f7ff ff26 	bl	800d700 <RegionEU868ChannelAdd>
 800d8b4:	2806      	cmp	r0, #6
 800d8b6:	d80b      	bhi.n	800d8d0 <RegionEU868NewChannelReq+0x4a>
 800d8b8:	e8df f000 	tbb	[pc, r0]
 800d8bc:	0a0a0a04 	.word	0x0a0a0a04
 800d8c0:	060e      	.short	0x060e
 800d8c2:	08          	.byte	0x08
 800d8c3:	00          	.byte	0x00
 800d8c4:	2003      	movs	r0, #3
 800d8c6:	e7eb      	b.n	800d8a0 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800d8c8:	2001      	movs	r0, #1
                break;
 800d8ca:	e7e9      	b.n	800d8a0 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800d8cc:	2000      	movs	r0, #0
                break;
 800d8ce:	e7e7      	b.n	800d8a0 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800d8d0:	2000      	movs	r0, #0
                break;
 800d8d2:	e7e5      	b.n	800d8a0 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	e7e3      	b.n	800d8a0 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800d8d8:	2002      	movs	r0, #2
 800d8da:	e7e1      	b.n	800d8a0 <RegionEU868NewChannelReq+0x1a>

0800d8dc <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800d8dc:	1a88      	subs	r0, r1, r2
 800d8de:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	db01      	blt.n	800d8e8 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800d8e4:	b2c0      	uxtb	r0, r0
 800d8e6:	4770      	bx	lr
        datarate = DR_0;
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	e7fb      	b.n	800d8e4 <RegionEU868ApplyDrOffset+0x8>

0800d8ec <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800d8ec:	b510      	push	{r4, lr}
 800d8ee:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d8f0:	4b10      	ldr	r3, [pc, #64]	; (800d934 <VerifyRfFreq+0x48>)
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	4798      	blx	r3
 800d8f6:	b1c8      	cbz	r0, 800d92c <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800d8f8:	4b0f      	ldr	r3, [pc, #60]	; (800d938 <VerifyRfFreq+0x4c>)
 800d8fa:	4423      	add	r3, r4
 800d8fc:	4a0f      	ldr	r2, [pc, #60]	; (800d93c <VerifyRfFreq+0x50>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d813      	bhi.n	800d92a <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800d902:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800d906:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800d90a:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800d90e:	fba2 1203 	umull	r1, r2, r2, r3
 800d912:	0c92      	lsrs	r2, r2, #18
 800d914:	490a      	ldr	r1, [pc, #40]	; (800d940 <VerifyRfFreq+0x54>)
 800d916:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800d91a:	b942      	cbnz	r2, 800d92e <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800d91c:	4b09      	ldr	r3, [pc, #36]	; (800d944 <VerifyRfFreq+0x58>)
 800d91e:	4423      	add	r3, r4
 800d920:	4a09      	ldr	r2, [pc, #36]	; (800d948 <VerifyRfFreq+0x5c>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d902      	bls.n	800d92c <VerifyRfFreq+0x40>
    {
        return false;
 800d926:	2000      	movs	r0, #0
 800d928:	e000      	b.n	800d92c <VerifyRfFreq+0x40>
        return false;
 800d92a:	2000      	movs	r0, #0
    }
    return true;
}
 800d92c:	bd10      	pop	{r4, pc}
        return false;
 800d92e:	2000      	movs	r0, #0
 800d930:	e7fc      	b.n	800d92c <VerifyRfFreq+0x40>
 800d932:	bf00      	nop
 800d934:	08012a8c 	.word	0x08012a8c
 800d938:	c8f78f60 	.word	0xc8f78f60
 800d93c:	00401640 	.word	0x00401640
 800d940:	000927c0 	.word	0x000927c0
 800d944:	ca37fea0 	.word	0xca37fea0
 800d948:	01808580 	.word	0x01808580

0800d94c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800d94c:	b570      	push	{r4, r5, r6, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800d952:	4b0a      	ldr	r3, [pc, #40]	; (800d97c <GetTimeOnAir+0x30>)
 800d954:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800d956:	490a      	ldr	r1, [pc, #40]	; (800d980 <GetTimeOnAir+0x34>)
 800d958:	f7ff f976 	bl	800cc48 <RegionCommonGetBandwidth>
 800d95c:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d95e:	4b09      	ldr	r3, [pc, #36]	; (800d984 <GetTimeOnAir+0x38>)
 800d960:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d962:	2001      	movs	r0, #1
 800d964:	9003      	str	r0, [sp, #12]
 800d966:	b2e4      	uxtb	r4, r4
 800d968:	9402      	str	r4, [sp, #8]
 800d96a:	2200      	movs	r2, #0
 800d96c:	9201      	str	r2, [sp, #4]
 800d96e:	2208      	movs	r2, #8
 800d970:	9200      	str	r2, [sp, #0]
 800d972:	4603      	mov	r3, r0
 800d974:	4632      	mov	r2, r6
 800d976:	47a8      	blx	r5
}
 800d978:	b004      	add	sp, #16
 800d97a:	bd70      	pop	{r4, r5, r6, pc}
 800d97c:	080124f8 	.word	0x080124f8
 800d980:	080124a4 	.word	0x080124a4
 800d984:	08012a8c 	.word	0x08012a8c

0800d988 <LimitTxPower>:
{
 800d988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98a:	4606      	mov	r6, r0
 800d98c:	4615      	mov	r5, r2
 800d98e:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800d990:	f7ff f955 	bl	800cc3e <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800d994:	2d04      	cmp	r5, #4
 800d996:	d105      	bne.n	800d9a4 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800d998:	4634      	mov	r4, r6
 800d99a:	2e02      	cmp	r6, #2
 800d99c:	bfb8      	it	lt
 800d99e:	2402      	movlt	r4, #2
}
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9a4:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800d9a6:	2204      	movs	r2, #4
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	4638      	mov	r0, r7
 800d9ac:	f7fe fedc 	bl	800c768 <RegionCommonCountChannels>
 800d9b0:	2831      	cmp	r0, #49	; 0x31
 800d9b2:	d8f5      	bhi.n	800d9a0 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800d9b4:	4634      	mov	r4, r6
 800d9b6:	2e05      	cmp	r6, #5
 800d9b8:	bfb8      	it	lt
 800d9ba:	2405      	movlt	r4, #5
 800d9bc:	e7f0      	b.n	800d9a0 <LimitTxPower+0x18>
	...

0800d9c0 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800d9c0:	b500      	push	{lr}
 800d9c2:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800d9c8:	7803      	ldrb	r3, [r0, #0]
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	2b37      	cmp	r3, #55	; 0x37
 800d9ce:	d81f      	bhi.n	800da10 <RegionUS915GetPhyParam+0x50>
 800d9d0:	e8df f003 	tbb	[pc, r3]
 800d9d4:	1e1e1e1c 	.word	0x1e1e1e1c
 800d9d8:	1e1e1e1e 	.word	0x1e1e1e1e
 800d9dc:	3e3b1e1e 	.word	0x3e3b1e1e
 800d9e0:	4d1e4741 	.word	0x4d1e4741
 800d9e4:	5d595551 	.word	0x5d595551
 800d9e8:	6d6a1e61 	.word	0x6d6a1e61
 800d9ec:	7f7c7670 	.word	0x7f7c7670
 800d9f0:	86831e1e 	.word	0x86831e1e
 800d9f4:	1e1e1e23 	.word	0x1e1e1e23
 800d9f8:	1e1e1e1e 	.word	0x1e1e1e1e
 800d9fc:	1e1e1e1e 	.word	0x1e1e1e1e
 800da00:	90891e1e 	.word	0x90891e1e
 800da04:	a01e9d9a 	.word	0xa01e9d9a
 800da08:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800da0c:	2308      	movs	r3, #8
 800da0e:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800da10:	9804      	ldr	r0, [sp, #16]
 800da12:	9005      	str	r0, [sp, #20]
}
 800da14:	b007      	add	sp, #28
 800da16:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800da1a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800da1e:	f88d 3004 	strb.w	r3, [sp, #4]
 800da22:	2304      	movs	r3, #4
 800da24:	f88d 3005 	strb.w	r3, [sp, #5]
 800da28:	2300      	movs	r3, #0
 800da2a:	f88d 3006 	strb.w	r3, [sp, #6]
 800da2e:	2348      	movs	r3, #72	; 0x48
 800da30:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800da34:	4b44      	ldr	r3, [pc, #272]	; (800db48 <RegionUS915GetPhyParam+0x188>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800da3c:	9202      	str	r2, [sp, #8]
 800da3e:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800da40:	a801      	add	r0, sp, #4
 800da42:	f7ff f8dd 	bl	800cc00 <RegionCommonGetNextLowerTxDr>
 800da46:	9004      	str	r0, [sp, #16]
            break;
 800da48:	e7e2      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800da4a:	2340      	movs	r3, #64	; 0x40
 800da4c:	9304      	str	r3, [sp, #16]
            break;
 800da4e:	e7df      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800da50:	2320      	movs	r3, #32
 800da52:	9304      	str	r3, [sp, #16]
            break;
 800da54:	e7dc      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800da56:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800da5a:	4a3c      	ldr	r2, [pc, #240]	; (800db4c <RegionUS915GetPhyParam+0x18c>)
 800da5c:	5cd3      	ldrb	r3, [r2, r3]
 800da5e:	9304      	str	r3, [sp, #16]
            break;
 800da60:	e7d6      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800da62:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800da66:	4a3a      	ldr	r2, [pc, #232]	; (800db50 <RegionUS915GetPhyParam+0x190>)
 800da68:	5cd3      	ldrb	r3, [r2, r3]
 800da6a:	9304      	str	r3, [sp, #16]
            break;
 800da6c:	e7d0      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800da6e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800da72:	9304      	str	r3, [sp, #16]
            break;
 800da74:	e7cc      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800da76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800da7a:	9304      	str	r3, [sp, #16]
            break;
 800da7c:	e7c8      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800da7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800da82:	9304      	str	r3, [sp, #16]
            break;
 800da84:	e7c4      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800da86:	f241 3388 	movw	r3, #5000	; 0x1388
 800da8a:	9304      	str	r3, [sp, #16]
            break;
 800da8c:	e7c0      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800da8e:	f241 7370 	movw	r3, #6000	; 0x1770
 800da92:	9304      	str	r3, [sp, #16]
            break;
 800da94:	e7bc      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800da96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800da9a:	482e      	ldr	r0, [pc, #184]	; (800db54 <RegionUS915GetPhyParam+0x194>)
 800da9c:	f001 fc2a 	bl	800f2f4 <randr>
 800daa0:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800daa4:	9004      	str	r0, [sp, #16]
            break;
 800daa6:	e7b3      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800daa8:	4b2b      	ldr	r3, [pc, #172]	; (800db58 <RegionUS915GetPhyParam+0x198>)
 800daaa:	9304      	str	r3, [sp, #16]
            break;
 800daac:	e7b0      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800daae:	2308      	movs	r3, #8
 800dab0:	9304      	str	r3, [sp, #16]
            break;
 800dab2:	e7ad      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800dab4:	4b24      	ldr	r3, [pc, #144]	; (800db48 <RegionUS915GetPhyParam+0x188>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800dabc:	9304      	str	r3, [sp, #16]
            break;
 800dabe:	e7a7      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800dac0:	4b21      	ldr	r3, [pc, #132]	; (800db48 <RegionUS915GetPhyParam+0x188>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800dac8:	9304      	str	r3, [sp, #16]
            break;
 800daca:	e7a1      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800dacc:	2348      	movs	r3, #72	; 0x48
 800dace:	9304      	str	r3, [sp, #16]
            break;
 800dad0:	e79e      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800dad2:	4b1d      	ldr	r3, [pc, #116]	; (800db48 <RegionUS915GetPhyParam+0x188>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	9304      	str	r3, [sp, #16]
            break;
 800dad8:	e79a      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800dada:	4b20      	ldr	r3, [pc, #128]	; (800db5c <RegionUS915GetPhyParam+0x19c>)
 800dadc:	9304      	str	r3, [sp, #16]
            break;
 800dade:	e797      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800dae0:	2300      	movs	r3, #0
 800dae2:	9304      	str	r3, [sp, #16]
            break;
 800dae4:	e794      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800dae6:	4a1e      	ldr	r2, [pc, #120]	; (800db60 <RegionUS915GetPhyParam+0x1a0>)
 800dae8:	491b      	ldr	r1, [pc, #108]	; (800db58 <RegionUS915GetPhyParam+0x198>)
 800daea:	7900      	ldrb	r0, [r0, #4]
 800daec:	f7fe fd12 	bl	800c514 <RegionBaseUSCalcDownlinkFrequency>
 800daf0:	9004      	str	r0, [sp, #16]
            break;
 800daf2:	e78d      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800daf4:	2317      	movs	r3, #23
 800daf6:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800dafa:	2304      	movs	r3, #4
 800dafc:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800db00:	2303      	movs	r3, #3
 800db02:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800db06:	e783      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800db08:	2308      	movs	r3, #8
 800db0a:	9304      	str	r3, [sp, #16]
            break;
 800db0c:	e780      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800db0e:	2308      	movs	r3, #8
 800db10:	9304      	str	r3, [sp, #16]
            break;
 800db12:	e77d      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800db14:	4a12      	ldr	r2, [pc, #72]	; (800db60 <RegionUS915GetPhyParam+0x1a0>)
 800db16:	4910      	ldr	r1, [pc, #64]	; (800db58 <RegionUS915GetPhyParam+0x198>)
 800db18:	7900      	ldrb	r0, [r0, #4]
 800db1a:	f7fe fcfb 	bl	800c514 <RegionBaseUSCalcDownlinkFrequency>
 800db1e:	9004      	str	r0, [sp, #16]
            break;
 800db20:	e776      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800db22:	2308      	movs	r3, #8
 800db24:	9304      	str	r3, [sp, #16]
            break;
 800db26:	e773      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800db28:	2308      	movs	r3, #8
 800db2a:	9304      	str	r3, [sp, #16]
            break;
 800db2c:	e770      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800db2e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800db32:	4a0c      	ldr	r2, [pc, #48]	; (800db64 <RegionUS915GetPhyParam+0x1a4>)
 800db34:	5cd3      	ldrb	r3, [r2, r3]
 800db36:	9304      	str	r3, [sp, #16]
            break;
 800db38:	e76a      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800db3a:	490b      	ldr	r1, [pc, #44]	; (800db68 <RegionUS915GetPhyParam+0x1a8>)
 800db3c:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800db40:	f7ff f882 	bl	800cc48 <RegionCommonGetBandwidth>
 800db44:	9004      	str	r0, [sp, #16]
            break;
 800db46:	e763      	b.n	800da10 <RegionUS915GetPhyParam+0x50>
 800db48:	20000e34 	.word	0x20000e34
 800db4c:	08012518 	.word	0x08012518
 800db50:	08012508 	.word	0x08012508
 800db54:	fffffc18 	.word	0xfffffc18
 800db58:	370870a0 	.word	0x370870a0
 800db5c:	4200999a 	.word	0x4200999a
 800db60:	000927c0 	.word	0x000927c0
 800db64:	080124f8 	.word	0x080124f8
 800db68:	080124a4 	.word	0x080124a4

0800db6c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800db6c:	b510      	push	{r4, lr}
 800db6e:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800db70:	4b0b      	ldr	r3, [pc, #44]	; (800dba0 <RegionUS915SetBandTxDone+0x34>)
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	7803      	ldrb	r3, [r0, #0]
 800db76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db7e:	7a5b      	ldrb	r3, [r3, #9]
 800db80:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800db84:	4b07      	ldr	r3, [pc, #28]	; (800dba4 <RegionUS915SetBandTxDone+0x38>)
 800db86:	681c      	ldr	r4, [r3, #0]
 800db88:	6903      	ldr	r3, [r0, #16]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	68c3      	ldr	r3, [r0, #12]
 800db8e:	7842      	ldrb	r2, [r0, #1]
 800db90:	6881      	ldr	r1, [r0, #8]
 800db92:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800db96:	f7fe fe0c 	bl	800c7b2 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800db9a:	b002      	add	sp, #8
 800db9c:	bd10      	pop	{r4, pc}
 800db9e:	bf00      	nop
 800dba0:	20000e34 	.word	0x20000e34
 800dba4:	20000e2c 	.word	0x20000e2c

0800dba8 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800dba8:	b510      	push	{r4, lr}
 800dbaa:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800dbac:	2301      	movs	r3, #1
 800dbae:	f8ad 3000 	strh.w	r3, [sp]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f88d 3002 	strb.w	r3, [sp, #2]
 800dbb8:	9301      	str	r3, [sp, #4]
 800dbba:	9302      	str	r3, [sp, #8]
 800dbbc:	9303      	str	r3, [sp, #12]
 800dbbe:	9304      	str	r3, [sp, #16]
 800dbc0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800dbc4:	7b04      	ldrb	r4, [r0, #12]
 800dbc6:	b174      	cbz	r4, 800dbe6 <RegionUS915InitDefaults+0x3e>
 800dbc8:	3c01      	subs	r4, #1
 800dbca:	b2e4      	uxtb	r4, r4
 800dbcc:	2c01      	cmp	r4, #1
 800dbce:	d87e      	bhi.n	800dcce <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800dbd0:	4b40      	ldr	r3, [pc, #256]	; (800dcd4 <RegionUS915InitDefaults+0x12c>)
 800dbd2:	6818      	ldr	r0, [r3, #0]
 800dbd4:	2206      	movs	r2, #6
 800dbd6:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800dbda:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800dbde:	f7fe fdd9 	bl	800c794 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e071      	b.n	800dcca <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800dbe6:	6803      	ldr	r3, [r0, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d070      	beq.n	800dcce <RegionUS915InitDefaults+0x126>
 800dbec:	6842      	ldr	r2, [r0, #4]
 800dbee:	2a00      	cmp	r2, #0
 800dbf0:	d06d      	beq.n	800dcce <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800dbf2:	4939      	ldr	r1, [pc, #228]	; (800dcd8 <RegionUS915InitDefaults+0x130>)
 800dbf4:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800dbf6:	4937      	ldr	r1, [pc, #220]	; (800dcd4 <RegionUS915InitDefaults+0x12c>)
 800dbf8:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800dbfa:	6880      	ldr	r0, [r0, #8]
 800dbfc:	4a37      	ldr	r2, [pc, #220]	; (800dcdc <RegionUS915InitDefaults+0x134>)
 800dbfe:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800dc00:	2200      	movs	r2, #0
 800dc02:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800dc04:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800dc06:	2218      	movs	r2, #24
 800dc08:	4669      	mov	r1, sp
 800dc0a:	f001 fb80 	bl	800f30e <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800dc0e:	e011      	b.n	800dc34 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800dc10:	4b30      	ldr	r3, [pc, #192]	; (800dcd4 <RegionUS915InitDefaults+0x12c>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4932      	ldr	r1, [pc, #200]	; (800dce0 <RegionUS915InitDefaults+0x138>)
 800dc16:	4a33      	ldr	r2, [pc, #204]	; (800dce4 <RegionUS915InitDefaults+0x13c>)
 800dc18:	fb01 2204 	mla	r2, r1, r4, r2
 800dc1c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800dc20:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800dc24:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800dc28:	2230      	movs	r2, #48	; 0x30
 800dc2a:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800dc30:	3401      	adds	r4, #1
 800dc32:	b2e4      	uxtb	r4, r4
 800dc34:	2c3f      	cmp	r4, #63	; 0x3f
 800dc36:	d9eb      	bls.n	800dc10 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800dc38:	2340      	movs	r3, #64	; 0x40
 800dc3a:	2b47      	cmp	r3, #71	; 0x47
 800dc3c:	d814      	bhi.n	800dc68 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800dc3e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800dc42:	4a24      	ldr	r2, [pc, #144]	; (800dcd4 <RegionUS915InitDefaults+0x12c>)
 800dc44:	6812      	ldr	r2, [r2, #0]
 800dc46:	4c28      	ldr	r4, [pc, #160]	; (800dce8 <RegionUS915InitDefaults+0x140>)
 800dc48:	4928      	ldr	r1, [pc, #160]	; (800dcec <RegionUS915InitDefaults+0x144>)
 800dc4a:	fb04 1100 	mla	r1, r4, r0, r1
 800dc4e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800dc52:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800dc56:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800dc5a:	2144      	movs	r1, #68	; 0x44
 800dc5c:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800dc5e:	2100      	movs	r1, #0
 800dc60:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800dc62:	3301      	adds	r3, #1
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	e7e8      	b.n	800dc3a <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800dc68:	4c1a      	ldr	r4, [pc, #104]	; (800dcd4 <RegionUS915InitDefaults+0x12c>)
 800dc6a:	6820      	ldr	r0, [r4, #0]
 800dc6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc70:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800dc74:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800dc78:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800dc7c:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800dc80:	23ff      	movs	r3, #255	; 0xff
 800dc82:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800dc86:	2300      	movs	r3, #0
 800dc88:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800dc8c:	2206      	movs	r2, #6
 800dc8e:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800dc92:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800dc96:	f7fe fd7d 	bl	800c794 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800dc9a:	6821      	ldr	r1, [r4, #0]
 800dc9c:	2206      	movs	r2, #6
 800dc9e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800dca2:	4b0d      	ldr	r3, [pc, #52]	; (800dcd8 <RegionUS915InitDefaults+0x130>)
 800dca4:	6818      	ldr	r0, [r3, #0]
 800dca6:	f7fe fd75 	bl	800c794 <RegionCommonChanMaskCopy>
            break;
 800dcaa:	e010      	b.n	800dcce <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800dcac:	4a0a      	ldr	r2, [pc, #40]	; (800dcd8 <RegionUS915InitDefaults+0x130>)
 800dcae:	6811      	ldr	r1, [r2, #0]
 800dcb0:	4a08      	ldr	r2, [pc, #32]	; (800dcd4 <RegionUS915InitDefaults+0x12c>)
 800dcb2:	6812      	ldr	r2, [r2, #0]
 800dcb4:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800dcb8:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800dcbc:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800dcc0:	4002      	ands	r2, r0
 800dcc2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b05      	cmp	r3, #5
 800dccc:	d9ee      	bls.n	800dcac <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800dcce:	b006      	add	sp, #24
 800dcd0:	bd10      	pop	{r4, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20000e34 	.word	0x20000e34
 800dcd8:	20000e30 	.word	0x20000e30
 800dcdc:	20000e2c 	.word	0x20000e2c
 800dce0:	00030d40 	.word	0x00030d40
 800dce4:	35c80160 	.word	0x35c80160
 800dce8:	00186a00 	.word	0x00186a00
 800dcec:	35d2afc0 	.word	0x35d2afc0

0800dcf0 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800dcf0:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800dcf2:	290a      	cmp	r1, #10
 800dcf4:	d833      	bhi.n	800dd5e <RegionUS915Verify+0x6e>
 800dcf6:	e8df f001 	tbb	[pc, r1]
 800dcfa:	3206      	.short	0x3206
 800dcfc:	0a323232 	.word	0x0a323232
 800dd00:	28321e14 	.word	0x28321e14
 800dd04:	28          	.byte	0x28
 800dd05:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800dd06:	6800      	ldr	r0, [r0, #0]
 800dd08:	f7ff fdf0 	bl	800d8ec <VerifyRfFreq>
 800dd0c:	e028      	b.n	800dd60 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800dd0e:	2204      	movs	r2, #4
 800dd10:	2100      	movs	r1, #0
 800dd12:	f990 0000 	ldrsb.w	r0, [r0]
 800dd16:	f7fe fccc 	bl	800c6b2 <RegionCommonValueInRange>
 800dd1a:	3800      	subs	r0, #0
 800dd1c:	bf18      	it	ne
 800dd1e:	2001      	movne	r0, #1
 800dd20:	e01e      	b.n	800dd60 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800dd22:	2205      	movs	r2, #5
 800dd24:	2100      	movs	r1, #0
 800dd26:	f990 0000 	ldrsb.w	r0, [r0]
 800dd2a:	f7fe fcc2 	bl	800c6b2 <RegionCommonValueInRange>
 800dd2e:	3800      	subs	r0, #0
 800dd30:	bf18      	it	ne
 800dd32:	2001      	movne	r0, #1
 800dd34:	e014      	b.n	800dd60 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800dd36:	220d      	movs	r2, #13
 800dd38:	2108      	movs	r1, #8
 800dd3a:	f990 0000 	ldrsb.w	r0, [r0]
 800dd3e:	f7fe fcb8 	bl	800c6b2 <RegionCommonValueInRange>
 800dd42:	3800      	subs	r0, #0
 800dd44:	bf18      	it	ne
 800dd46:	2001      	movne	r0, #1
 800dd48:	e00a      	b.n	800dd60 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800dd4a:	220e      	movs	r2, #14
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	f990 0000 	ldrsb.w	r0, [r0]
 800dd52:	f7fe fcae 	bl	800c6b2 <RegionCommonValueInRange>
 800dd56:	3800      	subs	r0, #0
 800dd58:	bf18      	it	ne
 800dd5a:	2001      	movne	r0, #1
 800dd5c:	e000      	b.n	800dd60 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800dd5e:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800dd60:	bd08      	pop	{r3, pc}
	...

0800dd64 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800dd64:	7a03      	ldrb	r3, [r0, #8]
 800dd66:	2b10      	cmp	r3, #16
 800dd68:	d134      	bne.n	800ddd4 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800dd6a:	6843      	ldr	r3, [r0, #4]
 800dd6c:	7bdb      	ldrb	r3, [r3, #15]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d130      	bne.n	800ddd4 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800dd72:	2200      	movs	r2, #0
 800dd74:	4613      	mov	r3, r2
 800dd76:	2a04      	cmp	r2, #4
 800dd78:	d82b      	bhi.n	800ddd2 <RegionUS915ApplyCFList+0x6e>
{
 800dd7a:	b530      	push	{r4, r5, lr}
 800dd7c:	e010      	b.n	800dda0 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800dd7e:	4916      	ldr	r1, [pc, #88]	; (800ddd8 <RegionUS915ApplyCFList+0x74>)
 800dd80:	680d      	ldr	r5, [r1, #0]
 800dd82:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 800dd86:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800dd8a:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 800dd8e:	4021      	ands	r1, r4
 800dd90:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800dd94:	3301      	adds	r3, #1
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	3202      	adds	r2, #2
 800dd9a:	b2d2      	uxtb	r2, r2
 800dd9c:	2b04      	cmp	r3, #4
 800dd9e:	d817      	bhi.n	800ddd0 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800dda0:	6841      	ldr	r1, [r0, #4]
 800dda2:	4c0e      	ldr	r4, [pc, #56]	; (800dddc <RegionUS915ApplyCFList+0x78>)
 800dda4:	6824      	ldr	r4, [r4, #0]
 800dda6:	469c      	mov	ip, r3
 800dda8:	5c89      	ldrb	r1, [r1, r2]
 800ddaa:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800ddae:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800ddb2:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800ddb6:	4496      	add	lr, r2
 800ddb8:	f89e e001 	ldrb.w	lr, [lr, #1]
 800ddbc:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800ddc0:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800ddc4:	2b04      	cmp	r3, #4
 800ddc6:	d1da      	bne.n	800dd7e <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800ddc8:	b2c9      	uxtb	r1, r1
 800ddca:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800ddce:	e7d6      	b.n	800dd7e <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800ddd0:	bd30      	pop	{r4, r5, pc}
 800ddd2:	4770      	bx	lr
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	20000e30 	.word	0x20000e30
 800dddc:	20000e34 	.word	0x20000e34

0800dde0 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800dde0:	b570      	push	{r4, r5, r6, lr}
 800dde2:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800dde4:	2204      	movs	r2, #4
 800dde6:	2100      	movs	r1, #0
 800dde8:	6800      	ldr	r0, [r0, #0]
 800ddea:	f7fe fcbd 	bl	800c768 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800ddee:	2801      	cmp	r0, #1
 800ddf0:	d031      	beq.n	800de56 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800ddf2:	792c      	ldrb	r4, [r5, #4]
 800ddf4:	b11c      	cbz	r4, 800ddfe <RegionUS915ChanMaskSet+0x1e>
 800ddf6:	2c01      	cmp	r4, #1
 800ddf8:	d023      	beq.n	800de42 <RegionUS915ChanMaskSet+0x62>
 800ddfa:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800ddfc:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ddfe:	4e17      	ldr	r6, [pc, #92]	; (800de5c <RegionUS915ChanMaskSet+0x7c>)
 800de00:	6830      	ldr	r0, [r6, #0]
 800de02:	2206      	movs	r2, #6
 800de04:	6829      	ldr	r1, [r5, #0]
 800de06:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800de0a:	f7fe fcc3 	bl	800c794 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800de0e:	6830      	ldr	r0, [r6, #0]
 800de10:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 800de14:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800de18:	2300      	movs	r3, #0
 800de1a:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800de1e:	e00c      	b.n	800de3a <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800de20:	4b0f      	ldr	r3, [pc, #60]	; (800de60 <RegionUS915ChanMaskSet+0x80>)
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800de28:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800de2c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 800de30:	400b      	ands	r3, r1
 800de32:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800de36:	3401      	adds	r4, #1
 800de38:	b2e4      	uxtb	r4, r4
 800de3a:	2c05      	cmp	r4, #5
 800de3c:	d9f0      	bls.n	800de20 <RegionUS915ChanMaskSet+0x40>
    return true;
 800de3e:	2001      	movs	r0, #1
 800de40:	e7dc      	b.n	800ddfc <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800de42:	4b06      	ldr	r3, [pc, #24]	; (800de5c <RegionUS915ChanMaskSet+0x7c>)
 800de44:	6818      	ldr	r0, [r3, #0]
 800de46:	2206      	movs	r2, #6
 800de48:	6829      	ldr	r1, [r5, #0]
 800de4a:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800de4e:	f7fe fca1 	bl	800c794 <RegionCommonChanMaskCopy>
    return true;
 800de52:	2001      	movs	r0, #1
            break;
 800de54:	e7d2      	b.n	800ddfc <RegionUS915ChanMaskSet+0x1c>
        return false;
 800de56:	2000      	movs	r0, #0
 800de58:	e7d0      	b.n	800ddfc <RegionUS915ChanMaskSet+0x1c>
 800de5a:	bf00      	nop
 800de5c:	20000e34 	.word	0x20000e34
 800de60:	20000e30 	.word	0x20000e30

0800de64 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800de64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de66:	b083      	sub	sp, #12
 800de68:	460e      	mov	r6, r1
 800de6a:	4617      	mov	r7, r2
 800de6c:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800de6e:	280d      	cmp	r0, #13
 800de70:	bfa8      	it	ge
 800de72:	200d      	movge	r0, #13
 800de74:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800de76:	4d0f      	ldr	r5, [pc, #60]	; (800deb4 <RegionUS915ComputeRxWindowParameters+0x50>)
 800de78:	4629      	mov	r1, r5
 800de7a:	f7fe fee5 	bl	800cc48 <RegionCommonGetBandwidth>
 800de7e:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800de80:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800de84:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800de88:	4a0b      	ldr	r2, [pc, #44]	; (800deb8 <RegionUS915ComputeRxWindowParameters+0x54>)
 800de8a:	5cd0      	ldrb	r0, [r2, r3]
 800de8c:	f7fe fda8 	bl	800c9e0 <RegionCommonComputeSymbolTimeLoRa>
 800de90:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800de92:	4b0a      	ldr	r3, [pc, #40]	; (800debc <RegionUS915ComputeRxWindowParameters+0x58>)
 800de94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de96:	4798      	blx	r3
 800de98:	4603      	mov	r3, r0
 800de9a:	f104 020c 	add.w	r2, r4, #12
 800de9e:	9201      	str	r2, [sp, #4]
 800dea0:	3408      	adds	r4, #8
 800dea2:	9400      	str	r4, [sp, #0]
 800dea4:	463a      	mov	r2, r7
 800dea6:	4631      	mov	r1, r6
 800dea8:	4628      	mov	r0, r5
 800deaa:	f7fe fda7 	bl	800c9fc <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800deae:	b003      	add	sp, #12
 800deb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deb2:	bf00      	nop
 800deb4:	080124a4 	.word	0x080124a4
 800deb8:	080124f8 	.word	0x080124f8
 800debc:	08012a8c 	.word	0x08012a8c

0800dec0 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800dec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dec4:	b08b      	sub	sp, #44	; 0x2c
 800dec6:	4604      	mov	r4, r0
 800dec8:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800deca:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800dece:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ded0:	4b22      	ldr	r3, [pc, #136]	; (800df5c <RegionUS915RxConfig+0x9c>)
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	4798      	blx	r3
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d13d      	bne.n	800df56 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800deda:	7ce3      	ldrb	r3, [r4, #19]
 800dedc:	b933      	cbnz	r3, 800deec <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800dede:	7827      	ldrb	r7, [r4, #0]
 800dee0:	f007 0307 	and.w	r3, r7, #7
 800dee4:	4a1e      	ldr	r2, [pc, #120]	; (800df60 <RegionUS915RxConfig+0xa0>)
 800dee6:	4f1f      	ldr	r7, [pc, #124]	; (800df64 <RegionUS915RxConfig+0xa4>)
 800dee8:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800deec:	4b1e      	ldr	r3, [pc, #120]	; (800df68 <RegionUS915RxConfig+0xa8>)
 800deee:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800def2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800df5c <RegionUS915RxConfig+0x9c>
 800def6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800defa:	4638      	mov	r0, r7
 800defc:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800defe:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800df02:	7ca3      	ldrb	r3, [r4, #18]
 800df04:	9309      	str	r3, [sp, #36]	; 0x24
 800df06:	2001      	movs	r0, #1
 800df08:	9008      	str	r0, [sp, #32]
 800df0a:	2200      	movs	r2, #0
 800df0c:	9207      	str	r2, [sp, #28]
 800df0e:	9206      	str	r2, [sp, #24]
 800df10:	9205      	str	r2, [sp, #20]
 800df12:	9204      	str	r2, [sp, #16]
 800df14:	9203      	str	r2, [sp, #12]
 800df16:	8923      	ldrh	r3, [r4, #8]
 800df18:	9302      	str	r3, [sp, #8]
 800df1a:	2308      	movs	r3, #8
 800df1c:	9301      	str	r3, [sp, #4]
 800df1e:	9200      	str	r2, [sp, #0]
 800df20:	4603      	mov	r3, r0
 800df22:	464a      	mov	r2, r9
 800df24:	78a1      	ldrb	r1, [r4, #2]
 800df26:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800df28:	7c63      	ldrb	r3, [r4, #17]
 800df2a:	b18b      	cbz	r3, 800df50 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800df2c:	4b0f      	ldr	r3, [pc, #60]	; (800df6c <RegionUS915RxConfig+0xac>)
 800df2e:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800df30:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <RegionUS915RxConfig+0x9c>)
 800df32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df34:	310d      	adds	r1, #13
 800df36:	b2c9      	uxtb	r1, r1
 800df38:	2001      	movs	r0, #1
 800df3a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800df3c:	4632      	mov	r2, r6
 800df3e:	4639      	mov	r1, r7
 800df40:	7ce0      	ldrb	r0, [r4, #19]
 800df42:	f7fe fe93 	bl	800cc6c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800df46:	702e      	strb	r6, [r5, #0]
    return true;
 800df48:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800df4a:	b00b      	add	sp, #44	; 0x2c
 800df4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800df50:	4b07      	ldr	r3, [pc, #28]	; (800df70 <RegionUS915RxConfig+0xb0>)
 800df52:	5d99      	ldrb	r1, [r3, r6]
 800df54:	e7ec      	b.n	800df30 <RegionUS915RxConfig+0x70>
        return false;
 800df56:	2000      	movs	r0, #0
 800df58:	e7f7      	b.n	800df4a <RegionUS915RxConfig+0x8a>
 800df5a:	bf00      	nop
 800df5c:	08012a8c 	.word	0x08012a8c
 800df60:	000927c0 	.word	0x000927c0
 800df64:	370870a0 	.word	0x370870a0
 800df68:	080124f8 	.word	0x080124f8
 800df6c:	08012508 	.word	0x08012508
 800df70:	08012518 	.word	0x08012518

0800df74 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800df74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df78:	b08d      	sub	sp, #52	; 0x34
 800df7a:	4604      	mov	r4, r0
 800df7c:	468b      	mov	fp, r1
 800df7e:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800df80:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800df84:	4b32      	ldr	r3, [pc, #200]	; (800e050 <RegionUS915TxConfig+0xdc>)
 800df86:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800df8a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800e054 <RegionUS915TxConfig+0xe0>
 800df8e:	f8d9 3000 	ldr.w	r3, [r9]
 800df92:	7801      	ldrb	r1, [r0, #0]
 800df94:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800df98:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800df9c:	7a49      	ldrb	r1, [r1, #9]
 800df9e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dfa2:	482d      	ldr	r0, [pc, #180]	; (800e058 <RegionUS915TxConfig+0xe4>)
 800dfa4:	6800      	ldr	r0, [r0, #0]
 800dfa6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800dfaa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800dfae:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800dfb2:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800dfb6:	f7ff fce7 	bl	800d988 <LimitTxPower>
 800dfba:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800dfbc:	4927      	ldr	r1, [pc, #156]	; (800e05c <RegionUS915TxConfig+0xe8>)
 800dfbe:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800dfc2:	f7fe fe41 	bl	800cc48 <RegionCommonGetBandwidth>
 800dfc6:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800dfc8:	2200      	movs	r2, #0
 800dfca:	4925      	ldr	r1, [pc, #148]	; (800e060 <RegionUS915TxConfig+0xec>)
 800dfcc:	4630      	mov	r0, r6
 800dfce:	f7fe fd51 	bl	800ca74 <RegionCommonComputeTxPower>
 800dfd2:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800dfd4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800e064 <RegionUS915TxConfig+0xf0>
 800dfd8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800dfdc:	f8d9 1000 	ldr.w	r1, [r9]
 800dfe0:	7823      	ldrb	r3, [r4, #0]
 800dfe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dfe6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800dfea:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800dfec:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800dff0:	9308      	str	r3, [sp, #32]
 800dff2:	2200      	movs	r2, #0
 800dff4:	9207      	str	r2, [sp, #28]
 800dff6:	9206      	str	r2, [sp, #24]
 800dff8:	9205      	str	r2, [sp, #20]
 800dffa:	2501      	movs	r5, #1
 800dffc:	9504      	str	r5, [sp, #16]
 800dffe:	9203      	str	r2, [sp, #12]
 800e000:	2308      	movs	r3, #8
 800e002:	9302      	str	r3, [sp, #8]
 800e004:	9501      	str	r5, [sp, #4]
 800e006:	f8cd a000 	str.w	sl, [sp]
 800e00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e00c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e00e:	4628      	mov	r0, r5
 800e010:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800e014:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e016:	f8d9 2000 	ldr.w	r2, [r9]
 800e01a:	7823      	ldrb	r3, [r4, #0]
 800e01c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e020:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e024:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e028:	f7fe fe42 	bl	800ccb0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800e02c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800e030:	7b21      	ldrb	r1, [r4, #12]
 800e032:	4628      	mov	r0, r5
 800e034:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e036:	89a1      	ldrh	r1, [r4, #12]
 800e038:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e03c:	f7ff fc86 	bl	800d94c <GetTimeOnAir>
 800e040:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800e042:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800e046:	4628      	mov	r0, r5
 800e048:	b00d      	add	sp, #52	; 0x34
 800e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e04e:	bf00      	nop
 800e050:	080124f8 	.word	0x080124f8
 800e054:	20000e34 	.word	0x20000e34
 800e058:	20000e2c 	.word	0x20000e2c
 800e05c:	080124a4 	.word	0x080124a4
 800e060:	41f00000 	.word	0x41f00000
 800e064:	08012a8c 	.word	0x08012a8c

0800e068 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e06c:	b091      	sub	sp, #68	; 0x44
 800e06e:	4605      	mov	r5, r0
 800e070:	4688      	mov	r8, r1
 800e072:	4617      	mov	r7, r2
 800e074:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e076:	2400      	movs	r4, #0
 800e078:	940e      	str	r4, [sp, #56]	; 0x38
 800e07a:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800e07e:	940b      	str	r4, [sp, #44]	; 0x2c
 800e080:	940c      	str	r4, [sp, #48]	; 0x30
 800e082:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800e084:	4b97      	ldr	r3, [pc, #604]	; (800e2e4 <RegionUS915LinkAdrReq+0x27c>)
 800e086:	6819      	ldr	r1, [r3, #0]
 800e088:	2206      	movs	r2, #6
 800e08a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800e08e:	a80b      	add	r0, sp, #44	; 0x2c
 800e090:	f7fe fb80 	bl	800c794 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e094:	e00d      	b.n	800e0b2 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800e096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e09a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800e09e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800e0a2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800e0a6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800e0aa:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800e0ae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e0b2:	7a2b      	ldrb	r3, [r5, #8]
 800e0b4:	42a3      	cmp	r3, r4
 800e0b6:	f240 8081 	bls.w	800e1bc <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e0ba:	6868      	ldr	r0, [r5, #4]
 800e0bc:	a90e      	add	r1, sp, #56	; 0x38
 800e0be:	4420      	add	r0, r4
 800e0c0:	f7fe fc18 	bl	800c8f4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	d079      	beq.n	800e1bc <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 800e0c8:	4404      	add	r4, r0
 800e0ca:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800e0cc:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800e0d0:	f1bc 0f06 	cmp.w	ip, #6
 800e0d4:	d0df      	beq.n	800e096 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800e0d6:	f1bc 0f07 	cmp.w	ip, #7
 800e0da:	d00a      	beq.n	800e0f2 <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800e0dc:	f1bc 0f05 	cmp.w	ip, #5
 800e0e0:	d068      	beq.n	800e1b4 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800e0e2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e0e6:	aa10      	add	r2, sp, #64	; 0x40
 800e0e8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800e0ec:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800e0f0:	e7df      	b.n	800e0b2 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800e0f8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800e0fc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800e100:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800e104:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800e108:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800e10c:	e7d1      	b.n	800e0b2 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800e10e:	aa10      	add	r2, sp, #64	; 0x40
 800e110:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e114:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e118:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800e11c:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800e120:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e124:	4313      	orrs	r3, r2
 800e126:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800e12a:	3101      	adds	r1, #1
 800e12c:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800e12e:	f10c 0c01 	add.w	ip, ip, #1
 800e132:	fa5f fc8c 	uxtb.w	ip, ip
 800e136:	f1bc 0f07 	cmp.w	ip, #7
 800e13a:	d8ba      	bhi.n	800e0b2 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800e13c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800e140:	2301      	movs	r3, #1
 800e142:	fa03 f30c 	lsl.w	r3, r3, ip
 800e146:	421a      	tst	r2, r3
 800e148:	d011      	beq.n	800e16e <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 800e14a:	f01c 0f01 	tst.w	ip, #1
 800e14e:	d1de      	bne.n	800e10e <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800e150:	aa10      	add	r2, sp, #64	; 0x40
 800e152:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e156:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e15a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800e15e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800e162:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e166:	4313      	orrs	r3, r2
 800e168:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800e16c:	e7df      	b.n	800e12e <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 800e16e:	f01c 0f01 	tst.w	ip, #1
 800e172:	d10f      	bne.n	800e194 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800e174:	aa10      	add	r2, sp, #64	; 0x40
 800e176:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e17a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e17e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800e182:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800e186:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e18a:	ea22 0303 	bic.w	r3, r2, r3
 800e18e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800e192:	e7cc      	b.n	800e12e <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800e194:	aa10      	add	r2, sp, #64	; 0x40
 800e196:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800e19a:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800e19e:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800e1a2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e1a6:	ea22 0303 	bic.w	r3, r2, r3
 800e1aa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800e1ae:	3101      	adds	r1, #1
 800e1b0:	b2c9      	uxtb	r1, r1
 800e1b2:	e7bc      	b.n	800e12e <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 800e1b4:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800e1b8:	4661      	mov	r1, ip
 800e1ba:	e7bc      	b.n	800e136 <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800e1bc:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e1c0:	2b03      	cmp	r3, #3
 800e1c2:	dd58      	ble.n	800e276 <RegionUS915LinkAdrReq+0x20e>
 800e1c4:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e1c8:	2302      	movs	r3, #2
 800e1ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e1ce:	7a6b      	ldrb	r3, [r5, #9]
 800e1d0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800e1d4:	a809      	add	r0, sp, #36	; 0x24
 800e1d6:	f7ff fbf3 	bl	800d9c0 <RegionUS915GetPhyParam>
 800e1da:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800e1dc:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e1e0:	7aab      	ldrb	r3, [r5, #10]
 800e1e2:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e1e6:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e1ea:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e1ee:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800e1f2:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e1f6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e1fa:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e1fe:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800e202:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e206:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800e20a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e20e:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800e212:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800e216:	2348      	movs	r3, #72	; 0x48
 800e218:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800e21c:	ab0b      	add	r3, sp, #44	; 0x2c
 800e21e:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e220:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800e224:	2304      	movs	r3, #4
 800e226:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e22a:	4b2e      	ldr	r3, [pc, #184]	; (800e2e4 <RegionUS915LinkAdrReq+0x27c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800e230:	230e      	movs	r3, #14
 800e232:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800e236:	2300      	movs	r3, #0
 800e238:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e240:	ab0e      	add	r3, sp, #56	; 0x38
 800e242:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800e246:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800e24a:	4668      	mov	r0, sp
 800e24c:	f7fe fb70 	bl	800c930 <RegionCommonLinkAdrReqVerifyParams>
 800e250:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e252:	2807      	cmp	r0, #7
 800e254:	d01c      	beq.n	800e290 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e256:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e25a:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800e25e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800e262:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800e264:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e268:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800e26a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e26c:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800e26e:	4628      	mov	r0, r5
 800e270:	b011      	add	sp, #68	; 0x44
 800e272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800e276:	2204      	movs	r2, #4
 800e278:	2100      	movs	r1, #0
 800e27a:	a80b      	add	r0, sp, #44	; 0x2c
 800e27c:	f7fe fa74 	bl	800c768 <RegionCommonCountChannels>
 800e280:	2801      	cmp	r0, #1
 800e282:	d902      	bls.n	800e28a <RegionUS915LinkAdrReq+0x222>
 800e284:	f04f 0907 	mov.w	r9, #7
 800e288:	e79e      	b.n	800e1c8 <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 800e28a:	f04f 0906 	mov.w	r9, #6
 800e28e:	e79b      	b.n	800e1c8 <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800e290:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800e2e4 <RegionUS915LinkAdrReq+0x27c>
 800e294:	f8d9 0000 	ldr.w	r0, [r9]
 800e298:	2206      	movs	r2, #6
 800e29a:	a90b      	add	r1, sp, #44	; 0x2c
 800e29c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e2a0:	f7fe fa78 	bl	800c794 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800e2a4:	4b10      	ldr	r3, [pc, #64]	; (800e2e8 <RegionUS915LinkAdrReq+0x280>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f8d9 2000 	ldr.w	r2, [r9]
 800e2ac:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800e2b0:	8818      	ldrh	r0, [r3, #0]
 800e2b2:	4001      	ands	r1, r0
 800e2b4:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800e2b6:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800e2ba:	8858      	ldrh	r0, [r3, #2]
 800e2bc:	4001      	ands	r1, r0
 800e2be:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800e2c0:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800e2c4:	8898      	ldrh	r0, [r3, #4]
 800e2c6:	4001      	ands	r1, r0
 800e2c8:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800e2ca:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800e2ce:	88d8      	ldrh	r0, [r3, #6]
 800e2d0:	4001      	ands	r1, r0
 800e2d2:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800e2d4:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800e2d8:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800e2da:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800e2de:	815a      	strh	r2, [r3, #10]
 800e2e0:	e7b9      	b.n	800e256 <RegionUS915LinkAdrReq+0x1ee>
 800e2e2:	bf00      	nop
 800e2e4:	20000e34 	.word	0x20000e34
 800e2e8:	20000e30 	.word	0x20000e30

0800e2ec <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e2ec:	b538      	push	{r3, r4, r5, lr}
 800e2ee:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800e2f0:	6840      	ldr	r0, [r0, #4]
 800e2f2:	f7ff fafb 	bl	800d8ec <VerifyRfFreq>
 800e2f6:	b310      	cbz	r0, 800e33e <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800e2f8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800e2fa:	220d      	movs	r2, #13
 800e2fc:	2108      	movs	r1, #8
 800e2fe:	f994 0000 	ldrsb.w	r0, [r4]
 800e302:	f7fe f9d6 	bl	800c6b2 <RegionCommonValueInRange>
 800e306:	b908      	cbnz	r0, 800e30c <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800e308:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800e30c:	2207      	movs	r2, #7
 800e30e:	2105      	movs	r1, #5
 800e310:	f994 0000 	ldrsb.w	r0, [r4]
 800e314:	f7fe f9cd 	bl	800c6b2 <RegionCommonValueInRange>
 800e318:	2801      	cmp	r0, #1
 800e31a:	d003      	beq.n	800e324 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800e31c:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800e320:	2b0d      	cmp	r3, #13
 800e322:	dd01      	ble.n	800e328 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800e324:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800e328:	2203      	movs	r2, #3
 800e32a:	2100      	movs	r1, #0
 800e32c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e330:	f7fe f9bf 	bl	800c6b2 <RegionCommonValueInRange>
 800e334:	b908      	cbnz	r0, 800e33a <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e336:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800e33a:	4628      	mov	r0, r5
 800e33c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e33e:	2506      	movs	r5, #6
 800e340:	e7db      	b.n	800e2fa <RegionUS915RxParamSetupReq+0xe>

0800e342 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e342:	f04f 30ff 	mov.w	r0, #4294967295
 800e346:	4770      	bx	lr

0800e348 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800e348:	f04f 30ff 	mov.w	r0, #4294967295
 800e34c:	4770      	bx	lr

0800e34e <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e34e:	f04f 30ff 	mov.w	r0, #4294967295
 800e352:	4770      	bx	lr

0800e354 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800e354:	b999      	cbnz	r1, 800e37e <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800e356:	4b0e      	ldr	r3, [pc, #56]	; (800e390 <RegionUS915AlternateDr+0x3c>)
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	7b53      	ldrb	r3, [r2, #13]
 800e35c:	3301      	adds	r3, #1
 800e35e:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800e360:	4b0b      	ldr	r3, [pc, #44]	; (800e390 <RegionUS915AlternateDr+0x3c>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	7b5a      	ldrb	r2, [r3, #13]
 800e366:	4b0b      	ldr	r3, [pc, #44]	; (800e394 <RegionUS915AlternateDr+0x40>)
 800e368:	fba3 1302 	umull	r1, r3, r3, r2
 800e36c:	085b      	lsrs	r3, r3, #1
 800e36e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800e372:	1ad3      	subs	r3, r2, r3
 800e374:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e378:	d007      	beq.n	800e38a <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800e37a:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800e37c:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800e37e:	4b04      	ldr	r3, [pc, #16]	; (800e390 <RegionUS915AlternateDr+0x3c>)
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	7b53      	ldrb	r3, [r2, #13]
 800e384:	3b01      	subs	r3, #1
 800e386:	7353      	strb	r3, [r2, #13]
 800e388:	e7ea      	b.n	800e360 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 800e38a:	2004      	movs	r0, #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	20000e30 	.word	0x20000e30
 800e394:	38e38e39 	.word	0x38e38e39

0800e398 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e39c:	b0a4      	sub	sp, #144	; 0x90
 800e39e:	4604      	mov	r4, r0
 800e3a0:	460e      	mov	r6, r1
 800e3a2:	4690      	mov	r8, r2
 800e3a4:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800e3a6:	2500      	movs	r5, #0
 800e3a8:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800e3ac:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800e3b0:	9511      	str	r5, [sp, #68]	; 0x44
 800e3b2:	2244      	movs	r2, #68	; 0x44
 800e3b4:	4629      	mov	r1, r5
 800e3b6:	a812      	add	r0, sp, #72	; 0x48
 800e3b8:	f003 fc2a 	bl	8011c10 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800e3bc:	2204      	movs	r2, #4
 800e3be:	4629      	mov	r1, r5
 800e3c0:	4b49      	ldr	r3, [pc, #292]	; (800e4e8 <RegionUS915NextChannel+0x150>)
 800e3c2:	6818      	ldr	r0, [r3, #0]
 800e3c4:	f7fe f9d0 	bl	800c768 <RegionCommonCountChannels>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d052      	beq.n	800e472 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800e3cc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e3d0:	2b03      	cmp	r3, #3
 800e3d2:	dd08      	ble.n	800e3e6 <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800e3d4:	4b44      	ldr	r3, [pc, #272]	; (800e4e8 <RegionUS915NextChannel+0x150>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	7a1a      	ldrb	r2, [r3, #8]
 800e3da:	b922      	cbnz	r2, 800e3e6 <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800e3dc:	4a43      	ldr	r2, [pc, #268]	; (800e4ec <RegionUS915NextChannel+0x154>)
 800e3de:	6812      	ldr	r2, [r2, #0]
 800e3e0:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800e3e4:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e3e6:	7a63      	ldrb	r3, [r4, #9]
 800e3e8:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e3ec:	7a23      	ldrb	r3, [r4, #8]
 800e3ee:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800e3f2:	4b3d      	ldr	r3, [pc, #244]	; (800e4e8 <RegionUS915NextChannel+0x150>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e3f8:	4b3c      	ldr	r3, [pc, #240]	; (800e4ec <RegionUS915NextChannel+0x154>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800e3fe:	4b3c      	ldr	r3, [pc, #240]	; (800e4f0 <RegionUS915NextChannel+0x158>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800e404:	2348      	movs	r3, #72	; 0x48
 800e406:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800e40a:	2300      	movs	r3, #0
 800e40c:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e40e:	6823      	ldr	r3, [r4, #0]
 800e410:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e412:	6863      	ldr	r3, [r4, #4]
 800e414:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e416:	7aa3      	ldrb	r3, [r4, #10]
 800e418:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800e41c:	2301      	movs	r3, #1
 800e41e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e422:	ab03      	add	r3, sp, #12
 800e424:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e426:	ab0c      	add	r3, sp, #48	; 0x30
 800e428:	f104 020c 	add.w	r2, r4, #12
 800e42c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e430:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e434:	7d23      	ldrb	r3, [r4, #20]
 800e436:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e43a:	8ae1      	ldrh	r1, [r4, #22]
 800e43c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e440:	f7ff fa84 	bl	800d94c <GetTimeOnAir>
 800e444:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e446:	f8cd 8004 	str.w	r8, [sp, #4]
 800e44a:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800e454:	aa11      	add	r2, sp, #68	; 0x44
 800e456:	4639      	mov	r1, r7
 800e458:	a809      	add	r0, sp, #36	; 0x24
 800e45a:	f7fe fb87 	bl	800cb6c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e45e:	4605      	mov	r5, r0
 800e460:	2800      	cmp	r0, #0
 800e462:	d13c      	bne.n	800e4de <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 800e464:	7a63      	ldrb	r3, [r4, #9]
 800e466:	b98b      	cbnz	r3, 800e48c <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800e468:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e46c:	b1db      	cbz	r3, 800e4a6 <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800e46e:	4603      	mov	r3, r0
 800e470:	e026      	b.n	800e4c0 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800e472:	4d1d      	ldr	r5, [pc, #116]	; (800e4e8 <RegionUS915NextChannel+0x150>)
 800e474:	4b1d      	ldr	r3, [pc, #116]	; (800e4ec <RegionUS915NextChannel+0x154>)
 800e476:	6819      	ldr	r1, [r3, #0]
 800e478:	2204      	movs	r2, #4
 800e47a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800e47e:	6828      	ldr	r0, [r5, #0]
 800e480:	f7fe f988 	bl	800c794 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800e484:	682b      	ldr	r3, [r5, #0]
 800e486:	2200      	movs	r2, #0
 800e488:	731a      	strb	r2, [r3, #12]
 800e48a:	e79f      	b.n	800e3cc <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e48c:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800e490:	3901      	subs	r1, #1
 800e492:	f000 ff2f 	bl	800f2f4 <randr>
 800e496:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800e49a:	eb0d 0003 	add.w	r0, sp, r3
 800e49e:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800e4a2:	7033      	strb	r3, [r6, #0]
 800e4a4:	e015      	b.n	800e4d2 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800e4a6:	4b10      	ldr	r3, [pc, #64]	; (800e4e8 <RegionUS915NextChannel+0x150>)
 800e4a8:	6818      	ldr	r0, [r3, #0]
 800e4aa:	4632      	mov	r2, r6
 800e4ac:	f100 010c 	add.w	r1, r0, #12
 800e4b0:	f7fd ffe2 	bl	800c478 <RegionBaseUSComputeNext125kHzJoinChannel>
 800e4b4:	2803      	cmp	r0, #3
 800e4b6:	d10c      	bne.n	800e4d2 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	e010      	b.n	800e4de <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800e4bc:	3301      	adds	r3, #1
 800e4be:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800e4c0:	4a09      	ldr	r2, [pc, #36]	; (800e4e8 <RegionUS915NextChannel+0x150>)
 800e4c2:	6812      	ldr	r2, [r2, #0]
 800e4c4:	7a10      	ldrb	r0, [r2, #8]
 800e4c6:	4118      	asrs	r0, r3
 800e4c8:	f010 0f01 	tst.w	r0, #1
 800e4cc:	d0f6      	beq.n	800e4bc <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 800e4ce:	3340      	adds	r3, #64	; 0x40
 800e4d0:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800e4d2:	2248      	movs	r2, #72	; 0x48
 800e4d4:	7831      	ldrb	r1, [r6, #0]
 800e4d6:	4b04      	ldr	r3, [pc, #16]	; (800e4e8 <RegionUS915NextChannel+0x150>)
 800e4d8:	6818      	ldr	r0, [r3, #0]
 800e4da:	f7fe f92c 	bl	800c736 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800e4de:	4628      	mov	r0, r5
 800e4e0:	b024      	add	sp, #144	; 0x90
 800e4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20000e30 	.word	0x20000e30
 800e4ec:	20000e34 	.word	0x20000e34
 800e4f0:	20000e2c 	.word	0x20000e2c

0800e4f4 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800e4f4:	4b04      	ldr	r3, [pc, #16]	; (800e508 <RegionUS915ApplyDrOffset+0x14>)
 800e4f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e4fa:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	db01      	blt.n	800e504 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800e500:	b2c0      	uxtb	r0, r0
 800e502:	4770      	bx	lr
        datarate = DR_0;
 800e504:	2000      	movs	r0, #0
 800e506:	e7fb      	b.n	800e500 <RegionUS915ApplyDrOffset+0xc>
 800e508:	080124e4 	.word	0x080124e4

0800e50c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800e50c:	b510      	push	{r4, lr}
 800e50e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800e510:	2210      	movs	r2, #16
 800e512:	2100      	movs	r1, #0
 800e514:	30f1      	adds	r0, #241	; 0xf1
 800e516:	f000 ff12 	bl	800f33e <memset1>
    ctx->M_n = 0;
 800e51a:	2100      	movs	r1, #0
 800e51c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800e520:	22f0      	movs	r2, #240	; 0xf0
 800e522:	4620      	mov	r0, r4
 800e524:	f000 ff0b 	bl	800f33e <memset1>
}
 800e528:	bd10      	pop	{r4, pc}

0800e52a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800e52a:	b508      	push	{r3, lr}
 800e52c:	4602      	mov	r2, r0
 800e52e:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800e530:	2110      	movs	r1, #16
 800e532:	f000 fb3b 	bl	800ebac <lorawan_aes_set_key>
}
 800e536:	bd08      	pop	{r3, pc}

0800e538 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800e538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e53c:	b084      	sub	sp, #16
 800e53e:	4604      	mov	r4, r0
 800e540:	460d      	mov	r5, r1
 800e542:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800e544:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d054      	beq.n	800e5f6 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800e54c:	f1c3 0810 	rsb	r8, r3, #16
 800e550:	4647      	mov	r7, r8
 800e552:	4590      	cmp	r8, r2
 800e554:	bf28      	it	cs
 800e556:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800e558:	f200 1001 	addw	r0, r0, #257	; 0x101
 800e55c:	b2ba      	uxth	r2, r7
 800e55e:	4418      	add	r0, r3
 800e560:	f000 fed5 	bl	800f30e <memcpy1>
        ctx->M_n += mlen;
 800e564:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e568:	443b      	add	r3, r7
 800e56a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800e56e:	2b0f      	cmp	r3, #15
 800e570:	d94d      	bls.n	800e60e <AES_CMAC_Update+0xd6>
 800e572:	45b0      	cmp	r8, r6
 800e574:	d24b      	bcs.n	800e60e <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800e576:	2300      	movs	r3, #0
 800e578:	e008      	b.n	800e58c <AES_CMAC_Update+0x54>
 800e57a:	18e2      	adds	r2, r4, r3
 800e57c:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800e580:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800e584:	4041      	eors	r1, r0
 800e586:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800e58a:	3301      	adds	r3, #1
 800e58c:	2b0f      	cmp	r3, #15
 800e58e:	ddf4      	ble.n	800e57a <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e590:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800e594:	2210      	movs	r2, #16
 800e596:	4641      	mov	r1, r8
 800e598:	4668      	mov	r0, sp
 800e59a:	f000 feb8 	bl	800f30e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e59e:	4622      	mov	r2, r4
 800e5a0:	4669      	mov	r1, sp
 800e5a2:	4668      	mov	r0, sp
 800e5a4:	f000 fb84 	bl	800ecb0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e5a8:	2210      	movs	r2, #16
 800e5aa:	4669      	mov	r1, sp
 800e5ac:	4640      	mov	r0, r8
 800e5ae:	f000 feae 	bl	800f30e <memcpy1>

        data += mlen;
 800e5b2:	443d      	add	r5, r7
        len -= mlen;
 800e5b4:	1bf6      	subs	r6, r6, r7
 800e5b6:	e01e      	b.n	800e5f6 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800e5b8:	eb04 0e03 	add.w	lr, r4, r3
 800e5bc:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800e5c0:	5cea      	ldrb	r2, [r5, r3]
 800e5c2:	ea8c 0c02 	eor.w	ip, ip, r2
 800e5c6:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	2b0f      	cmp	r3, #15
 800e5ce:	ddf3      	ble.n	800e5b8 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e5d0:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800e5d4:	2210      	movs	r2, #16
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	4668      	mov	r0, sp
 800e5da:	f000 fe98 	bl	800f30e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e5de:	4622      	mov	r2, r4
 800e5e0:	4669      	mov	r1, sp
 800e5e2:	4668      	mov	r0, sp
 800e5e4:	f000 fb64 	bl	800ecb0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e5e8:	2210      	movs	r2, #16
 800e5ea:	4669      	mov	r1, sp
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	f000 fe8e 	bl	800f30e <memcpy1>

        data += 16;
 800e5f2:	3510      	adds	r5, #16
        len -= 16;
 800e5f4:	3e10      	subs	r6, #16
    while( len > 16 )
 800e5f6:	2e10      	cmp	r6, #16
 800e5f8:	d901      	bls.n	800e5fe <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e7e6      	b.n	800e5cc <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800e5fe:	b2b2      	uxth	r2, r6
 800e600:	4629      	mov	r1, r5
 800e602:	f204 1001 	addw	r0, r4, #257	; 0x101
 800e606:	f000 fe82 	bl	800f30e <memcpy1>
    ctx->M_n = len;
 800e60a:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800e60e:	b004      	add	sp, #16
 800e610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e614 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800e614:	b530      	push	{r4, r5, lr}
 800e616:	b089      	sub	sp, #36	; 0x24
 800e618:	4605      	mov	r5, r0
 800e61a:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800e61c:	2210      	movs	r2, #16
 800e61e:	2100      	movs	r1, #0
 800e620:	eb0d 0002 	add.w	r0, sp, r2
 800e624:	f000 fe8b 	bl	800f33e <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800e628:	4622      	mov	r2, r4
 800e62a:	a904      	add	r1, sp, #16
 800e62c:	4608      	mov	r0, r1
 800e62e:	f000 fb3f 	bl	800ecb0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800e632:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e636:	2b00      	cmp	r3, #0
 800e638:	db01      	blt.n	800e63e <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800e63a:	2300      	movs	r3, #0
 800e63c:	e030      	b.n	800e6a0 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800e63e:	2300      	movs	r3, #0
 800e640:	2b0e      	cmp	r3, #14
 800e642:	dc11      	bgt.n	800e668 <AES_CMAC_Final+0x54>
 800e644:	f103 0220 	add.w	r2, r3, #32
 800e648:	eb0d 0102 	add.w	r1, sp, r2
 800e64c:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e650:	3301      	adds	r3, #1
 800e652:	f103 0220 	add.w	r2, r3, #32
 800e656:	446a      	add	r2, sp
 800e658:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e65c:	09d2      	lsrs	r2, r2, #7
 800e65e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e662:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e666:	e7eb      	b.n	800e640 <AES_CMAC_Final+0x2c>
 800e668:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e66c:	005b      	lsls	r3, r3, #1
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800e674:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800e678:	f88d 301f 	strb.w	r3, [sp, #31]
 800e67c:	e017      	b.n	800e6ae <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800e67e:	f103 0220 	add.w	r2, r3, #32
 800e682:	eb0d 0102 	add.w	r1, sp, r2
 800e686:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e68a:	3301      	adds	r3, #1
 800e68c:	f103 0220 	add.w	r2, r3, #32
 800e690:	446a      	add	r2, sp
 800e692:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e696:	09d2      	lsrs	r2, r2, #7
 800e698:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e69c:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e6a0:	2b0e      	cmp	r3, #14
 800e6a2:	ddec      	ble.n	800e67e <AES_CMAC_Final+0x6a>
 800e6a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800e6ae:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800e6b2:	2810      	cmp	r0, #16
 800e6b4:	d014      	beq.n	800e6e0 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e6b6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	db30      	blt.n	800e720 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800e6be:	2300      	movs	r3, #0
 800e6c0:	e041      	b.n	800e746 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800e6c2:	18e1      	adds	r1, r4, r3
 800e6c4:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800e6c8:	f103 0020 	add.w	r0, r3, #32
 800e6cc:	4468      	add	r0, sp
 800e6ce:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e6d2:	4042      	eors	r2, r0
 800e6d4:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800e6d8:	3301      	adds	r3, #1
 800e6da:	2b0f      	cmp	r3, #15
 800e6dc:	ddf1      	ble.n	800e6c2 <AES_CMAC_Final+0xae>
 800e6de:	e059      	b.n	800e794 <AES_CMAC_Final+0x180>
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	e7fa      	b.n	800e6da <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800e6e4:	f103 0220 	add.w	r2, r3, #32
 800e6e8:	eb0d 0102 	add.w	r1, sp, r2
 800e6ec:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	f103 0220 	add.w	r2, r3, #32
 800e6f6:	446a      	add	r2, sp
 800e6f8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e6fc:	09d2      	lsrs	r2, r2, #7
 800e6fe:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e702:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e706:	2b0e      	cmp	r3, #14
 800e708:	ddec      	ble.n	800e6e4 <AES_CMAC_Final+0xd0>
 800e70a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e70e:	005b      	lsls	r3, r3, #1
 800e710:	b2db      	uxtb	r3, r3
 800e712:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800e716:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800e71a:	f88d 301f 	strb.w	r3, [sp, #31]
 800e71e:	e019      	b.n	800e754 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800e720:	2300      	movs	r3, #0
 800e722:	e7f0      	b.n	800e706 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800e724:	f103 0220 	add.w	r2, r3, #32
 800e728:	eb0d 0102 	add.w	r1, sp, r2
 800e72c:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e730:	3301      	adds	r3, #1
 800e732:	f103 0220 	add.w	r2, r3, #32
 800e736:	446a      	add	r2, sp
 800e738:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e73c:	09d2      	lsrs	r2, r2, #7
 800e73e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e742:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e746:	2b0e      	cmp	r3, #14
 800e748:	ddec      	ble.n	800e724 <AES_CMAC_Final+0x110>
 800e74a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e74e:	005b      	lsls	r3, r3, #1
 800e750:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e754:	4420      	add	r0, r4
 800e756:	2380      	movs	r3, #128	; 0x80
 800e758:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e75c:	e003      	b.n	800e766 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800e75e:	4423      	add	r3, r4
 800e760:	2200      	movs	r2, #0
 800e762:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e766:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e76a:	3301      	adds	r3, #1
 800e76c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800e770:	2b0f      	cmp	r3, #15
 800e772:	d9f4      	bls.n	800e75e <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800e774:	2300      	movs	r3, #0
 800e776:	e00b      	b.n	800e790 <AES_CMAC_Final+0x17c>
 800e778:	18e1      	adds	r1, r4, r3
 800e77a:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800e77e:	f103 0020 	add.w	r0, r3, #32
 800e782:	4468      	add	r0, sp
 800e784:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e788:	4042      	eors	r2, r0
 800e78a:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800e78e:	3301      	adds	r3, #1
 800e790:	2b0f      	cmp	r3, #15
 800e792:	ddf1      	ble.n	800e778 <AES_CMAC_Final+0x164>
 800e794:	2300      	movs	r3, #0
 800e796:	e009      	b.n	800e7ac <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800e798:	18e2      	adds	r2, r4, r3
 800e79a:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800e79e:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800e7a2:	ea8c 0c01 	eor.w	ip, ip, r1
 800e7a6:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	2b0f      	cmp	r3, #15
 800e7ae:	ddf3      	ble.n	800e798 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e7b0:	2210      	movs	r2, #16
 800e7b2:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800e7b6:	4668      	mov	r0, sp
 800e7b8:	f000 fda9 	bl	800f30e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e7bc:	4622      	mov	r2, r4
 800e7be:	4629      	mov	r1, r5
 800e7c0:	4668      	mov	r0, sp
 800e7c2:	f000 fa75 	bl	800ecb0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e7c6:	2210      	movs	r2, #16
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	eb0d 0002 	add.w	r0, sp, r2
 800e7ce:	f000 fdb6 	bl	800f33e <memset1>
}
 800e7d2:	b009      	add	sp, #36	; 0x24
 800e7d4:	bd30      	pop	{r4, r5, pc}

0800e7d6 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e7d6:	780b      	ldrb	r3, [r1, #0]
 800e7d8:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e7da:	784b      	ldrb	r3, [r1, #1]
 800e7dc:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e7de:	788b      	ldrb	r3, [r1, #2]
 800e7e0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e7e2:	78cb      	ldrb	r3, [r1, #3]
 800e7e4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e7e6:	790b      	ldrb	r3, [r1, #4]
 800e7e8:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e7ea:	794b      	ldrb	r3, [r1, #5]
 800e7ec:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e7ee:	798b      	ldrb	r3, [r1, #6]
 800e7f0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e7f2:	79cb      	ldrb	r3, [r1, #7]
 800e7f4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e7f6:	7a0b      	ldrb	r3, [r1, #8]
 800e7f8:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e7fa:	7a4b      	ldrb	r3, [r1, #9]
 800e7fc:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e7fe:	7a8b      	ldrb	r3, [r1, #10]
 800e800:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e802:	7acb      	ldrb	r3, [r1, #11]
 800e804:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e806:	7b0b      	ldrb	r3, [r1, #12]
 800e808:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e80a:	7b4b      	ldrb	r3, [r1, #13]
 800e80c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e80e:	7b8b      	ldrb	r3, [r1, #14]
 800e810:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e812:	7bcb      	ldrb	r3, [r1, #15]
 800e814:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e816:	4770      	bx	lr

0800e818 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800e818:	e004      	b.n	800e824 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e81a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e81e:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800e822:	461a      	mov	r2, r3
 800e824:	1e53      	subs	r3, r2, #1
 800e826:	b2db      	uxtb	r3, r3
 800e828:	2a00      	cmp	r2, #0
 800e82a:	d1f6      	bne.n	800e81a <copy_block_nn+0x2>
}
 800e82c:	4770      	bx	lr

0800e82e <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e82e:	780b      	ldrb	r3, [r1, #0]
 800e830:	7802      	ldrb	r2, [r0, #0]
 800e832:	4053      	eors	r3, r2
 800e834:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e836:	784b      	ldrb	r3, [r1, #1]
 800e838:	7842      	ldrb	r2, [r0, #1]
 800e83a:	4053      	eors	r3, r2
 800e83c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e83e:	788b      	ldrb	r3, [r1, #2]
 800e840:	7882      	ldrb	r2, [r0, #2]
 800e842:	4053      	eors	r3, r2
 800e844:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e846:	78cb      	ldrb	r3, [r1, #3]
 800e848:	78c2      	ldrb	r2, [r0, #3]
 800e84a:	4053      	eors	r3, r2
 800e84c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e84e:	790b      	ldrb	r3, [r1, #4]
 800e850:	7902      	ldrb	r2, [r0, #4]
 800e852:	4053      	eors	r3, r2
 800e854:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e856:	794b      	ldrb	r3, [r1, #5]
 800e858:	7942      	ldrb	r2, [r0, #5]
 800e85a:	4053      	eors	r3, r2
 800e85c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e85e:	798b      	ldrb	r3, [r1, #6]
 800e860:	7982      	ldrb	r2, [r0, #6]
 800e862:	4053      	eors	r3, r2
 800e864:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e866:	79cb      	ldrb	r3, [r1, #7]
 800e868:	79c2      	ldrb	r2, [r0, #7]
 800e86a:	4053      	eors	r3, r2
 800e86c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e86e:	7a0b      	ldrb	r3, [r1, #8]
 800e870:	7a02      	ldrb	r2, [r0, #8]
 800e872:	4053      	eors	r3, r2
 800e874:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e876:	7a4b      	ldrb	r3, [r1, #9]
 800e878:	7a42      	ldrb	r2, [r0, #9]
 800e87a:	4053      	eors	r3, r2
 800e87c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e87e:	7a8b      	ldrb	r3, [r1, #10]
 800e880:	7a82      	ldrb	r2, [r0, #10]
 800e882:	4053      	eors	r3, r2
 800e884:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e886:	7acb      	ldrb	r3, [r1, #11]
 800e888:	7ac2      	ldrb	r2, [r0, #11]
 800e88a:	4053      	eors	r3, r2
 800e88c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e88e:	7b0b      	ldrb	r3, [r1, #12]
 800e890:	7b02      	ldrb	r2, [r0, #12]
 800e892:	4053      	eors	r3, r2
 800e894:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e896:	7b4b      	ldrb	r3, [r1, #13]
 800e898:	7b42      	ldrb	r2, [r0, #13]
 800e89a:	4053      	eors	r3, r2
 800e89c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e89e:	7b8b      	ldrb	r3, [r1, #14]
 800e8a0:	7b82      	ldrb	r2, [r0, #14]
 800e8a2:	4053      	eors	r3, r2
 800e8a4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e8a6:	7bcb      	ldrb	r3, [r1, #15]
 800e8a8:	7bc2      	ldrb	r2, [r0, #15]
 800e8aa:	4053      	eors	r3, r2
 800e8ac:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e8ae:	4770      	bx	lr

0800e8b0 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e8b0:	780b      	ldrb	r3, [r1, #0]
 800e8b2:	f892 c000 	ldrb.w	ip, [r2]
 800e8b6:	ea83 030c 	eor.w	r3, r3, ip
 800e8ba:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e8bc:	784b      	ldrb	r3, [r1, #1]
 800e8be:	f892 c001 	ldrb.w	ip, [r2, #1]
 800e8c2:	ea83 030c 	eor.w	r3, r3, ip
 800e8c6:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e8c8:	788b      	ldrb	r3, [r1, #2]
 800e8ca:	f892 c002 	ldrb.w	ip, [r2, #2]
 800e8ce:	ea83 030c 	eor.w	r3, r3, ip
 800e8d2:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e8d4:	78cb      	ldrb	r3, [r1, #3]
 800e8d6:	f892 c003 	ldrb.w	ip, [r2, #3]
 800e8da:	ea83 030c 	eor.w	r3, r3, ip
 800e8de:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e8e0:	790b      	ldrb	r3, [r1, #4]
 800e8e2:	f892 c004 	ldrb.w	ip, [r2, #4]
 800e8e6:	ea83 030c 	eor.w	r3, r3, ip
 800e8ea:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e8ec:	794b      	ldrb	r3, [r1, #5]
 800e8ee:	f892 c005 	ldrb.w	ip, [r2, #5]
 800e8f2:	ea83 030c 	eor.w	r3, r3, ip
 800e8f6:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e8f8:	798b      	ldrb	r3, [r1, #6]
 800e8fa:	f892 c006 	ldrb.w	ip, [r2, #6]
 800e8fe:	ea83 030c 	eor.w	r3, r3, ip
 800e902:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e904:	79cb      	ldrb	r3, [r1, #7]
 800e906:	f892 c007 	ldrb.w	ip, [r2, #7]
 800e90a:	ea83 030c 	eor.w	r3, r3, ip
 800e90e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e910:	7a0b      	ldrb	r3, [r1, #8]
 800e912:	f892 c008 	ldrb.w	ip, [r2, #8]
 800e916:	ea83 030c 	eor.w	r3, r3, ip
 800e91a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e91c:	7a4b      	ldrb	r3, [r1, #9]
 800e91e:	f892 c009 	ldrb.w	ip, [r2, #9]
 800e922:	ea83 030c 	eor.w	r3, r3, ip
 800e926:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e928:	7a8b      	ldrb	r3, [r1, #10]
 800e92a:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800e92e:	ea83 030c 	eor.w	r3, r3, ip
 800e932:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e934:	7acb      	ldrb	r3, [r1, #11]
 800e936:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800e93a:	ea83 030c 	eor.w	r3, r3, ip
 800e93e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e940:	7b0b      	ldrb	r3, [r1, #12]
 800e942:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800e946:	ea83 030c 	eor.w	r3, r3, ip
 800e94a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e94c:	7b4b      	ldrb	r3, [r1, #13]
 800e94e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800e952:	ea83 030c 	eor.w	r3, r3, ip
 800e956:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e958:	7b8b      	ldrb	r3, [r1, #14]
 800e95a:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800e95e:	ea83 030c 	eor.w	r3, r3, ip
 800e962:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e964:	7bcb      	ldrb	r3, [r1, #15]
 800e966:	7bd2      	ldrb	r2, [r2, #15]
 800e968:	4053      	eors	r3, r2
 800e96a:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e96c:	4770      	bx	lr

0800e96e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e96e:	b508      	push	{r3, lr}
    xor_block(d, k);
 800e970:	f7ff ff5d 	bl	800e82e <xor_block>
}
 800e974:	bd08      	pop	{r3, pc}
	...

0800e978 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e978:	7802      	ldrb	r2, [r0, #0]
 800e97a:	4b18      	ldr	r3, [pc, #96]	; (800e9dc <shift_sub_rows+0x64>)
 800e97c:	5c9a      	ldrb	r2, [r3, r2]
 800e97e:	7002      	strb	r2, [r0, #0]
 800e980:	7902      	ldrb	r2, [r0, #4]
 800e982:	5c9a      	ldrb	r2, [r3, r2]
 800e984:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e986:	7a02      	ldrb	r2, [r0, #8]
 800e988:	5c9a      	ldrb	r2, [r3, r2]
 800e98a:	7202      	strb	r2, [r0, #8]
 800e98c:	7b02      	ldrb	r2, [r0, #12]
 800e98e:	5c9a      	ldrb	r2, [r3, r2]
 800e990:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e992:	7842      	ldrb	r2, [r0, #1]
 800e994:	7941      	ldrb	r1, [r0, #5]
 800e996:	5c59      	ldrb	r1, [r3, r1]
 800e998:	7041      	strb	r1, [r0, #1]
 800e99a:	7a41      	ldrb	r1, [r0, #9]
 800e99c:	5c59      	ldrb	r1, [r3, r1]
 800e99e:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e9a0:	7b41      	ldrb	r1, [r0, #13]
 800e9a2:	5c59      	ldrb	r1, [r3, r1]
 800e9a4:	7241      	strb	r1, [r0, #9]
 800e9a6:	5c9a      	ldrb	r2, [r3, r2]
 800e9a8:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e9aa:	7882      	ldrb	r2, [r0, #2]
 800e9ac:	7a81      	ldrb	r1, [r0, #10]
 800e9ae:	5c59      	ldrb	r1, [r3, r1]
 800e9b0:	7081      	strb	r1, [r0, #2]
 800e9b2:	5c9a      	ldrb	r2, [r3, r2]
 800e9b4:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e9b6:	7982      	ldrb	r2, [r0, #6]
 800e9b8:	7b81      	ldrb	r1, [r0, #14]
 800e9ba:	5c59      	ldrb	r1, [r3, r1]
 800e9bc:	7181      	strb	r1, [r0, #6]
 800e9be:	5c9a      	ldrb	r2, [r3, r2]
 800e9c0:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e9c2:	7bc2      	ldrb	r2, [r0, #15]
 800e9c4:	7ac1      	ldrb	r1, [r0, #11]
 800e9c6:	5c59      	ldrb	r1, [r3, r1]
 800e9c8:	73c1      	strb	r1, [r0, #15]
 800e9ca:	79c1      	ldrb	r1, [r0, #7]
 800e9cc:	5c59      	ldrb	r1, [r3, r1]
 800e9ce:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e9d0:	78c1      	ldrb	r1, [r0, #3]
 800e9d2:	5c59      	ldrb	r1, [r3, r1]
 800e9d4:	71c1      	strb	r1, [r0, #7]
 800e9d6:	5c9b      	ldrb	r3, [r3, r2]
 800e9d8:	70c3      	strb	r3, [r0, #3]
}
 800e9da:	4770      	bx	lr
 800e9dc:	08012728 	.word	0x08012728

0800e9e0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e4:	b084      	sub	sp, #16
 800e9e6:	4604      	mov	r4, r0
    block_copy(st, dt);
 800e9e8:	4601      	mov	r1, r0
 800e9ea:	4668      	mov	r0, sp
 800e9ec:	f7ff fef3 	bl	800e7d6 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e9f0:	f89d c000 	ldrb.w	ip, [sp]
 800e9f4:	4b6a      	ldr	r3, [pc, #424]	; (800eba0 <mix_sub_columns+0x1c0>)
 800e9f6:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e9fa:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e9fe:	4a69      	ldr	r2, [pc, #420]	; (800eba4 <mix_sub_columns+0x1c4>)
 800ea00:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ea04:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800ea08:	4967      	ldr	r1, [pc, #412]	; (800eba8 <mix_sub_columns+0x1c8>)
 800ea0a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ea0e:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800ea12:	5dce      	ldrb	r6, [r1, r7]
 800ea14:	ea80 0009 	eor.w	r0, r0, r9
 800ea18:	4068      	eors	r0, r5
 800ea1a:	4070      	eors	r0, r6
 800ea1c:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ea1e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ea22:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ea26:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ea2a:	ea80 0a0a 	eor.w	sl, r0, sl
 800ea2e:	ea89 090a 	eor.w	r9, r9, sl
 800ea32:	ea86 0609 	eor.w	r6, r6, r9
 800ea36:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ea38:	f811 8008 	ldrb.w	r8, [r1, r8]
 800ea3c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800ea40:	5dd6      	ldrb	r6, [r2, r7]
 800ea42:	ea80 0008 	eor.w	r0, r0, r8
 800ea46:	ea8e 0000 	eor.w	r0, lr, r0
 800ea4a:	4070      	eors	r0, r6
 800ea4c:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ea4e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800ea52:	5dd8      	ldrb	r0, [r3, r7]
 800ea54:	ea86 0608 	eor.w	r6, r6, r8
 800ea58:	4075      	eors	r5, r6
 800ea5a:	4045      	eors	r5, r0
 800ea5c:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ea5e:	f89d c004 	ldrb.w	ip, [sp, #4]
 800ea62:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ea66:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800ea6a:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ea6e:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800ea72:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ea76:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800ea7a:	5dce      	ldrb	r6, [r1, r7]
 800ea7c:	ea80 0009 	eor.w	r0, r0, r9
 800ea80:	4068      	eors	r0, r5
 800ea82:	4070      	eors	r0, r6
 800ea84:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800ea86:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ea8a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ea8e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ea92:	ea80 0a0a 	eor.w	sl, r0, sl
 800ea96:	ea89 090a 	eor.w	r9, r9, sl
 800ea9a:	ea86 0609 	eor.w	r6, r6, r9
 800ea9e:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800eaa0:	f811 8008 	ldrb.w	r8, [r1, r8]
 800eaa4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800eaa8:	5dd6      	ldrb	r6, [r2, r7]
 800eaaa:	ea80 0008 	eor.w	r0, r0, r8
 800eaae:	ea8e 0000 	eor.w	r0, lr, r0
 800eab2:	4070      	eors	r0, r6
 800eab4:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800eab6:	f812 600c 	ldrb.w	r6, [r2, ip]
 800eaba:	5dd8      	ldrb	r0, [r3, r7]
 800eabc:	ea86 0608 	eor.w	r6, r6, r8
 800eac0:	4075      	eors	r5, r6
 800eac2:	4045      	eors	r5, r0
 800eac4:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800eac6:	f89d c008 	ldrb.w	ip, [sp, #8]
 800eaca:	f813 000c 	ldrb.w	r0, [r3, ip]
 800eace:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800ead2:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ead6:	f89d e002 	ldrb.w	lr, [sp, #2]
 800eada:	f811 500e 	ldrb.w	r5, [r1, lr]
 800eade:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800eae2:	5dce      	ldrb	r6, [r1, r7]
 800eae4:	ea80 0009 	eor.w	r0, r0, r9
 800eae8:	4068      	eors	r0, r5
 800eaea:	4070      	eors	r0, r6
 800eaec:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800eaee:	f811 000c 	ldrb.w	r0, [r1, ip]
 800eaf2:	f813 a008 	ldrb.w	sl, [r3, r8]
 800eaf6:	f812 900e 	ldrb.w	r9, [r2, lr]
 800eafa:	ea80 0a0a 	eor.w	sl, r0, sl
 800eafe:	ea89 090a 	eor.w	r9, r9, sl
 800eb02:	ea86 0609 	eor.w	r6, r6, r9
 800eb06:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800eb08:	f811 8008 	ldrb.w	r8, [r1, r8]
 800eb0c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800eb10:	5dd6      	ldrb	r6, [r2, r7]
 800eb12:	ea80 0008 	eor.w	r0, r0, r8
 800eb16:	ea8e 0000 	eor.w	r0, lr, r0
 800eb1a:	4070      	eors	r0, r6
 800eb1c:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800eb1e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800eb22:	5dd8      	ldrb	r0, [r3, r7]
 800eb24:	ea86 0608 	eor.w	r6, r6, r8
 800eb28:	4075      	eors	r5, r6
 800eb2a:	4045      	eors	r5, r0
 800eb2c:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800eb2e:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800eb32:	5d98      	ldrb	r0, [r3, r6]
 800eb34:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800eb38:	f812 9008 	ldrb.w	r9, [r2, r8]
 800eb3c:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800eb40:	f811 c007 	ldrb.w	ip, [r1, r7]
 800eb44:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800eb48:	f811 e005 	ldrb.w	lr, [r1, r5]
 800eb4c:	ea80 0009 	eor.w	r0, r0, r9
 800eb50:	ea8c 0000 	eor.w	r0, ip, r0
 800eb54:	ea8e 0000 	eor.w	r0, lr, r0
 800eb58:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800eb5a:	5d88      	ldrb	r0, [r1, r6]
 800eb5c:	f813 a008 	ldrb.w	sl, [r3, r8]
 800eb60:	f812 9007 	ldrb.w	r9, [r2, r7]
 800eb64:	ea80 0a0a 	eor.w	sl, r0, sl
 800eb68:	ea89 090a 	eor.w	r9, r9, sl
 800eb6c:	ea8e 0e09 	eor.w	lr, lr, r9
 800eb70:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800eb74:	f811 1008 	ldrb.w	r1, [r1, r8]
 800eb78:	f813 e007 	ldrb.w	lr, [r3, r7]
 800eb7c:	5d57      	ldrb	r7, [r2, r5]
 800eb7e:	4048      	eors	r0, r1
 800eb80:	ea8e 0000 	eor.w	r0, lr, r0
 800eb84:	4078      	eors	r0, r7
 800eb86:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800eb88:	5d92      	ldrb	r2, [r2, r6]
 800eb8a:	5d5b      	ldrb	r3, [r3, r5]
 800eb8c:	4051      	eors	r1, r2
 800eb8e:	ea8c 0c01 	eor.w	ip, ip, r1
 800eb92:	ea83 0c0c 	eor.w	ip, r3, ip
 800eb96:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 800eb9a:	b004      	add	sp, #16
 800eb9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba0:	08012528 	.word	0x08012528
 800eba4:	08012628 	.word	0x08012628
 800eba8:	08012728 	.word	0x08012728

0800ebac <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ebac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebb0:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800ebb2:	f1a1 0310 	sub.w	r3, r1, #16
 800ebb6:	b2da      	uxtb	r2, r3
 800ebb8:	2a10      	cmp	r2, #16
 800ebba:	d807      	bhi.n	800ebcc <lorawan_aes_set_key+0x20>
 800ebbc:	460d      	mov	r5, r1
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	4093      	lsls	r3, r2
 800ebc2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ebc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ebca:	b92b      	cbnz	r3, 800ebd8 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800ebd2:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800ebd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800ebd8:	460a      	mov	r2, r1
 800ebda:	4601      	mov	r1, r0
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f7ff fe1b 	bl	800e818 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ebe2:	f105 031c 	add.w	r3, r5, #28
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800ebee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ebf2:	3b01      	subs	r3, #1
 800ebf4:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ebf8:	462b      	mov	r3, r5
 800ebfa:	f04f 0c01 	mov.w	ip, #1
 800ebfe:	e023      	b.n	800ec48 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 800ec00:	2d18      	cmp	r5, #24
 800ec02:	d901      	bls.n	800ec08 <lorawan_aes_set_key+0x5c>
 800ec04:	2a10      	cmp	r2, #16
 800ec06:	d047      	beq.n	800ec98 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800ec08:	1b5a      	subs	r2, r3, r5
 800ec0a:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ec0c:	f814 9002 	ldrb.w	r9, [r4, r2]
 800ec10:	ea89 0808 	eor.w	r8, r9, r8
 800ec14:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ec18:	f102 0801 	add.w	r8, r2, #1
 800ec1c:	f814 8008 	ldrb.w	r8, [r4, r8]
 800ec20:	f100 0901 	add.w	r9, r0, #1
 800ec24:	ea88 0707 	eor.w	r7, r8, r7
 800ec28:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ec2c:	1c97      	adds	r7, r2, #2
 800ec2e:	5de7      	ldrb	r7, [r4, r7]
 800ec30:	f100 0802 	add.w	r8, r0, #2
 800ec34:	407e      	eors	r6, r7
 800ec36:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ec3a:	3203      	adds	r2, #3
 800ec3c:	5ca6      	ldrb	r6, [r4, r2]
 800ec3e:	1cc2      	adds	r2, r0, #3
 800ec40:	4071      	eors	r1, r6
 800ec42:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ec44:	3304      	adds	r3, #4
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	4573      	cmp	r3, lr
 800ec4a:	d22c      	bcs.n	800eca6 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	1f1a      	subs	r2, r3, #4
 800ec50:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800ec54:	1eda      	subs	r2, r3, #3
 800ec56:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800ec58:	1e9a      	subs	r2, r3, #2
 800ec5a:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800ec5c:	1e5a      	subs	r2, r3, #1
 800ec5e:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800ec60:	fbb3 f2f5 	udiv	r2, r3, r5
 800ec64:	fb05 3212 	mls	r2, r5, r2, r3
 800ec68:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800ec6c:	d1c8      	bne.n	800ec00 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 800ec6e:	4a0f      	ldr	r2, [pc, #60]	; (800ecac <lorawan_aes_set_key+0x100>)
 800ec70:	f812 9007 	ldrb.w	r9, [r2, r7]
 800ec74:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800ec78:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800ec7a:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800ec7c:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800ec80:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800ec84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ec88:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800ec8c:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 800ec90:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 800ec94:	46c8      	mov	r8, r9
 800ec96:	e7b7      	b.n	800ec08 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 800ec98:	4a04      	ldr	r2, [pc, #16]	; (800ecac <lorawan_aes_set_key+0x100>)
 800ec9a:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800ec9e:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800eca0:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800eca2:	5c51      	ldrb	r1, [r2, r1]
 800eca4:	e7b0      	b.n	800ec08 <lorawan_aes_set_key+0x5c>
    return 0;
 800eca6:	2000      	movs	r0, #0
 800eca8:	e794      	b.n	800ebd4 <lorawan_aes_set_key+0x28>
 800ecaa:	bf00      	nop
 800ecac:	08012728 	.word	0x08012728

0800ecb0 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800ecb0:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800ecb4:	b31b      	cbz	r3, 800ecfe <lorawan_aes_encrypt+0x4e>
{
 800ecb6:	b570      	push	{r4, r5, r6, lr}
 800ecb8:	b084      	sub	sp, #16
 800ecba:	460e      	mov	r6, r1
 800ecbc:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ecbe:	4601      	mov	r1, r0
 800ecc0:	4668      	mov	r0, sp
 800ecc2:	f7ff fdf5 	bl	800e8b0 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ecc6:	2401      	movs	r4, #1
 800ecc8:	e009      	b.n	800ecde <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ecca:	4668      	mov	r0, sp
 800eccc:	f7ff fe88 	bl	800e9e0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ecd0:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800ecd4:	4668      	mov	r0, sp
 800ecd6:	f7ff fe4a 	bl	800e96e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ecda:	3401      	adds	r4, #1
 800ecdc:	b2e4      	uxtb	r4, r4
 800ecde:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800ece2:	42a3      	cmp	r3, r4
 800ece4:	d8f1      	bhi.n	800ecca <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ece6:	4668      	mov	r0, sp
 800ece8:	f7ff fe46 	bl	800e978 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ecec:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800ecf0:	4669      	mov	r1, sp
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	f7ff fddc 	bl	800e8b0 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ecf8:	2000      	movs	r0, #0
}
 800ecfa:	b004      	add	sp, #16
 800ecfc:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800ecfe:	20ff      	movs	r0, #255	; 0xff
}
 800ed00:	4770      	bx	lr
	...

0800ed04 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ed04:	2300      	movs	r3, #0
 800ed06:	2b09      	cmp	r3, #9
 800ed08:	d817      	bhi.n	800ed3a <GetKeyByID+0x36>
{
 800ed0a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ed0c:	4a0c      	ldr	r2, [pc, #48]	; (800ed40 <GetKeyByID+0x3c>)
 800ed0e:	6814      	ldr	r4, [r2, #0]
 800ed10:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800ed14:	4422      	add	r2, r4
 800ed16:	7c12      	ldrb	r2, [r2, #16]
 800ed18:	4282      	cmp	r2, r0
 800ed1a:	d006      	beq.n	800ed2a <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	2b09      	cmp	r3, #9
 800ed22:	d9f3      	bls.n	800ed0c <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ed24:	2003      	movs	r0, #3
}
 800ed26:	bc10      	pop	{r4}
 800ed28:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800ed2a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800ed2e:	f10c 0c10 	add.w	ip, ip, #16
 800ed32:	4464      	add	r4, ip
 800ed34:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ed36:	2000      	movs	r0, #0
 800ed38:	e7f5      	b.n	800ed26 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ed3a:	2003      	movs	r0, #3
}
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop
 800ed40:	20000e38 	.word	0x20000e38

0800ed44 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800ed44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed48:	b0cc      	sub	sp, #304	; 0x130
 800ed4a:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ed4c:	b3a9      	cbz	r1, 800edba <ComputeCmac+0x76>
 800ed4e:	4605      	mov	r5, r0
 800ed50:	4617      	mov	r7, r2
 800ed52:	461c      	mov	r4, r3
 800ed54:	4688      	mov	r8, r1
 800ed56:	b396      	cbz	r6, 800edbe <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ed58:	a802      	add	r0, sp, #8
 800ed5a:	f7ff fbd7 	bl	800e50c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ed5e:	a901      	add	r1, sp, #4
 800ed60:	4620      	mov	r0, r4
 800ed62:	f7ff ffcf 	bl	800ed04 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ed66:	4604      	mov	r4, r0
 800ed68:	b118      	cbz	r0, 800ed72 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	b04c      	add	sp, #304	; 0x130
 800ed6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ed72:	9901      	ldr	r1, [sp, #4]
 800ed74:	3101      	adds	r1, #1
 800ed76:	a802      	add	r0, sp, #8
 800ed78:	f7ff fbd7 	bl	800e52a <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800ed7c:	b125      	cbz	r5, 800ed88 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ed7e:	2210      	movs	r2, #16
 800ed80:	4629      	mov	r1, r5
 800ed82:	a802      	add	r0, sp, #8
 800ed84:	f7ff fbd8 	bl	800e538 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ed88:	463a      	mov	r2, r7
 800ed8a:	4641      	mov	r1, r8
 800ed8c:	a802      	add	r0, sp, #8
 800ed8e:	f7ff fbd3 	bl	800e538 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ed92:	a902      	add	r1, sp, #8
 800ed94:	a848      	add	r0, sp, #288	; 0x120
 800ed96:	f7ff fc3d 	bl	800e614 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ed9a:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800ed9e:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800eda2:	041b      	lsls	r3, r3, #16
 800eda4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eda8:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800edac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800edb0:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800edb4:	4313      	orrs	r3, r2
 800edb6:	6033      	str	r3, [r6, #0]
 800edb8:	e7d7      	b.n	800ed6a <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800edba:	2402      	movs	r4, #2
 800edbc:	e7d5      	b.n	800ed6a <ComputeCmac+0x26>
 800edbe:	2402      	movs	r4, #2
 800edc0:	e7d3      	b.n	800ed6a <ComputeCmac+0x26>
	...

0800edc4 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800edc4:	b168      	cbz	r0, 800ede2 <SecureElementInit+0x1e>
{
 800edc6:	b510      	push	{r4, lr}
 800edc8:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800edca:	4a08      	ldr	r2, [pc, #32]	; (800edec <SecureElementInit+0x28>)
 800edcc:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800edce:	22c0      	movs	r2, #192	; 0xc0
 800edd0:	4907      	ldr	r1, [pc, #28]	; (800edf0 <SecureElementInit+0x2c>)
 800edd2:	f000 fa9c 	bl	800f30e <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 800edd6:	b134      	cbz	r4, 800ede6 <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 800edd8:	4b04      	ldr	r3, [pc, #16]	; (800edec <SecureElementInit+0x28>)
 800edda:	6818      	ldr	r0, [r3, #0]
 800eddc:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800edde:	2000      	movs	r0, #0
}
 800ede0:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ede2:	2002      	movs	r0, #2
}
 800ede4:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 800ede6:	2000      	movs	r0, #0
 800ede8:	e7fa      	b.n	800ede0 <SecureElementInit+0x1c>
 800edea:	bf00      	nop
 800edec:	20000e38 	.word	0x20000e38
 800edf0:	0803e500 	.word	0x0803e500

0800edf4 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800edf4:	2300      	movs	r3, #0
 800edf6:	2b09      	cmp	r3, #9
 800edf8:	d817      	bhi.n	800ee2a <SecureElementGetKeyByID+0x36>
{
 800edfa:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800edfc:	4a0c      	ldr	r2, [pc, #48]	; (800ee30 <SecureElementGetKeyByID+0x3c>)
 800edfe:	6814      	ldr	r4, [r2, #0]
 800ee00:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800ee04:	4422      	add	r2, r4
 800ee06:	7c12      	ldrb	r2, [r2, #16]
 800ee08:	4282      	cmp	r2, r0
 800ee0a:	d006      	beq.n	800ee1a <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	2b09      	cmp	r3, #9
 800ee12:	d9f3      	bls.n	800edfc <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee14:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800ee16:	bc10      	pop	{r4}
 800ee18:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800ee1a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800ee1e:	f10c 0c10 	add.w	ip, ip, #16
 800ee22:	4464      	add	r4, ip
 800ee24:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ee26:	2000      	movs	r0, #0
 800ee28:	e7f5      	b.n	800ee16 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee2a:	2003      	movs	r0, #3
}
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop
 800ee30:	20000e38 	.word	0x20000e38

0800ee34 <PrintKey>:
{
 800ee34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee38:	b095      	sub	sp, #84	; 0x54
 800ee3a:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800ee3c:	a913      	add	r1, sp, #76	; 0x4c
 800ee3e:	f7ff ffd9 	bl	800edf4 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d154      	bne.n	800eef0 <PrintKey+0xbc>
        if (key == APP_KEY)
 800ee46:	b1b4      	cbz	r4, 800ee76 <PrintKey+0x42>
        else if (key == NWK_KEY)
 800ee48:	2c01      	cmp	r4, #1
 800ee4a:	d054      	beq.n	800eef6 <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 800ee4c:	2c03      	cmp	r4, #3
 800ee4e:	d059      	beq.n	800ef04 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 800ee50:	2c02      	cmp	r4, #2
 800ee52:	d05e      	beq.n	800ef12 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 800ee54:	2c04      	cmp	r4, #4
 800ee56:	d063      	beq.n	800ef20 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 800ee58:	2c7f      	cmp	r4, #127	; 0x7f
 800ee5a:	d068      	beq.n	800ef2e <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 800ee5c:	2c80      	cmp	r4, #128	; 0x80
 800ee5e:	d06d      	beq.n	800ef3c <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 800ee60:	2c81      	cmp	r4, #129	; 0x81
 800ee62:	d072      	beq.n	800ef4a <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 800ee64:	2c82      	cmp	r4, #130	; 0x82
 800ee66:	d10c      	bne.n	800ee82 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ee68:	4b3b      	ldr	r3, [pc, #236]	; (800ef58 <PrintKey+0x124>)
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	2002      	movs	r0, #2
 800ee70:	f002 f8f6 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 800ee74:	e005      	b.n	800ee82 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800ee76:	4b39      	ldr	r3, [pc, #228]	; (800ef5c <PrintKey+0x128>)
 800ee78:	2200      	movs	r2, #0
 800ee7a:	4611      	mov	r1, r2
 800ee7c:	2002      	movs	r0, #2
 800ee7e:	f002 f8ef 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ee82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee84:	785a      	ldrb	r2, [r3, #1]
 800ee86:	9210      	str	r2, [sp, #64]	; 0x40
 800ee88:	7899      	ldrb	r1, [r3, #2]
 800ee8a:	9111      	str	r1, [sp, #68]	; 0x44
 800ee8c:	78da      	ldrb	r2, [r3, #3]
 800ee8e:	7919      	ldrb	r1, [r3, #4]
 800ee90:	7958      	ldrb	r0, [r3, #5]
 800ee92:	799c      	ldrb	r4, [r3, #6]
 800ee94:	79dd      	ldrb	r5, [r3, #7]
 800ee96:	7a1e      	ldrb	r6, [r3, #8]
 800ee98:	7a5f      	ldrb	r7, [r3, #9]
 800ee9a:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800ee9e:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800eea2:	f893 800c 	ldrb.w	r8, [r3, #12]
 800eea6:	f893 900d 	ldrb.w	r9, [r3, #13]
 800eeaa:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800eeae:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800eeb2:	7c1b      	ldrb	r3, [r3, #16]
 800eeb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800eeb6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800eeba:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800eebe:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800eec2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800eec6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800eeca:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800eece:	9708      	str	r7, [sp, #32]
 800eed0:	9607      	str	r6, [sp, #28]
 800eed2:	9506      	str	r5, [sp, #24]
 800eed4:	9405      	str	r4, [sp, #20]
 800eed6:	9004      	str	r0, [sp, #16]
 800eed8:	9103      	str	r1, [sp, #12]
 800eeda:	9202      	str	r2, [sp, #8]
 800eedc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eede:	9101      	str	r1, [sp, #4]
 800eee0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eee2:	9200      	str	r2, [sp, #0]
 800eee4:	4b1e      	ldr	r3, [pc, #120]	; (800ef60 <PrintKey+0x12c>)
 800eee6:	2200      	movs	r2, #0
 800eee8:	4611      	mov	r1, r2
 800eeea:	2002      	movs	r0, #2
 800eeec:	f002 f8b8 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 800eef0:	b015      	add	sp, #84	; 0x54
 800eef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800eef6:	4b1b      	ldr	r3, [pc, #108]	; (800ef64 <PrintKey+0x130>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	4611      	mov	r1, r2
 800eefc:	2002      	movs	r0, #2
 800eefe:	f002 f8af 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 800ef02:	e7be      	b.n	800ee82 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800ef04:	4b18      	ldr	r3, [pc, #96]	; (800ef68 <PrintKey+0x134>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	4611      	mov	r1, r2
 800ef0a:	2002      	movs	r0, #2
 800ef0c:	f002 f8a8 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 800ef10:	e7b7      	b.n	800ee82 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ef12:	4b16      	ldr	r3, [pc, #88]	; (800ef6c <PrintKey+0x138>)
 800ef14:	2200      	movs	r2, #0
 800ef16:	4611      	mov	r1, r2
 800ef18:	2002      	movs	r0, #2
 800ef1a:	f002 f8a1 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 800ef1e:	e7b0      	b.n	800ee82 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800ef20:	4b13      	ldr	r3, [pc, #76]	; (800ef70 <PrintKey+0x13c>)
 800ef22:	2200      	movs	r2, #0
 800ef24:	4611      	mov	r1, r2
 800ef26:	2002      	movs	r0, #2
 800ef28:	f002 f89a 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 800ef2c:	e7a9      	b.n	800ee82 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800ef2e:	4b11      	ldr	r3, [pc, #68]	; (800ef74 <PrintKey+0x140>)
 800ef30:	2200      	movs	r2, #0
 800ef32:	4611      	mov	r1, r2
 800ef34:	2002      	movs	r0, #2
 800ef36:	f002 f893 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 800ef3a:	e7a2      	b.n	800ee82 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ef3c:	4b0e      	ldr	r3, [pc, #56]	; (800ef78 <PrintKey+0x144>)
 800ef3e:	2200      	movs	r2, #0
 800ef40:	4611      	mov	r1, r2
 800ef42:	2002      	movs	r0, #2
 800ef44:	f002 f88c 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 800ef48:	e79b      	b.n	800ee82 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ef4a:	4b0c      	ldr	r3, [pc, #48]	; (800ef7c <PrintKey+0x148>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	4611      	mov	r1, r2
 800ef50:	2002      	movs	r0, #2
 800ef52:	f002 f885 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 800ef56:	e794      	b.n	800ee82 <PrintKey+0x4e>
 800ef58:	080128e8 	.word	0x080128e8
 800ef5c:	08012828 	.word	0x08012828
 800ef60:	08012900 	.word	0x08012900
 800ef64:	08012840 	.word	0x08012840
 800ef68:	08012858 	.word	0x08012858
 800ef6c:	08012870 	.word	0x08012870
 800ef70:	08012888 	.word	0x08012888
 800ef74:	080128a0 	.word	0x080128a0
 800ef78:	080128b8 	.word	0x080128b8
 800ef7c:	080128d0 	.word	0x080128d0

0800ef80 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800ef80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef82:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800ef84:	4b28      	ldr	r3, [pc, #160]	; (800f028 <SecureElementPrintKeys+0xa8>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	4611      	mov	r1, r2
 800ef8a:	2002      	movs	r0, #2
 800ef8c:	f002 f868 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800ef90:	2000      	movs	r0, #0
 800ef92:	f7ff ff4f 	bl	800ee34 <PrintKey>
    PrintKey(NWK_KEY);
 800ef96:	2001      	movs	r0, #1
 800ef98:	f7ff ff4c 	bl	800ee34 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ef9c:	4b23      	ldr	r3, [pc, #140]	; (800f02c <SecureElementPrintKeys+0xac>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	4611      	mov	r1, r2
 800efa2:	2002      	movs	r0, #2
 800efa4:	f002 f85c 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800efa8:	2003      	movs	r0, #3
 800efaa:	f7ff ff43 	bl	800ee34 <PrintKey>
    PrintKey(NWK_S_KEY);
 800efae:	2002      	movs	r0, #2
 800efb0:	f7ff ff40 	bl	800ee34 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800efb4:	4b1e      	ldr	r3, [pc, #120]	; (800f030 <SecureElementPrintKeys+0xb0>)
 800efb6:	2200      	movs	r2, #0
 800efb8:	4611      	mov	r1, r2
 800efba:	2002      	movs	r0, #2
 800efbc:	f002 f850 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800efc0:	4c1c      	ldr	r4, [pc, #112]	; (800f034 <SecureElementPrintKeys+0xb4>)
 800efc2:	6823      	ldr	r3, [r4, #0]
 800efc4:	781a      	ldrb	r2, [r3, #0]
 800efc6:	7859      	ldrb	r1, [r3, #1]
 800efc8:	7898      	ldrb	r0, [r3, #2]
 800efca:	78dd      	ldrb	r5, [r3, #3]
 800efcc:	791e      	ldrb	r6, [r3, #4]
 800efce:	795f      	ldrb	r7, [r3, #5]
 800efd0:	f893 c006 	ldrb.w	ip, [r3, #6]
 800efd4:	79db      	ldrb	r3, [r3, #7]
 800efd6:	9307      	str	r3, [sp, #28]
 800efd8:	f8cd c018 	str.w	ip, [sp, #24]
 800efdc:	9705      	str	r7, [sp, #20]
 800efde:	9604      	str	r6, [sp, #16]
 800efe0:	9503      	str	r5, [sp, #12]
 800efe2:	9002      	str	r0, [sp, #8]
 800efe4:	9101      	str	r1, [sp, #4]
 800efe6:	9200      	str	r2, [sp, #0]
 800efe8:	4b13      	ldr	r3, [pc, #76]	; (800f038 <SecureElementPrintKeys+0xb8>)
 800efea:	2200      	movs	r2, #0
 800efec:	4611      	mov	r1, r2
 800efee:	2002      	movs	r0, #2
 800eff0:	f002 f836 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800eff4:	6823      	ldr	r3, [r4, #0]
 800eff6:	7a1a      	ldrb	r2, [r3, #8]
 800eff8:	7a59      	ldrb	r1, [r3, #9]
 800effa:	7a98      	ldrb	r0, [r3, #10]
 800effc:	7adc      	ldrb	r4, [r3, #11]
 800effe:	7b1d      	ldrb	r5, [r3, #12]
 800f000:	7b5e      	ldrb	r6, [r3, #13]
 800f002:	7b9f      	ldrb	r7, [r3, #14]
 800f004:	7bdb      	ldrb	r3, [r3, #15]
 800f006:	9307      	str	r3, [sp, #28]
 800f008:	9706      	str	r7, [sp, #24]
 800f00a:	9605      	str	r6, [sp, #20]
 800f00c:	9504      	str	r5, [sp, #16]
 800f00e:	9403      	str	r4, [sp, #12]
 800f010:	9002      	str	r0, [sp, #8]
 800f012:	9101      	str	r1, [sp, #4]
 800f014:	9200      	str	r2, [sp, #0]
 800f016:	4b09      	ldr	r3, [pc, #36]	; (800f03c <SecureElementPrintKeys+0xbc>)
 800f018:	2200      	movs	r2, #0
 800f01a:	4611      	mov	r1, r2
 800f01c:	2002      	movs	r0, #2
 800f01e:	f002 f81f 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 800f022:	2000      	movs	r0, #0
 800f024:	b009      	add	sp, #36	; 0x24
 800f026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f028:	08012954 	.word	0x08012954
 800f02c:	0801296c 	.word	0x0801296c
 800f030:	08012984 	.word	0x08012984
 800f034:	20000e38 	.word	0x20000e38
 800f038:	0801299c 	.word	0x0801299c
 800f03c:	080129dc 	.word	0x080129dc

0800f040 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800f040:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800f042:	2004      	movs	r0, #4
 800f044:	f7ff fef6 	bl	800ee34 <PrintKey>
    PrintKey(MC_KE_KEY);
 800f048:	207f      	movs	r0, #127	; 0x7f
 800f04a:	f7ff fef3 	bl	800ee34 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800f04e:	2002      	movs	r0, #2
 800f050:	f7ff fef0 	bl	800ee34 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800f054:	2003      	movs	r0, #3
 800f056:	f7ff feed 	bl	800ee34 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 800f05a:	2000      	movs	r0, #0
 800f05c:	bd08      	pop	{r3, pc}

0800f05e <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800f05e:	2b7e      	cmp	r3, #126	; 0x7e
 800f060:	d80a      	bhi.n	800f078 <SecureElementComputeAesCmac+0x1a>
{
 800f062:	b500      	push	{lr}
 800f064:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f066:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f06a:	f8cd c000 	str.w	ip, [sp]
 800f06e:	f7ff fe69 	bl	800ed44 <ComputeCmac>
}
 800f072:	b003      	add	sp, #12
 800f074:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f078:	2003      	movs	r0, #3
}
 800f07a:	4770      	bx	lr

0800f07c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800f07c:	b190      	cbz	r0, 800f0a4 <SecureElementVerifyAesCmac+0x28>
{
 800f07e:	b510      	push	{r4, lr}
 800f080:	b084      	sub	sp, #16
 800f082:	468c      	mov	ip, r1
 800f084:	4614      	mov	r4, r2
 800f086:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800f088:	2000      	movs	r0, #0
 800f08a:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f08c:	aa03      	add	r2, sp, #12
 800f08e:	9200      	str	r2, [sp, #0]
 800f090:	4662      	mov	r2, ip
 800f092:	f7ff fe57 	bl	800ed44 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f096:	b918      	cbnz	r0, 800f0a0 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800f098:	9b03      	ldr	r3, [sp, #12]
 800f09a:	42a3      	cmp	r3, r4
 800f09c:	d000      	beq.n	800f0a0 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f09e:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800f0a0:	b004      	add	sp, #16
 800f0a2:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f0a4:	2002      	movs	r0, #2
}
 800f0a6:	4770      	bx	lr

0800f0a8 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800f0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ac:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800f0ae:	b350      	cbz	r0, 800f106 <SecureElementAesEncrypt+0x5e>
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	4615      	mov	r5, r2
 800f0b4:	461e      	mov	r6, r3
 800f0b6:	4607      	mov	r7, r0
 800f0b8:	b343      	cbz	r3, 800f10c <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800f0ba:	f011 0f0f 	tst.w	r1, #15
 800f0be:	d128      	bne.n	800f112 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f0c0:	22f0      	movs	r2, #240	; 0xf0
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	a801      	add	r0, sp, #4
 800f0c6:	f000 f93a 	bl	800f33e <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f0ca:	4669      	mov	r1, sp
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	f7ff fe19 	bl	800ed04 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f0d2:	4680      	mov	r8, r0
 800f0d4:	b118      	cbz	r0, 800f0de <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800f0d6:	4640      	mov	r0, r8
 800f0d8:	b03e      	add	sp, #248	; 0xf8
 800f0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800f0de:	aa01      	add	r2, sp, #4
 800f0e0:	2110      	movs	r1, #16
 800f0e2:	9800      	ldr	r0, [sp, #0]
 800f0e4:	3001      	adds	r0, #1
 800f0e6:	f7ff fd61 	bl	800ebac <lorawan_aes_set_key>
        uint8_t block = 0;
 800f0ea:	4645      	mov	r5, r8
        while( size != 0 )
 800f0ec:	e008      	b.n	800f100 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800f0ee:	aa01      	add	r2, sp, #4
 800f0f0:	1971      	adds	r1, r6, r5
 800f0f2:	1978      	adds	r0, r7, r5
 800f0f4:	f7ff fddc 	bl	800ecb0 <lorawan_aes_encrypt>
            block = block + 16;
 800f0f8:	3510      	adds	r5, #16
 800f0fa:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800f0fc:	3c10      	subs	r4, #16
 800f0fe:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800f100:	2c00      	cmp	r4, #0
 800f102:	d1f4      	bne.n	800f0ee <SecureElementAesEncrypt+0x46>
 800f104:	e7e7      	b.n	800f0d6 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800f106:	f04f 0802 	mov.w	r8, #2
 800f10a:	e7e4      	b.n	800f0d6 <SecureElementAesEncrypt+0x2e>
 800f10c:	f04f 0802 	mov.w	r8, #2
 800f110:	e7e1      	b.n	800f0d6 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f112:	f04f 0805 	mov.w	r8, #5
 800f116:	e7de      	b.n	800f0d6 <SecureElementAesEncrypt+0x2e>

0800f118 <SecureElementSetKey>:
{
 800f118:	b530      	push	{r4, r5, lr}
 800f11a:	b085      	sub	sp, #20
    if( key == NULL )
 800f11c:	2900      	cmp	r1, #0
 800f11e:	d038      	beq.n	800f192 <SecureElementSetKey+0x7a>
 800f120:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f122:	2300      	movs	r3, #0
 800f124:	2b09      	cmp	r3, #9
 800f126:	d830      	bhi.n	800f18a <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f128:	4a1b      	ldr	r2, [pc, #108]	; (800f198 <SecureElementSetKey+0x80>)
 800f12a:	6811      	ldr	r1, [r2, #0]
 800f12c:	461c      	mov	r4, r3
 800f12e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f132:	440a      	add	r2, r1
 800f134:	7c12      	ldrb	r2, [r2, #16]
 800f136:	4282      	cmp	r2, r0
 800f138:	d002      	beq.n	800f140 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f13a:	3301      	adds	r3, #1
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	e7f1      	b.n	800f124 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 800f140:	2880      	cmp	r0, #128	; 0x80
 800f142:	d00a      	beq.n	800f15a <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f144:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800f148:	3310      	adds	r3, #16
 800f14a:	440b      	add	r3, r1
 800f14c:	2210      	movs	r2, #16
 800f14e:	4661      	mov	r1, ip
 800f150:	1c58      	adds	r0, r3, #1
 800f152:	f000 f8dc 	bl	800f30e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f156:	2500      	movs	r5, #0
 800f158:	e018      	b.n	800f18c <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 800f15a:	2300      	movs	r3, #0
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	9301      	str	r3, [sp, #4]
 800f160:	9302      	str	r3, [sp, #8]
 800f162:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800f164:	466b      	mov	r3, sp
 800f166:	227f      	movs	r2, #127	; 0x7f
 800f168:	2110      	movs	r1, #16
 800f16a:	4660      	mov	r0, ip
 800f16c:	f7ff ff9c 	bl	800f0a8 <SecureElementAesEncrypt>
 800f170:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f172:	4b09      	ldr	r3, [pc, #36]	; (800f198 <SecureElementSetKey+0x80>)
 800f174:	6818      	ldr	r0, [r3, #0]
 800f176:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800f17a:	3410      	adds	r4, #16
 800f17c:	4420      	add	r0, r4
 800f17e:	2210      	movs	r2, #16
 800f180:	4669      	mov	r1, sp
 800f182:	3001      	adds	r0, #1
 800f184:	f000 f8c3 	bl	800f30e <memcpy1>
                return retval;
 800f188:	e000      	b.n	800f18c <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f18a:	2503      	movs	r5, #3
}
 800f18c:	4628      	mov	r0, r5
 800f18e:	b005      	add	sp, #20
 800f190:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f192:	2502      	movs	r5, #2
 800f194:	e7fa      	b.n	800f18c <SecureElementSetKey+0x74>
 800f196:	bf00      	nop
 800f198:	20000e38 	.word	0x20000e38

0800f19c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800f19c:	b1d0      	cbz	r0, 800f1d4 <SecureElementDeriveAndStoreKey+0x38>
{
 800f19e:	b510      	push	{r4, lr}
 800f1a0:	b084      	sub	sp, #16
 800f1a2:	4614      	mov	r4, r2
 800f1a4:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800f1a6:	2a7f      	cmp	r2, #127	; 0x7f
 800f1a8:	d101      	bne.n	800f1ae <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f1aa:	2904      	cmp	r1, #4
 800f1ac:	d114      	bne.n	800f1d8 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	9300      	str	r3, [sp, #0]
 800f1b2:	9301      	str	r3, [sp, #4]
 800f1b4:	9302      	str	r3, [sp, #8]
 800f1b6:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800f1b8:	466b      	mov	r3, sp
 800f1ba:	460a      	mov	r2, r1
 800f1bc:	2110      	movs	r1, #16
 800f1be:	4660      	mov	r0, ip
 800f1c0:	f7ff ff72 	bl	800f0a8 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f1c4:	b108      	cbz	r0, 800f1ca <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f1c6:	b004      	add	sp, #16
 800f1c8:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800f1ca:	4669      	mov	r1, sp
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f7ff ffa3 	bl	800f118 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f1d2:	e7f8      	b.n	800f1c6 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800f1d4:	2002      	movs	r0, #2
}
 800f1d6:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f1d8:	2003      	movs	r0, #3
 800f1da:	e7f4      	b.n	800f1c6 <SecureElementDeriveAndStoreKey+0x2a>

0800f1dc <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800f1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800f1e4:	9d07      	ldr	r5, [sp, #28]
 800f1e6:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f1e8:	b37b      	cbz	r3, 800f24a <SecureElementProcessJoinAccept+0x6e>
 800f1ea:	4698      	mov	r8, r3
 800f1ec:	b37d      	cbz	r5, 800f24e <SecureElementProcessJoinAccept+0x72>
 800f1ee:	b386      	cbz	r6, 800f252 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f1f0:	2c21      	cmp	r4, #33	; 0x21
 800f1f2:	d830      	bhi.n	800f256 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f1f4:	b2a7      	uxth	r7, r4
 800f1f6:	463a      	mov	r2, r7
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f000 f887 	bl	800f30e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f200:	1e79      	subs	r1, r7, #1
 800f202:	1c6b      	adds	r3, r5, #1
 800f204:	2201      	movs	r2, #1
 800f206:	b289      	uxth	r1, r1
 800f208:	eb08 0002 	add.w	r0, r8, r2
 800f20c:	f7ff ff4c 	bl	800f0a8 <SecureElementAesEncrypt>
 800f210:	bb20      	cbnz	r0, 800f25c <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f212:	7aeb      	ldrb	r3, [r5, #11]
 800f214:	09db      	lsrs	r3, r3, #7
 800f216:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800f218:	442c      	add	r4, r5
 800f21a:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800f21e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800f222:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800f226:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800f22a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800f22e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800f232:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800f236:	b99b      	cbnz	r3, 800f260 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f238:	1f39      	subs	r1, r7, #4
 800f23a:	2301      	movs	r3, #1
 800f23c:	b289      	uxth	r1, r1
 800f23e:	4628      	mov	r0, r5
 800f240:	f7ff ff1c 	bl	800f07c <SecureElementVerifyAesCmac>
 800f244:	b140      	cbz	r0, 800f258 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f246:	2001      	movs	r0, #1
 800f248:	e006      	b.n	800f258 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 800f24a:	2002      	movs	r0, #2
 800f24c:	e004      	b.n	800f258 <SecureElementProcessJoinAccept+0x7c>
 800f24e:	2002      	movs	r0, #2
 800f250:	e002      	b.n	800f258 <SecureElementProcessJoinAccept+0x7c>
 800f252:	2002      	movs	r0, #2
 800f254:	e000      	b.n	800f258 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f256:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800f258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f25c:	2007      	movs	r0, #7
 800f25e:	e7fb      	b.n	800f258 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f260:	2004      	movs	r0, #4
 800f262:	e7f9      	b.n	800f258 <SecureElementProcessJoinAccept+0x7c>

0800f264 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 800f264:	b140      	cbz	r0, 800f278 <SecureElementSetDevEui+0x14>
{
 800f266:	b508      	push	{r3, lr}
 800f268:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800f26a:	2208      	movs	r2, #8
 800f26c:	4b03      	ldr	r3, [pc, #12]	; (800f27c <SecureElementSetDevEui+0x18>)
 800f26e:	6818      	ldr	r0, [r3, #0]
 800f270:	f000 f84d 	bl	800f30e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f274:	2000      	movs	r0, #0
}
 800f276:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f278:	2002      	movs	r0, #2
}
 800f27a:	4770      	bx	lr
 800f27c:	20000e38 	.word	0x20000e38

0800f280 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800f280:	4b01      	ldr	r3, [pc, #4]	; (800f288 <SecureElementGetDevEui+0x8>)
 800f282:	6818      	ldr	r0, [r3, #0]
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	20000e38 	.word	0x20000e38

0800f28c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 800f28c:	b148      	cbz	r0, 800f2a2 <SecureElementSetJoinEui+0x16>
{
 800f28e:	b508      	push	{r3, lr}
 800f290:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800f292:	4b05      	ldr	r3, [pc, #20]	; (800f2a8 <SecureElementSetJoinEui+0x1c>)
 800f294:	6818      	ldr	r0, [r3, #0]
 800f296:	2208      	movs	r2, #8
 800f298:	4410      	add	r0, r2
 800f29a:	f000 f838 	bl	800f30e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f29e:	2000      	movs	r0, #0
}
 800f2a0:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f2a2:	2002      	movs	r0, #2
}
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	20000e38 	.word	0x20000e38

0800f2ac <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800f2ac:	4b01      	ldr	r3, [pc, #4]	; (800f2b4 <SecureElementGetJoinEui+0x8>)
 800f2ae:	6818      	ldr	r0, [r3, #0]
}
 800f2b0:	3008      	adds	r0, #8
 800f2b2:	4770      	bx	lr
 800f2b4:	20000e38 	.word	0x20000e38

0800f2b8 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800f2b8:	4b09      	ldr	r3, [pc, #36]	; (800f2e0 <rand1+0x28>)
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	4909      	ldr	r1, [pc, #36]	; (800f2e4 <rand1+0x2c>)
 800f2be:	f243 0039 	movw	r0, #12345	; 0x3039
 800f2c2:	fb01 0002 	mla	r0, r1, r2, r0
 800f2c6:	6018      	str	r0, [r3, #0]
 800f2c8:	2303      	movs	r3, #3
 800f2ca:	fba3 2300 	umull	r2, r3, r3, r0
 800f2ce:	1ac2      	subs	r2, r0, r3
 800f2d0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800f2d4:	0f9b      	lsrs	r3, r3, #30
 800f2d6:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800f2da:	1ac0      	subs	r0, r0, r3
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	20000108 	.word	0x20000108
 800f2e4:	41c64e6d 	.word	0x41c64e6d

0800f2e8 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800f2e8:	4b01      	ldr	r3, [pc, #4]	; (800f2f0 <srand1+0x8>)
 800f2ea:	6018      	str	r0, [r3, #0]
}
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	20000108 	.word	0x20000108

0800f2f4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800f2f4:	b538      	push	{r3, r4, r5, lr}
 800f2f6:	4605      	mov	r5, r0
 800f2f8:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800f2fa:	f7ff ffdd 	bl	800f2b8 <rand1>
 800f2fe:	1b61      	subs	r1, r4, r5
 800f300:	3101      	adds	r1, #1
 800f302:	fb90 f3f1 	sdiv	r3, r0, r1
 800f306:	fb01 0013 	mls	r0, r1, r3, r0
}
 800f30a:	4428      	add	r0, r5
 800f30c:	bd38      	pop	{r3, r4, r5, pc}

0800f30e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800f30e:	e004      	b.n	800f31a <memcpy1+0xc>
    {
        *dst++ = *src++;
 800f310:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f314:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800f318:	461a      	mov	r2, r3
 800f31a:	1e53      	subs	r3, r2, #1
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	2a00      	cmp	r2, #0
 800f320:	d1f6      	bne.n	800f310 <memcpy1+0x2>
    }
}
 800f322:	4770      	bx	lr

0800f324 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800f324:	1e53      	subs	r3, r2, #1
 800f326:	4418      	add	r0, r3
    while( size-- )
 800f328:	e004      	b.n	800f334 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800f32a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f32e:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800f332:	461a      	mov	r2, r3
 800f334:	1e53      	subs	r3, r2, #1
 800f336:	b29b      	uxth	r3, r3
 800f338:	2a00      	cmp	r2, #0
 800f33a:	d1f6      	bne.n	800f32a <memcpyr+0x6>
    }
}
 800f33c:	4770      	bx	lr

0800f33e <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800f33e:	e002      	b.n	800f346 <memset1+0x8>
    {
        *dst++ = value;
 800f340:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800f344:	461a      	mov	r2, r3
 800f346:	1e53      	subs	r3, r2, #1
 800f348:	b29b      	uxth	r3, r3
 800f34a:	2a00      	cmp	r2, #0
 800f34c:	d1f8      	bne.n	800f340 <memset1+0x2>
    }
}
 800f34e:	4770      	bx	lr

0800f350 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800f350:	b1f0      	cbz	r0, 800f390 <Crc32+0x40>
{
 800f352:	b510      	push	{r4, lr}
 800f354:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800f356:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800f35a:	f04f 30ff 	mov.w	r0, #4294967295
 800f35e:	e00e      	b.n	800f37e <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800f360:	f340 0c00 	sbfx	ip, r0, #0, #1
 800f364:	4a0b      	ldr	r2, [pc, #44]	; (800f394 <Crc32+0x44>)
 800f366:	ea0c 0202 	and.w	r2, ip, r2
 800f36a:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800f36e:	3301      	adds	r3, #1
 800f370:	b29b      	uxth	r3, r3
 800f372:	2b07      	cmp	r3, #7
 800f374:	d9f4      	bls.n	800f360 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800f376:	f10e 0e01 	add.w	lr, lr, #1
 800f37a:	fa1f fe8e 	uxth.w	lr, lr
 800f37e:	458e      	cmp	lr, r1
 800f380:	d204      	bcs.n	800f38c <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800f382:	f814 300e 	ldrb.w	r3, [r4, lr]
 800f386:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800f388:	2300      	movs	r3, #0
 800f38a:	e7f2      	b.n	800f372 <Crc32+0x22>
        }
    }

    return ~crc;
 800f38c:	43c0      	mvns	r0, r0
}
 800f38e:	bd10      	pop	{r4, pc}
        return 0;
 800f390:	2000      	movs	r0, #0
}
 800f392:	4770      	bx	lr
 800f394:	edb88320 	.word	0xedb88320

0800f398 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800f398:	2001      	movs	r0, #1
 800f39a:	4770      	bx	lr

0800f39c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800f39c:	280a      	cmp	r0, #10
 800f39e:	d807      	bhi.n	800f3b0 <RadioGetLoRaBandwidthInHz+0x14>
 800f3a0:	e8df f000 	tbb	[pc, r0]
 800f3a4:	17110b20 	.word	0x17110b20
 800f3a8:	061e1c1a 	.word	0x061e1c1a
 800f3ac:	0e08      	.short	0x0e08
 800f3ae:	14          	.byte	0x14
 800f3af:	00          	.byte	0x00
 800f3b0:	2000      	movs	r0, #0
 800f3b2:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800f3b4:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800f3b8:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800f3ba:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800f3be:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800f3c0:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800f3c4:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800f3c6:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800f3ca:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800f3cc:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800f3d0:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800f3d2:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800f3d6:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800f3d8:	4804      	ldr	r0, [pc, #16]	; (800f3ec <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800f3da:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800f3dc:	4804      	ldr	r0, [pc, #16]	; (800f3f0 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800f3de:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800f3e0:	4804      	ldr	r0, [pc, #16]	; (800f3f4 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800f3e2:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800f3e4:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800f3e8:	4770      	bx	lr
 800f3ea:	bf00      	nop
 800f3ec:	0001e848 	.word	0x0001e848
 800f3f0:	0003d090 	.word	0x0003d090
 800f3f4:	0007a120 	.word	0x0007a120

0800f3f8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f3f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800f3fc:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f3fe:	b953      	cbnz	r3, 800f416 <RadioGetGfskTimeOnAirNumerator+0x1e>
 800f400:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 800f402:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f404:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f406:	b141      	cbz	r1, 800f41a <RadioGetGfskTimeOnAirNumerator+0x22>
 800f408:	2302      	movs	r3, #2
 800f40a:	f89d 0000 	ldrb.w	r0, [sp]
 800f40e:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 800f410:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800f414:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f416:	2000      	movs	r0, #0
 800f418:	e7f3      	b.n	800f402 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f41a:	2300      	movs	r3, #0
 800f41c:	e7f5      	b.n	800f40a <RadioGetGfskTimeOnAirNumerator+0x12>

0800f41e <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f41e:	b570      	push	{r4, r5, r6, lr}
 800f420:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f424:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800f428:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f42a:	f1a1 0c05 	sub.w	ip, r1, #5
 800f42e:	f1bc 0f01 	cmp.w	ip, #1
 800f432:	d932      	bls.n	800f49a <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f434:	b918      	cbnz	r0, 800f43e <RadioGetLoRaTimeOnAirNumerator+0x20>
 800f436:	f1a1 060b 	sub.w	r6, r1, #11
 800f43a:	2e01      	cmp	r6, #1
 800f43c:	d935      	bls.n	800f4aa <RadioGetLoRaTimeOnAirNumerator+0x8c>
 800f43e:	2801      	cmp	r0, #1
 800f440:	d02f      	beq.n	800f4a2 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800f442:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f444:	f89d e014 	ldrb.w	lr, [sp, #20]
 800f448:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800f44c:	b38d      	cbz	r5, 800f4b2 <RadioGetLoRaTimeOnAirNumerator+0x94>
 800f44e:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f452:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800f454:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800f456:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800f45a:	b36c      	cbz	r4, 800f4b8 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 800f45c:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800f460:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800f462:	2906      	cmp	r1, #6
 800f464:	d904      	bls.n	800f470 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800f466:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800f46a:	b10e      	cbz	r6, 800f470 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800f46c:	1e88      	subs	r0, r1, #2
 800f46e:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800f470:	f1bc 0f00 	cmp.w	ip, #0
 800f474:	db23      	blt.n	800f4be <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800f476:	4484      	add	ip, r0
 800f478:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f47c:	fb9c fcf0 	sdiv	ip, ip, r0
 800f480:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800f484:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800f488:	2906      	cmp	r1, #6
 800f48a:	d801      	bhi.n	800f490 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 800f48c:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800f490:	0080      	lsls	r0, r0, #2
 800f492:	3001      	adds	r0, #1
 800f494:	3902      	subs	r1, #2
}
 800f496:	4088      	lsls	r0, r1
 800f498:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800f49a:	2b0b      	cmp	r3, #11
 800f49c:	d8ca      	bhi.n	800f434 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800f49e:	230c      	movs	r3, #12
 800f4a0:	e7c8      	b.n	800f434 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f4a2:	290c      	cmp	r1, #12
 800f4a4:	d003      	beq.n	800f4ae <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800f4a6:	2600      	movs	r6, #0
 800f4a8:	e7cc      	b.n	800f444 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800f4aa:	2601      	movs	r6, #1
 800f4ac:	e7ca      	b.n	800f444 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800f4ae:	2601      	movs	r6, #1
 800f4b0:	e7c8      	b.n	800f444 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800f4b2:	f04f 0c00 	mov.w	ip, #0
 800f4b6:	e7cc      	b.n	800f452 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800f4b8:	f04f 0c14 	mov.w	ip, #20
 800f4bc:	e7d0      	b.n	800f460 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800f4be:	f04f 0c00 	mov.w	ip, #0
 800f4c2:	e7d8      	b.n	800f476 <RadioGetLoRaTimeOnAirNumerator+0x58>

0800f4c4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800f4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4c6:	b085      	sub	sp, #20
 800f4c8:	460e      	mov	r6, r1
 800f4ca:	4615      	mov	r5, r2
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800f4d2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800f4d6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f4da:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800f4de:	b148      	cbz	r0, 800f4f4 <RadioTimeOnAir+0x30>
 800f4e0:	2801      	cmp	r0, #1
 800f4e2:	d012      	beq.n	800f50a <RadioTimeOnAir+0x46>
 800f4e4:	2501      	movs	r5, #1
 800f4e6:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 800f4e8:	442c      	add	r4, r5
 800f4ea:	1e60      	subs	r0, r4, #1
}
 800f4ec:	fbb0 f0f5 	udiv	r0, r0, r5
 800f4f0:	b005      	add	sp, #20
 800f4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800f4f4:	f8cd c004 	str.w	ip, [sp, #4]
 800f4f8:	9700      	str	r7, [sp, #0]
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	f7ff ff7c 	bl	800f3f8 <RadioGetGfskTimeOnAirNumerator>
 800f500:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f504:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800f508:	e7ee      	b.n	800f4e8 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800f50a:	f8cd c008 	str.w	ip, [sp, #8]
 800f50e:	9701      	str	r7, [sp, #4]
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	4613      	mov	r3, r2
 800f514:	460a      	mov	r2, r1
 800f516:	4629      	mov	r1, r5
 800f518:	4630      	mov	r0, r6
 800f51a:	f7ff ff80 	bl	800f41e <RadioGetLoRaTimeOnAirNumerator>
 800f51e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f522:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800f526:	4b03      	ldr	r3, [pc, #12]	; (800f534 <RadioTimeOnAir+0x70>)
 800f528:	5d98      	ldrb	r0, [r3, r6]
 800f52a:	f7ff ff37 	bl	800f39c <RadioGetLoRaBandwidthInHz>
 800f52e:	4605      	mov	r5, r0
        break;
 800f530:	e7da      	b.n	800f4e8 <RadioTimeOnAir+0x24>
 800f532:	bf00      	nop
 800f534:	08012a88 	.word	0x08012a88

0800f538 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800f538:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800f53a:	4b05      	ldr	r3, [pc, #20]	; (800f550 <RadioOnTxTimeoutProcess+0x18>)
 800f53c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f540:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f542:	4b04      	ldr	r3, [pc, #16]	; (800f554 <RadioOnTxTimeoutProcess+0x1c>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	b113      	cbz	r3, 800f54e <RadioOnTxTimeoutProcess+0x16>
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	b103      	cbz	r3, 800f54e <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800f54c:	4798      	blx	r3
    }
}
 800f54e:	bd08      	pop	{r3, pc}
 800f550:	48000400 	.word	0x48000400
 800f554:	20000f3c 	.word	0x20000f3c

0800f558 <RadioOnTxTimeoutIrq>:
{
 800f558:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800f55a:	f7ff ffed 	bl	800f538 <RadioOnTxTimeoutProcess>
}
 800f55e:	bd08      	pop	{r3, pc}

0800f560 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800f560:	b508      	push	{r3, lr}
 800f562:	4b05      	ldr	r3, [pc, #20]	; (800f578 <RadioOnRxTimeoutProcess+0x18>)
 800f564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f568:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f56a:	4b04      	ldr	r3, [pc, #16]	; (800f57c <RadioOnRxTimeoutProcess+0x1c>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	b113      	cbz	r3, 800f576 <RadioOnRxTimeoutProcess+0x16>
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	b103      	cbz	r3, 800f576 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800f574:	4798      	blx	r3
    }
}
 800f576:	bd08      	pop	{r3, pc}
 800f578:	48000400 	.word	0x48000400
 800f57c:	20000f3c 	.word	0x20000f3c

0800f580 <RadioOnRxTimeoutIrq>:
{
 800f580:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800f582:	f7ff ffed 	bl	800f560 <RadioOnRxTimeoutProcess>
}
 800f586:	bd08      	pop	{r3, pc}

0800f588 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800f588:	f04f 30ff 	mov.w	r0, #4294967295
 800f58c:	4770      	bx	lr

0800f58e <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800f58e:	f04f 30ff 	mov.w	r0, #4294967295
 800f592:	4770      	bx	lr

0800f594 <RadioTxCw>:
{
 800f594:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800f596:	f001 fbab 	bl	8010cf0 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800f59a:	2101      	movs	r1, #1
 800f59c:	f001 fb94 	bl	8010cc8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f5a0:	f000 feac 	bl	80102fc <SUBGRF_SetTxContinuousWave>
}
 800f5a4:	bd08      	pop	{r3, pc}
	...

0800f5a8 <RadioSetRxDutyCycle>:
{
 800f5a8:	b570      	push	{r4, r5, r6, lr}
 800f5aa:	4604      	mov	r4, r0
 800f5ac:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800f5ae:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800f5b2:	4e09      	ldr	r6, [pc, #36]	; (800f5d8 <RadioSetRxDutyCycle+0x30>)
 800f5b4:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f5be:	4608      	mov	r0, r1
 800f5c0:	f000 ff47 	bl	8010452 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f5c4:	2100      	movs	r1, #0
 800f5c6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800f5ca:	f001 fb7d 	bl	8010cc8 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	f000 fe63 	bl	801029c <SUBGRF_SetRxDutyCycle>
}
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
 800f5d8:	20000f58 	.word	0x20000f58

0800f5dc <RadioRxBoosted>:
{
 800f5dc:	b538      	push	{r3, r4, r5, lr}
 800f5de:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800f5e0:	f001 fc57 	bl	8010e92 <RFW_Is_Init>
 800f5e4:	2801      	cmp	r0, #1
 800f5e6:	d019      	beq.n	800f61c <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	f240 2162 	movw	r1, #610	; 0x262
 800f5f0:	4608      	mov	r0, r1
 800f5f2:	f000 ff2e 	bl	8010452 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800f5f6:	b9a4      	cbnz	r4, 800f622 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f5f8:	4c11      	ldr	r4, [pc, #68]	; (800f640 <RadioRxBoosted+0x64>)
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800f5fe:	4b11      	ldr	r3, [pc, #68]	; (800f644 <RadioRxBoosted+0x68>)
 800f600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f604:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f606:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800f60a:	f001 fb5d 	bl	8010cc8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800f60e:	7863      	ldrb	r3, [r4, #1]
 800f610:	b183      	cbz	r3, 800f634 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800f612:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f616:	f000 ffef 	bl	80105f8 <SUBGRF_SetRxBoosted>
}
 800f61a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800f61c:	f001 fc41 	bl	8010ea2 <RFW_ReceiveInit>
 800f620:	e7e9      	b.n	800f5f6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f622:	4d09      	ldr	r5, [pc, #36]	; (800f648 <RadioRxBoosted+0x6c>)
 800f624:	4621      	mov	r1, r4
 800f626:	4628      	mov	r0, r5
 800f628:	f002 f90e 	bl	8011848 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f62c:	4628      	mov	r0, r5
 800f62e:	f002 f8c5 	bl	80117bc <UTIL_TIMER_Start>
 800f632:	e7e1      	b.n	800f5f8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800f634:	4b02      	ldr	r3, [pc, #8]	; (800f640 <RadioRxBoosted+0x64>)
 800f636:	6898      	ldr	r0, [r3, #8]
 800f638:	0180      	lsls	r0, r0, #6
 800f63a:	f000 ffdd 	bl	80105f8 <SUBGRF_SetRxBoosted>
}
 800f63e:	e7ec      	b.n	800f61a <RadioRxBoosted+0x3e>
 800f640:	20000f58 	.word	0x20000f58
 800f644:	48000400 	.word	0x48000400
 800f648:	20000f40 	.word	0x20000f40

0800f64c <RadioStandby>:
{
 800f64c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800f64e:	2000      	movs	r0, #0
 800f650:	f000 fdd6 	bl	8010200 <SUBGRF_SetStandby>
}
 800f654:	bd08      	pop	{r3, pc}

0800f656 <RadioWrite>:
{
 800f656:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800f658:	f000 ffbe 	bl	80105d8 <SUBGRF_WriteRegister>
}
 800f65c:	bd08      	pop	{r3, pc}
	...

0800f660 <RadioTxPrbs>:
{
 800f660:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f662:	2101      	movs	r1, #1
 800f664:	4b07      	ldr	r3, [pc, #28]	; (800f684 <RadioTxPrbs+0x24>)
 800f666:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800f66a:	f001 fb2d 	bl	8010cc8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800f66e:	212d      	movs	r1, #45	; 0x2d
 800f670:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800f674:	f7ff ffef 	bl	800f656 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800f678:	f000 fe47 	bl	801030a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800f67c:	4802      	ldr	r0, [pc, #8]	; (800f688 <RadioTxPrbs+0x28>)
 800f67e:	f000 fdd9 	bl	8010234 <SUBGRF_SetTx>
}
 800f682:	bd08      	pop	{r3, pc}
 800f684:	20000f58 	.word	0x20000f58
 800f688:	000fffff 	.word	0x000fffff

0800f68c <RadioRead>:
{
 800f68c:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800f68e:	f001 f895 	bl	80107bc <SUBGRF_ReadRegister>
}
 800f692:	bd08      	pop	{r3, pc}

0800f694 <RadioGetStatus>:
{
 800f694:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800f696:	f000 fdad 	bl	80101f4 <SUBGRF_GetOperatingMode>
 800f69a:	2805      	cmp	r0, #5
 800f69c:	d007      	beq.n	800f6ae <RadioGetStatus+0x1a>
 800f69e:	2807      	cmp	r0, #7
 800f6a0:	d007      	beq.n	800f6b2 <RadioGetStatus+0x1e>
 800f6a2:	2804      	cmp	r0, #4
 800f6a4:	d001      	beq.n	800f6aa <RadioGetStatus+0x16>
            return RF_IDLE;
 800f6a6:	2000      	movs	r0, #0
}
 800f6a8:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800f6aa:	2002      	movs	r0, #2
 800f6ac:	e7fc      	b.n	800f6a8 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800f6ae:	2001      	movs	r0, #1
 800f6b0:	e7fa      	b.n	800f6a8 <RadioGetStatus+0x14>
            return RF_CAD;
 800f6b2:	2003      	movs	r0, #3
 800f6b4:	e7f8      	b.n	800f6a8 <RadioGetStatus+0x14>
	...

0800f6b8 <RadioIrqProcess>:
{
 800f6b8:	b530      	push	{r4, r5, lr}
 800f6ba:	b083      	sub	sp, #12
    uint8_t size = 0;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800f6c2:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800f6c4:	4ba5      	ldr	r3, [pc, #660]	; (800f95c <RadioIrqProcess+0x2a4>)
 800f6c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800f6ca:	2b20      	cmp	r3, #32
 800f6cc:	d829      	bhi.n	800f722 <RadioIrqProcess+0x6a>
 800f6ce:	b21a      	sxth	r2, r3
 800f6d0:	2a00      	cmp	r2, #0
 800f6d2:	f000 8140 	beq.w	800f956 <RadioIrqProcess+0x29e>
 800f6d6:	3b01      	subs	r3, #1
 800f6d8:	2b1f      	cmp	r3, #31
 800f6da:	f200 813c 	bhi.w	800f956 <RadioIrqProcess+0x29e>
 800f6de:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f6e2:	0063      	.short	0x0063
 800f6e4:	013a007f 	.word	0x013a007f
 800f6e8:	013a00f7 	.word	0x013a00f7
 800f6ec:	013a013a 	.word	0x013a013a
 800f6f0:	013a0127 	.word	0x013a0127
 800f6f4:	013a013a 	.word	0x013a013a
 800f6f8:	013a013a 	.word	0x013a013a
 800f6fc:	013a013a 	.word	0x013a013a
 800f700:	013a0134 	.word	0x013a0134
 800f704:	013a013a 	.word	0x013a013a
 800f708:	013a013a 	.word	0x013a013a
 800f70c:	013a013a 	.word	0x013a013a
 800f710:	013a013a 	.word	0x013a013a
 800f714:	013a013a 	.word	0x013a013a
 800f718:	013a013a 	.word	0x013a013a
 800f71c:	013a013a 	.word	0x013a013a
 800f720:	0155      	.short	0x0155
 800f722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f726:	f000 80b3 	beq.w	800f890 <RadioIrqProcess+0x1d8>
 800f72a:	d928      	bls.n	800f77e <RadioIrqProcess+0xc6>
 800f72c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f730:	f040 8111 	bne.w	800f956 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800f734:	4b8a      	ldr	r3, [pc, #552]	; (800f960 <RadioIrqProcess+0x2a8>)
 800f736:	2201      	movs	r2, #1
 800f738:	2100      	movs	r1, #0
 800f73a:	2002      	movs	r0, #2
 800f73c:	f001 fc90 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800f740:	f000 fd58 	bl	80101f4 <SUBGRF_GetOperatingMode>
 800f744:	2804      	cmp	r0, #4
 800f746:	f000 80b0 	beq.w	800f8aa <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800f74a:	f000 fd53 	bl	80101f4 <SUBGRF_GetOperatingMode>
 800f74e:	2805      	cmp	r0, #5
 800f750:	f040 8101 	bne.w	800f956 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800f754:	4b83      	ldr	r3, [pc, #524]	; (800f964 <RadioIrqProcess+0x2ac>)
 800f756:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f75a:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 800f75c:	4882      	ldr	r0, [pc, #520]	; (800f968 <RadioIrqProcess+0x2b0>)
 800f75e:	f001 ffd3 	bl	8011708 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f762:	2000      	movs	r0, #0
 800f764:	f000 fd4c 	bl	8010200 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f768:	4b80      	ldr	r3, [pc, #512]	; (800f96c <RadioIrqProcess+0x2b4>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f000 80f2 	beq.w	800f956 <RadioIrqProcess+0x29e>
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	2b00      	cmp	r3, #0
 800f776:	f000 80ee 	beq.w	800f956 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800f77a:	4798      	blx	r3
 800f77c:	e0eb      	b.n	800f956 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800f77e:	2b40      	cmp	r3, #64	; 0x40
 800f780:	f000 811d 	beq.w	800f9be <RadioIrqProcess+0x306>
 800f784:	2b80      	cmp	r3, #128	; 0x80
 800f786:	f040 80e6 	bne.w	800f956 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800f78a:	2000      	movs	r0, #0
 800f78c:	f000 fd38 	bl	8010200 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f790:	4b76      	ldr	r3, [pc, #472]	; (800f96c <RadioIrqProcess+0x2b4>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	f000 80de 	beq.w	800f956 <RadioIrqProcess+0x29e>
 800f79a:	699b      	ldr	r3, [r3, #24]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	f000 80da 	beq.w	800f956 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800f7a2:	2000      	movs	r0, #0
 800f7a4:	4798      	blx	r3
 800f7a6:	e0d6      	b.n	800f956 <RadioIrqProcess+0x29e>
 800f7a8:	4b6e      	ldr	r3, [pc, #440]	; (800f964 <RadioIrqProcess+0x2ac>)
 800f7aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f7ae:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 800f7b0:	486f      	ldr	r0, [pc, #444]	; (800f970 <RadioIrqProcess+0x2b8>)
 800f7b2:	f001 ffa9 	bl	8011708 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	f000 fd22 	bl	8010200 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800f7bc:	f001 fb6b 	bl	8010e96 <RFW_Is_LongPacketModeEnabled>
 800f7c0:	2801      	cmp	r0, #1
 800f7c2:	d00a      	beq.n	800f7da <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800f7c4:	4b69      	ldr	r3, [pc, #420]	; (800f96c <RadioIrqProcess+0x2b4>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	f000 80c4 	beq.w	800f956 <RadioIrqProcess+0x29e>
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f000 80c0 	beq.w	800f956 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800f7d6:	4798      	blx	r3
 800f7d8:	e0bd      	b.n	800f956 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800f7da:	f001 fb65 	bl	8010ea8 <RFW_DeInit_TxLongPacket>
 800f7de:	e7f1      	b.n	800f7c4 <RadioIrqProcess+0x10c>
 800f7e0:	4b60      	ldr	r3, [pc, #384]	; (800f964 <RadioIrqProcess+0x2ac>)
 800f7e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f7e6:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 800f7e8:	485f      	ldr	r0, [pc, #380]	; (800f968 <RadioIrqProcess+0x2b0>)
 800f7ea:	f001 ff8d 	bl	8011708 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f7ee:	4b5b      	ldr	r3, [pc, #364]	; (800f95c <RadioIrqProcess+0x2a4>)
 800f7f0:	785b      	ldrb	r3, [r3, #1]
 800f7f2:	b303      	cbz	r3, 800f836 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800f7f4:	22ff      	movs	r2, #255	; 0xff
 800f7f6:	f10d 0107 	add.w	r1, sp, #7
 800f7fa:	485e      	ldr	r0, [pc, #376]	; (800f974 <RadioIrqProcess+0x2bc>)
 800f7fc:	f001 fa4a 	bl	8010c94 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800f800:	485d      	ldr	r0, [pc, #372]	; (800f978 <RadioIrqProcess+0x2c0>)
 800f802:	f000 fead 	bl	8010560 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800f806:	4b59      	ldr	r3, [pc, #356]	; (800f96c <RadioIrqProcess+0x2b4>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f000 80a3 	beq.w	800f956 <RadioIrqProcess+0x29e>
 800f810:	689c      	ldr	r4, [r3, #8]
 800f812:	2c00      	cmp	r4, #0
 800f814:	f000 809f 	beq.w	800f956 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800f818:	4b50      	ldr	r3, [pc, #320]	; (800f95c <RadioIrqProcess+0x2a4>)
 800f81a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d11d      	bne.n	800f85e <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800f822:	4a4e      	ldr	r2, [pc, #312]	; (800f95c <RadioIrqProcess+0x2a4>)
 800f824:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800f828:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800f82c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f830:	4850      	ldr	r0, [pc, #320]	; (800f974 <RadioIrqProcess+0x2bc>)
 800f832:	47a0      	blx	r4
                break;
 800f834:	e08f      	b.n	800f956 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f836:	2000      	movs	r0, #0
 800f838:	f000 fce2 	bl	8010200 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800f83c:	2100      	movs	r1, #0
 800f83e:	f640 1002 	movw	r0, #2306	; 0x902
 800f842:	f000 fec9 	bl	80105d8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800f846:	f640 1044 	movw	r0, #2372	; 0x944
 800f84a:	f000 ffb7 	bl	80107bc <SUBGRF_ReadRegister>
 800f84e:	f040 0102 	orr.w	r1, r0, #2
 800f852:	b2c9      	uxtb	r1, r1
 800f854:	f640 1044 	movw	r0, #2372	; 0x944
 800f858:	f000 febe 	bl	80105d8 <SUBGRF_WriteRegister>
 800f85c:	e7ca      	b.n	800f7f4 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800f85e:	4c3f      	ldr	r4, [pc, #252]	; (800f95c <RadioIrqProcess+0x2a4>)
 800f860:	4669      	mov	r1, sp
 800f862:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800f864:	f001 faca 	bl	8010dfc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800f868:	4b40      	ldr	r3, [pc, #256]	; (800f96c <RadioIrqProcess+0x2b4>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	689d      	ldr	r5, [r3, #8]
 800f86e:	9b00      	ldr	r3, [sp, #0]
 800f870:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f874:	4a41      	ldr	r2, [pc, #260]	; (800f97c <RadioIrqProcess+0x2c4>)
 800f876:	fb82 1203 	smull	r1, r2, r2, r3
 800f87a:	17db      	asrs	r3, r3, #31
 800f87c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800f880:	b25b      	sxtb	r3, r3
 800f882:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800f886:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f88a:	483a      	ldr	r0, [pc, #232]	; (800f974 <RadioIrqProcess+0x2bc>)
 800f88c:	47a8      	blx	r5
                break;
 800f88e:	e062      	b.n	800f956 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800f890:	2000      	movs	r0, #0
 800f892:	f000 fcb5 	bl	8010200 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f896:	4b35      	ldr	r3, [pc, #212]	; (800f96c <RadioIrqProcess+0x2b4>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d05b      	beq.n	800f956 <RadioIrqProcess+0x29e>
 800f89e:	699b      	ldr	r3, [r3, #24]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d058      	beq.n	800f956 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800f8a4:	2001      	movs	r0, #1
 800f8a6:	4798      	blx	r3
 800f8a8:	e055      	b.n	800f956 <RadioIrqProcess+0x29e>
 800f8aa:	4b2e      	ldr	r3, [pc, #184]	; (800f964 <RadioIrqProcess+0x2ac>)
 800f8ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f8b0:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 800f8b2:	482f      	ldr	r0, [pc, #188]	; (800f970 <RadioIrqProcess+0x2b8>)
 800f8b4:	f001 ff28 	bl	8011708 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	f000 fca1 	bl	8010200 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f8be:	4b2b      	ldr	r3, [pc, #172]	; (800f96c <RadioIrqProcess+0x2b4>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d047      	beq.n	800f956 <RadioIrqProcess+0x29e>
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d044      	beq.n	800f956 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800f8cc:	4798      	blx	r3
 800f8ce:	e042      	b.n	800f956 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800f8d0:	4b2b      	ldr	r3, [pc, #172]	; (800f980 <RadioIrqProcess+0x2c8>)
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	2002      	movs	r0, #2
 800f8d8:	f001 fbc2 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800f8dc:	4b1f      	ldr	r3, [pc, #124]	; (800f95c <RadioIrqProcess+0x2a4>)
 800f8de:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800f8e0:	b3c9      	cbz	r1, 800f956 <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 800f8e2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800f8e6:	f640 1003 	movw	r0, #2307	; 0x903
 800f8ea:	f7ff feb4 	bl	800f656 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 800f8ee:	4c1b      	ldr	r4, [pc, #108]	; (800f95c <RadioIrqProcess+0x2a4>)
 800f8f0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800f8f4:	f640 1004 	movw	r0, #2308	; 0x904
 800f8f8:	f7ff fead 	bl	800f656 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 800f8fc:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 800f900:	f640 1005 	movw	r0, #2309	; 0x905
 800f904:	f7ff fea7 	bl	800f656 <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 800f908:	f640 1002 	movw	r0, #2306	; 0x902
 800f90c:	f7ff febe 	bl	800f68c <RadioRead>
 800f910:	f040 0101 	orr.w	r1, r0, #1
 800f914:	b2c9      	uxtb	r1, r1
 800f916:	f640 1002 	movw	r0, #2306	; 0x902
 800f91a:	f7ff fe9c 	bl	800f656 <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 800f91e:	2200      	movs	r2, #0
 800f920:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f922:	4613      	mov	r3, r2
 800f924:	f240 2162 	movw	r1, #610	; 0x262
 800f928:	4608      	mov	r0, r1
 800f92a:	f000 fd92 	bl	8010452 <SUBGRF_SetDioIrqParams>
 800f92e:	e012      	b.n	800f956 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800f930:	4b14      	ldr	r3, [pc, #80]	; (800f984 <RadioIrqProcess+0x2cc>)
 800f932:	2201      	movs	r2, #1
 800f934:	2100      	movs	r1, #0
 800f936:	2002      	movs	r0, #2
 800f938:	f001 fb92 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800f93c:	f001 faa9 	bl	8010e92 <RFW_Is_Init>
 800f940:	2801      	cmp	r0, #1
 800f942:	d108      	bne.n	800f956 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800f944:	f001 fab1 	bl	8010eaa <RFW_ReceivePayload>
 800f948:	e005      	b.n	800f956 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800f94a:	4b0f      	ldr	r3, [pc, #60]	; (800f988 <RadioIrqProcess+0x2d0>)
 800f94c:	2201      	movs	r2, #1
 800f94e:	2100      	movs	r1, #0
 800f950:	2002      	movs	r0, #2
 800f952:	f001 fb85 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
}
 800f956:	b003      	add	sp, #12
 800f958:	bd30      	pop	{r4, r5, pc}
 800f95a:	bf00      	nop
 800f95c:	20000f58 	.word	0x20000f58
 800f960:	08012a1c 	.word	0x08012a1c
 800f964:	48000400 	.word	0x48000400
 800f968:	20000f40 	.word	0x20000f40
 800f96c:	20000f3c 	.word	0x20000f3c
 800f970:	20000fb4 	.word	0x20000fb4
 800f974:	20000e3c 	.word	0x20000e3c
 800f978:	20000f7c 	.word	0x20000f7c
 800f97c:	10624dd3 	.word	0x10624dd3
 800f980:	08012a30 	.word	0x08012a30
 800f984:	08012a3c 	.word	0x08012a3c
 800f988:	08012a48 	.word	0x08012a48
        TimerStop( &RxTimeoutTimer );
 800f98c:	4817      	ldr	r0, [pc, #92]	; (800f9ec <RadioIrqProcess+0x334>)
 800f98e:	f001 febb 	bl	8011708 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f992:	4b17      	ldr	r3, [pc, #92]	; (800f9f0 <RadioIrqProcess+0x338>)
 800f994:	785b      	ldrb	r3, [r3, #1]
 800f996:	b173      	cbz	r3, 800f9b6 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f998:	4b16      	ldr	r3, [pc, #88]	; (800f9f4 <RadioIrqProcess+0x33c>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d0da      	beq.n	800f956 <RadioIrqProcess+0x29e>
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d0d7      	beq.n	800f956 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800f9a6:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800f9a8:	4b13      	ldr	r3, [pc, #76]	; (800f9f8 <RadioIrqProcess+0x340>)
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	2002      	movs	r0, #2
 800f9b0:	f001 fb56 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
 800f9b4:	e7cf      	b.n	800f956 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f9b6:	2000      	movs	r0, #0
 800f9b8:	f000 fc22 	bl	8010200 <SUBGRF_SetStandby>
 800f9bc:	e7ec      	b.n	800f998 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800f9be:	4b0f      	ldr	r3, [pc, #60]	; (800f9fc <RadioIrqProcess+0x344>)
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	2002      	movs	r0, #2
 800f9c6:	f001 fb4b 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800f9ca:	4b09      	ldr	r3, [pc, #36]	; (800f9f0 <RadioIrqProcess+0x338>)
 800f9cc:	785b      	ldrb	r3, [r3, #1]
 800f9ce:	b143      	cbz	r3, 800f9e2 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800f9d0:	4b08      	ldr	r3, [pc, #32]	; (800f9f4 <RadioIrqProcess+0x33c>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d0be      	beq.n	800f956 <RadioIrqProcess+0x29e>
 800f9d8:	691b      	ldr	r3, [r3, #16]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d0bb      	beq.n	800f956 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800f9de:	4798      	blx	r3
}
 800f9e0:	e7b9      	b.n	800f956 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	f000 fc0c 	bl	8010200 <SUBGRF_SetStandby>
 800f9e8:	e7f2      	b.n	800f9d0 <RadioIrqProcess+0x318>
 800f9ea:	bf00      	nop
 800f9ec:	20000f40 	.word	0x20000f40
 800f9f0:	20000f58 	.word	0x20000f58
 800f9f4:	20000f3c 	.word	0x20000f3c
 800f9f8:	08012a54 	.word	0x08012a54
 800f9fc:	08012a60 	.word	0x08012a60

0800fa00 <RadioOnDioIrq>:
{
 800fa00:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800fa02:	4b03      	ldr	r3, [pc, #12]	; (800fa10 <RadioOnDioIrq+0x10>)
 800fa04:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800fa08:	f7ff fe56 	bl	800f6b8 <RadioIrqProcess>
}
 800fa0c:	bd08      	pop	{r3, pc}
 800fa0e:	bf00      	nop
 800fa10:	20000f58 	.word	0x20000f58

0800fa14 <RadioGetWakeupTime>:
{
 800fa14:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800fa16:	f001 f982 	bl	8010d1e <SUBGRF_GetRadioWakeUpTime>
}
 800fa1a:	3003      	adds	r0, #3
 800fa1c:	bd08      	pop	{r3, pc}
	...

0800fa20 <RadioSetMaxPayloadLength>:
{
 800fa20:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800fa22:	2801      	cmp	r0, #1
 800fa24:	d004      	beq.n	800fa30 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800fa26:	4b0a      	ldr	r3, [pc, #40]	; (800fa50 <RadioSetMaxPayloadLength+0x30>)
 800fa28:	7d5b      	ldrb	r3, [r3, #21]
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d008      	beq.n	800fa40 <RadioSetMaxPayloadLength+0x20>
}
 800fa2e:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800fa30:	4b08      	ldr	r3, [pc, #32]	; (800fa54 <RadioSetMaxPayloadLength+0x34>)
 800fa32:	7019      	strb	r1, [r3, #0]
 800fa34:	4806      	ldr	r0, [pc, #24]	; (800fa50 <RadioSetMaxPayloadLength+0x30>)
 800fa36:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fa38:	300e      	adds	r0, #14
 800fa3a:	f001 f843 	bl	8010ac4 <SUBGRF_SetPacketParams>
 800fa3e:	e7f6      	b.n	800fa2e <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800fa40:	4b04      	ldr	r3, [pc, #16]	; (800fa54 <RadioSetMaxPayloadLength+0x34>)
 800fa42:	7019      	strb	r1, [r3, #0]
 800fa44:	4802      	ldr	r0, [pc, #8]	; (800fa50 <RadioSetMaxPayloadLength+0x30>)
 800fa46:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fa48:	300e      	adds	r0, #14
 800fa4a:	f001 f83b 	bl	8010ac4 <SUBGRF_SetPacketParams>
}
 800fa4e:	e7ee      	b.n	800fa2e <RadioSetMaxPayloadLength+0xe>
 800fa50:	20000f58 	.word	0x20000f58
 800fa54:	2000010c 	.word	0x2000010c

0800fa58 <RadioReadRegisters>:
{
 800fa58:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800fa5a:	f001 f8a5 	bl	8010ba8 <SUBGRF_ReadRegisters>
}
 800fa5e:	bd08      	pop	{r3, pc}

0800fa60 <RadioWriteRegisters>:
{
 800fa60:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800fa62:	f000 ffed 	bl	8010a40 <SUBGRF_WriteRegisters>
}
 800fa66:	bd08      	pop	{r3, pc}

0800fa68 <RadioRssi>:
{
 800fa68:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800fa6a:	f000 fd6b 	bl	8010544 <SUBGRF_GetRssiInst>
}
 800fa6e:	b200      	sxth	r0, r0
 800fa70:	bd08      	pop	{r3, pc}
	...

0800fa74 <RadioSetTxContinuousWave>:
{
 800fa74:	b538      	push	{r3, r4, r5, lr}
 800fa76:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800fa78:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fa7c:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 800fa80:	f000 fd20 	bl	80104c4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800fa84:	4628      	mov	r0, r5
 800fa86:	f001 f933 	bl	8010cf0 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	f001 f91c 	bl	8010cc8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800fa90:	f000 fc34 	bl	80102fc <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800fa94:	4d04      	ldr	r5, [pc, #16]	; (800faa8 <RadioSetTxContinuousWave+0x34>)
 800fa96:	4621      	mov	r1, r4
 800fa98:	4628      	mov	r0, r5
 800fa9a:	f001 fed5 	bl	8011848 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800fa9e:	4628      	mov	r0, r5
 800faa0:	f001 fe8c 	bl	80117bc <UTIL_TIMER_Start>
}
 800faa4:	bd38      	pop	{r3, r4, r5, pc}
 800faa6:	bf00      	nop
 800faa8:	20000fb4 	.word	0x20000fb4

0800faac <RadioSetChannel>:
{
 800faac:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800faae:	f000 fd09 	bl	80104c4 <SUBGRF_SetRfFrequency>
}
 800fab2:	bd08      	pop	{r3, pc}

0800fab4 <RadioStartCad>:
{
 800fab4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800fab6:	2100      	movs	r1, #0
 800fab8:	4b07      	ldr	r3, [pc, #28]	; (800fad8 <RadioStartCad+0x24>)
 800faba:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800fabe:	f001 f903 	bl	8010cc8 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800fac2:	2300      	movs	r3, #0
 800fac4:	461a      	mov	r2, r3
 800fac6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800faca:	4608      	mov	r0, r1
 800facc:	f000 fcc1 	bl	8010452 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800fad0:	f000 fc08 	bl	80102e4 <SUBGRF_SetCad>
}
 800fad4:	bd08      	pop	{r3, pc}
 800fad6:	bf00      	nop
 800fad8:	20000f58 	.word	0x20000f58

0800fadc <RadioRx>:
{
 800fadc:	b538      	push	{r3, r4, r5, lr}
 800fade:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800fae0:	f001 f9d7 	bl	8010e92 <RFW_Is_Init>
 800fae4:	2801      	cmp	r0, #1
 800fae6:	d019      	beq.n	800fb1c <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800fae8:	2300      	movs	r3, #0
 800faea:	461a      	mov	r2, r3
 800faec:	f240 2162 	movw	r1, #610	; 0x262
 800faf0:	4608      	mov	r0, r1
 800faf2:	f000 fcae 	bl	8010452 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800faf6:	b9a4      	cbnz	r4, 800fb22 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800faf8:	4c11      	ldr	r4, [pc, #68]	; (800fb40 <RadioRx+0x64>)
 800fafa:	2100      	movs	r1, #0
 800fafc:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800fafe:	4b11      	ldr	r3, [pc, #68]	; (800fb44 <RadioRx+0x68>)
 800fb00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb04:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800fb06:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800fb0a:	f001 f8dd 	bl	8010cc8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800fb0e:	7863      	ldrb	r3, [r4, #1]
 800fb10:	b183      	cbz	r3, 800fb34 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800fb12:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800fb16:	f000 fba7 	bl	8010268 <SUBGRF_SetRx>
}
 800fb1a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800fb1c:	f001 f9c1 	bl	8010ea2 <RFW_ReceiveInit>
 800fb20:	e7e9      	b.n	800faf6 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800fb22:	4d09      	ldr	r5, [pc, #36]	; (800fb48 <RadioRx+0x6c>)
 800fb24:	4621      	mov	r1, r4
 800fb26:	4628      	mov	r0, r5
 800fb28:	f001 fe8e 	bl	8011848 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	f001 fe45 	bl	80117bc <UTIL_TIMER_Start>
 800fb32:	e7e1      	b.n	800faf8 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800fb34:	4b02      	ldr	r3, [pc, #8]	; (800fb40 <RadioRx+0x64>)
 800fb36:	6898      	ldr	r0, [r3, #8]
 800fb38:	0180      	lsls	r0, r0, #6
 800fb3a:	f000 fb95 	bl	8010268 <SUBGRF_SetRx>
}
 800fb3e:	e7ec      	b.n	800fb1a <RadioRx+0x3e>
 800fb40:	20000f58 	.word	0x20000f58
 800fb44:	48000400 	.word	0x48000400
 800fb48:	20000f40 	.word	0x20000f40

0800fb4c <RadioSleep>:
{
 800fb4c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800fb4e:	f04f 0004 	mov.w	r0, #4
 800fb52:	f000 fe8d 	bl	8010870 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800fb56:	2002      	movs	r0, #2
 800fb58:	f7f1 feaa 	bl	80018b0 <HAL_Delay>
}
 800fb5c:	bd08      	pop	{r3, pc}
	...

0800fb60 <RadioSend>:
{
 800fb60:	b570      	push	{r4, r5, r6, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	4605      	mov	r5, r0
 800fb66:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800fb68:	2300      	movs	r3, #0
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	f240 2101 	movw	r1, #513	; 0x201
 800fb70:	4608      	mov	r0, r1
 800fb72:	f000 fc6e 	bl	8010452 <SUBGRF_SetDioIrqParams>
 800fb76:	4b3e      	ldr	r3, [pc, #248]	; (800fc70 <RadioSend+0x110>)
 800fb78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fb7c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800fb7e:	4e3d      	ldr	r6, [pc, #244]	; (800fc74 <RadioSend+0x114>)
 800fb80:	2101      	movs	r1, #1
 800fb82:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800fb86:	f001 f89f 	bl	8010cc8 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800fb8a:	7833      	ldrb	r3, [r6, #0]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d103      	bne.n	800fb98 <RadioSend+0x38>
 800fb90:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800fb94:	2b06      	cmp	r3, #6
 800fb96:	d012      	beq.n	800fbbe <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800fb98:	f640 0089 	movw	r0, #2185	; 0x889
 800fb9c:	f000 fe0e 	bl	80107bc <SUBGRF_ReadRegister>
 800fba0:	f040 0104 	orr.w	r1, r0, #4
 800fba4:	b2c9      	uxtb	r1, r1
 800fba6:	f640 0089 	movw	r0, #2185	; 0x889
 800fbaa:	f000 fd15 	bl	80105d8 <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 800fbae:	4b31      	ldr	r3, [pc, #196]	; (800fc74 <RadioSend+0x114>)
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	2b03      	cmp	r3, #3
 800fbb4:	d818      	bhi.n	800fbe8 <RadioSend+0x88>
 800fbb6:	e8df f003 	tbb	[pc, r3]
 800fbba:	0d22      	.short	0x0d22
 800fbbc:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800fbbe:	f640 0089 	movw	r0, #2185	; 0x889
 800fbc2:	f000 fdfb 	bl	80107bc <SUBGRF_ReadRegister>
 800fbc6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800fbca:	f640 0089 	movw	r0, #2185	; 0x889
 800fbce:	f000 fd03 	bl	80105d8 <SUBGRF_WriteRegister>
 800fbd2:	e7ec      	b.n	800fbae <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800fbd4:	4827      	ldr	r0, [pc, #156]	; (800fc74 <RadioSend+0x114>)
 800fbd6:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fbd8:	300e      	adds	r0, #14
 800fbda:	f000 ff73 	bl	8010ac4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800fbde:	2200      	movs	r2, #0
 800fbe0:	4621      	mov	r1, r4
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	f001 f83d 	bl	8010c62 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800fbe8:	4c23      	ldr	r4, [pc, #140]	; (800fc78 <RadioSend+0x118>)
 800fbea:	4b22      	ldr	r3, [pc, #136]	; (800fc74 <RadioSend+0x114>)
 800fbec:	6859      	ldr	r1, [r3, #4]
 800fbee:	4620      	mov	r0, r4
 800fbf0:	f001 fe2a 	bl	8011848 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f001 fde1 	bl	80117bc <UTIL_TIMER_Start>
}
 800fbfa:	b002      	add	sp, #8
 800fbfc:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800fbfe:	f001 f948 	bl	8010e92 <RFW_Is_Init>
 800fc02:	2801      	cmp	r0, #1
 800fc04:	d00a      	beq.n	800fc1c <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800fc06:	481b      	ldr	r0, [pc, #108]	; (800fc74 <RadioSend+0x114>)
 800fc08:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fc0a:	300e      	adds	r0, #14
 800fc0c:	f000 ff5a 	bl	8010ac4 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800fc10:	2200      	movs	r2, #0
 800fc12:	4621      	mov	r1, r4
 800fc14:	4628      	mov	r0, r5
 800fc16:	f001 f824 	bl	8010c62 <SUBGRF_SendPayload>
 800fc1a:	e7e5      	b.n	800fbe8 <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800fc1c:	f10d 0207 	add.w	r2, sp, #7
 800fc20:	4621      	mov	r1, r4
 800fc22:	4628      	mov	r0, r5
 800fc24:	f001 f93a 	bl	8010e9c <RFW_TransmitInit>
 800fc28:	b968      	cbnz	r0, 800fc46 <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800fc2a:	4812      	ldr	r0, [pc, #72]	; (800fc74 <RadioSend+0x114>)
 800fc2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc30:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fc32:	300e      	adds	r0, #14
 800fc34:	f000 ff46 	bl	8010ac4 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fc3e:	4628      	mov	r0, r5
 800fc40:	f001 f80f 	bl	8010c62 <SUBGRF_SendPayload>
 800fc44:	e7d0      	b.n	800fbe8 <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800fc46:	4b0d      	ldr	r3, [pc, #52]	; (800fc7c <RadioSend+0x11c>)
 800fc48:	2201      	movs	r2, #1
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	2002      	movs	r0, #2
 800fc4e:	f001 fa07 	bl	8011060 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800fc52:	e7d2      	b.n	800fbfa <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800fc54:	4807      	ldr	r0, [pc, #28]	; (800fc74 <RadioSend+0x114>)
 800fc56:	2302      	movs	r3, #2
 800fc58:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800fc5a:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fc5c:	300e      	adds	r0, #14
 800fc5e:	f000 ff31 	bl	8010ac4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800fc62:	2200      	movs	r2, #0
 800fc64:	4621      	mov	r1, r4
 800fc66:	4628      	mov	r0, r5
 800fc68:	f000 fffb 	bl	8010c62 <SUBGRF_SendPayload>
            break;
 800fc6c:	e7bc      	b.n	800fbe8 <RadioSend+0x88>
 800fc6e:	bf00      	nop
 800fc70:	48000400 	.word	0x48000400
 800fc74:	20000f58 	.word	0x20000f58
 800fc78:	20000fb4 	.word	0x20000fb4
 800fc7c:	08012a70 	.word	0x08012a70

0800fc80 <RadioRandom>:
{
 800fc80:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800fc82:	2300      	movs	r3, #0
 800fc84:	461a      	mov	r2, r3
 800fc86:	4619      	mov	r1, r3
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f000 fbe2 	bl	8010452 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800fc8e:	f000 ff9b 	bl	8010bc8 <SUBGRF_GetRandom>
}
 800fc92:	bd08      	pop	{r3, pc}

0800fc94 <RadioSetModem>:
{
 800fc94:	b510      	push	{r4, lr}
 800fc96:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800fc98:	4b14      	ldr	r3, [pc, #80]	; (800fcec <RadioSetModem+0x58>)
 800fc9a:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 800fc9c:	f001 f906 	bl	8010eac <RFW_SetRadioModem>
    switch( modem )
 800fca0:	2c01      	cmp	r4, #1
 800fca2:	d010      	beq.n	800fcc6 <RadioSetModem+0x32>
 800fca4:	2c03      	cmp	r4, #3
 800fca6:	d01a      	beq.n	800fcde <RadioSetModem+0x4a>
 800fca8:	b134      	cbz	r4, 800fcb8 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800fcaa:	2003      	movs	r0, #3
 800fcac:	f000 fce4 	bl	8010678 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fcb0:	4b0e      	ldr	r3, [pc, #56]	; (800fcec <RadioSetModem+0x58>)
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	735a      	strb	r2, [r3, #13]
}
 800fcb6:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800fcb8:	2000      	movs	r0, #0
 800fcba:	f000 fcdd 	bl	8010678 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fcbe:	4b0b      	ldr	r3, [pc, #44]	; (800fcec <RadioSetModem+0x58>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	735a      	strb	r2, [r3, #13]
        break;
 800fcc4:	e7f7      	b.n	800fcb6 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800fcc6:	2001      	movs	r0, #1
 800fcc8:	f000 fcd6 	bl	8010678 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800fccc:	4b07      	ldr	r3, [pc, #28]	; (800fcec <RadioSetModem+0x58>)
 800fcce:	7b5a      	ldrb	r2, [r3, #13]
 800fcd0:	7b18      	ldrb	r0, [r3, #12]
 800fcd2:	4282      	cmp	r2, r0
 800fcd4:	d0ef      	beq.n	800fcb6 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800fcd6:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800fcd8:	f000 f80a 	bl	800fcf0 <RadioSetPublicNetwork>
 800fcdc:	e7eb      	b.n	800fcb6 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800fcde:	2002      	movs	r0, #2
 800fce0:	f000 fcca 	bl	8010678 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fce4:	4b01      	ldr	r3, [pc, #4]	; (800fcec <RadioSetModem+0x58>)
 800fce6:	2200      	movs	r2, #0
 800fce8:	735a      	strb	r2, [r3, #13]
}
 800fcea:	e7e4      	b.n	800fcb6 <RadioSetModem+0x22>
 800fcec:	20000f58 	.word	0x20000f58

0800fcf0 <RadioSetPublicNetwork>:
{
 800fcf0:	b510      	push	{r4, lr}
 800fcf2:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800fcf4:	4b0e      	ldr	r3, [pc, #56]	; (800fd30 <RadioSetPublicNetwork+0x40>)
 800fcf6:	7318      	strb	r0, [r3, #12]
 800fcf8:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800fcfa:	2001      	movs	r0, #1
 800fcfc:	f7ff ffca 	bl	800fc94 <RadioSetModem>
    if( enable == true )
 800fd00:	b154      	cbz	r4, 800fd18 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800fd02:	2134      	movs	r1, #52	; 0x34
 800fd04:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800fd08:	f000 fc66 	bl	80105d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800fd0c:	2144      	movs	r1, #68	; 0x44
 800fd0e:	f240 7041 	movw	r0, #1857	; 0x741
 800fd12:	f000 fc61 	bl	80105d8 <SUBGRF_WriteRegister>
}
 800fd16:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800fd18:	2114      	movs	r1, #20
 800fd1a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800fd1e:	f000 fc5b 	bl	80105d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800fd22:	2124      	movs	r1, #36	; 0x24
 800fd24:	f240 7041 	movw	r0, #1857	; 0x741
 800fd28:	f000 fc56 	bl	80105d8 <SUBGRF_WriteRegister>
}
 800fd2c:	e7f3      	b.n	800fd16 <RadioSetPublicNetwork+0x26>
 800fd2e:	bf00      	nop
 800fd30:	20000f58 	.word	0x20000f58

0800fd34 <RadioSetTxConfig>:
{
 800fd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd38:	b083      	sub	sp, #12
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	460e      	mov	r6, r1
 800fd3e:	4617      	mov	r7, r2
 800fd40:	461d      	mov	r5, r3
 800fd42:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 800fd46:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 800fd4a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800fd4e:	f001 f89f 	bl	8010e90 <RFW_DeInit>
    switch( modem )
 800fd52:	b174      	cbz	r4, 800fd72 <RadioSetTxConfig+0x3e>
 800fd54:	2c01      	cmp	r4, #1
 800fd56:	d053      	beq.n	800fe00 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800fd58:	4630      	mov	r0, r6
 800fd5a:	f000 ffc9 	bl	8010cf0 <SUBGRF_SetRfTxPower>
 800fd5e:	4c51      	ldr	r4, [pc, #324]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fd60:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800fd64:	f001 f899 	bl	8010e9a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800fd68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd6a:	6063      	str	r3, [r4, #4]
}
 800fd6c:	b003      	add	sp, #12
 800fd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800fd72:	4c4c      	ldr	r4, [pc, #304]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fd74:	f04f 0b00 	mov.w	fp, #0
 800fd78:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800fd7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd7e:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800fd80:	230b      	movs	r3, #11
 800fd82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800fd86:	4628      	mov	r0, r5
 800fd88:	f001 f820 	bl	8010dcc <SUBGRF_GetFskBandwidthRegValue>
 800fd8c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800fd90:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800fd92:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800fd96:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800fd9a:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800fd9e:	2304      	movs	r3, #4
 800fda0:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800fda2:	2318      	movs	r3, #24
 800fda4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800fda6:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800fdaa:	f089 0901 	eor.w	r9, r9, #1
 800fdae:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 800fdb2:	f1ba 0f00 	cmp.w	sl, #0
 800fdb6:	d01f      	beq.n	800fdf8 <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800fdb8:	22f2      	movs	r2, #242	; 0xf2
 800fdba:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800fdbc:	4c39      	ldr	r4, [pc, #228]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800fdc2:	f7ff fc43 	bl	800f64c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	f7ff ff64 	bl	800fc94 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fdcc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800fdd0:	f000 fc6c 	bl	80106ac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fdd4:	f104 000e 	add.w	r0, r4, #14
 800fdd8:	f000 fe74 	bl	8010ac4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800fddc:	4a32      	ldr	r2, [pc, #200]	; (800fea8 <RadioSetTxConfig+0x174>)
 800fdde:	466b      	mov	r3, sp
 800fde0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fde4:	e883 0003 	stmia.w	r3, {r0, r1}
 800fde8:	4618      	mov	r0, r3
 800fdea:	f000 fe39 	bl	8010a60 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800fdee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800fdf2:	f000 fd5d 	bl	80108b0 <SUBGRF_SetWhiteningSeed>
            break;
 800fdf6:	e7af      	b.n	800fd58 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800fdf8:	4b2a      	ldr	r3, [pc, #168]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	75da      	strb	r2, [r3, #23]
 800fdfe:	e7dd      	b.n	800fdbc <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800fe00:	4a28      	ldr	r2, [pc, #160]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fe02:	2301      	movs	r3, #1
 800fe04:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800fe08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800fe10:	4926      	ldr	r1, [pc, #152]	; (800feac <RadioSetTxConfig+0x178>)
 800fe12:	5d49      	ldrb	r1, [r1, r5]
 800fe14:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800fe18:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 800fe1c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800fe20:	b91d      	cbnz	r5, 800fe2a <RadioSetTxConfig+0xf6>
 800fe22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe24:	3a0b      	subs	r2, #11
 800fe26:	2a01      	cmp	r2, #1
 800fe28:	d92c      	bls.n	800fe84 <RadioSetTxConfig+0x150>
 800fe2a:	2d01      	cmp	r5, #1
 800fe2c:	d027      	beq.n	800fe7e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800fe2e:	4a1d      	ldr	r2, [pc, #116]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fe30:	2100      	movs	r1, #0
 800fe32:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800fe36:	4a1b      	ldr	r2, [pc, #108]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fe38:	2101      	movs	r1, #1
 800fe3a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800fe3c:	3b05      	subs	r3, #5
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	428b      	cmp	r3, r1
 800fe42:	d924      	bls.n	800fe8e <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800fe44:	4b17      	ldr	r3, [pc, #92]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fe46:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800fe4a:	4c16      	ldr	r4, [pc, #88]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fe4c:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800fe50:	4b17      	ldr	r3, [pc, #92]	; (800feb0 <RadioSetTxConfig+0x17c>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800fe56:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800fe5a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800fe5e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800fe62:	f7ff fbf3 	bl	800f64c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800fe66:	2001      	movs	r0, #1
 800fe68:	f7ff ff14 	bl	800fc94 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fe6c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800fe70:	f000 fc1c 	bl	80106ac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fe74:	f104 000e 	add.w	r0, r4, #14
 800fe78:	f000 fe24 	bl	8010ac4 <SUBGRF_SetPacketParams>
            break;
 800fe7c:	e76c      	b.n	800fd58 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800fe7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe80:	2a0c      	cmp	r2, #12
 800fe82:	d1d4      	bne.n	800fe2e <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800fe84:	4a07      	ldr	r2, [pc, #28]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fe86:	2101      	movs	r1, #1
 800fe88:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800fe8c:	e7d3      	b.n	800fe36 <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 800fe8e:	f1b8 0f0b 	cmp.w	r8, #11
 800fe92:	d803      	bhi.n	800fe9c <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800fe94:	4613      	mov	r3, r2
 800fe96:	220c      	movs	r2, #12
 800fe98:	839a      	strh	r2, [r3, #28]
 800fe9a:	e7d6      	b.n	800fe4a <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800fe9c:	4b01      	ldr	r3, [pc, #4]	; (800fea4 <RadioSetTxConfig+0x170>)
 800fe9e:	f8a3 801c 	strh.w	r8, [r3, #28]
 800fea2:	e7d2      	b.n	800fe4a <RadioSetTxConfig+0x116>
 800fea4:	20000f58 	.word	0x20000f58
 800fea8:	08011da4 	.word	0x08011da4
 800feac:	08012a88 	.word	0x08012a88
 800feb0:	2000010c 	.word	0x2000010c

0800feb4 <RadioSetRxConfig>:
{
 800feb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb8:	b085      	sub	sp, #20
 800feba:	4604      	mov	r4, r0
 800febc:	460d      	mov	r5, r1
 800febe:	4616      	mov	r6, r2
 800fec0:	9301      	str	r3, [sp, #4]
 800fec2:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 800fec6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 800feca:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 800fece:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800fed2:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 800fed6:	4b6e      	ldr	r3, [pc, #440]	; (8010090 <RadioSetRxConfig+0x1dc>)
 800fed8:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800fedc:	f000 ffd8 	bl	8010e90 <RFW_DeInit>
    if( rxContinuous == true )
 800fee0:	f1b8 0f00 	cmp.w	r8, #0
 800fee4:	d001      	beq.n	800feea <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800fee6:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800feea:	b14f      	cbz	r7, 800ff00 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 800feec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800fef0:	4b68      	ldr	r3, [pc, #416]	; (8010094 <RadioSetRxConfig+0x1e0>)
 800fef2:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800fef4:	b144      	cbz	r4, 800ff08 <RadioSetRxConfig+0x54>
 800fef6:	2c01      	cmp	r4, #1
 800fef8:	d057      	beq.n	800ffaa <RadioSetRxConfig+0xf6>
}
 800fefa:	b005      	add	sp, #20
 800fefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800ff00:	4b64      	ldr	r3, [pc, #400]	; (8010094 <RadioSetRxConfig+0x1e0>)
 800ff02:	22ff      	movs	r2, #255	; 0xff
 800ff04:	701a      	strb	r2, [r3, #0]
 800ff06:	e7f5      	b.n	800fef4 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800ff08:	2000      	movs	r0, #0
 800ff0a:	f000 fa05 	bl	8010318 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ff0e:	4c60      	ldr	r4, [pc, #384]	; (8010090 <RadioSetRxConfig+0x1dc>)
 800ff10:	f04f 0800 	mov.w	r8, #0
 800ff14:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800ff18:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800ff1a:	230b      	movs	r3, #11
 800ff1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800ff20:	4628      	mov	r0, r5
 800ff22:	f000 ff53 	bl	8010dcc <SUBGRF_GetFskBandwidthRegValue>
 800ff26:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ff2a:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800ff2e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800ff32:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800ff36:	2304      	movs	r3, #4
 800ff38:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800ff3a:	2318      	movs	r3, #24
 800ff3c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800ff3e:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800ff42:	f087 0701 	eor.w	r7, r7, #1
 800ff46:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800ff48:	4b52      	ldr	r3, [pc, #328]	; (8010094 <RadioSetRxConfig+0x1e0>)
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800ff4e:	f1bb 0f00 	cmp.w	fp, #0
 800ff52:	d026      	beq.n	800ffa2 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800ff54:	22f2      	movs	r2, #242	; 0xf2
 800ff56:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800ff58:	4c4d      	ldr	r4, [pc, #308]	; (8010090 <RadioSetRxConfig+0x1dc>)
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800ff5e:	f7ff fb75 	bl	800f64c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800ff62:	2000      	movs	r0, #0
 800ff64:	f7ff fe96 	bl	800fc94 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ff68:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800ff6c:	f000 fb9e 	bl	80106ac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ff70:	f104 000e 	add.w	r0, r4, #14
 800ff74:	f000 fda6 	bl	8010ac4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800ff78:	4a47      	ldr	r2, [pc, #284]	; (8010098 <RadioSetRxConfig+0x1e4>)
 800ff7a:	ab02      	add	r3, sp, #8
 800ff7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff80:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff84:	4618      	mov	r0, r3
 800ff86:	f000 fd6b 	bl	8010a60 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800ff8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ff8e:	f000 fc8f 	bl	80108b0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800ff92:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ff96:	fb02 fa0a 	mul.w	sl, r2, sl
 800ff9a:	fbba f6f6 	udiv	r6, sl, r6
 800ff9e:	60a6      	str	r6, [r4, #8]
            break;
 800ffa0:	e7ab      	b.n	800fefa <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800ffa2:	4b3b      	ldr	r3, [pc, #236]	; (8010090 <RadioSetRxConfig+0x1dc>)
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	75da      	strb	r2, [r3, #23]
 800ffa8:	e7d6      	b.n	800ff58 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800ffaa:	2000      	movs	r0, #0
 800ffac:	f000 f9b4 	bl	8010318 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ffb0:	4a37      	ldr	r2, [pc, #220]	; (8010090 <RadioSetRxConfig+0x1dc>)
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800ffb8:	b2f3      	uxtb	r3, r6
 800ffba:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800ffbe:	4937      	ldr	r1, [pc, #220]	; (801009c <RadioSetRxConfig+0x1e8>)
 800ffc0:	5d49      	ldrb	r1, [r1, r5]
 800ffc2:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800ffc6:	9901      	ldr	r1, [sp, #4]
 800ffc8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ffcc:	b91d      	cbnz	r5, 800ffd6 <RadioSetRxConfig+0x122>
 800ffce:	f1a6 020b 	sub.w	r2, r6, #11
 800ffd2:	2a01      	cmp	r2, #1
 800ffd4:	d941      	bls.n	801005a <RadioSetRxConfig+0x1a6>
 800ffd6:	2d01      	cmp	r5, #1
 800ffd8:	d03d      	beq.n	8010056 <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800ffda:	4a2d      	ldr	r2, [pc, #180]	; (8010090 <RadioSetRxConfig+0x1dc>)
 800ffdc:	2100      	movs	r1, #0
 800ffde:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ffe2:	4a2b      	ldr	r2, [pc, #172]	; (8010090 <RadioSetRxConfig+0x1dc>)
 800ffe4:	2101      	movs	r1, #1
 800ffe6:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800ffe8:	3b05      	subs	r3, #5
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	428b      	cmp	r3, r1
 800ffee:	d939      	bls.n	8010064 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800fff0:	4b27      	ldr	r3, [pc, #156]	; (8010090 <RadioSetRxConfig+0x1dc>)
 800fff2:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800fff6:	4c26      	ldr	r4, [pc, #152]	; (8010090 <RadioSetRxConfig+0x1dc>)
 800fff8:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800fffa:	4b26      	ldr	r3, [pc, #152]	; (8010094 <RadioSetRxConfig+0x1e0>)
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010000:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010004:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010008:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 801000c:	f7ff fb1e 	bl	800f64c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010010:	2001      	movs	r0, #1
 8010012:	f7ff fe3f 	bl	800fc94 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010016:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801001a:	f000 fb47 	bl	80106ac <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801001e:	f104 000e 	add.w	r0, r4, #14
 8010022:	f000 fd4f 	bl	8010ac4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8010026:	fa5f f08a 	uxtb.w	r0, sl
 801002a:	f000 fb03 	bl	8010634 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801002e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8010032:	2b01      	cmp	r3, #1
 8010034:	d021      	beq.n	801007a <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8010036:	f240 7036 	movw	r0, #1846	; 0x736
 801003a:	f000 fbbf 	bl	80107bc <SUBGRF_ReadRegister>
 801003e:	f040 0104 	orr.w	r1, r0, #4
 8010042:	b2c9      	uxtb	r1, r1
 8010044:	f240 7036 	movw	r0, #1846	; 0x736
 8010048:	f000 fac6 	bl	80105d8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801004c:	4b10      	ldr	r3, [pc, #64]	; (8010090 <RadioSetRxConfig+0x1dc>)
 801004e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010052:	609a      	str	r2, [r3, #8]
}
 8010054:	e751      	b.n	800fefa <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010056:	2e0c      	cmp	r6, #12
 8010058:	d1bf      	bne.n	800ffda <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801005a:	4a0d      	ldr	r2, [pc, #52]	; (8010090 <RadioSetRxConfig+0x1dc>)
 801005c:	2101      	movs	r1, #1
 801005e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8010062:	e7be      	b.n	800ffe2 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8010064:	f1b9 0f0b 	cmp.w	r9, #11
 8010068:	d803      	bhi.n	8010072 <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801006a:	4613      	mov	r3, r2
 801006c:	220c      	movs	r2, #12
 801006e:	839a      	strh	r2, [r3, #28]
 8010070:	e7c1      	b.n	800fff6 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010072:	4b07      	ldr	r3, [pc, #28]	; (8010090 <RadioSetRxConfig+0x1dc>)
 8010074:	f8a3 901c 	strh.w	r9, [r3, #28]
 8010078:	e7bd      	b.n	800fff6 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801007a:	f240 7036 	movw	r0, #1846	; 0x736
 801007e:	f000 fb9d 	bl	80107bc <SUBGRF_ReadRegister>
 8010082:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010086:	f240 7036 	movw	r0, #1846	; 0x736
 801008a:	f000 faa5 	bl	80105d8 <SUBGRF_WriteRegister>
 801008e:	e7dd      	b.n	801004c <RadioSetRxConfig+0x198>
 8010090:	20000f58 	.word	0x20000f58
 8010094:	2000010c 	.word	0x2000010c
 8010098:	08011da4 	.word	0x08011da4
 801009c:	08012a88 	.word	0x08012a88

080100a0 <RadioIsChannelFree>:
{
 80100a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100a2:	b08b      	sub	sp, #44	; 0x2c
 80100a4:	4604      	mov	r4, r0
 80100a6:	460f      	mov	r7, r1
 80100a8:	4616      	mov	r6, r2
 80100aa:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80100ac:	f7ff face 	bl	800f64c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80100b0:	2000      	movs	r0, #0
 80100b2:	f7ff fdef 	bl	800fc94 <RadioSetModem>
    RadioSetChannel( freq );
 80100b6:	4620      	mov	r0, r4
 80100b8:	f7ff fcf8 	bl	800faac <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80100bc:	2301      	movs	r3, #1
 80100be:	9309      	str	r3, [sp, #36]	; 0x24
 80100c0:	2400      	movs	r4, #0
 80100c2:	9408      	str	r4, [sp, #32]
 80100c4:	9407      	str	r4, [sp, #28]
 80100c6:	9406      	str	r4, [sp, #24]
 80100c8:	9405      	str	r4, [sp, #20]
 80100ca:	9404      	str	r4, [sp, #16]
 80100cc:	9403      	str	r4, [sp, #12]
 80100ce:	9402      	str	r4, [sp, #8]
 80100d0:	2303      	movs	r3, #3
 80100d2:	9301      	str	r3, [sp, #4]
 80100d4:	9700      	str	r7, [sp, #0]
 80100d6:	4623      	mov	r3, r4
 80100d8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80100dc:	4639      	mov	r1, r7
 80100de:	4620      	mov	r0, r4
 80100e0:	f7ff fee8 	bl	800feb4 <RadioSetRxConfig>
    RadioRx( 0 );
 80100e4:	4620      	mov	r0, r4
 80100e6:	f7ff fcf9 	bl	800fadc <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80100ea:	f7ff fc93 	bl	800fa14 <RadioGetWakeupTime>
 80100ee:	f7f1 fbdf 	bl	80018b0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80100f2:	f001 fac9 	bl	8011688 <UTIL_TIMER_GetCurrentTime>
 80100f6:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80100f8:	4620      	mov	r0, r4
 80100fa:	f001 facf 	bl	801169c <UTIL_TIMER_GetElapsedTime>
 80100fe:	42a8      	cmp	r0, r5
 8010100:	d206      	bcs.n	8010110 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8010102:	2000      	movs	r0, #0
 8010104:	f7ff fcb0 	bl	800fa68 <RadioRssi>
        if( rssi > rssiThresh )
 8010108:	42b0      	cmp	r0, r6
 801010a:	ddf5      	ble.n	80100f8 <RadioIsChannelFree+0x58>
            status = false;
 801010c:	2400      	movs	r4, #0
 801010e:	e000      	b.n	8010112 <RadioIsChannelFree+0x72>
    bool status = true;
 8010110:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8010112:	f7ff fa9b 	bl	800f64c <RadioStandby>
}
 8010116:	4620      	mov	r0, r4
 8010118:	b00b      	add	sp, #44	; 0x2c
 801011a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801011c <RadioInit>:
{
 801011c:	b570      	push	{r4, r5, r6, lr}
 801011e:	b082      	sub	sp, #8
    RadioEvents = events;
 8010120:	4b1d      	ldr	r3, [pc, #116]	; (8010198 <RadioInit+0x7c>)
 8010122:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8010124:	4d1d      	ldr	r5, [pc, #116]	; (801019c <RadioInit+0x80>)
 8010126:	2400      	movs	r4, #0
 8010128:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 801012a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 801012c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801012e:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8010130:	481b      	ldr	r0, [pc, #108]	; (80101a0 <RadioInit+0x84>)
 8010132:	f000 fb67 	bl	8010804 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8010136:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8010138:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 801013a:	f000 f8fa 	bl	8010332 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801013e:	4621      	mov	r1, r4
 8010140:	4620      	mov	r0, r4
 8010142:	f000 f9f1 	bl	8010528 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8010146:	2204      	movs	r2, #4
 8010148:	4621      	mov	r1, r4
 801014a:	2001      	movs	r0, #1
 801014c:	f000 fbc9 	bl	80108e2 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010150:	4623      	mov	r3, r4
 8010152:	4622      	mov	r2, r4
 8010154:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010158:	4608      	mov	r0, r1
 801015a:	f000 f97a 	bl	8010452 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801015e:	f7ff fcf5 	bl	800fb4c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8010162:	4e10      	ldr	r6, [pc, #64]	; (80101a4 <RadioInit+0x88>)
 8010164:	9400      	str	r4, [sp, #0]
 8010166:	4b10      	ldr	r3, [pc, #64]	; (80101a8 <RadioInit+0x8c>)
 8010168:	4622      	mov	r2, r4
 801016a:	f04f 31ff 	mov.w	r1, #4294967295
 801016e:	4630      	mov	r0, r6
 8010170:	f001 fa6c 	bl	801164c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8010174:	4d0d      	ldr	r5, [pc, #52]	; (80101ac <RadioInit+0x90>)
 8010176:	9400      	str	r4, [sp, #0]
 8010178:	4b0d      	ldr	r3, [pc, #52]	; (80101b0 <RadioInit+0x94>)
 801017a:	4622      	mov	r2, r4
 801017c:	f04f 31ff 	mov.w	r1, #4294967295
 8010180:	4628      	mov	r0, r5
 8010182:	f001 fa63 	bl	801164c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8010186:	4630      	mov	r0, r6
 8010188:	f001 fabe 	bl	8011708 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801018c:	4628      	mov	r0, r5
 801018e:	f001 fabb 	bl	8011708 <UTIL_TIMER_Stop>
}
 8010192:	b002      	add	sp, #8
 8010194:	bd70      	pop	{r4, r5, r6, pc}
 8010196:	bf00      	nop
 8010198:	20000f3c 	.word	0x20000f3c
 801019c:	20000f58 	.word	0x20000f58
 80101a0:	0800fa01 	.word	0x0800fa01
 80101a4:	20000fb4 	.word	0x20000fb4
 80101a8:	0800f559 	.word	0x0800f559
 80101ac:	20000f40 	.word	0x20000f40
 80101b0:	0800f581 	.word	0x0800f581

080101b4 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80101b4:	b510      	push	{r4, lr}
 80101b6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101b8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80101bc:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80101be:	460a      	mov	r2, r1
 80101c0:	4601      	mov	r1, r0
 80101c2:	4803      	ldr	r0, [pc, #12]	; (80101d0 <SUBGRF_WriteCommand+0x1c>)
 80101c4:	f7f5 faa8 	bl	8005718 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101c8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80101cc:	bd10      	pop	{r4, pc}
 80101ce:	bf00      	nop
 80101d0:	200001d0 	.word	0x200001d0

080101d4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80101d4:	b510      	push	{r4, lr}
 80101d6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101d8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80101dc:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80101de:	460a      	mov	r2, r1
 80101e0:	4601      	mov	r1, r0
 80101e2:	4803      	ldr	r0, [pc, #12]	; (80101f0 <SUBGRF_ReadCommand+0x1c>)
 80101e4:	f7f5 faee 	bl	80057c4 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101e8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80101ec:	bd10      	pop	{r4, pc}
 80101ee:	bf00      	nop
 80101f0:	200001d0 	.word	0x200001d0

080101f4 <SUBGRF_GetOperatingMode>:
}
 80101f4:	4b01      	ldr	r3, [pc, #4]	; (80101fc <SUBGRF_GetOperatingMode+0x8>)
 80101f6:	7818      	ldrb	r0, [r3, #0]
 80101f8:	4770      	bx	lr
 80101fa:	bf00      	nop
 80101fc:	20000fd2 	.word	0x20000fd2

08010200 <SUBGRF_SetStandby>:
{
 8010200:	b500      	push	{lr}
 8010202:	b083      	sub	sp, #12
 8010204:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8010208:	2201      	movs	r2, #1
 801020a:	f10d 0107 	add.w	r1, sp, #7
 801020e:	2080      	movs	r0, #128	; 0x80
 8010210:	f7ff ffd0 	bl	80101b4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8010214:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010218:	b92b      	cbnz	r3, 8010226 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 801021a:	4b05      	ldr	r3, [pc, #20]	; (8010230 <SUBGRF_SetStandby+0x30>)
 801021c:	2201      	movs	r2, #1
 801021e:	701a      	strb	r2, [r3, #0]
}
 8010220:	b003      	add	sp, #12
 8010222:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8010226:	4b02      	ldr	r3, [pc, #8]	; (8010230 <SUBGRF_SetStandby+0x30>)
 8010228:	2202      	movs	r2, #2
 801022a:	701a      	strb	r2, [r3, #0]
}
 801022c:	e7f8      	b.n	8010220 <SUBGRF_SetStandby+0x20>
 801022e:	bf00      	nop
 8010230:	20000fd2 	.word	0x20000fd2

08010234 <SUBGRF_SetTx>:
{
 8010234:	b500      	push	{lr}
 8010236:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8010238:	4b0a      	ldr	r3, [pc, #40]	; (8010264 <SUBGRF_SetTx+0x30>)
 801023a:	2204      	movs	r2, #4
 801023c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801023e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010242:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010246:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801024a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801024e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8010252:	2203      	movs	r2, #3
 8010254:	a901      	add	r1, sp, #4
 8010256:	2083      	movs	r0, #131	; 0x83
 8010258:	f7ff ffac 	bl	80101b4 <SUBGRF_WriteCommand>
}
 801025c:	b003      	add	sp, #12
 801025e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010262:	bf00      	nop
 8010264:	20000fd2 	.word	0x20000fd2

08010268 <SUBGRF_SetRx>:
{
 8010268:	b500      	push	{lr}
 801026a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 801026c:	4b0a      	ldr	r3, [pc, #40]	; (8010298 <SUBGRF_SetRx+0x30>)
 801026e:	2205      	movs	r2, #5
 8010270:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010272:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010276:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801027a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801027e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010282:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010286:	2203      	movs	r2, #3
 8010288:	a901      	add	r1, sp, #4
 801028a:	2082      	movs	r0, #130	; 0x82
 801028c:	f7ff ff92 	bl	80101b4 <SUBGRF_WriteCommand>
}
 8010290:	b003      	add	sp, #12
 8010292:	f85d fb04 	ldr.w	pc, [sp], #4
 8010296:	bf00      	nop
 8010298:	20000fd2 	.word	0x20000fd2

0801029c <SUBGRF_SetRxDutyCycle>:
{
 801029c:	b500      	push	{lr}
 801029e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80102a0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80102a4:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80102a8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80102ac:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80102b0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80102b4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80102b8:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80102bc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80102c0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80102c4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80102c8:	2206      	movs	r2, #6
 80102ca:	4669      	mov	r1, sp
 80102cc:	2094      	movs	r0, #148	; 0x94
 80102ce:	f7ff ff71 	bl	80101b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80102d2:	4b03      	ldr	r3, [pc, #12]	; (80102e0 <SUBGRF_SetRxDutyCycle+0x44>)
 80102d4:	2206      	movs	r2, #6
 80102d6:	701a      	strb	r2, [r3, #0]
}
 80102d8:	b003      	add	sp, #12
 80102da:	f85d fb04 	ldr.w	pc, [sp], #4
 80102de:	bf00      	nop
 80102e0:	20000fd2 	.word	0x20000fd2

080102e4 <SUBGRF_SetCad>:
{
 80102e4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80102e6:	2200      	movs	r2, #0
 80102e8:	4611      	mov	r1, r2
 80102ea:	20c5      	movs	r0, #197	; 0xc5
 80102ec:	f7ff ff62 	bl	80101b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80102f0:	4b01      	ldr	r3, [pc, #4]	; (80102f8 <SUBGRF_SetCad+0x14>)
 80102f2:	2207      	movs	r2, #7
 80102f4:	701a      	strb	r2, [r3, #0]
}
 80102f6:	bd08      	pop	{r3, pc}
 80102f8:	20000fd2 	.word	0x20000fd2

080102fc <SUBGRF_SetTxContinuousWave>:
{
 80102fc:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80102fe:	2200      	movs	r2, #0
 8010300:	4611      	mov	r1, r2
 8010302:	20d1      	movs	r0, #209	; 0xd1
 8010304:	f7ff ff56 	bl	80101b4 <SUBGRF_WriteCommand>
}
 8010308:	bd08      	pop	{r3, pc}

0801030a <SUBGRF_SetTxInfinitePreamble>:
{
 801030a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801030c:	2200      	movs	r2, #0
 801030e:	4611      	mov	r1, r2
 8010310:	20d2      	movs	r0, #210	; 0xd2
 8010312:	f7ff ff4f 	bl	80101b4 <SUBGRF_WriteCommand>
}
 8010316:	bd08      	pop	{r3, pc}

08010318 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8010318:	b500      	push	{lr}
 801031a:	b083      	sub	sp, #12
 801031c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8010320:	2201      	movs	r2, #1
 8010322:	f10d 0107 	add.w	r1, sp, #7
 8010326:	209f      	movs	r0, #159	; 0x9f
 8010328:	f7ff ff44 	bl	80101b4 <SUBGRF_WriteCommand>
}
 801032c:	b003      	add	sp, #12
 801032e:	f85d fb04 	ldr.w	pc, [sp], #4

08010332 <SUBGRF_SetRegulatorMode>:
{
 8010332:	b500      	push	{lr}
 8010334:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8010336:	f7f2 fa67 	bl	8002808 <RBI_IsDCDC>
 801033a:	2801      	cmp	r0, #1
 801033c:	d00b      	beq.n	8010356 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 801033e:	2300      	movs	r3, #0
 8010340:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8010344:	2201      	movs	r2, #1
 8010346:	f10d 0107 	add.w	r1, sp, #7
 801034a:	2096      	movs	r0, #150	; 0x96
 801034c:	f7ff ff32 	bl	80101b4 <SUBGRF_WriteCommand>
}
 8010350:	b003      	add	sp, #12
 8010352:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8010356:	2301      	movs	r3, #1
 8010358:	f88d 3007 	strb.w	r3, [sp, #7]
 801035c:	e7f2      	b.n	8010344 <SUBGRF_SetRegulatorMode+0x12>

0801035e <SUBGRF_Calibrate>:
{
 801035e:	b500      	push	{lr}
 8010360:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010362:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010366:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801036a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801036c:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010370:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010372:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010376:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010378:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801037c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801037e:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010382:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8010384:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010388:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801038a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801038e:	2201      	movs	r2, #1
 8010390:	f10d 0107 	add.w	r1, sp, #7
 8010394:	2089      	movs	r0, #137	; 0x89
 8010396:	f7ff ff0d 	bl	80101b4 <SUBGRF_WriteCommand>
}
 801039a:	b003      	add	sp, #12
 801039c:	f85d fb04 	ldr.w	pc, [sp], #4

080103a0 <SUBGRF_CalibrateImage>:
{
 80103a0:	b500      	push	{lr}
 80103a2:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80103a4:	4b1c      	ldr	r3, [pc, #112]	; (8010418 <SUBGRF_CalibrateImage+0x78>)
 80103a6:	4298      	cmp	r0, r3
 80103a8:	d90d      	bls.n	80103c6 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 80103aa:	23e1      	movs	r3, #225	; 0xe1
 80103ac:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80103b0:	23e9      	movs	r3, #233	; 0xe9
 80103b2:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80103b6:	2202      	movs	r2, #2
 80103b8:	a901      	add	r1, sp, #4
 80103ba:	2098      	movs	r0, #152	; 0x98
 80103bc:	f7ff fefa 	bl	80101b4 <SUBGRF_WriteCommand>
}
 80103c0:	b003      	add	sp, #12
 80103c2:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80103c6:	4b15      	ldr	r3, [pc, #84]	; (801041c <SUBGRF_CalibrateImage+0x7c>)
 80103c8:	4298      	cmp	r0, r3
 80103ca:	d906      	bls.n	80103da <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80103cc:	23d7      	movs	r3, #215	; 0xd7
 80103ce:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80103d2:	23db      	movs	r3, #219	; 0xdb
 80103d4:	f88d 3005 	strb.w	r3, [sp, #5]
 80103d8:	e7ed      	b.n	80103b6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80103da:	4b11      	ldr	r3, [pc, #68]	; (8010420 <SUBGRF_CalibrateImage+0x80>)
 80103dc:	4298      	cmp	r0, r3
 80103de:	d906      	bls.n	80103ee <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80103e0:	23c1      	movs	r3, #193	; 0xc1
 80103e2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80103e6:	23c5      	movs	r3, #197	; 0xc5
 80103e8:	f88d 3005 	strb.w	r3, [sp, #5]
 80103ec:	e7e3      	b.n	80103b6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80103ee:	4b0d      	ldr	r3, [pc, #52]	; (8010424 <SUBGRF_CalibrateImage+0x84>)
 80103f0:	4298      	cmp	r0, r3
 80103f2:	d906      	bls.n	8010402 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80103f4:	2375      	movs	r3, #117	; 0x75
 80103f6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80103fa:	2381      	movs	r3, #129	; 0x81
 80103fc:	f88d 3005 	strb.w	r3, [sp, #5]
 8010400:	e7d9      	b.n	80103b6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8010402:	4b09      	ldr	r3, [pc, #36]	; (8010428 <SUBGRF_CalibrateImage+0x88>)
 8010404:	4298      	cmp	r0, r3
 8010406:	d9d6      	bls.n	80103b6 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8010408:	236b      	movs	r3, #107	; 0x6b
 801040a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 801040e:	236f      	movs	r3, #111	; 0x6f
 8010410:	f88d 3005 	strb.w	r3, [sp, #5]
 8010414:	e7cf      	b.n	80103b6 <SUBGRF_CalibrateImage+0x16>
 8010416:	bf00      	nop
 8010418:	35a4e900 	.word	0x35a4e900
 801041c:	32a9f880 	.word	0x32a9f880
 8010420:	2de54480 	.word	0x2de54480
 8010424:	1b6b0b00 	.word	0x1b6b0b00
 8010428:	1954fc40 	.word	0x1954fc40

0801042c <SUBGRF_SetPaConfig>:
{
 801042c:	b500      	push	{lr}
 801042e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8010430:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8010434:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8010438:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 801043c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8010440:	2204      	movs	r2, #4
 8010442:	eb0d 0102 	add.w	r1, sp, r2
 8010446:	2095      	movs	r0, #149	; 0x95
 8010448:	f7ff feb4 	bl	80101b4 <SUBGRF_WriteCommand>
}
 801044c:	b003      	add	sp, #12
 801044e:	f85d fb04 	ldr.w	pc, [sp], #4

08010452 <SUBGRF_SetDioIrqParams>:
{
 8010452:	b500      	push	{lr}
 8010454:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8010456:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801045a:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801045e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8010462:	0a08      	lsrs	r0, r1, #8
 8010464:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8010468:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801046c:	0a11      	lsrs	r1, r2, #8
 801046e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8010472:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8010476:	0a1a      	lsrs	r2, r3, #8
 8010478:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801047c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8010480:	2208      	movs	r2, #8
 8010482:	4669      	mov	r1, sp
 8010484:	4610      	mov	r0, r2
 8010486:	f7ff fe95 	bl	80101b4 <SUBGRF_WriteCommand>
}
 801048a:	b003      	add	sp, #12
 801048c:	f85d fb04 	ldr.w	pc, [sp], #4

08010490 <SUBGRF_SetTcxoMode>:
{
 8010490:	b500      	push	{lr}
 8010492:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8010494:	f000 0007 	and.w	r0, r0, #7
 8010498:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801049c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80104a0:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80104a4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80104a8:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80104ac:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80104b0:	2204      	movs	r2, #4
 80104b2:	eb0d 0102 	add.w	r1, sp, r2
 80104b6:	2097      	movs	r0, #151	; 0x97
 80104b8:	f7ff fe7c 	bl	80101b4 <SUBGRF_WriteCommand>
}
 80104bc:	b003      	add	sp, #12
 80104be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080104c4 <SUBGRF_SetRfFrequency>:
{
 80104c4:	b510      	push	{r4, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80104ca:	4b12      	ldr	r3, [pc, #72]	; (8010514 <SUBGRF_SetRfFrequency+0x50>)
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	b1d3      	cbz	r3, 8010506 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80104d0:	4a11      	ldr	r2, [pc, #68]	; (8010518 <SUBGRF_SetRfFrequency+0x54>)
 80104d2:	2300      	movs	r3, #0
 80104d4:	0660      	lsls	r0, r4, #25
 80104d6:	09e1      	lsrs	r1, r4, #7
 80104d8:	f7f0 fb66 	bl	8000ba8 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80104dc:	0e03      	lsrs	r3, r0, #24
 80104de:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80104e2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80104e6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80104ea:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80104ee:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80104f2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80104f6:	2204      	movs	r2, #4
 80104f8:	eb0d 0102 	add.w	r1, sp, r2
 80104fc:	2086      	movs	r0, #134	; 0x86
 80104fe:	f7ff fe59 	bl	80101b4 <SUBGRF_WriteCommand>
}
 8010502:	b002      	add	sp, #8
 8010504:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8010506:	f7ff ff4b 	bl	80103a0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801050a:	4b02      	ldr	r3, [pc, #8]	; (8010514 <SUBGRF_SetRfFrequency+0x50>)
 801050c:	2201      	movs	r2, #1
 801050e:	701a      	strb	r2, [r3, #0]
 8010510:	e7de      	b.n	80104d0 <SUBGRF_SetRfFrequency+0xc>
 8010512:	bf00      	nop
 8010514:	20000fd0 	.word	0x20000fd0
 8010518:	01e84800 	.word	0x01e84800

0801051c <SUBGRF_GetPacketType>:
}
 801051c:	4b01      	ldr	r3, [pc, #4]	; (8010524 <SUBGRF_GetPacketType+0x8>)
 801051e:	7818      	ldrb	r0, [r3, #0]
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop
 8010524:	20000fd3 	.word	0x20000fd3

08010528 <SUBGRF_SetBufferBaseAddress>:
{
 8010528:	b500      	push	{lr}
 801052a:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 801052c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8010530:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8010534:	2202      	movs	r2, #2
 8010536:	a901      	add	r1, sp, #4
 8010538:	208f      	movs	r0, #143	; 0x8f
 801053a:	f7ff fe3b 	bl	80101b4 <SUBGRF_WriteCommand>
}
 801053e:	b003      	add	sp, #12
 8010540:	f85d fb04 	ldr.w	pc, [sp], #4

08010544 <SUBGRF_GetRssiInst>:
{
 8010544:	b500      	push	{lr}
 8010546:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8010548:	2201      	movs	r2, #1
 801054a:	a901      	add	r1, sp, #4
 801054c:	2015      	movs	r0, #21
 801054e:	f7ff fe41 	bl	80101d4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8010552:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8010556:	4240      	negs	r0, r0
}
 8010558:	1040      	asrs	r0, r0, #1
 801055a:	b003      	add	sp, #12
 801055c:	f85d fb04 	ldr.w	pc, [sp], #4

08010560 <SUBGRF_GetPacketStatus>:
{
 8010560:	b510      	push	{r4, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8010566:	2203      	movs	r2, #3
 8010568:	a901      	add	r1, sp, #4
 801056a:	2014      	movs	r0, #20
 801056c:	f7ff fe32 	bl	80101d4 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8010570:	f7ff ffd4 	bl	801051c <SUBGRF_GetPacketType>
 8010574:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8010576:	b148      	cbz	r0, 801058c <SUBGRF_GetPacketStatus+0x2c>
 8010578:	2801      	cmp	r0, #1
 801057a:	d018      	beq.n	80105ae <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801057c:	2214      	movs	r2, #20
 801057e:	2100      	movs	r1, #0
 8010580:	4620      	mov	r0, r4
 8010582:	f000 fe8e 	bl	80112a2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8010586:	230f      	movs	r3, #15
 8010588:	7023      	strb	r3, [r4, #0]
}
 801058a:	e00e      	b.n	80105aa <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801058c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010590:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8010592:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010596:	425b      	negs	r3, r3
 8010598:	105b      	asrs	r3, r3, #1
 801059a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801059c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80105a0:	425b      	negs	r3, r3
 80105a2:	105b      	asrs	r3, r3, #1
 80105a4:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	60a3      	str	r3, [r4, #8]
}
 80105aa:	b002      	add	sp, #8
 80105ac:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80105ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80105b2:	425b      	negs	r3, r3
 80105b4:	105b      	asrs	r3, r3, #1
 80105b6:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80105b8:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80105bc:	3302      	adds	r3, #2
 80105be:	109b      	asrs	r3, r3, #2
 80105c0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80105c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80105c6:	425b      	negs	r3, r3
 80105c8:	105b      	asrs	r3, r3, #1
 80105ca:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80105cc:	4b01      	ldr	r3, [pc, #4]	; (80105d4 <SUBGRF_GetPacketStatus+0x74>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	6123      	str	r3, [r4, #16]
            break;
 80105d2:	e7ea      	b.n	80105aa <SUBGRF_GetPacketStatus+0x4a>
 80105d4:	20000fcc 	.word	0x20000fcc

080105d8 <SUBGRF_WriteRegister>:
{
 80105d8:	b500      	push	{lr}
 80105da:	b083      	sub	sp, #12
 80105dc:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80105e0:	2301      	movs	r3, #1
 80105e2:	f10d 0207 	add.w	r2, sp, #7
 80105e6:	4601      	mov	r1, r0
 80105e8:	4802      	ldr	r0, [pc, #8]	; (80105f4 <SUBGRF_WriteRegister+0x1c>)
 80105ea:	f7f4 fff1 	bl	80055d0 <HAL_SUBGHZ_WriteRegisters>
}
 80105ee:	b003      	add	sp, #12
 80105f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80105f4:	200001d0 	.word	0x200001d0

080105f8 <SUBGRF_SetRxBoosted>:
{
 80105f8:	b510      	push	{r4, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80105fe:	4b0c      	ldr	r3, [pc, #48]	; (8010630 <SUBGRF_SetRxBoosted+0x38>)
 8010600:	2205      	movs	r2, #5
 8010602:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8010604:	2197      	movs	r1, #151	; 0x97
 8010606:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801060a:	f7ff ffe5 	bl	80105d8 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801060e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010612:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010616:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801061a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801061e:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010622:	2203      	movs	r2, #3
 8010624:	a901      	add	r1, sp, #4
 8010626:	2082      	movs	r0, #130	; 0x82
 8010628:	f7ff fdc4 	bl	80101b4 <SUBGRF_WriteCommand>
}
 801062c:	b002      	add	sp, #8
 801062e:	bd10      	pop	{r4, pc}
 8010630:	20000fd2 	.word	0x20000fd2

08010634 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8010634:	b500      	push	{lr}
 8010636:	b083      	sub	sp, #12
 8010638:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801063c:	2201      	movs	r2, #1
 801063e:	f10d 0107 	add.w	r1, sp, #7
 8010642:	20a0      	movs	r0, #160	; 0xa0
 8010644:	f7ff fdb6 	bl	80101b4 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8010648:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801064c:	2b3f      	cmp	r3, #63	; 0x3f
 801064e:	d90f      	bls.n	8010670 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8010650:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8010652:	2200      	movs	r2, #0
        while( mant > 31 )
 8010654:	e002      	b.n	801065c <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8010656:	089b      	lsrs	r3, r3, #2
            exp++;
 8010658:	1c51      	adds	r1, r2, #1
 801065a:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 801065c:	2b1f      	cmp	r3, #31
 801065e:	d8fa      	bhi.n	8010656 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8010660:	00d9      	lsls	r1, r3, #3
 8010662:	b2c9      	uxtb	r1, r1
 8010664:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8010666:	b2c9      	uxtb	r1, r1
 8010668:	f240 7006 	movw	r0, #1798	; 0x706
 801066c:	f7ff ffb4 	bl	80105d8 <SUBGRF_WriteRegister>
}
 8010670:	b003      	add	sp, #12
 8010672:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010678 <SUBGRF_SetPacketType>:
{
 8010678:	b500      	push	{lr}
 801067a:	b083      	sub	sp, #12
 801067c:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8010680:	b2c3      	uxtb	r3, r0
 8010682:	4a09      	ldr	r2, [pc, #36]	; (80106a8 <SUBGRF_SetPacketType+0x30>)
 8010684:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8010686:	b143      	cbz	r3, 801069a <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8010688:	2201      	movs	r2, #1
 801068a:	f10d 0107 	add.w	r1, sp, #7
 801068e:	208a      	movs	r0, #138	; 0x8a
 8010690:	f7ff fd90 	bl	80101b4 <SUBGRF_WriteCommand>
}
 8010694:	b003      	add	sp, #12
 8010696:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801069a:	2100      	movs	r1, #0
 801069c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80106a0:	f7ff ff9a 	bl	80105d8 <SUBGRF_WriteRegister>
 80106a4:	e7f0      	b.n	8010688 <SUBGRF_SetPacketType+0x10>
 80106a6:	bf00      	nop
 80106a8:	20000fd3 	.word	0x20000fd3

080106ac <SUBGRF_SetModulationParams>:
{
 80106ac:	b510      	push	{r4, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80106b2:	4b3e      	ldr	r3, [pc, #248]	; (80107ac <SUBGRF_SetModulationParams+0x100>)
 80106b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80106b8:	ab02      	add	r3, sp, #8
 80106ba:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 80106be:	7820      	ldrb	r0, [r4, #0]
 80106c0:	4b3b      	ldr	r3, [pc, #236]	; (80107b0 <SUBGRF_SetModulationParams+0x104>)
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	4298      	cmp	r0, r3
 80106c6:	d106      	bne.n	80106d6 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 80106c8:	7823      	ldrb	r3, [r4, #0]
 80106ca:	2b03      	cmp	r3, #3
 80106cc:	d82c      	bhi.n	8010728 <SUBGRF_SetModulationParams+0x7c>
 80106ce:	e8df f003 	tbb	[pc, r3]
 80106d2:	4205      	.short	0x4205
 80106d4:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80106d6:	f7ff ffcf 	bl	8010678 <SUBGRF_SetPacketType>
 80106da:	e7f5      	b.n	80106c8 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80106dc:	6862      	ldr	r2, [r4, #4]
 80106de:	4b35      	ldr	r3, [pc, #212]	; (80107b4 <SUBGRF_SetModulationParams+0x108>)
 80106e0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80106e4:	0c1a      	lsrs	r2, r3, #16
 80106e6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80106ea:	0a1a      	lsrs	r2, r3, #8
 80106ec:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80106f0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80106f4:	7b23      	ldrb	r3, [r4, #12]
 80106f6:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80106fa:	7b63      	ldrb	r3, [r4, #13]
 80106fc:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8010700:	68a1      	ldr	r1, [r4, #8]
 8010702:	4a2d      	ldr	r2, [pc, #180]	; (80107b8 <SUBGRF_SetModulationParams+0x10c>)
 8010704:	2300      	movs	r3, #0
 8010706:	0648      	lsls	r0, r1, #25
 8010708:	09c9      	lsrs	r1, r1, #7
 801070a:	f7f0 fa4d 	bl	8000ba8 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801070e:	0c03      	lsrs	r3, r0, #16
 8010710:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8010714:	0a03      	lsrs	r3, r0, #8
 8010716:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 801071a:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801071e:	2208      	movs	r2, #8
 8010720:	4669      	mov	r1, sp
 8010722:	208b      	movs	r0, #139	; 0x8b
 8010724:	f7ff fd46 	bl	80101b4 <SUBGRF_WriteCommand>
}
 8010728:	b002      	add	sp, #8
 801072a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801072c:	6922      	ldr	r2, [r4, #16]
 801072e:	4b21      	ldr	r3, [pc, #132]	; (80107b4 <SUBGRF_SetModulationParams+0x108>)
 8010730:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010734:	0c1a      	lsrs	r2, r3, #16
 8010736:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801073a:	0a1a      	lsrs	r2, r3, #8
 801073c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010740:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8010744:	7d23      	ldrb	r3, [r4, #20]
 8010746:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801074a:	2204      	movs	r2, #4
 801074c:	4669      	mov	r1, sp
 801074e:	208b      	movs	r0, #139	; 0x8b
 8010750:	f7ff fd30 	bl	80101b4 <SUBGRF_WriteCommand>
        break;
 8010754:	e7e8      	b.n	8010728 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8010756:	7e23      	ldrb	r3, [r4, #24]
 8010758:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801075c:	7e63      	ldrb	r3, [r4, #25]
 801075e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8010762:	7ea3      	ldrb	r3, [r4, #26]
 8010764:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8010768:	7ee3      	ldrb	r3, [r4, #27]
 801076a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801076e:	2204      	movs	r2, #4
 8010770:	4669      	mov	r1, sp
 8010772:	208b      	movs	r0, #139	; 0x8b
 8010774:	f7ff fd1e 	bl	80101b4 <SUBGRF_WriteCommand>
        break;
 8010778:	e7d6      	b.n	8010728 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801077a:	6862      	ldr	r2, [r4, #4]
 801077c:	4b0d      	ldr	r3, [pc, #52]	; (80107b4 <SUBGRF_SetModulationParams+0x108>)
 801077e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010782:	0c1a      	lsrs	r2, r3, #16
 8010784:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010788:	0a1a      	lsrs	r2, r3, #8
 801078a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801078e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8010792:	7b23      	ldrb	r3, [r4, #12]
 8010794:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8010798:	7b63      	ldrb	r3, [r4, #13]
 801079a:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801079e:	2205      	movs	r2, #5
 80107a0:	4669      	mov	r1, sp
 80107a2:	208b      	movs	r0, #139	; 0x8b
 80107a4:	f7ff fd06 	bl	80101b4 <SUBGRF_WriteCommand>
}
 80107a8:	e7be      	b.n	8010728 <SUBGRF_SetModulationParams+0x7c>
 80107aa:	bf00      	nop
 80107ac:	08011dac 	.word	0x08011dac
 80107b0:	20000fd3 	.word	0x20000fd3
 80107b4:	3d090000 	.word	0x3d090000
 80107b8:	01e84800 	.word	0x01e84800

080107bc <SUBGRF_ReadRegister>:
{
 80107bc:	b500      	push	{lr}
 80107be:	b083      	sub	sp, #12
 80107c0:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80107c2:	2301      	movs	r3, #1
 80107c4:	f10d 0207 	add.w	r2, sp, #7
 80107c8:	4803      	ldr	r0, [pc, #12]	; (80107d8 <SUBGRF_ReadRegister+0x1c>)
 80107ca:	f7f4 ff51 	bl	8005670 <HAL_SUBGHZ_ReadRegisters>
}
 80107ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80107d2:	b003      	add	sp, #12
 80107d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80107d8:	200001d0 	.word	0x200001d0

080107dc <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80107dc:	b510      	push	{r4, lr}
 80107de:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80107e0:	f7f2 f812 	bl	8002808 <RBI_IsDCDC>
 80107e4:	2801      	cmp	r0, #1
 80107e6:	d000      	beq.n	80107ea <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80107e8:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80107ea:	f640 1023 	movw	r0, #2339	; 0x923
 80107ee:	f7ff ffe5 	bl	80107bc <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80107f2:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80107f6:	4321      	orrs	r1, r4
 80107f8:	f640 1023 	movw	r0, #2339	; 0x923
 80107fc:	f7ff feec 	bl	80105d8 <SUBGRF_WriteRegister>
}
 8010800:	e7f2      	b.n	80107e8 <Radio_SMPS_Set+0xc>
	...

08010804 <SUBGRF_Init>:
{
 8010804:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8010806:	b108      	cbz	r0, 801080c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8010808:	4a16      	ldr	r2, [pc, #88]	; (8010864 <SUBGRF_Init+0x60>)
 801080a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 801080c:	f7f0 ff48 	bl	80016a0 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010810:	2002      	movs	r0, #2
 8010812:	f7ff ffe3 	bl	80107dc <Radio_SMPS_Set>
    ImageCalibrated = false;
 8010816:	2000      	movs	r0, #0
 8010818:	4b13      	ldr	r3, [pc, #76]	; (8010868 <SUBGRF_Init+0x64>)
 801081a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 801081c:	f7ff fcf0 	bl	8010200 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8010820:	f7f1 ffee 	bl	8002800 <RBI_IsTCXO>
 8010824:	2801      	cmp	r0, #1
 8010826:	d00f      	beq.n	8010848 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010828:	2120      	movs	r1, #32
 801082a:	f640 1011 	movw	r0, #2321	; 0x911
 801082e:	f7ff fed3 	bl	80105d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010832:	2120      	movs	r1, #32
 8010834:	f640 1012 	movw	r0, #2322	; 0x912
 8010838:	f7ff fece 	bl	80105d8 <SUBGRF_WriteRegister>
    RBI_Init();
 801083c:	f7f1 ffd4 	bl	80027e8 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8010840:	4b0a      	ldr	r3, [pc, #40]	; (801086c <SUBGRF_Init+0x68>)
 8010842:	2201      	movs	r2, #1
 8010844:	701a      	strb	r2, [r3, #0]
}
 8010846:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8010848:	2140      	movs	r1, #64	; 0x40
 801084a:	f7ff fe21 	bl	8010490 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801084e:	2100      	movs	r1, #0
 8010850:	f640 1011 	movw	r0, #2321	; 0x911
 8010854:	f7ff fec0 	bl	80105d8 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8010858:	f04f 007f 	mov.w	r0, #127	; 0x7f
 801085c:	f7ff fd7f 	bl	801035e <SUBGRF_Calibrate>
 8010860:	e7ec      	b.n	801083c <SUBGRF_Init+0x38>
 8010862:	bf00      	nop
 8010864:	20000fd4 	.word	0x20000fd4
 8010868:	20000fd0 	.word	0x20000fd0
 801086c:	20000fd2 	.word	0x20000fd2

08010870 <SUBGRF_SetSleep>:
{
 8010870:	b510      	push	{r4, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8010876:	2000      	movs	r0, #0
 8010878:	f7f1 ffba 	bl	80027f0 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801087c:	2002      	movs	r0, #2
 801087e:	f7ff ffad 	bl	80107dc <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010882:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010886:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801088a:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801088c:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010890:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010892:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8010896:	2201      	movs	r2, #1
 8010898:	f10d 0107 	add.w	r1, sp, #7
 801089c:	2084      	movs	r0, #132	; 0x84
 801089e:	f7ff fc89 	bl	80101b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80108a2:	4b02      	ldr	r3, [pc, #8]	; (80108ac <SUBGRF_SetSleep+0x3c>)
 80108a4:	2200      	movs	r2, #0
 80108a6:	701a      	strb	r2, [r3, #0]
}
 80108a8:	b002      	add	sp, #8
 80108aa:	bd10      	pop	{r4, pc}
 80108ac:	20000fd2 	.word	0x20000fd2

080108b0 <SUBGRF_SetWhiteningSeed>:
{
 80108b0:	b510      	push	{r4, lr}
 80108b2:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80108b4:	f7ff fe32 	bl	801051c <SUBGRF_GetPacketType>
 80108b8:	b100      	cbz	r0, 80108bc <SUBGRF_SetWhiteningSeed+0xc>
}
 80108ba:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80108bc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80108c0:	f7ff ff7c 	bl	80107bc <SUBGRF_ReadRegister>
 80108c4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80108c8:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80108cc:	4301      	orrs	r1, r0
 80108ce:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80108d2:	f7ff fe81 	bl	80105d8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80108d6:	b2e1      	uxtb	r1, r4
 80108d8:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80108dc:	f7ff fe7c 	bl	80105d8 <SUBGRF_WriteRegister>
}
 80108e0:	e7eb      	b.n	80108ba <SUBGRF_SetWhiteningSeed+0xa>

080108e2 <SUBGRF_SetTxParams>:
{
 80108e2:	b570      	push	{r4, r5, r6, lr}
 80108e4:	b082      	sub	sp, #8
 80108e6:	460c      	mov	r4, r1
 80108e8:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80108ea:	2801      	cmp	r0, #1
 80108ec:	d035      	beq.n	801095a <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80108ee:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80108f2:	f7ff ff63 	bl	80107bc <SUBGRF_ReadRegister>
 80108f6:	f040 011e 	orr.w	r1, r0, #30
 80108fa:	b2c9      	uxtb	r1, r1
 80108fc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8010900:	f7ff fe6a 	bl	80105d8 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8010904:	2001      	movs	r0, #1
 8010906:	f7f1 ff83 	bl	8002810 <RBI_GetRFOMaxPowerConfig>
 801090a:	4605      	mov	r5, r0
        if (power > max_power)
 801090c:	4284      	cmp	r4, r0
 801090e:	dd00      	ble.n	8010912 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8010910:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8010912:	2d14      	cmp	r5, #20
 8010914:	d054      	beq.n	80109c0 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8010916:	2d11      	cmp	r5, #17
 8010918:	d05c      	beq.n	80109d4 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 801091a:	2d0e      	cmp	r5, #14
 801091c:	d064      	beq.n	80109e8 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801091e:	2301      	movs	r3, #1
 8010920:	2200      	movs	r2, #0
 8010922:	2107      	movs	r1, #7
 8010924:	2004      	movs	r0, #4
 8010926:	f7ff fd81 	bl	801042c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801092a:	1b64      	subs	r4, r4, r5
 801092c:	3416      	adds	r4, #22
 801092e:	b264      	sxtb	r4, r4
        if (power < -9)
 8010930:	f114 0f09 	cmn.w	r4, #9
 8010934:	da01      	bge.n	801093a <SUBGRF_SetTxParams+0x58>
            power = -9;
 8010936:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801093a:	2138      	movs	r1, #56	; 0x38
 801093c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8010940:	f7ff fe4a 	bl	80105d8 <SUBGRF_WriteRegister>
    buf[0] = power;
 8010944:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8010948:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801094c:	2202      	movs	r2, #2
 801094e:	a901      	add	r1, sp, #4
 8010950:	208e      	movs	r0, #142	; 0x8e
 8010952:	f7ff fc2f 	bl	80101b4 <SUBGRF_WriteCommand>
}
 8010956:	b002      	add	sp, #8
 8010958:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801095a:	2000      	movs	r0, #0
 801095c:	f7f1 ff58 	bl	8002810 <RBI_GetRFOMaxPowerConfig>
 8010960:	4605      	mov	r5, r0
        if (power >  max_power)
 8010962:	4284      	cmp	r4, r0
 8010964:	dd00      	ble.n	8010968 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8010966:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8010968:	2d0e      	cmp	r5, #14
 801096a:	d015      	beq.n	8010998 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 801096c:	2d0a      	cmp	r5, #10
 801096e:	d01d      	beq.n	80109ac <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8010970:	2301      	movs	r3, #1
 8010972:	461a      	mov	r2, r3
 8010974:	2100      	movs	r1, #0
 8010976:	2006      	movs	r0, #6
 8010978:	f7ff fd58 	bl	801042c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801097c:	1b64      	subs	r4, r4, r5
 801097e:	340e      	adds	r4, #14
 8010980:	b264      	sxtb	r4, r4
        if (power < -17)
 8010982:	f114 0f11 	cmn.w	r4, #17
 8010986:	da01      	bge.n	801098c <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8010988:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801098c:	2118      	movs	r1, #24
 801098e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8010992:	f7ff fe21 	bl	80105d8 <SUBGRF_WriteRegister>
 8010996:	e7d5      	b.n	8010944 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8010998:	2301      	movs	r3, #1
 801099a:	461a      	mov	r2, r3
 801099c:	2100      	movs	r1, #0
 801099e:	2004      	movs	r0, #4
 80109a0:	f7ff fd44 	bl	801042c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80109a4:	1b64      	subs	r4, r4, r5
 80109a6:	340e      	adds	r4, #14
 80109a8:	b264      	sxtb	r4, r4
 80109aa:	e7ea      	b.n	8010982 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80109ac:	2301      	movs	r3, #1
 80109ae:	461a      	mov	r2, r3
 80109b0:	2100      	movs	r1, #0
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7ff fd3a 	bl	801042c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80109b8:	1b64      	subs	r4, r4, r5
 80109ba:	340d      	adds	r4, #13
 80109bc:	b264      	sxtb	r4, r4
 80109be:	e7e0      	b.n	8010982 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80109c0:	2301      	movs	r3, #1
 80109c2:	2200      	movs	r2, #0
 80109c4:	2105      	movs	r1, #5
 80109c6:	2003      	movs	r0, #3
 80109c8:	f7ff fd30 	bl	801042c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80109cc:	1b64      	subs	r4, r4, r5
 80109ce:	3416      	adds	r4, #22
 80109d0:	b264      	sxtb	r4, r4
 80109d2:	e7ad      	b.n	8010930 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80109d4:	2301      	movs	r3, #1
 80109d6:	2200      	movs	r2, #0
 80109d8:	2103      	movs	r1, #3
 80109da:	2002      	movs	r0, #2
 80109dc:	f7ff fd26 	bl	801042c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80109e0:	1b64      	subs	r4, r4, r5
 80109e2:	3416      	adds	r4, #22
 80109e4:	b264      	sxtb	r4, r4
 80109e6:	e7a3      	b.n	8010930 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80109e8:	2301      	movs	r3, #1
 80109ea:	2200      	movs	r2, #0
 80109ec:	2102      	movs	r1, #2
 80109ee:	4608      	mov	r0, r1
 80109f0:	f7ff fd1c 	bl	801042c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80109f4:	1b64      	subs	r4, r4, r5
 80109f6:	340e      	adds	r4, #14
 80109f8:	b264      	sxtb	r4, r4
 80109fa:	e799      	b.n	8010930 <SUBGRF_SetTxParams+0x4e>

080109fc <SUBGRF_GetRxBufferStatus>:
{
 80109fc:	b530      	push	{r4, r5, lr}
 80109fe:	b083      	sub	sp, #12
 8010a00:	4605      	mov	r5, r0
 8010a02:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8010a04:	2202      	movs	r2, #2
 8010a06:	a901      	add	r1, sp, #4
 8010a08:	2013      	movs	r0, #19
 8010a0a:	f7ff fbe3 	bl	80101d4 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8010a0e:	f7ff fd85 	bl	801051c <SUBGRF_GetPacketType>
 8010a12:	2801      	cmp	r0, #1
 8010a14:	d007      	beq.n	8010a26 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8010a16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010a1a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8010a1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010a20:	7023      	strb	r3, [r4, #0]
}
 8010a22:	b003      	add	sp, #12
 8010a24:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8010a26:	4b05      	ldr	r3, [pc, #20]	; (8010a3c <SUBGRF_GetRxBufferStatus+0x40>)
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d1f2      	bne.n	8010a16 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8010a30:	f240 7002 	movw	r0, #1794	; 0x702
 8010a34:	f7ff fec2 	bl	80107bc <SUBGRF_ReadRegister>
 8010a38:	7028      	strb	r0, [r5, #0]
 8010a3a:	e7ef      	b.n	8010a1c <SUBGRF_GetRxBufferStatus+0x20>
 8010a3c:	20000fd1 	.word	0x20000fd1

08010a40 <SUBGRF_WriteRegisters>:
{
 8010a40:	b510      	push	{r4, lr}
 8010a42:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a44:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010a48:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8010a4a:	460a      	mov	r2, r1
 8010a4c:	4601      	mov	r1, r0
 8010a4e:	4803      	ldr	r0, [pc, #12]	; (8010a5c <SUBGRF_WriteRegisters+0x1c>)
 8010a50:	f7f4 fdbe 	bl	80055d0 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a54:	f384 8810 	msr	PRIMASK, r4
}
 8010a58:	bd10      	pop	{r4, pc}
 8010a5a:	bf00      	nop
 8010a5c:	200001d0 	.word	0x200001d0

08010a60 <SUBGRF_SetSyncWord>:
{
 8010a60:	b508      	push	{r3, lr}
 8010a62:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8010a64:	2208      	movs	r2, #8
 8010a66:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8010a6a:	f7ff ffe9 	bl	8010a40 <SUBGRF_WriteRegisters>
}
 8010a6e:	2000      	movs	r0, #0
 8010a70:	bd08      	pop	{r3, pc}

08010a72 <SUBGRF_SetCrcSeed>:
{
 8010a72:	b500      	push	{lr}
 8010a74:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8010a76:	0a03      	lsrs	r3, r0, #8
 8010a78:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8010a7c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010a80:	f7ff fd4c 	bl	801051c <SUBGRF_GetPacketType>
 8010a84:	b110      	cbz	r0, 8010a8c <SUBGRF_SetCrcSeed+0x1a>
}
 8010a86:	b003      	add	sp, #12
 8010a88:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8010a8c:	2202      	movs	r2, #2
 8010a8e:	a901      	add	r1, sp, #4
 8010a90:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8010a94:	f7ff ffd4 	bl	8010a40 <SUBGRF_WriteRegisters>
}
 8010a98:	e7f5      	b.n	8010a86 <SUBGRF_SetCrcSeed+0x14>

08010a9a <SUBGRF_SetCrcPolynomial>:
{
 8010a9a:	b500      	push	{lr}
 8010a9c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8010a9e:	0a03      	lsrs	r3, r0, #8
 8010aa0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8010aa4:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010aa8:	f7ff fd38 	bl	801051c <SUBGRF_GetPacketType>
 8010aac:	b110      	cbz	r0, 8010ab4 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8010aae:	b003      	add	sp, #12
 8010ab0:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8010ab4:	2202      	movs	r2, #2
 8010ab6:	a901      	add	r1, sp, #4
 8010ab8:	f240 60be 	movw	r0, #1726	; 0x6be
 8010abc:	f7ff ffc0 	bl	8010a40 <SUBGRF_WriteRegisters>
}
 8010ac0:	e7f5      	b.n	8010aae <SUBGRF_SetCrcPolynomial+0x14>
	...

08010ac4 <SUBGRF_SetPacketParams>:
{
 8010ac4:	b510      	push	{r4, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010aca:	ab01      	add	r3, sp, #4
 8010acc:	4a33      	ldr	r2, [pc, #204]	; (8010b9c <SUBGRF_SetPacketParams+0xd8>)
 8010ace:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ad0:	c303      	stmia	r3!, {r0, r1}
 8010ad2:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8010ad4:	7820      	ldrb	r0, [r4, #0]
 8010ad6:	4b32      	ldr	r3, [pc, #200]	; (8010ba0 <SUBGRF_SetPacketParams+0xdc>)
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	4298      	cmp	r0, r3
 8010adc:	d106      	bne.n	8010aec <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8010ade:	7823      	ldrb	r3, [r4, #0]
 8010ae0:	2b03      	cmp	r3, #3
 8010ae2:	d82a      	bhi.n	8010b3a <SUBGRF_SetPacketParams+0x76>
 8010ae4:	e8df f003 	tbb	[pc, r3]
 8010ae8:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8010aec:	f7ff fdc4 	bl	8010678 <SUBGRF_SetPacketType>
 8010af0:	e7f5      	b.n	8010ade <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8010af2:	7a63      	ldrb	r3, [r4, #9]
 8010af4:	2bf1      	cmp	r3, #241	; 0xf1
 8010af6:	d022      	beq.n	8010b3e <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8010af8:	2bf2      	cmp	r3, #242	; 0xf2
 8010afa:	d02a      	beq.n	8010b52 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8010afc:	8862      	ldrh	r2, [r4, #2]
 8010afe:	0a11      	lsrs	r1, r2, #8
 8010b00:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8010b04:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8010b08:	7922      	ldrb	r2, [r4, #4]
 8010b0a:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8010b0e:	7962      	ldrb	r2, [r4, #5]
 8010b10:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8010b14:	79a2      	ldrb	r2, [r4, #6]
 8010b16:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8010b1a:	79e2      	ldrb	r2, [r4, #7]
 8010b1c:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8010b20:	7a22      	ldrb	r2, [r4, #8]
 8010b22:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8010b26:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8010b2a:	7aa3      	ldrb	r3, [r4, #10]
 8010b2c:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8010b30:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8010b32:	a901      	add	r1, sp, #4
 8010b34:	208c      	movs	r0, #140	; 0x8c
 8010b36:	f7ff fb3d 	bl	80101b4 <SUBGRF_WriteCommand>
}
 8010b3a:	b004      	add	sp, #16
 8010b3c:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8010b3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010b42:	f7ff ff96 	bl	8010a72 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8010b46:	f248 0005 	movw	r0, #32773	; 0x8005
 8010b4a:	f7ff ffa6 	bl	8010a9a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8010b4e:	2302      	movs	r3, #2
 8010b50:	e7d4      	b.n	8010afc <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8010b52:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8010b56:	f7ff ff8c 	bl	8010a72 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8010b5a:	f241 0021 	movw	r0, #4129	; 0x1021
 8010b5e:	f7ff ff9c 	bl	8010a9a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8010b62:	2306      	movs	r3, #6
 8010b64:	e7ca      	b.n	8010afc <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8010b66:	7b23      	ldrb	r3, [r4, #12]
 8010b68:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8010b6c:	2201      	movs	r2, #1
        break;
 8010b6e:	e7e0      	b.n	8010b32 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8010b70:	89e3      	ldrh	r3, [r4, #14]
 8010b72:	0a1a      	lsrs	r2, r3, #8
 8010b74:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8010b78:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8010b7c:	7c23      	ldrb	r3, [r4, #16]
 8010b7e:	4a09      	ldr	r2, [pc, #36]	; (8010ba4 <SUBGRF_SetPacketParams+0xe0>)
 8010b80:	7013      	strb	r3, [r2, #0]
 8010b82:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8010b86:	7c63      	ldrb	r3, [r4, #17]
 8010b88:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8010b8c:	7ca3      	ldrb	r3, [r4, #18]
 8010b8e:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8010b92:	7ce3      	ldrb	r3, [r4, #19]
 8010b94:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8010b98:	2206      	movs	r2, #6
        break;
 8010b9a:	e7ca      	b.n	8010b32 <SUBGRF_SetPacketParams+0x6e>
 8010b9c:	08011db4 	.word	0x08011db4
 8010ba0:	20000fd3 	.word	0x20000fd3
 8010ba4:	20000fd1 	.word	0x20000fd1

08010ba8 <SUBGRF_ReadRegisters>:
{
 8010ba8:	b510      	push	{r4, lr}
 8010baa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010bb0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8010bb2:	460a      	mov	r2, r1
 8010bb4:	4601      	mov	r1, r0
 8010bb6:	4803      	ldr	r0, [pc, #12]	; (8010bc4 <SUBGRF_ReadRegisters+0x1c>)
 8010bb8:	f7f4 fd5a 	bl	8005670 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bbc:	f384 8810 	msr	PRIMASK, r4
}
 8010bc0:	bd10      	pop	{r4, pc}
 8010bc2:	bf00      	nop
 8010bc4:	200001d0 	.word	0x200001d0

08010bc8 <SUBGRF_GetRandom>:
{
 8010bc8:	b570      	push	{r4, r5, r6, lr}
 8010bca:	b082      	sub	sp, #8
    uint32_t number = 0;
 8010bcc:	2600      	movs	r6, #0
 8010bce:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8010bd0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010bd4:	f7ff fdf2 	bl	80107bc <SUBGRF_ReadRegister>
 8010bd8:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8010bda:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8010bde:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010be2:	f7ff fcf9 	bl	80105d8 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8010be6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010bea:	f7ff fde7 	bl	80107bc <SUBGRF_ReadRegister>
 8010bee:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8010bf0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8010bf4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010bf8:	f7ff fcee 	bl	80105d8 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010bfc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010c00:	f7ff fb32 	bl	8010268 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8010c04:	2204      	movs	r2, #4
 8010c06:	eb0d 0102 	add.w	r1, sp, r2
 8010c0a:	f640 0019 	movw	r0, #2073	; 0x819
 8010c0e:	f7ff ffcb 	bl	8010ba8 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8010c12:	4630      	mov	r0, r6
 8010c14:	f7ff faf4 	bl	8010200 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8010c18:	4629      	mov	r1, r5
 8010c1a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010c1e:	f7ff fcdb 	bl	80105d8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8010c22:	4621      	mov	r1, r4
 8010c24:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010c28:	f7ff fcd6 	bl	80105d8 <SUBGRF_WriteRegister>
}
 8010c2c:	9801      	ldr	r0, [sp, #4]
 8010c2e:	b002      	add	sp, #8
 8010c30:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c34 <SUBGRF_WriteBuffer>:
{
 8010c34:	b510      	push	{r4, lr}
 8010c36:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c38:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010c3c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8010c3e:	460a      	mov	r2, r1
 8010c40:	4601      	mov	r1, r0
 8010c42:	4803      	ldr	r0, [pc, #12]	; (8010c50 <SUBGRF_WriteBuffer+0x1c>)
 8010c44:	f7f4 fe6a 	bl	800591c <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c48:	f384 8810 	msr	PRIMASK, r4
}
 8010c4c:	bd10      	pop	{r4, pc}
 8010c4e:	bf00      	nop
 8010c50:	200001d0 	.word	0x200001d0

08010c54 <SUBGRF_SetPayload>:
{
 8010c54:	b508      	push	{r3, lr}
 8010c56:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8010c58:	4601      	mov	r1, r0
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	f7ff ffea 	bl	8010c34 <SUBGRF_WriteBuffer>
}
 8010c60:	bd08      	pop	{r3, pc}

08010c62 <SUBGRF_SendPayload>:
{
 8010c62:	b510      	push	{r4, lr}
 8010c64:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8010c66:	f7ff fff5 	bl	8010c54 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	f7ff fae2 	bl	8010234 <SUBGRF_SetTx>
}
 8010c70:	bd10      	pop	{r4, pc}
	...

08010c74 <SUBGRF_ReadBuffer>:
{
 8010c74:	b510      	push	{r4, lr}
 8010c76:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c78:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010c7c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8010c7e:	460a      	mov	r2, r1
 8010c80:	4601      	mov	r1, r0
 8010c82:	4803      	ldr	r0, [pc, #12]	; (8010c90 <SUBGRF_ReadBuffer+0x1c>)
 8010c84:	f7f4 fe94 	bl	80059b0 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c88:	f384 8810 	msr	PRIMASK, r4
}
 8010c8c:	bd10      	pop	{r4, pc}
 8010c8e:	bf00      	nop
 8010c90:	200001d0 	.word	0x200001d0

08010c94 <SUBGRF_GetPayload>:
{
 8010c94:	b570      	push	{r4, r5, r6, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	4606      	mov	r6, r0
 8010c9a:	460c      	mov	r4, r1
 8010c9c:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8010ca4:	f10d 0107 	add.w	r1, sp, #7
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f7ff fea7 	bl	80109fc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8010cae:	7822      	ldrb	r2, [r4, #0]
 8010cb0:	42aa      	cmp	r2, r5
 8010cb2:	d902      	bls.n	8010cba <SUBGRF_GetPayload+0x26>
        return 1;
 8010cb4:	2001      	movs	r0, #1
}
 8010cb6:	b002      	add	sp, #8
 8010cb8:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8010cba:	4631      	mov	r1, r6
 8010cbc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010cc0:	f7ff ffd8 	bl	8010c74 <SUBGRF_ReadBuffer>
    return 0;
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	e7f6      	b.n	8010cb6 <SUBGRF_GetPayload+0x22>

08010cc8 <SUBGRF_SetSwitch>:
{
 8010cc8:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8010cca:	2901      	cmp	r1, #1
 8010ccc:	d003      	beq.n	8010cd6 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8010cce:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8010cd0:	f7f1 fd8e 	bl	80027f0 <RBI_ConfigRFSwitch>
}
 8010cd4:	bd10      	pop	{r4, pc}
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8010cda:	2c01      	cmp	r4, #1
 8010cdc:	d003      	beq.n	8010ce6 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8010cde:	2c02      	cmp	r4, #2
 8010ce0:	d1f6      	bne.n	8010cd0 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8010ce2:	2003      	movs	r0, #3
 8010ce4:	e7f4      	b.n	8010cd0 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8010ce6:	2004      	movs	r0, #4
 8010ce8:	f7ff fd78 	bl	80107dc <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8010cec:	2002      	movs	r0, #2
 8010cee:	e7f6      	b.n	8010cde <SUBGRF_SetSwitch+0x16>

08010cf0 <SUBGRF_SetRfTxPower>:
{
 8010cf0:	b538      	push	{r3, r4, r5, lr}
 8010cf2:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8010cf4:	f7f1 fd80 	bl	80027f8 <RBI_GetTxConfig>
    switch (TxConfig)
 8010cf8:	b148      	cbz	r0, 8010d0e <SUBGRF_SetRfTxPower+0x1e>
 8010cfa:	2802      	cmp	r0, #2
 8010cfc:	d10d      	bne.n	8010d1a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8010cfe:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8010d00:	2202      	movs	r2, #2
 8010d02:	4621      	mov	r1, r4
 8010d04:	4628      	mov	r0, r5
 8010d06:	f7ff fdec 	bl	80108e2 <SUBGRF_SetTxParams>
}
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8010d0e:	2c0f      	cmp	r4, #15
 8010d10:	dc01      	bgt.n	8010d16 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8010d12:	2501      	movs	r5, #1
 8010d14:	e7f4      	b.n	8010d00 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8010d16:	2502      	movs	r5, #2
 8010d18:	e7f2      	b.n	8010d00 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8010d1a:	2501      	movs	r5, #1
 8010d1c:	e7f0      	b.n	8010d00 <SUBGRF_SetRfTxPower+0x10>

08010d1e <SUBGRF_GetRadioWakeUpTime>:
}
 8010d1e:	2001      	movs	r0, #1
 8010d20:	4770      	bx	lr
	...

08010d24 <HAL_SUBGHZ_TxCpltCallback>:
{
 8010d24:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8010d26:	4b02      	ldr	r3, [pc, #8]	; (8010d30 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2001      	movs	r0, #1
 8010d2c:	4798      	blx	r3
}
 8010d2e:	bd08      	pop	{r3, pc}
 8010d30:	20000fd4 	.word	0x20000fd4

08010d34 <HAL_SUBGHZ_RxCpltCallback>:
{
 8010d34:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8010d36:	4b02      	ldr	r3, [pc, #8]	; (8010d40 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2002      	movs	r0, #2
 8010d3c:	4798      	blx	r3
}
 8010d3e:	bd08      	pop	{r3, pc}
 8010d40:	20000fd4 	.word	0x20000fd4

08010d44 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8010d44:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8010d46:	4b02      	ldr	r3, [pc, #8]	; (8010d50 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	2040      	movs	r0, #64	; 0x40
 8010d4c:	4798      	blx	r3
}
 8010d4e:	bd08      	pop	{r3, pc}
 8010d50:	20000fd4 	.word	0x20000fd4

08010d54 <HAL_SUBGHZ_CADStatusCallback>:
{
 8010d54:	b508      	push	{r3, lr}
    switch (cadstatus)
 8010d56:	b111      	cbz	r1, 8010d5e <HAL_SUBGHZ_CADStatusCallback+0xa>
 8010d58:	2901      	cmp	r1, #1
 8010d5a:	d005      	beq.n	8010d68 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8010d5c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8010d5e:	4b05      	ldr	r3, [pc, #20]	; (8010d74 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2080      	movs	r0, #128	; 0x80
 8010d64:	4798      	blx	r3
            break;
 8010d66:	e7f9      	b.n	8010d5c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8010d68:	4b02      	ldr	r3, [pc, #8]	; (8010d74 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010d70:	4798      	blx	r3
}
 8010d72:	e7f3      	b.n	8010d5c <HAL_SUBGHZ_CADStatusCallback+0x8>
 8010d74:	20000fd4 	.word	0x20000fd4

08010d78 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8010d78:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8010d7a:	4b03      	ldr	r3, [pc, #12]	; (8010d88 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010d82:	4798      	blx	r3
}
 8010d84:	bd08      	pop	{r3, pc}
 8010d86:	bf00      	nop
 8010d88:	20000fd4 	.word	0x20000fd4

08010d8c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8010d8c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8010d8e:	4b02      	ldr	r3, [pc, #8]	; (8010d98 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	2020      	movs	r0, #32
 8010d94:	4798      	blx	r3
}
 8010d96:	bd08      	pop	{r3, pc}
 8010d98:	20000fd4 	.word	0x20000fd4

08010d9c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8010d9c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8010d9e:	4b02      	ldr	r3, [pc, #8]	; (8010da8 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2004      	movs	r0, #4
 8010da4:	4798      	blx	r3
}
 8010da6:	bd08      	pop	{r3, pc}
 8010da8:	20000fd4 	.word	0x20000fd4

08010dac <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8010dac:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8010dae:	4b02      	ldr	r3, [pc, #8]	; (8010db8 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	2008      	movs	r0, #8
 8010db4:	4798      	blx	r3
}
 8010db6:	bd08      	pop	{r3, pc}
 8010db8:	20000fd4 	.word	0x20000fd4

08010dbc <HAL_SUBGHZ_HeaderValidCallback>:
{
 8010dbc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8010dbe:	4b02      	ldr	r3, [pc, #8]	; (8010dc8 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	2010      	movs	r0, #16
 8010dc4:	4798      	blx	r3
}
 8010dc6:	bd08      	pop	{r3, pc}
 8010dc8:	20000fd4 	.word	0x20000fd4

08010dcc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8010dcc:	4601      	mov	r1, r0
 8010dce:	b188      	cbz	r0, 8010df4 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	2b15      	cmp	r3, #21
 8010dd4:	d80d      	bhi.n	8010df2 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	4a07      	ldr	r2, [pc, #28]	; (8010df8 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8010dda:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010dde:	428a      	cmp	r2, r1
 8010de0:	d802      	bhi.n	8010de8 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010de2:	3301      	adds	r3, #1
 8010de4:	b2db      	uxtb	r3, r3
 8010de6:	e7f4      	b.n	8010dd2 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8010de8:	4b03      	ldr	r3, [pc, #12]	; (8010df8 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8010dea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010dee:	7900      	ldrb	r0, [r0, #4]
 8010df0:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8010df2:	e7fe      	b.n	8010df2 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8010df4:	201f      	movs	r0, #31
}
 8010df6:	4770      	bx	lr
 8010df8:	08012b10 	.word	0x08012b10

08010dfc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8010dfc:	b570      	push	{r4, r5, r6, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	4606      	mov	r6, r0
 8010e02:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8010e04:	4b1d      	ldr	r3, [pc, #116]	; (8010e7c <SUBGRF_GetCFO+0x80>)
 8010e06:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8010e08:	f640 0007 	movw	r0, #2055	; 0x807
 8010e0c:	f7ff fcd6 	bl	80107bc <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8010e10:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8010e14:	3308      	adds	r3, #8
 8010e16:	446b      	add	r3, sp
 8010e18:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8010e1c:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8010e20:	3b01      	subs	r3, #1
 8010e22:	fa05 f303 	lsl.w	r3, r5, r3
 8010e26:	4d16      	ldr	r5, [pc, #88]	; (8010e80 <SUBGRF_GetCFO+0x84>)
 8010e28:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8010e2c:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8010e30:	2a07      	cmp	r2, #7
 8010e32:	d921      	bls.n	8010e78 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8010e34:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8010e36:	fb00 f202 	mul.w	r2, r0, r2
 8010e3a:	2a03      	cmp	r2, #3
 8010e3c:	d800      	bhi.n	8010e40 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8010e3e:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8010e40:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8010e44:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8010e48:	f7ff fcb8 	bl	80107bc <SUBGRF_ReadRegister>
 8010e4c:	0200      	lsls	r0, r0, #8
 8010e4e:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8010e52:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8010e56:	f7ff fcb1 	bl	80107bc <SUBGRF_ReadRegister>
 8010e5a:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8010e5c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8010e60:	d003      	beq.n	8010e6a <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8010e62:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8010e66:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8010e6a:	096d      	lsrs	r5, r5, #5
 8010e6c:	fb05 f000 	mul.w	r0, r5, r0
 8010e70:	11c0      	asrs	r0, r0, #7
 8010e72:	6020      	str	r0, [r4, #0]
}
 8010e74:	b002      	add	sp, #8
 8010e76:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8010e78:	2002      	movs	r0, #2
 8010e7a:	e7dc      	b.n	8010e36 <SUBGRF_GetCFO+0x3a>
 8010e7c:	0c0a0804 	.word	0x0c0a0804
 8010e80:	01e84800 	.word	0x01e84800

08010e84 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8010e84:	f04f 30ff 	mov.w	r0, #4294967295
 8010e88:	4770      	bx	lr

08010e8a <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8010e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e8e:	4770      	bx	lr

08010e90 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8010e90:	4770      	bx	lr

08010e92 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8010e92:	2000      	movs	r0, #0
 8010e94:	4770      	bx	lr

08010e96 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8010e96:	2000      	movs	r0, #0
 8010e98:	4770      	bx	lr

08010e9a <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8010e9a:	4770      	bx	lr

08010e9c <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 8010e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ea0:	4770      	bx	lr

08010ea2 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8010ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ea6:	4770      	bx	lr

08010ea8 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8010ea8:	4770      	bx	lr

08010eaa <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8010eaa:	4770      	bx	lr

08010eac <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8010eac:	4770      	bx	lr
	...

08010eb0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8010eb0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010eb2:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010eb6:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8010eb8:	4b1e      	ldr	r3, [pc, #120]	; (8010f34 <TRACE_AllocateBufer+0x84>)
 8010eba:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8010ebe:	8a1a      	ldrh	r2, [r3, #16]
 8010ec0:	4594      	cmp	ip, r2
 8010ec2:	d011      	beq.n	8010ee8 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010ec4:	4594      	cmp	ip, r2
 8010ec6:	d921      	bls.n	8010f0c <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010ec8:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8010ecc:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8010ece:	4283      	cmp	r3, r0
 8010ed0:	d81f      	bhi.n	8010f12 <TRACE_AllocateBufer+0x62>
 8010ed2:	4282      	cmp	r2, r0
 8010ed4:	d91d      	bls.n	8010f12 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010ed6:	4b17      	ldr	r3, [pc, #92]	; (8010f34 <TRACE_AllocateBufer+0x84>)
 8010ed8:	2401      	movs	r4, #1
 8010eda:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010edc:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010ee0:	2400      	movs	r4, #0
 8010ee2:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010ee4:	4613      	mov	r3, r2
 8010ee6:	e014      	b.n	8010f12 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010ee8:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8010eec:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8010eee:	4298      	cmp	r0, r3
 8010ef0:	d30f      	bcc.n	8010f12 <TRACE_AllocateBufer+0x62>
 8010ef2:	4282      	cmp	r2, r0
 8010ef4:	d90d      	bls.n	8010f12 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010ef6:	4b0f      	ldr	r3, [pc, #60]	; (8010f34 <TRACE_AllocateBufer+0x84>)
 8010ef8:	2401      	movs	r4, #1
 8010efa:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010efc:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010f00:	f04f 0c00 	mov.w	ip, #0
 8010f04:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010f08:	4613      	mov	r3, r2
 8010f0a:	e002      	b.n	8010f12 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8010f0c:	eba2 030c 	sub.w	r3, r2, ip
 8010f10:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8010f12:	4283      	cmp	r3, r0
 8010f14:	d90a      	bls.n	8010f2c <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8010f16:	4a07      	ldr	r2, [pc, #28]	; (8010f34 <TRACE_AllocateBufer+0x84>)
 8010f18:	8a53      	ldrh	r3, [r2, #18]
 8010f1a:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010f1c:	4403      	add	r3, r0
 8010f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010f22:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8010f24:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f26:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8010f2a:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8010f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f30:	e7f9      	b.n	8010f26 <TRACE_AllocateBufer+0x76>
 8010f32:	bf00      	nop
 8010f34:	200013d8 	.word	0x200013d8

08010f38 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f38:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010f3c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8010f3e:	4a03      	ldr	r2, [pc, #12]	; (8010f4c <TRACE_Lock+0x14>)
 8010f40:	8ad3      	ldrh	r3, [r2, #22]
 8010f42:	3301      	adds	r3, #1
 8010f44:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f46:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010f4a:	4770      	bx	lr
 8010f4c:	200013d8 	.word	0x200013d8

08010f50 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f50:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010f54:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8010f56:	4a03      	ldr	r2, [pc, #12]	; (8010f64 <TRACE_UnLock+0x14>)
 8010f58:	8ad3      	ldrh	r3, [r2, #22]
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f5e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010f62:	4770      	bx	lr
 8010f64:	200013d8 	.word	0x200013d8

08010f68 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8010f68:	4b02      	ldr	r3, [pc, #8]	; (8010f74 <TRACE_IsLocked+0xc>)
 8010f6a:	8ad8      	ldrh	r0, [r3, #22]
}
 8010f6c:	3800      	subs	r0, #0
 8010f6e:	bf18      	it	ne
 8010f70:	2001      	movne	r0, #1
 8010f72:	4770      	bx	lr
 8010f74:	200013d8 	.word	0x200013d8

08010f78 <UTIL_ADV_TRACE_Init>:
{
 8010f78:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8010f7a:	2218      	movs	r2, #24
 8010f7c:	2100      	movs	r1, #0
 8010f7e:	4807      	ldr	r0, [pc, #28]	; (8010f9c <UTIL_ADV_TRACE_Init+0x24>)
 8010f80:	f000 f98f 	bl	80112a2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8010f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010f88:	2100      	movs	r1, #0
 8010f8a:	4805      	ldr	r0, [pc, #20]	; (8010fa0 <UTIL_ADV_TRACE_Init+0x28>)
 8010f8c:	f000 f989 	bl	80112a2 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8010f90:	4b04      	ldr	r3, [pc, #16]	; (8010fa4 <UTIL_ADV_TRACE_Init+0x2c>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4804      	ldr	r0, [pc, #16]	; (8010fa8 <UTIL_ADV_TRACE_Init+0x30>)
 8010f96:	4798      	blx	r3
}
 8010f98:	bd08      	pop	{r3, pc}
 8010f9a:	bf00      	nop
 8010f9c:	200013d8 	.word	0x200013d8
 8010fa0:	20000fd8 	.word	0x20000fd8
 8010fa4:	08011e24 	.word	0x08011e24
 8010fa8:	0801112d 	.word	0x0801112d

08010fac <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8010fac:	4b01      	ldr	r3, [pc, #4]	; (8010fb4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8010fae:	6058      	str	r0, [r3, #4]
}
 8010fb0:	4770      	bx	lr
 8010fb2:	bf00      	nop
 8010fb4:	200013d8 	.word	0x200013d8

08010fb8 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8010fb8:	4b01      	ldr	r3, [pc, #4]	; (8010fc0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8010fba:	7218      	strb	r0, [r3, #8]
}
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	200013d8 	.word	0x200013d8

08010fc4 <TRACE_Send>:
{
 8010fc4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fc6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010fca:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8010fcc:	f7ff ffcc 	bl	8010f68 <TRACE_IsLocked>
 8010fd0:	b118      	cbz	r0, 8010fda <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fd2:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010fd6:	2000      	movs	r0, #0
}
 8010fd8:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8010fda:	f7ff ffad 	bl	8010f38 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8010fde:	4b1d      	ldr	r3, [pc, #116]	; (8011054 <TRACE_Send+0x90>)
 8010fe0:	8a1a      	ldrh	r2, [r3, #16]
 8010fe2:	8a5b      	ldrh	r3, [r3, #18]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d02e      	beq.n	8011046 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010fe8:	491a      	ldr	r1, [pc, #104]	; (8011054 <TRACE_Send+0x90>)
 8010fea:	7889      	ldrb	r1, [r1, #2]
 8010fec:	2901      	cmp	r1, #1
 8010fee:	d017      	beq.n	8011020 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010ff0:	4a18      	ldr	r2, [pc, #96]	; (8011054 <TRACE_Send+0x90>)
 8010ff2:	7892      	ldrb	r2, [r2, #2]
 8010ff4:	b932      	cbnz	r2, 8011004 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010ff6:	4a17      	ldr	r2, [pc, #92]	; (8011054 <TRACE_Send+0x90>)
 8010ff8:	8a12      	ldrh	r2, [r2, #16]
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d91e      	bls.n	801103c <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8010ffe:	1a9b      	subs	r3, r3, r2
 8011000:	4a14      	ldr	r2, [pc, #80]	; (8011054 <TRACE_Send+0x90>)
 8011002:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011004:	4e13      	ldr	r6, [pc, #76]	; (8011054 <TRACE_Send+0x90>)
 8011006:	8a33      	ldrh	r3, [r6, #16]
 8011008:	4d13      	ldr	r5, [pc, #76]	; (8011058 <TRACE_Send+0x94>)
 801100a:	441d      	add	r5, r3
 801100c:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8011010:	f7f0 fc34 	bl	800187c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8011014:	4b11      	ldr	r3, [pc, #68]	; (801105c <TRACE_Send+0x98>)
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	8ab1      	ldrh	r1, [r6, #20]
 801101a:	4628      	mov	r0, r5
 801101c:	4798      	blx	r3
 801101e:	e7db      	b.n	8010fd8 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8011020:	480c      	ldr	r0, [pc, #48]	; (8011054 <TRACE_Send+0x90>)
 8011022:	8801      	ldrh	r1, [r0, #0]
 8011024:	1a8a      	subs	r2, r1, r2
 8011026:	b292      	uxth	r2, r2
 8011028:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801102a:	2102      	movs	r1, #2
 801102c:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801102e:	2100      	movs	r1, #0
 8011030:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8011032:	2a00      	cmp	r2, #0
 8011034:	d1dc      	bne.n	8010ff0 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011036:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011038:	8201      	strh	r1, [r0, #16]
 801103a:	e7d9      	b.n	8010ff0 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801103c:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8011040:	4a04      	ldr	r2, [pc, #16]	; (8011054 <TRACE_Send+0x90>)
 8011042:	8293      	strh	r3, [r2, #20]
 8011044:	e7de      	b.n	8011004 <TRACE_Send+0x40>
      TRACE_UnLock();
 8011046:	f7ff ff83 	bl	8010f50 <TRACE_UnLock>
 801104a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801104e:	2000      	movs	r0, #0
}
 8011050:	e7c2      	b.n	8010fd8 <TRACE_Send+0x14>
 8011052:	bf00      	nop
 8011054:	200013d8 	.word	0x200013d8
 8011058:	20000fd8 	.word	0x20000fd8
 801105c:	08011e24 	.word	0x08011e24

08011060 <UTIL_ADV_TRACE_COND_FSend>:
{
 8011060:	b408      	push	{r3}
 8011062:	b530      	push	{r4, r5, lr}
 8011064:	b086      	sub	sp, #24
 8011066:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8011068:	2300      	movs	r3, #0
 801106a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801106e:	4b2c      	ldr	r3, [pc, #176]	; (8011120 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011070:	7a1b      	ldrb	r3, [r3, #8]
 8011072:	4283      	cmp	r3, r0
 8011074:	d34d      	bcc.n	8011112 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8011076:	4b2a      	ldr	r3, [pc, #168]	; (8011120 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	ea31 0303 	bics.w	r3, r1, r3
 801107e:	d14b      	bne.n	8011118 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8011080:	4b27      	ldr	r3, [pc, #156]	; (8011120 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	b123      	cbz	r3, 8011090 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8011086:	b11a      	cbz	r2, 8011090 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8011088:	f10d 0102 	add.w	r1, sp, #2
 801108c:	a801      	add	r0, sp, #4
 801108e:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8011090:	ab0a      	add	r3, sp, #40	; 0x28
 8011092:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8011094:	4622      	mov	r2, r4
 8011096:	f44f 7100 	mov.w	r1, #512	; 0x200
 801109a:	4822      	ldr	r0, [pc, #136]	; (8011124 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 801109c:	f000 fcd0 	bl	8011a40 <tiny_vsnprintf_like>
 80110a0:	b285      	uxth	r5, r0
  TRACE_Lock();
 80110a2:	f7ff ff49 	bl	8010f38 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80110a6:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80110aa:	4428      	add	r0, r5
 80110ac:	4669      	mov	r1, sp
 80110ae:	b280      	uxth	r0, r0
 80110b0:	f7ff fefe 	bl	8010eb0 <TRACE_AllocateBufer>
 80110b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80110b8:	d026      	beq.n	8011108 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 80110ba:	2300      	movs	r3, #0
 80110bc:	e00d      	b.n	80110da <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80110be:	f8bd 2000 	ldrh.w	r2, [sp]
 80110c2:	f103 0118 	add.w	r1, r3, #24
 80110c6:	4469      	add	r1, sp
 80110c8:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80110cc:	4916      	ldr	r1, [pc, #88]	; (8011128 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80110ce:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80110d0:	3201      	adds	r2, #1
 80110d2:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80110d6:	3301      	adds	r3, #1
 80110d8:	b29b      	uxth	r3, r3
 80110da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d8ed      	bhi.n	80110be <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80110e2:	f8bd 0000 	ldrh.w	r0, [sp]
 80110e6:	9b05      	ldr	r3, [sp, #20]
 80110e8:	4622      	mov	r2, r4
 80110ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80110ee:	4c0e      	ldr	r4, [pc, #56]	; (8011128 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80110f0:	4420      	add	r0, r4
 80110f2:	f000 fca5 	bl	8011a40 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80110f6:	f7ff ff2b 	bl	8010f50 <TRACE_UnLock>
    return TRACE_Send();
 80110fa:	f7ff ff63 	bl	8010fc4 <TRACE_Send>
}
 80110fe:	b006      	add	sp, #24
 8011100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011104:	b001      	add	sp, #4
 8011106:	4770      	bx	lr
  TRACE_UnLock();
 8011108:	f7ff ff22 	bl	8010f50 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 801110c:	f06f 0002 	mvn.w	r0, #2
 8011110:	e7f5      	b.n	80110fe <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8011112:	f06f 0004 	mvn.w	r0, #4
 8011116:	e7f2      	b.n	80110fe <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8011118:	f06f 0005 	mvn.w	r0, #5
 801111c:	e7ef      	b.n	80110fe <UTIL_ADV_TRACE_COND_FSend+0x9e>
 801111e:	bf00      	nop
 8011120:	200013d8 	.word	0x200013d8
 8011124:	200013f0 	.word	0x200013f0
 8011128:	20000fd8 	.word	0x20000fd8

0801112c <TRACE_TxCpltCallback>:
{
 801112c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801112e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011132:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8011134:	4b25      	ldr	r3, [pc, #148]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 8011136:	789b      	ldrb	r3, [r3, #2]
 8011138:	2b02      	cmp	r3, #2
 801113a:	d016      	beq.n	801116a <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801113c:	4a23      	ldr	r2, [pc, #140]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 801113e:	8a13      	ldrh	r3, [r2, #16]
 8011140:	8a90      	ldrh	r0, [r2, #20]
 8011142:	4403      	add	r3, r0
 8011144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011148:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801114a:	4b20      	ldr	r3, [pc, #128]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 801114c:	8a1a      	ldrh	r2, [r3, #16]
 801114e:	8a5b      	ldrh	r3, [r3, #18]
 8011150:	429a      	cmp	r2, r3
 8011152:	d003      	beq.n	801115c <TRACE_TxCpltCallback+0x30>
 8011154:	481d      	ldr	r0, [pc, #116]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 8011156:	8ac0      	ldrh	r0, [r0, #22]
 8011158:	2801      	cmp	r0, #1
 801115a:	d00b      	beq.n	8011174 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801115c:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8011160:	f7f0 fb92 	bl	8001888 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8011164:	f7ff fef4 	bl	8010f50 <TRACE_UnLock>
}
 8011168:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801116a:	4b18      	ldr	r3, [pc, #96]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 801116c:	2200      	movs	r2, #0
 801116e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011170:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8011172:	e7ea      	b.n	801114a <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8011174:	4815      	ldr	r0, [pc, #84]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 8011176:	7880      	ldrb	r0, [r0, #2]
 8011178:	2801      	cmp	r0, #1
 801117a:	d014      	beq.n	80111a6 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801117c:	4a13      	ldr	r2, [pc, #76]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 801117e:	7892      	ldrb	r2, [r2, #2]
 8011180:	b932      	cbnz	r2, 8011190 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011182:	4a12      	ldr	r2, [pc, #72]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 8011184:	8a12      	ldrh	r2, [r2, #16]
 8011186:	4293      	cmp	r3, r2
 8011188:	d91b      	bls.n	80111c2 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801118a:	1a9b      	subs	r3, r3, r2
 801118c:	4a0f      	ldr	r2, [pc, #60]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 801118e:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011190:	4b0e      	ldr	r3, [pc, #56]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 8011192:	8a1a      	ldrh	r2, [r3, #16]
 8011194:	480e      	ldr	r0, [pc, #56]	; (80111d0 <TRACE_TxCpltCallback+0xa4>)
 8011196:	4410      	add	r0, r2
 8011198:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801119c:	4a0d      	ldr	r2, [pc, #52]	; (80111d4 <TRACE_TxCpltCallback+0xa8>)
 801119e:	68d2      	ldr	r2, [r2, #12]
 80111a0:	8a99      	ldrh	r1, [r3, #20]
 80111a2:	4790      	blx	r2
 80111a4:	e7e0      	b.n	8011168 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80111a6:	4c09      	ldr	r4, [pc, #36]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 80111a8:	8820      	ldrh	r0, [r4, #0]
 80111aa:	1a82      	subs	r2, r0, r2
 80111ac:	b292      	uxth	r2, r2
 80111ae:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80111b0:	2002      	movs	r0, #2
 80111b2:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80111b4:	2000      	movs	r0, #0
 80111b6:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80111b8:	2a00      	cmp	r2, #0
 80111ba:	d1df      	bne.n	801117c <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80111bc:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80111be:	8220      	strh	r0, [r4, #16]
 80111c0:	e7dc      	b.n	801117c <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80111c2:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80111c6:	4a01      	ldr	r2, [pc, #4]	; (80111cc <TRACE_TxCpltCallback+0xa0>)
 80111c8:	8293      	strh	r3, [r2, #20]
 80111ca:	e7e1      	b.n	8011190 <TRACE_TxCpltCallback+0x64>
 80111cc:	200013d8 	.word	0x200013d8
 80111d0:	20000fd8 	.word	0x20000fd8
 80111d4:	08011e24 	.word	0x08011e24

080111d8 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80111d8:	2300      	movs	r3, #0
 80111da:	4a02      	ldr	r2, [pc, #8]	; (80111e4 <UTIL_LPM_Init+0xc>)
 80111dc:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80111de:	4a02      	ldr	r2, [pc, #8]	; (80111e8 <UTIL_LPM_Init+0x10>)
 80111e0:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80111e2:	4770      	bx	lr
 80111e4:	200015f4 	.word	0x200015f4
 80111e8:	200015f0 	.word	0x200015f0

080111ec <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111ec:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80111f0:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80111f2:	b141      	cbz	r1, 8011206 <UTIL_LPM_SetStopMode+0x1a>
 80111f4:	2901      	cmp	r1, #1
 80111f6:	d103      	bne.n	8011200 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80111f8:	4906      	ldr	r1, [pc, #24]	; (8011214 <UTIL_LPM_SetStopMode+0x28>)
 80111fa:	680a      	ldr	r2, [r1, #0]
 80111fc:	4310      	orrs	r0, r2
 80111fe:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011200:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011204:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8011206:	4903      	ldr	r1, [pc, #12]	; (8011214 <UTIL_LPM_SetStopMode+0x28>)
 8011208:	680a      	ldr	r2, [r1, #0]
 801120a:	ea22 0000 	bic.w	r0, r2, r0
 801120e:	6008      	str	r0, [r1, #0]
      break;
 8011210:	e7f6      	b.n	8011200 <UTIL_LPM_SetStopMode+0x14>
 8011212:	bf00      	nop
 8011214:	200015f4 	.word	0x200015f4

08011218 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011218:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801121c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 801121e:	b141      	cbz	r1, 8011232 <UTIL_LPM_SetOffMode+0x1a>
 8011220:	2901      	cmp	r1, #1
 8011222:	d103      	bne.n	801122c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011224:	4906      	ldr	r1, [pc, #24]	; (8011240 <UTIL_LPM_SetOffMode+0x28>)
 8011226:	680a      	ldr	r2, [r1, #0]
 8011228:	4310      	orrs	r0, r2
 801122a:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801122c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011230:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8011232:	4903      	ldr	r1, [pc, #12]	; (8011240 <UTIL_LPM_SetOffMode+0x28>)
 8011234:	680a      	ldr	r2, [r1, #0]
 8011236:	ea22 0000 	bic.w	r0, r2, r0
 801123a:	6008      	str	r0, [r1, #0]
      break;
 801123c:	e7f6      	b.n	801122c <UTIL_LPM_SetOffMode+0x14>
 801123e:	bf00      	nop
 8011240:	200015f0 	.word	0x200015f0

08011244 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8011244:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011246:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801124a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801124c:	4b0c      	ldr	r3, [pc, #48]	; (8011280 <UTIL_LPM_EnterLowPower+0x3c>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	b13b      	cbz	r3, 8011262 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8011252:	4d0c      	ldr	r5, [pc, #48]	; (8011284 <UTIL_LPM_EnterLowPower+0x40>)
 8011254:	682b      	ldr	r3, [r5, #0]
 8011256:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8011258:	686b      	ldr	r3, [r5, #4]
 801125a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801125c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8011260:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8011262:	4b09      	ldr	r3, [pc, #36]	; (8011288 <UTIL_LPM_EnterLowPower+0x44>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	b12b      	cbz	r3, 8011274 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8011268:	4d06      	ldr	r5, [pc, #24]	; (8011284 <UTIL_LPM_EnterLowPower+0x40>)
 801126a:	68ab      	ldr	r3, [r5, #8]
 801126c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801126e:	68eb      	ldr	r3, [r5, #12]
 8011270:	4798      	blx	r3
 8011272:	e7f3      	b.n	801125c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8011274:	4d03      	ldr	r5, [pc, #12]	; (8011284 <UTIL_LPM_EnterLowPower+0x40>)
 8011276:	692b      	ldr	r3, [r5, #16]
 8011278:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801127a:	696b      	ldr	r3, [r5, #20]
 801127c:	4798      	blx	r3
 801127e:	e7ed      	b.n	801125c <UTIL_LPM_EnterLowPower+0x18>
 8011280:	200015f4 	.word	0x200015f4
 8011284:	08011dc0 	.word	0x08011dc0
 8011288:	200015f0 	.word	0x200015f0

0801128c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 801128c:	e004      	b.n	8011298 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 801128e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011292:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8011296:	461a      	mov	r2, r3
 8011298:	1e53      	subs	r3, r2, #1
 801129a:	b29b      	uxth	r3, r3
 801129c:	2a00      	cmp	r2, #0
 801129e:	d1f6      	bne.n	801128e <UTIL_MEM_cpy_8+0x2>
    }
}
 80112a0:	4770      	bx	lr

080112a2 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80112a2:	e002      	b.n	80112aa <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80112a4:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80112a8:	461a      	mov	r2, r3
 80112aa:	1e53      	subs	r3, r2, #1
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	2a00      	cmp	r2, #0
 80112b0:	d1f8      	bne.n	80112a4 <UTIL_MEM_set_8+0x2>
  }
}
 80112b2:	4770      	bx	lr

080112b4 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112b4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80112b8:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80112ba:	4a06      	ldr	r2, [pc, #24]	; (80112d4 <UTIL_SEQ_SetTask+0x20>)
 80112bc:	6813      	ldr	r3, [r2, #0]
 80112be:	4303      	orrs	r3, r0
 80112c0:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80112c2:	4a05      	ldr	r2, [pc, #20]	; (80112d8 <UTIL_SEQ_SetTask+0x24>)
 80112c4:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80112c8:	4318      	orrs	r0, r3
 80112ca:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80112ce:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80112d2:	4770      	bx	lr
 80112d4:	2000161c 	.word	0x2000161c
 80112d8:	20001614 	.word	0x20001614

080112dc <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80112dc:	4770      	bx	lr

080112de <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80112de:	4770      	bx	lr

080112e0 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80112e0:	0c03      	lsrs	r3, r0, #16
 80112e2:	041b      	lsls	r3, r3, #16
 80112e4:	b9b3      	cbnz	r3, 8011314 <SEQ_BitPosition+0x34>
 80112e6:	0400      	lsls	r0, r0, #16
 80112e8:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80112ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80112ee:	d102      	bne.n	80112f6 <SEQ_BitPosition+0x16>
 80112f0:	3308      	adds	r3, #8
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80112f6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80112fa:	d102      	bne.n	8011302 <SEQ_BitPosition+0x22>
 80112fc:	3304      	adds	r3, #4
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8011302:	0f00      	lsrs	r0, r0, #28
 8011304:	4a04      	ldr	r2, [pc, #16]	; (8011318 <SEQ_BitPosition+0x38>)
 8011306:	5c10      	ldrb	r0, [r2, r0]
 8011308:	4418      	add	r0, r3
 801130a:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 801130c:	f1c0 001f 	rsb	r0, r0, #31
}
 8011310:	b2c0      	uxtb	r0, r0
 8011312:	4770      	bx	lr
uint8_t n = 0U;
 8011314:	2300      	movs	r3, #0
 8011316:	e7e8      	b.n	80112ea <SEQ_BitPosition+0xa>
 8011318:	08012bc0 	.word	0x08012bc0

0801131c <UTIL_SEQ_Run>:
{
 801131c:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 801131e:	4b43      	ldr	r3, [pc, #268]	; (801142c <UTIL_SEQ_Run+0x110>)
 8011320:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8011322:	4020      	ands	r0, r4
 8011324:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8011326:	4b42      	ldr	r3, [pc, #264]	; (8011430 <UTIL_SEQ_Run+0x114>)
 8011328:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 801132a:	4b42      	ldr	r3, [pc, #264]	; (8011434 <UTIL_SEQ_Run+0x118>)
 801132c:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 801132e:	4a42      	ldr	r2, [pc, #264]	; (8011438 <UTIL_SEQ_Run+0x11c>)
 8011330:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8011332:	4a42      	ldr	r2, [pc, #264]	; (801143c <UTIL_SEQ_Run+0x120>)
 8011334:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011336:	e030      	b.n	801139a <UTIL_SEQ_Run+0x7e>
      counter++;
 8011338:	3301      	adds	r3, #1
 801133a:	e035      	b.n	80113a8 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801133c:	4d40      	ldr	r5, [pc, #256]	; (8011440 <UTIL_SEQ_Run+0x124>)
 801133e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011342:	6868      	ldr	r0, [r5, #4]
 8011344:	4010      	ands	r0, r2
 8011346:	f7ff ffcb 	bl	80112e0 <SEQ_BitPosition>
 801134a:	493e      	ldr	r1, [pc, #248]	; (8011444 <UTIL_SEQ_Run+0x128>)
 801134c:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801134e:	686a      	ldr	r2, [r5, #4]
 8011350:	2301      	movs	r3, #1
 8011352:	fa03 f000 	lsl.w	r0, r3, r0
 8011356:	ea22 0000 	bic.w	r0, r2, r0
 801135a:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801135c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011360:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011362:	680a      	ldr	r2, [r1, #0]
 8011364:	fa03 f202 	lsl.w	r2, r3, r2
 8011368:	ea6f 0c02 	mvn.w	ip, r2
 801136c:	4830      	ldr	r0, [pc, #192]	; (8011430 <UTIL_SEQ_Run+0x114>)
 801136e:	6801      	ldr	r1, [r0, #0]
 8011370:	ea21 0202 	bic.w	r2, r1, r2
 8011374:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011376:	2b00      	cmp	r3, #0
 8011378:	d12d      	bne.n	80113d6 <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801137a:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 801137e:	4b31      	ldr	r3, [pc, #196]	; (8011444 <UTIL_SEQ_Run+0x128>)
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	4b31      	ldr	r3, [pc, #196]	; (8011448 <UTIL_SEQ_Run+0x12c>)
 8011384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011388:	4798      	blx	r3
    local_taskset = TaskSet;
 801138a:	4b29      	ldr	r3, [pc, #164]	; (8011430 <UTIL_SEQ_Run+0x114>)
 801138c:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 801138e:	4b29      	ldr	r3, [pc, #164]	; (8011434 <UTIL_SEQ_Run+0x118>)
 8011390:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8011392:	4a29      	ldr	r2, [pc, #164]	; (8011438 <UTIL_SEQ_Run+0x11c>)
 8011394:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 8011396:	4a29      	ldr	r2, [pc, #164]	; (801143c <UTIL_SEQ_Run+0x120>)
 8011398:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801139a:	4001      	ands	r1, r0
 801139c:	4d23      	ldr	r5, [pc, #140]	; (801142c <UTIL_SEQ_Run+0x110>)
 801139e:	682d      	ldr	r5, [r5, #0]
 80113a0:	4229      	tst	r1, r5
 80113a2:	d021      	beq.n	80113e8 <UTIL_SEQ_Run+0xcc>
 80113a4:	4013      	ands	r3, r2
 80113a6:	d11f      	bne.n	80113e8 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80113a8:	4a25      	ldr	r2, [pc, #148]	; (8011440 <UTIL_SEQ_Run+0x124>)
 80113aa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80113ae:	4002      	ands	r2, r0
 80113b0:	422a      	tst	r2, r5
 80113b2:	d0c1      	beq.n	8011338 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80113b4:	4922      	ldr	r1, [pc, #136]	; (8011440 <UTIL_SEQ_Run+0x124>)
 80113b6:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80113ba:	4002      	ands	r2, r0
 80113bc:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80113be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80113c2:	6849      	ldr	r1, [r1, #4]
 80113c4:	4211      	tst	r1, r2
 80113c6:	d1b9      	bne.n	801133c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80113c8:	491d      	ldr	r1, [pc, #116]	; (8011440 <UTIL_SEQ_Run+0x124>)
 80113ca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80113ce:	f04f 30ff 	mov.w	r0, #4294967295
 80113d2:	6048      	str	r0, [r1, #4]
 80113d4:	e7b2      	b.n	801133c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80113d6:	3b01      	subs	r3, #1
 80113d8:	4919      	ldr	r1, [pc, #100]	; (8011440 <UTIL_SEQ_Run+0x124>)
 80113da:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80113de:	ea0c 0202 	and.w	r2, ip, r2
 80113e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80113e6:	e7c6      	b.n	8011376 <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80113e8:	4b16      	ldr	r3, [pc, #88]	; (8011444 <UTIL_SEQ_Run+0x128>)
 80113ea:	f04f 32ff 	mov.w	r2, #4294967295
 80113ee:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80113f0:	f7ff ff74 	bl	80112dc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113f4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80113f8:	b672      	cpsid	i
  local_taskset = TaskSet;
 80113fa:	4b0d      	ldr	r3, [pc, #52]	; (8011430 <UTIL_SEQ_Run+0x114>)
 80113fc:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 80113fe:	4a0d      	ldr	r2, [pc, #52]	; (8011434 <UTIL_SEQ_Run+0x118>)
 8011400:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8011402:	4a0d      	ldr	r2, [pc, #52]	; (8011438 <UTIL_SEQ_Run+0x11c>)
 8011404:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011406:	4013      	ands	r3, r2
 8011408:	4a08      	ldr	r2, [pc, #32]	; (801142c <UTIL_SEQ_Run+0x110>)
 801140a:	6812      	ldr	r2, [r2, #0]
 801140c:	4213      	tst	r3, r2
 801140e:	d103      	bne.n	8011418 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8011410:	4b0a      	ldr	r3, [pc, #40]	; (801143c <UTIL_SEQ_Run+0x120>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	420b      	tst	r3, r1
 8011416:	d006      	beq.n	8011426 <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011418:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 801141c:	f7ff ff5f 	bl	80112de <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8011420:	4b02      	ldr	r3, [pc, #8]	; (801142c <UTIL_SEQ_Run+0x110>)
 8011422:	601c      	str	r4, [r3, #0]
}
 8011424:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 8011426:	f7f0 f9b3 	bl	8001790 <UTIL_SEQ_Idle>
 801142a:	e7f5      	b.n	8011418 <UTIL_SEQ_Run+0xfc>
 801142c:	20000110 	.word	0x20000110
 8011430:	2000161c 	.word	0x2000161c
 8011434:	200015fc 	.word	0x200015fc
 8011438:	20000114 	.word	0x20000114
 801143c:	20001600 	.word	0x20001600
 8011440:	20001614 	.word	0x20001614
 8011444:	200015f8 	.word	0x200015f8
 8011448:	20001604 	.word	0x20001604

0801144c <UTIL_SEQ_RegTask>:
{
 801144c:	b538      	push	{r3, r4, r5, lr}
 801144e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011450:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011454:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8011456:	f7ff ff43 	bl	80112e0 <SEQ_BitPosition>
 801145a:	4b03      	ldr	r3, [pc, #12]	; (8011468 <UTIL_SEQ_RegTask+0x1c>)
 801145c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011460:	f385 8810 	msr	PRIMASK, r5
}
 8011464:	bd38      	pop	{r3, r4, r5, pc}
 8011466:	bf00      	nop
 8011468:	20001604 	.word	0x20001604

0801146c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801146c:	b082      	sub	sp, #8
 801146e:	b082      	sub	sp, #8
 8011470:	f10d 0c08 	add.w	ip, sp, #8
 8011474:	e90c 0006 	stmdb	ip, {r1, r2}
 8011478:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801147a:	2200      	movs	r2, #0
 801147c:	6002      	str	r2, [r0, #0]
 801147e:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8011480:	440b      	add	r3, r1
 8011482:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011484:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011488:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801148c:	440a      	add	r2, r1
 801148e:	b291      	uxth	r1, r2
 8011490:	b212      	sxth	r2, r2
 8011492:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8011494:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8011498:	db04      	blt.n	80114a4 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 801149a:	3301      	adds	r3, #1
 801149c:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 801149e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80114a2:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80114a4:	b002      	add	sp, #8
 80114a6:	b002      	add	sp, #8
 80114a8:	4770      	bx	lr

080114aa <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80114aa:	b082      	sub	sp, #8
 80114ac:	b082      	sub	sp, #8
 80114ae:	f10d 0c08 	add.w	ip, sp, #8
 80114b2:	e90c 0006 	stmdb	ip, {r1, r2}
 80114b6:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80114b8:	2200      	movs	r2, #0
 80114ba:	6002      	str	r2, [r0, #0]
 80114bc:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80114be:	1acb      	subs	r3, r1, r3
 80114c0:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80114c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80114c6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80114ca:	1a52      	subs	r2, r2, r1
 80114cc:	b291      	uxth	r1, r2
 80114ce:	b212      	sxth	r2, r2
 80114d0:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80114d2:	2a00      	cmp	r2, #0
 80114d4:	db02      	blt.n	80114dc <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80114d6:	b002      	add	sp, #8
 80114d8:	b002      	add	sp, #8
 80114da:	4770      	bx	lr
    c.Seconds--;
 80114dc:	3b01      	subs	r3, #1
 80114de:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 80114e0:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80114e4:	8081      	strh	r1, [r0, #4]
  return c;
 80114e6:	e7f6      	b.n	80114d6 <SysTimeSub+0x2c>

080114e8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80114e8:	b530      	push	{r4, r5, lr}
 80114ea:	b089      	sub	sp, #36	; 0x24
 80114ec:	ac02      	add	r4, sp, #8
 80114ee:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80114f2:	2300      	movs	r3, #0
 80114f4:	9304      	str	r3, [sp, #16]
 80114f6:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80114fa:	4d0b      	ldr	r5, [pc, #44]	; (8011528 <SysTimeSet+0x40>)
 80114fc:	692b      	ldr	r3, [r5, #16]
 80114fe:	a805      	add	r0, sp, #20
 8011500:	4798      	blx	r3
 8011502:	4603      	mov	r3, r0
 8011504:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8011506:	9a05      	ldr	r2, [sp, #20]
 8011508:	9200      	str	r2, [sp, #0]
 801150a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801150e:	a806      	add	r0, sp, #24
 8011510:	f7ff ffcb 	bl	80114aa <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8011514:	682b      	ldr	r3, [r5, #0]
 8011516:	9806      	ldr	r0, [sp, #24]
 8011518:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801151a:	68ab      	ldr	r3, [r5, #8]
 801151c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8011520:	4798      	blx	r3
}
 8011522:	b009      	add	sp, #36	; 0x24
 8011524:	bd30      	pop	{r4, r5, pc}
 8011526:	bf00      	nop
 8011528:	08011de4 	.word	0x08011de4

0801152c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801152c:	b530      	push	{r4, r5, lr}
 801152e:	b087      	sub	sp, #28
 8011530:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011532:	2300      	movs	r3, #0
 8011534:	9304      	str	r3, [sp, #16]
 8011536:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801153a:	6003      	str	r3, [r0, #0]
 801153c:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801153e:	4d0b      	ldr	r5, [pc, #44]	; (801156c <SysTimeGet+0x40>)
 8011540:	692b      	ldr	r3, [r5, #16]
 8011542:	a805      	add	r0, sp, #20
 8011544:	4798      	blx	r3
 8011546:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011548:	68eb      	ldr	r3, [r5, #12]
 801154a:	4798      	blx	r3
 801154c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011550:	686b      	ldr	r3, [r5, #4]
 8011552:	4798      	blx	r3
 8011554:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8011556:	9b05      	ldr	r3, [sp, #20]
 8011558:	9300      	str	r3, [sp, #0]
 801155a:	9b04      	ldr	r3, [sp, #16]
 801155c:	aa02      	add	r2, sp, #8
 801155e:	ca06      	ldmia	r2, {r1, r2}
 8011560:	4620      	mov	r0, r4
 8011562:	f7ff ff83 	bl	801146c <SysTimeAdd>

  return sysTime;
}
 8011566:	4620      	mov	r0, r4
 8011568:	b007      	add	sp, #28
 801156a:	bd30      	pop	{r4, r5, pc}
 801156c:	08011de4 	.word	0x08011de4

08011570 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8011570:	b530      	push	{r4, r5, lr}
 8011572:	b083      	sub	sp, #12
 8011574:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011576:	2300      	movs	r3, #0
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801157e:	4b06      	ldr	r3, [pc, #24]	; (8011598 <SysTimeGetMcuTime+0x28>)
 8011580:	691b      	ldr	r3, [r3, #16]
 8011582:	466d      	mov	r5, sp
 8011584:	a801      	add	r0, sp, #4
 8011586:	4798      	blx	r3
 8011588:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801158a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801158e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8011592:	4620      	mov	r0, r4
 8011594:	b003      	add	sp, #12
 8011596:	bd30      	pop	{r4, r5, pc}
 8011598:	08011de4 	.word	0x08011de4

0801159c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801159c:	b530      	push	{r4, r5, lr}
 801159e:	b089      	sub	sp, #36	; 0x24
 80115a0:	ac02      	add	r4, sp, #8
 80115a2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80115a6:	4d0c      	ldr	r5, [pc, #48]	; (80115d8 <SysTimeToMs+0x3c>)
 80115a8:	68eb      	ldr	r3, [r5, #12]
 80115aa:	4798      	blx	r3
 80115ac:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80115b0:	686b      	ldr	r3, [r5, #4]
 80115b2:	4798      	blx	r3
 80115b4:	4603      	mov	r3, r0
 80115b6:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80115b8:	9a07      	ldr	r2, [sp, #28]
 80115ba:	9200      	str	r2, [sp, #0]
 80115bc:	e894 0006 	ldmia.w	r4, {r1, r2}
 80115c0:	a804      	add	r0, sp, #16
 80115c2:	f7ff ff72 	bl	80114aa <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80115c6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80115ca:	9a04      	ldr	r2, [sp, #16]
 80115cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80115d0:	fb00 3002 	mla	r0, r0, r2, r3
 80115d4:	b009      	add	sp, #36	; 0x24
 80115d6:	bd30      	pop	{r4, r5, pc}
 80115d8:	08011de4 	.word	0x08011de4

080115dc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 80115dc:	b530      	push	{r4, r5, lr}
 80115de:	b087      	sub	sp, #28
 80115e0:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 80115e2:	4b12      	ldr	r3, [pc, #72]	; (801162c <SysTimeFromMs+0x50>)
 80115e4:	fba3 2301 	umull	r2, r3, r3, r1
 80115e8:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 80115ea:	9304      	str	r3, [sp, #16]
 80115ec:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80115f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80115f4:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 80115f8:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 80115fc:	2300      	movs	r3, #0
 80115fe:	9302      	str	r3, [sp, #8]
 8011600:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011602:	4d0b      	ldr	r5, [pc, #44]	; (8011630 <SysTimeFromMs+0x54>)
 8011604:	68eb      	ldr	r3, [r5, #12]
 8011606:	4798      	blx	r3
 8011608:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801160c:	686b      	ldr	r3, [r5, #4]
 801160e:	4798      	blx	r3
 8011610:	4603      	mov	r3, r0
 8011612:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8011614:	9a03      	ldr	r2, [sp, #12]
 8011616:	9200      	str	r2, [sp, #0]
 8011618:	aa06      	add	r2, sp, #24
 801161a:	e912 0006 	ldmdb	r2, {r1, r2}
 801161e:	4620      	mov	r0, r4
 8011620:	f7ff ff24 	bl	801146c <SysTimeAdd>
}
 8011624:	4620      	mov	r0, r4
 8011626:	b007      	add	sp, #28
 8011628:	bd30      	pop	{r4, r5, pc}
 801162a:	bf00      	nop
 801162c:	10624dd3 	.word	0x10624dd3
 8011630:	08011de4 	.word	0x08011de4

08011634 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8011634:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8011636:	4b03      	ldr	r3, [pc, #12]	; (8011644 <UTIL_TIMER_Init+0x10>)
 8011638:	2200      	movs	r2, #0
 801163a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801163c:	4b02      	ldr	r3, [pc, #8]	; (8011648 <UTIL_TIMER_Init+0x14>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	4798      	blx	r3
}
 8011642:	bd08      	pop	{r3, pc}
 8011644:	20001620 	.word	0x20001620
 8011648:	08011df8 	.word	0x08011df8

0801164c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 801164c:	b1a8      	cbz	r0, 801167a <UTIL_TIMER_Create+0x2e>
{
 801164e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011650:	4617      	mov	r7, r2
 8011652:	461e      	mov	r6, r3
 8011654:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8011656:	b193      	cbz	r3, 801167e <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8011658:	2500      	movs	r5, #0
 801165a:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801165c:	4b09      	ldr	r3, [pc, #36]	; (8011684 <UTIL_TIMER_Create+0x38>)
 801165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011660:	4608      	mov	r0, r1
 8011662:	4798      	blx	r3
 8011664:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8011666:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8011668:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801166a:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 801166c:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 801166e:	9b06      	ldr	r3, [sp, #24]
 8011670:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8011672:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8011674:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8011676:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8011678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 801167a:	2001      	movs	r0, #1
}
 801167c:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 801167e:	2001      	movs	r0, #1
 8011680:	e7fa      	b.n	8011678 <UTIL_TIMER_Create+0x2c>
 8011682:	bf00      	nop
 8011684:	08011df8 	.word	0x08011df8

08011688 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8011688:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801168a:	4c03      	ldr	r4, [pc, #12]	; (8011698 <UTIL_TIMER_GetCurrentTime+0x10>)
 801168c:	69e3      	ldr	r3, [r4, #28]
 801168e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8011690:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011692:	4798      	blx	r3
}
 8011694:	bd10      	pop	{r4, pc}
 8011696:	bf00      	nop
 8011698:	08011df8 	.word	0x08011df8

0801169c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80116a0:	4d05      	ldr	r5, [pc, #20]	; (80116b8 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80116a2:	69eb      	ldr	r3, [r5, #28]
 80116a4:	4798      	blx	r3
 80116a6:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80116a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80116aa:	4630      	mov	r0, r6
 80116ac:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80116ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80116b0:	1a20      	subs	r0, r4, r0
 80116b2:	4798      	blx	r3
}
 80116b4:	bd70      	pop	{r4, r5, r6, pc}
 80116b6:	bf00      	nop
 80116b8:	08011df8 	.word	0x08011df8

080116bc <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80116bc:	4b05      	ldr	r3, [pc, #20]	; (80116d4 <TimerExists+0x18>)
 80116be:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80116c0:	e000      	b.n	80116c4 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80116c2:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80116c4:	b11b      	cbz	r3, 80116ce <TimerExists+0x12>
    if( cur == TimerObject )
 80116c6:	4283      	cmp	r3, r0
 80116c8:	d1fb      	bne.n	80116c2 <TimerExists+0x6>
      return true;
 80116ca:	2001      	movs	r0, #1
  }
  return false;
}
 80116cc:	4770      	bx	lr
  return false;
 80116ce:	2000      	movs	r0, #0
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop
 80116d4:	20001620 	.word	0x20001620

080116d8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80116d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116da:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80116dc:	4e09      	ldr	r6, [pc, #36]	; (8011704 <TimerSetTimeout+0x2c>)
 80116de:	6a33      	ldr	r3, [r6, #32]
 80116e0:	4798      	blx	r3
 80116e2:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80116e4:	2301      	movs	r3, #1
 80116e6:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80116e8:	6827      	ldr	r7, [r4, #0]
 80116ea:	69b6      	ldr	r6, [r6, #24]
 80116ec:	47b0      	blx	r6
 80116ee:	4428      	add	r0, r5
 80116f0:	4287      	cmp	r7, r0
 80116f2:	d202      	bcs.n	80116fa <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80116f4:	47b0      	blx	r6
 80116f6:	4405      	add	r5, r0
 80116f8:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80116fa:	4b02      	ldr	r3, [pc, #8]	; (8011704 <TimerSetTimeout+0x2c>)
 80116fc:	689b      	ldr	r3, [r3, #8]
 80116fe:	6820      	ldr	r0, [r4, #0]
 8011700:	4798      	blx	r3
}
 8011702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011704:	08011df8 	.word	0x08011df8

08011708 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8011708:	b368      	cbz	r0, 8011766 <UTIL_TIMER_Stop+0x5e>
{
 801170a:	b510      	push	{r4, lr}
 801170c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801170e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011712:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8011714:	4b15      	ldr	r3, [pc, #84]	; (801176c <UTIL_TIMER_Stop+0x64>)
 8011716:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8011718:	2301      	movs	r3, #1
 801171a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 801171c:	b1e1      	cbz	r1, 8011758 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 801171e:	2300      	movs	r3, #0
 8011720:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8011722:	4288      	cmp	r0, r1
 8011724:	d006      	beq.n	8011734 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8011726:	460b      	mov	r3, r1
        while( cur != NULL )
 8011728:	b1b3      	cbz	r3, 8011758 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 801172a:	4293      	cmp	r3, r2
 801172c:	d011      	beq.n	8011752 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 801172e:	4619      	mov	r1, r3
            cur = cur->Next;
 8011730:	695b      	ldr	r3, [r3, #20]
 8011732:	e7f9      	b.n	8011728 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8011734:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8011736:	6948      	ldr	r0, [r1, #20]
 8011738:	b120      	cbz	r0, 8011744 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 801173a:	4b0c      	ldr	r3, [pc, #48]	; (801176c <UTIL_TIMER_Stop+0x64>)
 801173c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801173e:	f7ff ffcb 	bl	80116d8 <TimerSetTimeout>
 8011742:	e009      	b.n	8011758 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8011744:	4b0a      	ldr	r3, [pc, #40]	; (8011770 <UTIL_TIMER_Stop+0x68>)
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	4798      	blx	r3
            TimerListHead = NULL;
 801174a:	4b08      	ldr	r3, [pc, #32]	; (801176c <UTIL_TIMER_Stop+0x64>)
 801174c:	2200      	movs	r2, #0
 801174e:	601a      	str	r2, [r3, #0]
 8011750:	e002      	b.n	8011758 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8011752:	695b      	ldr	r3, [r3, #20]
 8011754:	b123      	cbz	r3, 8011760 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8011756:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011758:	f384 8810 	msr	PRIMASK, r4
}
 801175c:	2000      	movs	r0, #0
}
 801175e:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8011760:	2300      	movs	r3, #0
 8011762:	614b      	str	r3, [r1, #20]
 8011764:	e7f8      	b.n	8011758 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8011766:	2001      	movs	r0, #1
}
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop
 801176c:	20001620 	.word	0x20001620
 8011770:	08011df8 	.word	0x08011df8

08011774 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011774:	4b09      	ldr	r3, [pc, #36]	; (801179c <TimerInsertTimer+0x28>)
 8011776:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8011778:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 801177a:	e001      	b.n	8011780 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 801177c:	461a      	mov	r2, r3
        next = next->Next;
 801177e:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8011780:	6951      	ldr	r1, [r2, #20]
 8011782:	b139      	cbz	r1, 8011794 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8011784:	6819      	ldr	r1, [r3, #0]
 8011786:	f8d0 c000 	ldr.w	ip, [r0]
 801178a:	458c      	cmp	ip, r1
 801178c:	d8f6      	bhi.n	801177c <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 801178e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8011790:	6143      	str	r3, [r0, #20]
        return;
 8011792:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8011794:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8011796:	2300      	movs	r3, #0
 8011798:	6143      	str	r3, [r0, #20]
}
 801179a:	4770      	bx	lr
 801179c:	20001620 	.word	0x20001620

080117a0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80117a0:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80117a2:	4b05      	ldr	r3, [pc, #20]	; (80117b8 <TimerInsertNewHeadTimer+0x18>)
 80117a4:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80117a6:	b10b      	cbz	r3, 80117ac <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 80117a8:	2200      	movs	r2, #0
 80117aa:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80117ac:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80117ae:	4b02      	ldr	r3, [pc, #8]	; (80117b8 <TimerInsertNewHeadTimer+0x18>)
 80117b0:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80117b2:	f7ff ff91 	bl	80116d8 <TimerSetTimeout>
}
 80117b6:	bd08      	pop	{r3, pc}
 80117b8:	20001620 	.word	0x20001620

080117bc <UTIL_TIMER_Start>:
{
 80117bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80117be:	2800      	cmp	r0, #0
 80117c0:	d036      	beq.n	8011830 <UTIL_TIMER_Start+0x74>
 80117c2:	4604      	mov	r4, r0
 80117c4:	f7ff ff7a 	bl	80116bc <TimerExists>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	d134      	bne.n	8011836 <UTIL_TIMER_Start+0x7a>
 80117cc:	7a65      	ldrb	r5, [r4, #9]
 80117ce:	2d00      	cmp	r5, #0
 80117d0:	d133      	bne.n	801183a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117d2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80117d6:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 80117d8:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80117da:	4b19      	ldr	r3, [pc, #100]	; (8011840 <UTIL_TIMER_Start+0x84>)
 80117dc:	6a1b      	ldr	r3, [r3, #32]
 80117de:	4798      	blx	r3
    if( ticks < minValue )
 80117e0:	4287      	cmp	r7, r0
 80117e2:	d300      	bcc.n	80117e6 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 80117e4:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 80117e6:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 80117e8:	2300      	movs	r3, #0
 80117ea:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80117ec:	2201      	movs	r2, #1
 80117ee:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80117f0:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80117f2:	4b14      	ldr	r3, [pc, #80]	; (8011844 <UTIL_TIMER_Start+0x88>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	b183      	cbz	r3, 801181a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80117f8:	4b11      	ldr	r3, [pc, #68]	; (8011840 <UTIL_TIMER_Start+0x84>)
 80117fa:	699b      	ldr	r3, [r3, #24]
 80117fc:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 80117fe:	6823      	ldr	r3, [r4, #0]
 8011800:	4418      	add	r0, r3
 8011802:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8011804:	4b0f      	ldr	r3, [pc, #60]	; (8011844 <UTIL_TIMER_Start+0x88>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	4298      	cmp	r0, r3
 801180c:	d20c      	bcs.n	8011828 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801180e:	4620      	mov	r0, r4
 8011810:	f7ff ffc6 	bl	80117a0 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011814:	f386 8810 	msr	PRIMASK, r6
}
 8011818:	e00b      	b.n	8011832 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 801181a:	4b09      	ldr	r3, [pc, #36]	; (8011840 <UTIL_TIMER_Start+0x84>)
 801181c:	691b      	ldr	r3, [r3, #16]
 801181e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8011820:	4620      	mov	r0, r4
 8011822:	f7ff ffbd 	bl	80117a0 <TimerInsertNewHeadTimer>
 8011826:	e7f5      	b.n	8011814 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8011828:	4620      	mov	r0, r4
 801182a:	f7ff ffa3 	bl	8011774 <TimerInsertTimer>
 801182e:	e7f1      	b.n	8011814 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011830:	2501      	movs	r5, #1
}
 8011832:	4628      	mov	r0, r5
 8011834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011836:	2501      	movs	r5, #1
 8011838:	e7fb      	b.n	8011832 <UTIL_TIMER_Start+0x76>
 801183a:	2501      	movs	r5, #1
 801183c:	e7f9      	b.n	8011832 <UTIL_TIMER_Start+0x76>
 801183e:	bf00      	nop
 8011840:	08011df8 	.word	0x08011df8
 8011844:	20001620 	.word	0x20001620

08011848 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8011848:	b198      	cbz	r0, 8011872 <UTIL_TIMER_SetPeriod+0x2a>
{
 801184a:	b510      	push	{r4, lr}
 801184c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801184e:	4b0a      	ldr	r3, [pc, #40]	; (8011878 <UTIL_TIMER_SetPeriod+0x30>)
 8011850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011852:	4608      	mov	r0, r1
 8011854:	4798      	blx	r3
 8011856:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8011858:	4620      	mov	r0, r4
 801185a:	f7ff ff2f 	bl	80116bc <TimerExists>
 801185e:	b908      	cbnz	r0, 8011864 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011860:	2000      	movs	r0, #0
}
 8011862:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8011864:	4620      	mov	r0, r4
 8011866:	f7ff ff4f 	bl	8011708 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801186a:	4620      	mov	r0, r4
 801186c:	f7ff ffa6 	bl	80117bc <UTIL_TIMER_Start>
 8011870:	e7f7      	b.n	8011862 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8011872:	2001      	movs	r0, #1
}
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop
 8011878:	08011df8 	.word	0x08011df8

0801187c <UTIL_TIMER_IRQ_Handler>:
{
 801187c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801187e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011882:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8011884:	4c1e      	ldr	r4, [pc, #120]	; (8011900 <UTIL_TIMER_IRQ_Handler+0x84>)
 8011886:	6963      	ldr	r3, [r4, #20]
 8011888:	4798      	blx	r3
 801188a:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801188c:	6923      	ldr	r3, [r4, #16]
 801188e:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8011890:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8011892:	4b1c      	ldr	r3, [pc, #112]	; (8011904 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	b923      	cbnz	r3, 80118a2 <UTIL_TIMER_IRQ_Handler+0x26>
 8011898:	e018      	b.n	80118cc <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 801189a:	2200      	movs	r2, #0
 801189c:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 801189e:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80118a0:	b1a3      	cbz	r3, 80118cc <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 80118a2:	681a      	ldr	r2, [r3, #0]
 80118a4:	42a2      	cmp	r2, r4
 80118a6:	d9f8      	bls.n	801189a <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 80118a8:	1a31      	subs	r1, r6, r0
 80118aa:	440a      	add	r2, r1
 80118ac:	601a      	str	r2, [r3, #0]
 80118ae:	e7f6      	b.n	801189e <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 80118b0:	4b14      	ldr	r3, [pc, #80]	; (8011904 <UTIL_TIMER_IRQ_Handler+0x88>)
 80118b2:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80118b4:	6962      	ldr	r2, [r4, #20]
 80118b6:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80118b8:	2300      	movs	r3, #0
 80118ba:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80118bc:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80118be:	68e3      	ldr	r3, [r4, #12]
 80118c0:	6920      	ldr	r0, [r4, #16]
 80118c2:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80118c4:	8963      	ldrh	r3, [r4, #10]
 80118c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118ca:	d012      	beq.n	80118f2 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80118cc:	4b0d      	ldr	r3, [pc, #52]	; (8011904 <UTIL_TIMER_IRQ_Handler+0x88>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	b13b      	cbz	r3, 80118e2 <UTIL_TIMER_IRQ_Handler+0x66>
 80118d2:	681c      	ldr	r4, [r3, #0]
 80118d4:	2c00      	cmp	r4, #0
 80118d6:	d0eb      	beq.n	80118b0 <UTIL_TIMER_IRQ_Handler+0x34>
 80118d8:	4b09      	ldr	r3, [pc, #36]	; (8011900 <UTIL_TIMER_IRQ_Handler+0x84>)
 80118da:	699b      	ldr	r3, [r3, #24]
 80118dc:	4798      	blx	r3
 80118de:	4284      	cmp	r4, r0
 80118e0:	d3e6      	bcc.n	80118b0 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80118e2:	4b08      	ldr	r3, [pc, #32]	; (8011904 <UTIL_TIMER_IRQ_Handler+0x88>)
 80118e4:	6818      	ldr	r0, [r3, #0]
 80118e6:	b108      	cbz	r0, 80118ec <UTIL_TIMER_IRQ_Handler+0x70>
 80118e8:	7a03      	ldrb	r3, [r0, #8]
 80118ea:	b133      	cbz	r3, 80118fa <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118ec:	f385 8810 	msr	PRIMASK, r5
}
 80118f0:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80118f2:	4620      	mov	r0, r4
 80118f4:	f7ff ff62 	bl	80117bc <UTIL_TIMER_Start>
 80118f8:	e7e8      	b.n	80118cc <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80118fa:	f7ff feed 	bl	80116d8 <TimerSetTimeout>
 80118fe:	e7f5      	b.n	80118ec <UTIL_TIMER_IRQ_Handler+0x70>
 8011900:	08011df8 	.word	0x08011df8
 8011904:	20001620 	.word	0x20001620

08011908 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8011908:	4601      	mov	r1, r0
  int i = 0;
 801190a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801190c:	e007      	b.n	801191e <ee_skip_atoi+0x16>
 801190e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011912:	1c53      	adds	r3, r2, #1
 8011914:	600b      	str	r3, [r1, #0]
 8011916:	7813      	ldrb	r3, [r2, #0]
 8011918:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801191c:	3830      	subs	r0, #48	; 0x30
 801191e:	680a      	ldr	r2, [r1, #0]
 8011920:	7813      	ldrb	r3, [r2, #0]
 8011922:	3b30      	subs	r3, #48	; 0x30
 8011924:	b2db      	uxtb	r3, r3
 8011926:	2b09      	cmp	r3, #9
 8011928:	d9f1      	bls.n	801190e <ee_skip_atoi+0x6>
  return i;
}
 801192a:	4770      	bx	lr

0801192c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801192c:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8011930:	b093      	sub	sp, #76	; 0x4c
 8011932:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011934:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8011936:	f016 0f40 	tst.w	r6, #64	; 0x40
 801193a:	d110      	bne.n	801195e <ee_number+0x32>
  char *dig = lower_digits;
 801193c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8011a38 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8011940:	1e9f      	subs	r7, r3, #2
 8011942:	2f22      	cmp	r7, #34	; 0x22
 8011944:	d875      	bhi.n	8011a32 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8011946:	f016 0401 	ands.w	r4, r6, #1
 801194a:	d00b      	beq.n	8011964 <ee_number+0x38>
 801194c:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8011950:	f016 0f02 	tst.w	r6, #2
 8011954:	d00f      	beq.n	8011976 <ee_number+0x4a>
  {
    if (num < 0)
 8011956:	2a00      	cmp	r2, #0
 8011958:	db07      	blt.n	801196a <ee_number+0x3e>
  sign = 0;
 801195a:	2700      	movs	r7, #0
 801195c:	e00c      	b.n	8011978 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 801195e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8011a3c <ee_number+0x110>
 8011962:	e7ed      	b.n	8011940 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8011964:	f04f 0e20 	mov.w	lr, #32
 8011968:	e7f2      	b.n	8011950 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 801196a:	4252      	negs	r2, r2
      size--;
 801196c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801196e:	3e01      	subs	r6, #1
 8011970:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8011972:	272d      	movs	r7, #45	; 0x2d
 8011974:	e000      	b.n	8011978 <ee_number+0x4c>
  sign = 0;
 8011976:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8011978:	bb5a      	cbnz	r2, 80119d2 <ee_number+0xa6>
    tmp[i++] = '0';
 801197a:	2330      	movs	r3, #48	; 0x30
 801197c:	f88d 3004 	strb.w	r3, [sp, #4]
 8011980:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8011984:	45ac      	cmp	ip, r5
 8011986:	dd00      	ble.n	801198a <ee_number+0x5e>
 8011988:	4665      	mov	r5, ip
  size -= precision;
 801198a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801198c:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801198e:	b31c      	cbz	r4, 80119d8 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8011990:	b11f      	cbz	r7, 801199a <ee_number+0x6e>
 8011992:	f800 7b01 	strb.w	r7, [r0], #1
 8011996:	3901      	subs	r1, #1
 8011998:	d007      	beq.n	80119aa <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801199a:	2b00      	cmp	r3, #0
 801199c:	f103 33ff 	add.w	r3, r3, #4294967295
 80119a0:	dd24      	ble.n	80119ec <ee_number+0xc0>
 80119a2:	f800 eb01 	strb.w	lr, [r0], #1
 80119a6:	3901      	subs	r1, #1
 80119a8:	d1f7      	bne.n	801199a <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 80119aa:	b013      	add	sp, #76	; 0x4c
 80119ac:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80119b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80119b4:	fb03 2216 	mls	r2, r3, r6, r2
 80119b8:	f81a 8002 	ldrb.w	r8, [sl, r2]
 80119bc:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80119c0:	446a      	add	r2, sp
 80119c2:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80119c6:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80119c8:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 80119cc:	2a00      	cmp	r2, #0
 80119ce:	d1ef      	bne.n	80119b0 <ee_number+0x84>
 80119d0:	e7d8      	b.n	8011984 <ee_number+0x58>
  i = 0;
 80119d2:	f04f 0c00 	mov.w	ip, #0
 80119d6:	e7f9      	b.n	80119cc <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f103 33ff 	add.w	r3, r3, #4294967295
 80119de:	ddd7      	ble.n	8011990 <ee_number+0x64>
 80119e0:	2220      	movs	r2, #32
 80119e2:	f800 2b01 	strb.w	r2, [r0], #1
 80119e6:	3901      	subs	r1, #1
 80119e8:	d1f6      	bne.n	80119d8 <ee_number+0xac>
 80119ea:	e7de      	b.n	80119aa <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 80119ec:	4565      	cmp	r5, ip
 80119ee:	f105 35ff 	add.w	r5, r5, #4294967295
 80119f2:	dd05      	ble.n	8011a00 <ee_number+0xd4>
 80119f4:	2230      	movs	r2, #48	; 0x30
 80119f6:	f800 2b01 	strb.w	r2, [r0], #1
 80119fa:	3901      	subs	r1, #1
 80119fc:	d1f6      	bne.n	80119ec <ee_number+0xc0>
 80119fe:	e7d4      	b.n	80119aa <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8011a00:	4662      	mov	r2, ip
 8011a02:	2a00      	cmp	r2, #0
 8011a04:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011a08:	dd09      	ble.n	8011a1e <ee_number+0xf2>
 8011a0a:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8011a0e:	446a      	add	r2, sp
 8011a10:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8011a14:	f800 2b01 	strb.w	r2, [r0], #1
 8011a18:	3901      	subs	r1, #1
 8011a1a:	d1f1      	bne.n	8011a00 <ee_number+0xd4>
 8011a1c:	e7c5      	b.n	80119aa <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a24:	ddc1      	ble.n	80119aa <ee_number+0x7e>
 8011a26:	2220      	movs	r2, #32
 8011a28:	f800 2b01 	strb.w	r2, [r0], #1
 8011a2c:	3901      	subs	r1, #1
 8011a2e:	d1f6      	bne.n	8011a1e <ee_number+0xf2>
 8011a30:	e7bb      	b.n	80119aa <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8011a32:	2000      	movs	r0, #0
 8011a34:	e7b9      	b.n	80119aa <ee_number+0x7e>
 8011a36:	bf00      	nop
 8011a38:	08012bf8 	.word	0x08012bf8
 8011a3c:	08012bd0 	.word	0x08012bd0

08011a40 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8011a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a44:	b087      	sub	sp, #28
 8011a46:	9205      	str	r2, [sp, #20]
 8011a48:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8011a4a:	1e0f      	subs	r7, r1, #0
 8011a4c:	f340 80b8 	ble.w	8011bc0 <tiny_vsnprintf_like+0x180>
 8011a50:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8011a52:	4604      	mov	r4, r0
 8011a54:	e004      	b.n	8011a60 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8011a56:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8011a5a:	9b05      	ldr	r3, [sp, #20]
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	9305      	str	r3, [sp, #20]
 8011a60:	9905      	ldr	r1, [sp, #20]
 8011a62:	780a      	ldrb	r2, [r1, #0]
 8011a64:	b922      	cbnz	r2, 8011a70 <tiny_vsnprintf_like+0x30>
 8011a66:	1ba3      	subs	r3, r4, r6
 8011a68:	1e78      	subs	r0, r7, #1
 8011a6a:	4283      	cmp	r3, r0
 8011a6c:	f2c0 80a2 	blt.w	8011bb4 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8011a70:	1ba3      	subs	r3, r4, r6
 8011a72:	f107 38ff 	add.w	r8, r7, #4294967295
 8011a76:	4543      	cmp	r3, r8
 8011a78:	f280 809c 	bge.w	8011bb4 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8011a7c:	2a25      	cmp	r2, #37	; 0x25
 8011a7e:	d1ea      	bne.n	8011a56 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8011a80:	1c4b      	adds	r3, r1, #1
 8011a82:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8011a84:	784b      	ldrb	r3, [r1, #1]
 8011a86:	2b30      	cmp	r3, #48	; 0x30
 8011a88:	d020      	beq.n	8011acc <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8011a8a:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8011a8e:	3b30      	subs	r3, #48	; 0x30
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	2b09      	cmp	r3, #9
 8011a94:	d91d      	bls.n	8011ad2 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8011a96:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8011a9a:	9b05      	ldr	r3, [sp, #20]
 8011a9c:	781a      	ldrb	r2, [r3, #0]
 8011a9e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8011aa2:	2b20      	cmp	r3, #32
 8011aa4:	d867      	bhi.n	8011b76 <tiny_vsnprintf_like+0x136>
 8011aa6:	e8df f003 	tbb	[pc, r3]
 8011aaa:	664a      	.short	0x664a
 8011aac:	66666666 	.word	0x66666666
 8011ab0:	66666666 	.word	0x66666666
 8011ab4:	66621e66 	.word	0x66621e66
 8011ab8:	62666666 	.word	0x62666666
 8011abc:	66666666 	.word	0x66666666
 8011ac0:	66666666 	.word	0x66666666
 8011ac4:	19662866 	.word	0x19662866
 8011ac8:	6666      	.short	0x6666
 8011aca:	7c          	.byte	0x7c
 8011acb:	00          	.byte	0x00
      flags |= ZEROPAD;
 8011acc:	f04f 0901 	mov.w	r9, #1
 8011ad0:	e7dd      	b.n	8011a8e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8011ad2:	a805      	add	r0, sp, #20
 8011ad4:	f7ff ff18 	bl	8011908 <ee_skip_atoi>
 8011ad8:	4605      	mov	r5, r0
 8011ada:	e7de      	b.n	8011a9a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8011adc:	230a      	movs	r3, #10
 8011ade:	e031      	b.n	8011b44 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8011ae0:	2320      	movs	r3, #32
 8011ae2:	f804 3b01 	strb.w	r3, [r4], #1
 8011ae6:	3d01      	subs	r5, #1
 8011ae8:	2d00      	cmp	r5, #0
 8011aea:	dcf9      	bgt.n	8011ae0 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8011aec:	9b04      	ldr	r3, [sp, #16]
 8011aee:	1d1a      	adds	r2, r3, #4
 8011af0:	9204      	str	r2, [sp, #16]
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8011af8:	e7af      	b.n	8011a5a <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8011afa:	9b04      	ldr	r3, [sp, #16]
 8011afc:	1d1a      	adds	r2, r3, #4
 8011afe:	9204      	str	r2, [sp, #16]
 8011b00:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8011b04:	f1b8 0f00 	cmp.w	r8, #0
 8011b08:	d003      	beq.n	8011b12 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8011b0a:	4640      	mov	r0, r8
 8011b0c:	f7ee fb34 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8011b10:	e006      	b.n	8011b20 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8011b12:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8011bc4 <tiny_vsnprintf_like+0x184>
 8011b16:	e7f8      	b.n	8011b0a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8011b18:	2220      	movs	r2, #32
 8011b1a:	f804 2b01 	strb.w	r2, [r4], #1
 8011b1e:	461d      	mov	r5, r3
 8011b20:	1e6b      	subs	r3, r5, #1
 8011b22:	4285      	cmp	r5, r0
 8011b24:	dcf8      	bgt.n	8011b18 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8011b26:	2200      	movs	r2, #0
 8011b28:	e006      	b.n	8011b38 <tiny_vsnprintf_like+0xf8>
 8011b2a:	4643      	mov	r3, r8
 8011b2c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011b30:	f804 1b01 	strb.w	r1, [r4], #1
 8011b34:	3201      	adds	r2, #1
 8011b36:	4698      	mov	r8, r3
 8011b38:	4282      	cmp	r2, r0
 8011b3a:	dbf6      	blt.n	8011b2a <tiny_vsnprintf_like+0xea>
 8011b3c:	e78d      	b.n	8011a5a <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8011b3e:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8011b42:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8011b44:	f019 0f02 	tst.w	r9, #2
 8011b48:	d02f      	beq.n	8011baa <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8011b4a:	9a04      	ldr	r2, [sp, #16]
 8011b4c:	1d11      	adds	r1, r2, #4
 8011b4e:	9104      	str	r1, [sp, #16]
 8011b50:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8011b52:	1ba1      	subs	r1, r4, r6
 8011b54:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b58:	f04f 30ff 	mov.w	r0, #4294967295
 8011b5c:	9001      	str	r0, [sp, #4]
 8011b5e:	9500      	str	r5, [sp, #0]
 8011b60:	eba8 0101 	sub.w	r1, r8, r1
 8011b64:	4620      	mov	r0, r4
 8011b66:	f7ff fee1 	bl	801192c <ee_number>
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	e775      	b.n	8011a5a <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8011b6e:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8011b72:	230a      	movs	r3, #10
 8011b74:	e7e6      	b.n	8011b44 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8011b76:	2a25      	cmp	r2, #37	; 0x25
 8011b78:	d002      	beq.n	8011b80 <tiny_vsnprintf_like+0x140>
 8011b7a:	2325      	movs	r3, #37	; 0x25
 8011b7c:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011b80:	1ba3      	subs	r3, r4, r6
 8011b82:	4598      	cmp	r8, r3
 8011b84:	dd0f      	ble.n	8011ba6 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8011b86:	9b05      	ldr	r3, [sp, #20]
 8011b88:	781a      	ldrb	r2, [r3, #0]
 8011b8a:	b13a      	cbz	r2, 8011b9c <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8011b8c:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011b90:	1ba3      	subs	r3, r4, r6
 8011b92:	4598      	cmp	r8, r3
 8011b94:	f73f af61 	bgt.w	8011a5a <tiny_vsnprintf_like+0x1a>
    base = 10;
 8011b98:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8011b9a:	e7d3      	b.n	8011b44 <tiny_vsnprintf_like+0x104>
          --fmt;
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	9305      	str	r3, [sp, #20]
 8011ba0:	e7f6      	b.n	8011b90 <tiny_vsnprintf_like+0x150>
        base = 16;
 8011ba2:	2310      	movs	r3, #16
 8011ba4:	e7ce      	b.n	8011b44 <tiny_vsnprintf_like+0x104>
    base = 10;
 8011ba6:	230a      	movs	r3, #10
 8011ba8:	e7cc      	b.n	8011b44 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8011baa:	9a04      	ldr	r2, [sp, #16]
 8011bac:	1d11      	adds	r1, r2, #4
 8011bae:	9104      	str	r1, [sp, #16]
 8011bb0:	6812      	ldr	r2, [r2, #0]
 8011bb2:	e7ce      	b.n	8011b52 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8011bb8:	1ba0      	subs	r0, r4, r6
}
 8011bba:	b007      	add	sp, #28
 8011bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8011bc0:	2000      	movs	r0, #0
 8011bc2:	e7fa      	b.n	8011bba <tiny_vsnprintf_like+0x17a>
 8011bc4:	08012c20 	.word	0x08012c20

08011bc8 <__libc_init_array>:
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	4d0d      	ldr	r5, [pc, #52]	; (8011c00 <__libc_init_array+0x38>)
 8011bcc:	4c0d      	ldr	r4, [pc, #52]	; (8011c04 <__libc_init_array+0x3c>)
 8011bce:	1b64      	subs	r4, r4, r5
 8011bd0:	10a4      	asrs	r4, r4, #2
 8011bd2:	2600      	movs	r6, #0
 8011bd4:	42a6      	cmp	r6, r4
 8011bd6:	d109      	bne.n	8011bec <__libc_init_array+0x24>
 8011bd8:	4d0b      	ldr	r5, [pc, #44]	; (8011c08 <__libc_init_array+0x40>)
 8011bda:	4c0c      	ldr	r4, [pc, #48]	; (8011c0c <__libc_init_array+0x44>)
 8011bdc:	f000 f8a0 	bl	8011d20 <_init>
 8011be0:	1b64      	subs	r4, r4, r5
 8011be2:	10a4      	asrs	r4, r4, #2
 8011be4:	2600      	movs	r6, #0
 8011be6:	42a6      	cmp	r6, r4
 8011be8:	d105      	bne.n	8011bf6 <__libc_init_array+0x2e>
 8011bea:	bd70      	pop	{r4, r5, r6, pc}
 8011bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bf0:	4798      	blx	r3
 8011bf2:	3601      	adds	r6, #1
 8011bf4:	e7ee      	b.n	8011bd4 <__libc_init_array+0xc>
 8011bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bfa:	4798      	blx	r3
 8011bfc:	3601      	adds	r6, #1
 8011bfe:	e7f2      	b.n	8011be6 <__libc_init_array+0x1e>
 8011c00:	08012c30 	.word	0x08012c30
 8011c04:	08012c30 	.word	0x08012c30
 8011c08:	08012c30 	.word	0x08012c30
 8011c0c:	08012c34 	.word	0x08012c34

08011c10 <memset>:
 8011c10:	4402      	add	r2, r0
 8011c12:	4603      	mov	r3, r0
 8011c14:	4293      	cmp	r3, r2
 8011c16:	d100      	bne.n	8011c1a <memset+0xa>
 8011c18:	4770      	bx	lr
 8011c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8011c1e:	e7f9      	b.n	8011c14 <memset+0x4>

08011c20 <floor>:
 8011c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c24:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8011c28:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8011c2c:	2e13      	cmp	r6, #19
 8011c2e:	4602      	mov	r2, r0
 8011c30:	460b      	mov	r3, r1
 8011c32:	4607      	mov	r7, r0
 8011c34:	460c      	mov	r4, r1
 8011c36:	4605      	mov	r5, r0
 8011c38:	dc33      	bgt.n	8011ca2 <floor+0x82>
 8011c3a:	2e00      	cmp	r6, #0
 8011c3c:	da14      	bge.n	8011c68 <floor+0x48>
 8011c3e:	a334      	add	r3, pc, #208	; (adr r3, 8011d10 <floor+0xf0>)
 8011c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c44:	f7ee faa6 	bl	8000194 <__adddf3>
 8011c48:	2200      	movs	r2, #0
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	f7ee fcd6 	bl	80005fc <__aeabi_dcmpgt>
 8011c50:	b138      	cbz	r0, 8011c62 <floor+0x42>
 8011c52:	2c00      	cmp	r4, #0
 8011c54:	da58      	bge.n	8011d08 <floor+0xe8>
 8011c56:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011c5a:	431d      	orrs	r5, r3
 8011c5c:	d001      	beq.n	8011c62 <floor+0x42>
 8011c5e:	4c2e      	ldr	r4, [pc, #184]	; (8011d18 <floor+0xf8>)
 8011c60:	2500      	movs	r5, #0
 8011c62:	4623      	mov	r3, r4
 8011c64:	462f      	mov	r7, r5
 8011c66:	e025      	b.n	8011cb4 <floor+0x94>
 8011c68:	4a2c      	ldr	r2, [pc, #176]	; (8011d1c <floor+0xfc>)
 8011c6a:	fa42 f806 	asr.w	r8, r2, r6
 8011c6e:	ea01 0208 	and.w	r2, r1, r8
 8011c72:	4302      	orrs	r2, r0
 8011c74:	d01e      	beq.n	8011cb4 <floor+0x94>
 8011c76:	a326      	add	r3, pc, #152	; (adr r3, 8011d10 <floor+0xf0>)
 8011c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7c:	f7ee fa8a 	bl	8000194 <__adddf3>
 8011c80:	2200      	movs	r2, #0
 8011c82:	2300      	movs	r3, #0
 8011c84:	f7ee fcba 	bl	80005fc <__aeabi_dcmpgt>
 8011c88:	2800      	cmp	r0, #0
 8011c8a:	d0ea      	beq.n	8011c62 <floor+0x42>
 8011c8c:	2c00      	cmp	r4, #0
 8011c8e:	bfbe      	ittt	lt
 8011c90:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011c94:	fa43 f606 	asrlt.w	r6, r3, r6
 8011c98:	19a4      	addlt	r4, r4, r6
 8011c9a:	ea24 0408 	bic.w	r4, r4, r8
 8011c9e:	2500      	movs	r5, #0
 8011ca0:	e7df      	b.n	8011c62 <floor+0x42>
 8011ca2:	2e33      	cmp	r6, #51	; 0x33
 8011ca4:	dd0a      	ble.n	8011cbc <floor+0x9c>
 8011ca6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011caa:	d103      	bne.n	8011cb4 <floor+0x94>
 8011cac:	f7ee fa72 	bl	8000194 <__adddf3>
 8011cb0:	4607      	mov	r7, r0
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	4638      	mov	r0, r7
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cbc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8011cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011cc4:	fa22 f808 	lsr.w	r8, r2, r8
 8011cc8:	ea18 0f00 	tst.w	r8, r0
 8011ccc:	d0f2      	beq.n	8011cb4 <floor+0x94>
 8011cce:	a310      	add	r3, pc, #64	; (adr r3, 8011d10 <floor+0xf0>)
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	f7ee fa5e 	bl	8000194 <__adddf3>
 8011cd8:	2200      	movs	r2, #0
 8011cda:	2300      	movs	r3, #0
 8011cdc:	f7ee fc8e 	bl	80005fc <__aeabi_dcmpgt>
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	d0be      	beq.n	8011c62 <floor+0x42>
 8011ce4:	2c00      	cmp	r4, #0
 8011ce6:	da02      	bge.n	8011cee <floor+0xce>
 8011ce8:	2e14      	cmp	r6, #20
 8011cea:	d103      	bne.n	8011cf4 <floor+0xd4>
 8011cec:	3401      	adds	r4, #1
 8011cee:	ea25 0508 	bic.w	r5, r5, r8
 8011cf2:	e7b6      	b.n	8011c62 <floor+0x42>
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011cfa:	fa03 f606 	lsl.w	r6, r3, r6
 8011cfe:	4435      	add	r5, r6
 8011d00:	42bd      	cmp	r5, r7
 8011d02:	bf38      	it	cc
 8011d04:	18e4      	addcc	r4, r4, r3
 8011d06:	e7f2      	b.n	8011cee <floor+0xce>
 8011d08:	2500      	movs	r5, #0
 8011d0a:	462c      	mov	r4, r5
 8011d0c:	e7a9      	b.n	8011c62 <floor+0x42>
 8011d0e:	bf00      	nop
 8011d10:	8800759c 	.word	0x8800759c
 8011d14:	7e37e43c 	.word	0x7e37e43c
 8011d18:	bff00000 	.word	0xbff00000
 8011d1c:	000fffff 	.word	0x000fffff

08011d20 <_init>:
 8011d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d22:	bf00      	nop
 8011d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d26:	bc08      	pop	{r3}
 8011d28:	469e      	mov	lr, r3
 8011d2a:	4770      	bx	lr

08011d2c <_fini>:
 8011d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d2e:	bf00      	nop
 8011d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d32:	bc08      	pop	{r3}
 8011d34:	469e      	mov	lr, r3
 8011d36:	4770      	bx	lr
