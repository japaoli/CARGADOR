
TIM_PWMOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f0  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd0  08002bd0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002bd0  08002bd0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bd0  08002bd0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000018  08002bf8  00020018  2**2
                  ALLOC
 10 RAM1_region   00000000  20000088  20000088  00020018  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020018  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000088  20000088  00020088  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 14 .debug_line   0000e133  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000d088  00000000  00000000  0002e175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001ddf  00000000  00000000  0003b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001000  00000000  00000000  0003cfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1162  00000000  00000000  0003dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000f28  00000000  00000000  000ef148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001b735  00000000  00000000  000f0070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0010b7a5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000042fc  00000000  00000000  0010b7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000018 	.word	0x20000018
 8000154:	00000000 	.word	0x00000000
 8000158:	08002b10 	.word	0x08002b10

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000001c 	.word	0x2000001c
 8000174:	08002b10 	.word	0x08002b10

08000178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800017c:	f000 fa96 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480c      	ldr	r0, [pc, #48]	; (80001b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490d      	ldr	r1, [pc, #52]	; (80001b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0a      	ldr	r4, [pc, #40]	; (80001c4 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001a6:	f002 fc87 	bl	8002ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001aa:	f000 f827 	bl	80001fc <main>

080001ae <LoopForever>:

LoopForever:
    b LoopForever
 80001ae:	e7fe      	b.n	80001ae <LoopForever>
  ldr   r0, =_estack
 80001b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80001b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80001bc:	08002be0 	.word	0x08002be0
  ldr r2, =_sbss
 80001c0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80001c4:	20000088 	.word	0x20000088

080001c8 <ADC_IRQHandler>:
  * @retval : None
  */
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c8:	e7fe      	b.n	80001c8 <ADC_IRQHandler>

080001ca <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ca:	b480      	push	{r7}
 80001cc:	b085      	sub	sp, #20
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4313      	orrs	r3, r2
 80001e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4013      	ands	r3, r2
 80001ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001ee:	68fb      	ldr	r3, [r7, #12]
}
 80001f0:	bf00      	nop
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
	...

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fa5a 	bl	80006b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f82e 	bl	8000264 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Configure LED3 */
  BSP_LED_Init(LED3);
 8000208:	2002      	movs	r0, #2
 800020a:	f000 f9fb 	bl	8000604 <BSP_LED_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 f941 	bl	8000494 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000212:	f000 f879 	bl	8000308 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

/*## Start PWM signals generation #######################################*/
  /* Start channel 1 */
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000216:	2100      	movs	r1, #0
 8000218:	4811      	ldr	r0, [pc, #68]	; (8000260 <main+0x64>)
 800021a:	f001 fe75 	bl	8001f08 <HAL_TIM_PWM_Start>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <main+0x2c>
  {
    /* PWM Generation Error */
    Error_Handler();
 8000224:	f000 f93d 	bl	80004a2 <Error_Handler>
  }
  /* Start channel 2 */
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8000228:	2104      	movs	r1, #4
 800022a:	480d      	ldr	r0, [pc, #52]	; (8000260 <main+0x64>)
 800022c:	f001 fe6c 	bl	8001f08 <HAL_TIM_PWM_Start>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <main+0x3e>
  {
    /* PWM Generation Error */
    Error_Handler();
 8000236:	f000 f934 	bl	80004a2 <Error_Handler>
  }
  /* Start channel 3 */
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 800023a:	2108      	movs	r1, #8
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <main+0x64>)
 800023e:	f001 fe63 	bl	8001f08 <HAL_TIM_PWM_Start>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <main+0x50>
  {
    /* PWM generation Error */
    Error_Handler();
 8000248:	f000 f92b 	bl	80004a2 <Error_Handler>
  }
  /* Start channel 4 */
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 800024c:	210c      	movs	r1, #12
 800024e:	4804      	ldr	r0, [pc, #16]	; (8000260 <main+0x64>)
 8000250:	f001 fe5a 	bl	8001f08 <HAL_TIM_PWM_Start>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <main+0x62>
  {
    /* PWM generation Error */
    Error_Handler();
 800025a:	f000 f922 	bl	80004a2 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025e:	e7fe      	b.n	800025e <main+0x62>
 8000260:	20000034 	.word	0x20000034

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b09a      	sub	sp, #104	; 0x68
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0320 	add.w	r3, r7, #32
 800026e:	2248      	movs	r2, #72	; 0x48
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fc44 	bl	8002b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]
 8000286:	615a      	str	r2, [r3, #20]
 8000288:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800028a:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <SystemClock_Config+0xa0>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000292:	4a1c      	ldr	r2, [pc, #112]	; (8000304 <SystemClock_Config+0xa0>)
 8000294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000298:	6013      	str	r3, [r2, #0]
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <SystemClock_Config+0xa0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002a6:	2320      	movs	r3, #32
 80002a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002ae:	2300      	movs	r3, #0
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80002b2:	23b0      	movs	r3, #176	; 0xb0
 80002b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b6:	2300      	movs	r3, #0
 80002b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0320 	add.w	r3, r7, #32
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 ff86 	bl	80011d0 <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ca:	f000 f8ea 	bl	80004a2 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80002ce:	234f      	movs	r3, #79	; 0x4f
 80002d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fb0c 	bl	8001908 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002f6:	f000 f8d4 	bl	80004a2 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3768      	adds	r7, #104	; 0x68
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	58000400 	.word	0x58000400

08000308 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b098      	sub	sp, #96	; 0x60
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800031a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]
 800032a:	615a      	str	r2, [r3, #20]
 800032c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2234      	movs	r2, #52	; 0x34
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f002 fbe3 	bl	8002b00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800033a:	4b52      	ldr	r3, [pc, #328]	; (8000484 <MX_TIM1_Init+0x17c>)
 800033c:	4a52      	ldr	r2, [pc, #328]	; (8000488 <MX_TIM1_Init+0x180>)
 800033e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PRESCALER_VALUE;
 8000340:	4b52      	ldr	r3, [pc, #328]	; (800048c <MX_TIM1_Init+0x184>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a52      	ldr	r2, [pc, #328]	; (8000490 <MX_TIM1_Init+0x188>)
 8000346:	fba2 2303 	umull	r2, r3, r2, r3
 800034a:	0c9b      	lsrs	r3, r3, #18
 800034c:	3b01      	subs	r3, #1
 800034e:	4a4d      	ldr	r2, [pc, #308]	; (8000484 <MX_TIM1_Init+0x17c>)
 8000350:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000352:	4b4c      	ldr	r3, [pc, #304]	; (8000484 <MX_TIM1_Init+0x17c>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PERIOD_VALUE;
 8000358:	4b4a      	ldr	r3, [pc, #296]	; (8000484 <MX_TIM1_Init+0x17c>)
 800035a:	2227      	movs	r2, #39	; 0x27
 800035c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035e:	4b49      	ldr	r3, [pc, #292]	; (8000484 <MX_TIM1_Init+0x17c>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000364:	4b47      	ldr	r3, [pc, #284]	; (8000484 <MX_TIM1_Init+0x17c>)
 8000366:	2200      	movs	r2, #0
 8000368:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800036a:	4b46      	ldr	r3, [pc, #280]	; (8000484 <MX_TIM1_Init+0x17c>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000370:	4844      	ldr	r0, [pc, #272]	; (8000484 <MX_TIM1_Init+0x17c>)
 8000372:	f001 fd71 	bl	8001e58 <HAL_TIM_PWM_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800037c:	f000 f891 	bl	80004a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000380:	2300      	movs	r3, #0
 8000382:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000384:	2300      	movs	r3, #0
 8000386:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800038c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000390:	4619      	mov	r1, r3
 8000392:	483c      	ldr	r0, [pc, #240]	; (8000484 <MX_TIM1_Init+0x17c>)
 8000394:	f002 faa4 	bl	80028e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800039e:	f000 f880 	bl	80004a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a2:	2360      	movs	r3, #96	; 0x60
 80003a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = PULSE1_VALUE;
 80003a6:	2314      	movs	r3, #20
 80003a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003aa:	2300      	movs	r3, #0
 80003ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003ae:	2300      	movs	r3, #0
 80003b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003b6:	2300      	movs	r3, #0
 80003b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003ba:	2300      	movs	r3, #0
 80003bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003c2:	2200      	movs	r2, #0
 80003c4:	4619      	mov	r1, r3
 80003c6:	482f      	ldr	r0, [pc, #188]	; (8000484 <MX_TIM1_Init+0x17c>)
 80003c8:	f001 fe78 	bl	80020bc <HAL_TIM_PWM_ConfigChannel>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80003d2:	f000 f866 	bl	80004a2 <Error_Handler>
  }
  sConfigOC.Pulse = PULSE2_VALUE;
 80003d6:	230f      	movs	r3, #15
 80003d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003de:	2204      	movs	r2, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4828      	ldr	r0, [pc, #160]	; (8000484 <MX_TIM1_Init+0x17c>)
 80003e4:	f001 fe6a 	bl	80020bc <HAL_TIM_PWM_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80003ee:	f000 f858 	bl	80004a2 <Error_Handler>
  }
  sConfigOC.Pulse = PULSE3_VALUE;
 80003f2:	230a      	movs	r3, #10
 80003f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003fa:	2208      	movs	r2, #8
 80003fc:	4619      	mov	r1, r3
 80003fe:	4821      	ldr	r0, [pc, #132]	; (8000484 <MX_TIM1_Init+0x17c>)
 8000400:	f001 fe5c 	bl	80020bc <HAL_TIM_PWM_ConfigChannel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800040a:	f000 f84a 	bl	80004a2 <Error_Handler>
  }
  sConfigOC.Pulse = PULSE4_VALUE;
 800040e:	2305      	movs	r3, #5
 8000410:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000412:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000416:	220c      	movs	r2, #12
 8000418:	4619      	mov	r1, r3
 800041a:	481a      	ldr	r0, [pc, #104]	; (8000484 <MX_TIM1_Init+0x17c>)
 800041c:	f001 fe4e 	bl	80020bc <HAL_TIM_PWM_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000426:	f000 f83c 	bl	80004a2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800042e:	2300      	movs	r3, #0
 8000430:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800043e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000442:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000450:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000454:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800045a:	2300      	movs	r3, #0
 800045c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4619      	mov	r1, r3
 8000466:	4807      	ldr	r0, [pc, #28]	; (8000484 <MX_TIM1_Init+0x17c>)
 8000468:	f002 fa98 	bl	800299c <HAL_TIMEx_ConfigBreakDeadTime>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8000472:	f000 f816 	bl	80004a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000476:	4803      	ldr	r0, [pc, #12]	; (8000484 <MX_TIM1_Init+0x17c>)
 8000478:	f000 f864 	bl	8000544 <HAL_TIM_MspPostInit>

}
 800047c:	bf00      	nop
 800047e:	3760      	adds	r7, #96	; 0x60
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000034 	.word	0x20000034
 8000488:	40012c00 	.word	0x40012c00
 800048c:	2000000c 	.word	0x2000000c
 8000490:	431bde83 	.word	0x431bde83

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	2001      	movs	r0, #1
 800049a:	f7ff fe96 	bl	80001ca <LL_AHB2_GRP1_EnableClock>

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 80004a6:	2002      	movs	r0, #2
 80004a8:	f000 f8e6 	bl	8000678 <BSP_LED_On>
  while(1) 
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0xa>

080004ae <LL_AHB2_GRP1_EnableClock>:
{
 80004ae:	b480      	push	{r7}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4013      	ands	r3, r2
 80004d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004de:	b480      	push	{r7}
 80004e0:	b085      	sub	sp, #20
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4013      	ands	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
	...

0800051c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <HAL_TIM_PWM_MspInit+0x24>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d103      	bne.n	8000536 <HAL_TIM_PWM_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800052e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000532:	f7ff ffd4 	bl	80004de <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40012c00 	.word	0x40012c00

08000544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <HAL_TIM_MspPostInit+0x54>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d114      	bne.n	8000590 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2001      	movs	r0, #1
 8000568:	f7ff ffa1 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
    PA11     ------> TIM1_CH4
    PA10     ------> TIM1_CH3
    PA9     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 800056c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000570:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000572:	2302      	movs	r3, #2
 8000574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000576:	2301      	movs	r3, #1
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057a:	2303      	movs	r3, #3
 800057c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800057e:	2301      	movs	r3, #1
 8000580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	4619      	mov	r1, r3
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f000 f9ec 	bl	8000968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40012c00 	.word	0x40012c00

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <HardFault_Handler+0x4>

080005ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ca:	f000 f8cf 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <LL_AHB2_GRP1_EnableClock>:
{
 80005d2:	b480      	push	{r7}
 80005d4:	b085      	sub	sp, #20
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4013      	ands	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
	...

08000604 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800061e:	2002      	movs	r0, #2
 8000620:	f7ff ffd7 	bl	80005d2 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <BSP_LED_Init+0x6c>)
 8000628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <BSP_LED_Init+0x70>)
 800063e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000642:	f107 020c 	add.w	r2, r7, #12
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f98d 	bl	8000968 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4a08      	ldr	r2, [pc, #32]	; (8000674 <BSP_LED_Init+0x70>)
 8000652:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4a05      	ldr	r2, [pc, #20]	; (8000670 <BSP_LED_Init+0x6c>)
 800065a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065e:	2200      	movs	r2, #0
 8000660:	4619      	mov	r1, r3
 8000662:	f000 fae1 	bl	8000c28 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	08002b44 	.word	0x08002b44
 8000674:	20000000 	.word	0x20000000

08000678 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <BSP_LED_On+0x2c>)
 8000686:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <BSP_LED_On+0x30>)
 800068e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000692:	2201      	movs	r2, #1
 8000694:	4619      	mov	r1, r3
 8000696:	f000 fac7 	bl	8000c28 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000000 	.word	0x20000000
 80006a8:	08002b44 	.word	0x08002b44

080006ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c2:	2003      	movs	r0, #3
 80006c4:	f000 f91e 	bl	8000904 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80006c8:	f001 fb00 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <HAL_Init+0x3c>)
 80006d0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d2:	200f      	movs	r0, #15
 80006d4:	f000 f810 	bl	80006f8 <HAL_InitTick>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d002      	beq.n	80006e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	71fb      	strb	r3, [r7, #7]
 80006e2:	e001      	b.n	80006e8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006e4:	f7ff ff13 	bl	800050e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000000c 	.word	0x2000000c

080006f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <HAL_InitTick+0x6c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d024      	beq.n	8000756 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800070c:	f001 fade 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8000710:	4602      	mov	r2, r0
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_InitTick+0x6c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000720:	fbb2 f3f3 	udiv	r3, r2, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f912 	bl	800094e <HAL_SYSTICK_Config>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d10f      	bne.n	8000750 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b0f      	cmp	r3, #15
 8000734:	d809      	bhi.n	800074a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000736:	2200      	movs	r2, #0
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	f04f 30ff 	mov.w	r0, #4294967295
 800073e:	f000 f8ec 	bl	800091a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000742:	4a09      	ldr	r2, [pc, #36]	; (8000768 <HAL_InitTick+0x70>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	e007      	b.n	800075a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e004      	b.n	800075a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
 8000754:	e001      	b.n	800075a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000014 	.word	0x20000014
 8000768:	20000010 	.word	0x20000010

0800076c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a03      	ldr	r2, [pc, #12]	; (800078c <HAL_IncTick+0x20>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000014 	.word	0x20000014
 800078c:	20000080 	.word	0x20000080

08000790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20000080 	.word	0x20000080

080007a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	db0a      	blt.n	8000832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	490c      	ldr	r1, [pc, #48]	; (8000854 <__NVIC_SetPriority+0x4c>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	440b      	add	r3, r1
 800082c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000830:	e00a      	b.n	8000848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4908      	ldr	r1, [pc, #32]	; (8000858 <__NVIC_SetPriority+0x50>)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	3b04      	subs	r3, #4
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	440b      	add	r3, r1
 8000846:	761a      	strb	r2, [r3, #24]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	.word	0xe000e100
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085c:	b480      	push	{r7}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f1c3 0307 	rsb	r3, r3, #7
 8000876:	2b04      	cmp	r3, #4
 8000878:	bf28      	it	cs
 800087a:	2304      	movcs	r3, #4
 800087c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3304      	adds	r3, #4
 8000882:	2b06      	cmp	r3, #6
 8000884:	d902      	bls.n	800088c <NVIC_EncodePriority+0x30>
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3b03      	subs	r3, #3
 800088a:	e000      	b.n	800088e <NVIC_EncodePriority+0x32>
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	f04f 32ff 	mov.w	r2, #4294967295
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43da      	mvns	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	401a      	ands	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a4:	f04f 31ff 	mov.w	r1, #4294967295
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa01 f303 	lsl.w	r3, r1, r3
 80008ae:	43d9      	mvns	r1, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	4313      	orrs	r3, r2
         );
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3724      	adds	r7, #36	; 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d0:	d301      	bcc.n	80008d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00f      	b.n	80008f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <SysTick_Config+0x40>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008de:	210f      	movs	r1, #15
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f7ff ff90 	bl	8000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <SysTick_Config+0x40>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <SysTick_Config+0x40>)
 80008f0:	2207      	movs	r2, #7
 80008f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	e000e010 	.word	0xe000e010

08000904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff49 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000928:	f7ff ff60 	bl	80007ec <__NVIC_GetPriorityGrouping>
 800092c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff ff92 	bl	800085c <NVIC_EncodePriority>
 8000938:	4602      	mov	r2, r0
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff61 	bl	8000808 <__NVIC_SetPriority>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffb2 	bl	80008c0 <SysTick_Config>
 800095c:	4603      	mov	r3, r0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e140      	b.n	8000bfa <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 8132 	beq.w	8000bf4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d005      	beq.n	80009a8 <HAL_GPIO_Init+0x40>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d130      	bne.n	8000a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009de:	2201      	movs	r2, #1
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	091b      	lsrs	r3, r3, #4
 80009f4:	f003 0201 	and.w	r2, r3, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d017      	beq.n	8000a46 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0303 	and.w	r3, r3, #3
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d123      	bne.n	8000a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	08da      	lsrs	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3208      	adds	r2, #8
 8000a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	220f      	movs	r2, #15
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	08da      	lsrs	r2, r3, #3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3208      	adds	r2, #8
 8000a94:	6939      	ldr	r1, [r7, #16]
 8000a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 808c 	beq.w	8000bf4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000adc:	4a4e      	ldr	r2, [pc, #312]	; (8000c18 <HAL_GPIO_Init+0x2b0>)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	2207      	movs	r2, #7
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b06:	d00d      	beq.n	8000b24 <HAL_GPIO_Init+0x1bc>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a44      	ldr	r2, [pc, #272]	; (8000c1c <HAL_GPIO_Init+0x2b4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d007      	beq.n	8000b20 <HAL_GPIO_Init+0x1b8>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a43      	ldr	r2, [pc, #268]	; (8000c20 <HAL_GPIO_Init+0x2b8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d101      	bne.n	8000b1c <HAL_GPIO_Init+0x1b4>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	e004      	b.n	8000b26 <HAL_GPIO_Init+0x1be>
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	e002      	b.n	8000b26 <HAL_GPIO_Init+0x1be>
 8000b20:	2301      	movs	r3, #1
 8000b22:	e000      	b.n	8000b26 <HAL_GPIO_Init+0x1be>
 8000b24:	2300      	movs	r3, #0
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	f002 0203 	and.w	r2, r2, #3
 8000b2c:	0092      	lsls	r2, r2, #2
 8000b2e:	4093      	lsls	r3, r2
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b36:	4938      	ldr	r1, [pc, #224]	; (8000c18 <HAL_GPIO_Init+0x2b0>)
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b44:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b68:	4a2e      	ldr	r2, [pc, #184]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b92:	4a24      	ldr	r2, [pc, #144]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b9e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000bbe:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bcc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_GPIO_Init+0x2bc>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa22 f303 	lsr.w	r3, r2, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f47f aeb7 	bne.w	8000978 <HAL_GPIO_Init+0x10>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	371c      	adds	r7, #28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40010000 	.word	0x40010000
 8000c1c:	48000400 	.word	0x48000400
 8000c20:	48000800 	.word	0x48000800
 8000c24:	58000800 	.word	0x58000800

08000c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
 8000c34:	4613      	mov	r3, r2
 8000c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c38:	787b      	ldrb	r3, [r7, #1]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c3e:	887a      	ldrh	r2, [r7, #2]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c44:	e002      	b.n	8000c4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
	...

08000c58 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	58000400 	.word	0x58000400

08000c74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_PWREx_GetVoltageRange+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	58000400 	.word	0x58000400

08000c8c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c9c:	d101      	bne.n	8000ca2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	58000400 	.word	0x58000400

08000cb0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000cfa:	d101      	bne.n	8000d00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e000      	b.n	8000d02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d54:	d101      	bne.n	8000d5a <LL_RCC_HSE_IsReady+0x18>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <LL_RCC_HSE_IsReady+0x1a>
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dae:	d101      	bne.n	8000db4 <LL_RCC_HSI_IsReady+0x18>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <LL_RCC_HSI_IsReady+0x1a>
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	061b      	lsls	r3, r3, #24
 8000dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d101      	bne.n	8000dfe <LL_RCC_LSE_IsReady+0x18>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <LL_RCC_LSE_IsReady+0x1a>
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e38:	f023 0301 	bic.w	r3, r3, #1
 8000e3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d101      	bne.n	8000e60 <LL_RCC_LSI_IsReady+0x18>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <LL_RCC_LSI_IsReady+0x1a>
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6013      	str	r3, [r2, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e94:	f023 0301 	bic.w	r3, r3, #1
 8000e98:	6013      	str	r3, [r2, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d101      	bne.n	8000eb8 <LL_RCC_MSI_IsReady+0x16>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <LL_RCC_MSI_IsReady+0x18>
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	2b08      	cmp	r3, #8
 8000ed2:	d101      	bne.n	8000ed8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	604b      	str	r3, [r1, #4]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f023 0203 	bic.w	r2, r3, #3
 8000f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f003 030c 	and.w	r3, r3, #12
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	608b      	str	r3, [r1, #8]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000fd4:	f023 020f 	bic.w	r2, r3, #15
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4313      	orrs	r3, r2
 800100a:	608b      	str	r3, [r1, #8]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800101e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4313      	orrs	r3, r2
 8001030:	608b      	str	r3, [r1, #8]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800107a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800108c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010b6:	d101      	bne.n	80010bc <LL_RCC_PLL_IsReady+0x18>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <LL_RCC_PLL_IsReady+0x1a>
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80010ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr

080010de <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800110e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	f003 0303 	and.w	r3, r3, #3
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001132:	d101      	bne.n	8001138 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001156:	d101      	bne.n	800115c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117a:	d101      	bne.n	8001180 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800118e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800119c:	d101      	bne.n	80011a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80011b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011be:	d101      	bne.n	80011c4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e38b      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e2:	f7ff febc 	bl	8000f5e <LL_RCC_GetSysClkSource>
 80011e6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e8:	f7ff ff8f 	bl	800110a <LL_RCC_PLL_GetMainSource>
 80011ec:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0320 	and.w	r3, r3, #32
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80c9 	beq.w	800138e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x3e>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	2b0c      	cmp	r3, #12
 8001206:	d17b      	bne.n	8001300 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d178      	bne.n	8001300 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800120e:	f7ff fe48 	bl	8000ea2 <LL_RCC_MSI_IsReady>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_OscConfig+0x54>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e36a      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x72>
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001240:	e006      	b.n	8001250 <HAL_RCC_OscConfig+0x80>
 8001242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001250:	4293      	cmp	r3, r2
 8001252:	d222      	bcs.n	800129a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fd4b 	bl	8001cf4 <RCC_SetFlashLatencyFromMSIRange>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e348      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fe3c 	bl	8000f10 <LL_RCC_MSI_SetCalibTrimming>
 8001298:	e021      	b.n	80012de <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe23 	bl	8000f10 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fd10 	bl	8001cf4 <RCC_SetFlashLatencyFromMSIRange>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e30d      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80012de:	f000 fcf5 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4aa1      	ldr	r2, [pc, #644]	; (800156c <HAL_RCC_OscConfig+0x39c>)
 80012e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012e8:	4ba1      	ldr	r3, [pc, #644]	; (8001570 <HAL_RCC_OscConfig+0x3a0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fa03 	bl	80006f8 <HAL_InitTick>
 80012f2:	4603      	mov	r3, r0
 80012f4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80012f6:	7cfb      	ldrb	r3, [r7, #19]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d047      	beq.n	800138c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80012fc:	7cfb      	ldrb	r3, [r7, #19]
 80012fe:	e2fc      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d02c      	beq.n	8001362 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001308:	f7ff fdaf 	bl	8000e6a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130c:	f7ff fa40 	bl	8000790 <HAL_GetTick>
 8001310:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001314:	f7ff fa3c 	bl	8000790 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e2e9      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001326:	f7ff fdbc 	bl	8000ea2 <LL_RCC_MSI_IsReady>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f1      	beq.n	8001314 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fdd8 	bl	8000f10 <LL_RCC_MSI_SetCalibTrimming>
 8001360:	e015      	b.n	800138e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001362:	f7ff fd90 	bl	8000e86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001366:	f7ff fa13 	bl	8000790 <HAL_GetTick>
 800136a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800136e:	f7ff fa0f 	bl	8000790 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e2bc      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001380:	f7ff fd8f 	bl	8000ea2 <LL_RCC_MSI_IsReady>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f1      	bne.n	800136e <HAL_RCC_OscConfig+0x19e>
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d05f      	beq.n	800145a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d005      	beq.n	80013ac <HAL_RCC_OscConfig+0x1dc>
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	d10d      	bne.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d10a      	bne.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	f7ff fcc9 	bl	8000d42 <LL_RCC_HSE_IsReady>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d050      	beq.n	8001458 <HAL_RCC_OscConfig+0x288>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d14c      	bne.n	8001458 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e29b      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d102      	bne.n	80013e8 <HAL_RCC_OscConfig+0x218>
 80013e2:	f7ff fc92 	bl	8000d0a <LL_RCC_HSE_Enable>
 80013e6:	e00d      	b.n	8001404 <HAL_RCC_OscConfig+0x234>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80013f0:	d104      	bne.n	80013fc <HAL_RCC_OscConfig+0x22c>
 80013f2:	f7ff fc5d 	bl	8000cb0 <LL_RCC_HSE_EnableTcxo>
 80013f6:	f7ff fc88 	bl	8000d0a <LL_RCC_HSE_Enable>
 80013fa:	e003      	b.n	8001404 <HAL_RCC_OscConfig+0x234>
 80013fc:	f7ff fc93 	bl	8000d26 <LL_RCC_HSE_Disable>
 8001400:	f7ff fc64 	bl	8000ccc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d012      	beq.n	8001432 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff f9c0 	bl	8000790 <HAL_GetTick>
 8001410:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff f9bc 	bl	8000790 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e269      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001426:	f7ff fc8c 	bl	8000d42 <LL_RCC_HSE_IsReady>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f1      	beq.n	8001414 <HAL_RCC_OscConfig+0x244>
 8001430:	e013      	b.n	800145a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff f9ad 	bl	8000790 <HAL_GetTick>
 8001436:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143a:	f7ff f9a9 	bl	8000790 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b64      	cmp	r3, #100	; 0x64
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e256      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800144c:	f7ff fc79 	bl	8000d42 <LL_RCC_HSE_IsReady>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f1      	bne.n	800143a <HAL_RCC_OscConfig+0x26a>
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d04b      	beq.n	80014fe <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d005      	beq.n	8001478 <HAL_RCC_OscConfig+0x2a8>
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	2b0c      	cmp	r3, #12
 8001470:	d113      	bne.n	800149a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d110      	bne.n	800149a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001478:	f7ff fc90 	bl	8000d9c <LL_RCC_HSI_IsReady>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x2be>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e235      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fc93 	bl	8000dbe <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001498:	e031      	b.n	80014fe <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d019      	beq.n	80014d6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a2:	f7ff fc5f 	bl	8000d64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff f973 	bl	8000790 <HAL_GetTick>
 80014aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff f96f 	bl	8000790 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e21c      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80014c0:	f7ff fc6c 	bl	8000d9c <LL_RCC_HSI_IsReady>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f1      	beq.n	80014ae <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fc75 	bl	8000dbe <LL_RCC_HSI_SetCalibTrimming>
 80014d4:	e013      	b.n	80014fe <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d6:	f7ff fc53 	bl	8000d80 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014da:	f7ff f959 	bl	8000790 <HAL_GetTick>
 80014de:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff f955 	bl	8000790 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e202      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80014f4:	f7ff fc52 	bl	8000d9c <LL_RCC_HSI_IsReady>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f1      	bne.n	80014e2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d06f      	beq.n	80015ea <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d057      	beq.n	80015c2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69da      	ldr	r2, [r3, #28]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	429a      	cmp	r2, r3
 8001528:	d036      	beq.n	8001598 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e1db      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d018      	beq.n	800157e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800154c:	f7ff fc6c 	bl	8000e28 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001550:	f7ff f91e 	bl	8000790 <HAL_GetTick>
 8001554:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001556:	e00d      	b.n	8001574 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff f91a 	bl	8000790 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b11      	cmp	r3, #17
 8001564:	d906      	bls.n	8001574 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1c7      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
 800156a:	bf00      	nop
 800156c:	2000000c 	.word	0x2000000c
 8001570:	20000010 	.word	0x20000010
          while (LL_RCC_LSI_IsReady() != 0U)
 8001574:	f7ff fc68 	bl	8000e48 <LL_RCC_LSI_IsReady>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ec      	bne.n	8001558 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800157e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001586:	f023 0210 	bic.w	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001592:	4313      	orrs	r3, r2
 8001594:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001598:	f7ff fc36 	bl	8000e08 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff f8f8 	bl	8000790 <HAL_GetTick>
 80015a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff f8f4 	bl	8000790 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b11      	cmp	r3, #17
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1a1      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80015b6:	f7ff fc47 	bl	8000e48 <LL_RCC_LSI_IsReady>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f1      	beq.n	80015a4 <HAL_RCC_OscConfig+0x3d4>
 80015c0:	e013      	b.n	80015ea <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c2:	f7ff fc31 	bl	8000e28 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c6:	f7ff f8e3 	bl	8000790 <HAL_GetTick>
 80015ca:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff f8df 	bl	8000790 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b11      	cmp	r3, #17
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e18c      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80015e0:	f7ff fc32 	bl	8000e48 <LL_RCC_LSI_IsReady>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f1      	bne.n	80015ce <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 80d8 	beq.w	80017a8 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015f8:	f7ff fb48 	bl	8000c8c <LL_PWR_IsEnabledBkUpAccess>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d113      	bne.n	800162a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001602:	f7ff fb29 	bl	8000c58 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001606:	f7ff f8c3 	bl	8000790 <HAL_GetTick>
 800160a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff f8bf 	bl	8000790 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e16c      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001620:	f7ff fb34 	bl	8000c8c <LL_PWR_IsEnabledBkUpAccess>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f1      	beq.n	800160e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d07b      	beq.n	800172a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b85      	cmp	r3, #133	; 0x85
 8001638:	d003      	beq.n	8001642 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b05      	cmp	r3, #5
 8001640:	d109      	bne.n	8001656 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff f89b 	bl	8000790 <HAL_GetTick>
 800165a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff f88d 	bl	8000790 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e138      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001688:	f7ff fbad 	bl	8000de6 <LL_RCC_LSE_IsReady>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0ef      	beq.n	8001672 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b81      	cmp	r3, #129	; 0x81
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b85      	cmp	r3, #133	; 0x85
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff f875 	bl	8000790 <HAL_GetTick>
 80016a6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff f867 	bl	8000790 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e112      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ec      	beq.n	80016be <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80016e4:	e060      	b.n	80017a8 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff f853 	bl	8000790 <HAL_GetTick>
 80016ea:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff f845 	bl	8000790 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e0f0      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1ec      	bne.n	8001702 <HAL_RCC_OscConfig+0x532>
 8001728:	e03e      	b.n	80017a8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172a:	f7ff f831 	bl	8000790 <HAL_GetTick>
 800172e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001738:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800173c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff f823 	bl	8000790 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	; 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0ce      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ec      	bne.n	8001746 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff f810 	bl	8000790 <HAL_GetTick>
 8001770:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff f802 	bl	8000790 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0ad      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800179e:	f7ff fb22 	bl	8000de6 <LL_RCC_LSE_IsReady>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ef      	bne.n	8001788 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80a3 	beq.w	80018f8 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	d076      	beq.n	80018a6 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d14b      	bne.n	8001858 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	f7ff fc62 	bl	8001088 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7fe ffe4 	bl	8000790 <HAL_GetTick>
 80017c8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7fe ffe0 	bl	8000790 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b0a      	cmp	r3, #10
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e08d      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80017de:	f7ff fc61 	bl	80010a4 <LL_RCC_PLL_IsReady>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f1      	bne.n	80017cc <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	4b45      	ldr	r3, [pc, #276]	; (8001904 <HAL_RCC_OscConfig+0x734>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017fa:	4311      	orrs	r1, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001800:	0212      	lsls	r2, r2, #8
 8001802:	4311      	orrs	r1, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001814:	430a      	orrs	r2, r1
 8001816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800181a:	4313      	orrs	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181e:	f7ff fc25 	bl	800106c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7fe ffad 	bl	8000790 <HAL_GetTick>
 8001836:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7fe ffa9 	bl	8000790 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b0a      	cmp	r3, #10
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e056      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 800184c:	f7ff fc2a 	bl	80010a4 <LL_RCC_PLL_IsReady>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f1      	beq.n	800183a <HAL_RCC_OscConfig+0x66a>
 8001856:	e04f      	b.n	80018f8 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001858:	f7ff fc16 	bl	8001088 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001866:	f023 0303 	bic.w	r3, r3, #3
 800186a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001876:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800187a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7fe ff86 	bl	8000790 <HAL_GetTick>
 8001884:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7fe ff82 	bl	8000790 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b0a      	cmp	r3, #10
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e02f      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800189a:	f7ff fc03 	bl	80010a4 <LL_RCC_PLL_IsReady>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f1      	bne.n	8001888 <HAL_RCC_OscConfig+0x6b8>
 80018a4:	e028      	b.n	80018f8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e023      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d115      	bne.n	80018f4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d10e      	bne.n	80018f4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	11c1808c 	.word	0x11c1808c

08001908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e12c      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b98      	ldr	r3, [pc, #608]	; (8001b80 <HAL_RCC_ClockConfig+0x278>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d91b      	bls.n	8001962 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b95      	ldr	r3, [pc, #596]	; (8001b80 <HAL_RCC_ClockConfig+0x278>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 0207 	bic.w	r2, r3, #7
 8001932:	4993      	ldr	r1, [pc, #588]	; (8001b80 <HAL_RCC_ClockConfig+0x278>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800193a:	f7fe ff29 	bl	8000790 <HAL_GetTick>
 800193e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001940:	e008      	b.n	8001954 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001942:	f7fe ff25 	bl	8000790 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e110      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	4b8a      	ldr	r3, [pc, #552]	; (8001b80 <HAL_RCC_ClockConfig+0x278>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d1ef      	bne.n	8001942 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d016      	beq.n	800199c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fafe 	bl	8000f74 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001978:	f7fe ff0a 	bl	8000790 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001980:	f7fe ff06 	bl	8000790 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0f1      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001992:	f7ff fbc5 	bl	8001120 <LL_RCC_IsActiveFlag_HPRE>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f1      	beq.n	8001980 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d016      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff faf4 	bl	8000f9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019b2:	f7fe feed 	bl	8000790 <HAL_GetTick>
 80019b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019ba:	f7fe fee9 	bl	8000790 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0d4      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80019cc:	f7ff fbb9 	bl	8001142 <LL_RCC_IsActiveFlag_C2HPRE>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f1      	beq.n	80019ba <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d016      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff faec 	bl	8000fc4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019ec:	f7fe fed0 	bl	8000790 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019f4:	f7fe fecc 	bl	8000790 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e0b7      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a06:	f7ff fbae 	bl	8001166 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f1      	beq.n	80019f4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d016      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fae5 	bl	8000ff0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a26:	f7fe feb3 	bl	8000790 <HAL_GetTick>
 8001a2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a2e:	f7fe feaf 	bl	8000790 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e09a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a40:	f7ff fba3 	bl	800118a <LL_RCC_IsActiveFlag_PPRE1>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f1      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d017      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fada 	bl	8001016 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a62:	f7fe fe95 	bl	8000790 <HAL_GetTick>
 8001a66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a6a:	f7fe fe91 	bl	8000790 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e07c      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a7c:	f7ff fb96 	bl	80011ac <LL_RCC_IsActiveFlag_PPRE2>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f1      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d043      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d106      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001a9a:	f7ff f952 	bl	8000d42 <LL_RCC_HSE_IsReady>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d11e      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e066      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001ab0:	f7ff faf8 	bl	80010a4 <LL_RCC_PLL_IsReady>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d113      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e05b      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001ac6:	f7ff f9ec 	bl	8000ea2 <LL_RCC_MSI_IsReady>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d108      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e050      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001ad4:	f7ff f962 	bl	8000d9c <LL_RCC_HSI_IsReady>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e049      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fa26 	bl	8000f38 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aec:	f7fe fe50 	bl	8000790 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7fe fe4c 	bl	8000790 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e035      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	f7ff fa28 	bl	8000f5e <LL_RCC_GetSysClkSource>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d1ec      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_RCC_ClockConfig+0x278>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d21b      	bcs.n	8001b60 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_RCC_ClockConfig+0x278>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 0207 	bic.w	r2, r3, #7
 8001b30:	4913      	ldr	r1, [pc, #76]	; (8001b80 <HAL_RCC_ClockConfig+0x278>)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b38:	f7fe fe2a 	bl	8000790 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b40:	f7fe fe26 	bl	8000790 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e011      	b.n	8001b76 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_ClockConfig+0x278>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1ef      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b60:	f000 f8b4 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_RCC_ClockConfig+0x27c>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_RCC_ClockConfig+0x280>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fdc2 	bl	80006f8 <HAL_InitTick>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	58004000 	.word	0x58004000
 8001b84:	2000000c 	.word	0x2000000c
 8001b88:	20000010 	.word	0x20000010

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	f7ff f9e0 	bl	8000f5e <LL_RCC_GetSysClkSource>
 8001b9e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba0:	f7ff fab3 	bl	800110a <LL_RCC_PLL_GetMainSource>
 8001ba4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x2c>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d139      	bne.n	8001c26 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d136      	bne.n	8001c26 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001bb8:	f7ff f983 	bl	8000ec2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d115      	bne.n	8001bee <HAL_RCC_GetSysClockFreq+0x62>
 8001bc2:	f7ff f97e 	bl	8000ec2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x4e>
 8001bcc:	f7ff f989 	bl	8000ee2 <LL_RCC_MSI_GetRange>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	e005      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x5a>
 8001bda:	f7ff f98d 	bl	8000ef8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001bde:	4603      	mov	r3, r0
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	4a36      	ldr	r2, [pc, #216]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x134>)
 8001be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x8c>
 8001bee:	f7ff f968 	bl	8000ec2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_GetSysClockFreq+0x7a>
 8001bf8:	f7ff f973 	bl	8000ee2 <LL_RCC_MSI_GetRange>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	e005      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x86>
 8001c06:	f7ff f977 	bl	8000ef8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	4a2b      	ldr	r2, [pc, #172]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x134>)
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d115      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c24:	e012      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d102      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e00c      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d109      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c38:	f7ff f856 	bl	8000ce8 <LL_RCC_HSE_IsEnabledDiv2>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d102      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e001      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c4a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c4c:	f7ff f987 	bl	8000f5e <LL_RCC_GetSysClkSource>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d12f      	bne.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c56:	f7ff fa58 	bl	800110a <LL_RCC_PLL_GetMainSource>
 8001c5a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0xde>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d003      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0xe4>
 8001c68:	e00d      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c6c:	60fb      	str	r3, [r7, #12]
        break;
 8001c6e:	e00d      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c70:	f7ff f83a 	bl	8000ce8 <LL_RCC_HSE_IsEnabledDiv2>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c7c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c7e:	e005      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c82:	60fb      	str	r3, [r7, #12]
        break;
 8001c84:	e002      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	60fb      	str	r3, [r7, #12]
        break;
 8001c8a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001c8c:	f7ff fa1b 	bl	80010c6 <LL_RCC_PLL_GetN>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	fb03 f402 	mul.w	r4, r3, r2
 8001c98:	f7ff fa2c 	bl	80010f4 <LL_RCC_PLL_GetDivider>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	fbb4 f4f3 	udiv	r4, r4, r3
 8001ca6:	f7ff fa1a 	bl	80010de <LL_RCC_PLL_GetR>
 8001caa:	4603      	mov	r3, r0
 8001cac:	0f5b      	lsrs	r3, r3, #29
 8001cae:	3301      	adds	r3, #1
 8001cb0:	fbb4 f3f3 	udiv	r3, r4, r3
 8001cb4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001cb6:	697b      	ldr	r3, [r7, #20]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	08002b8c 	.word	0x08002b8c
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	01e84800 	.word	0x01e84800

08001ccc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b598      	push	{r3, r4, r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001cd0:	f7ff ff5c 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	f7ff f9b1 	bl	800103c <LL_RCC_GetAHBPrescaler>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	4a03      	ldr	r2, [pc, #12]	; (8001cf0 <HAL_RCC_GetHCLKFreq+0x24>)
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd98      	pop	{r3, r4, r7, pc}
 8001cf0:	08002b4c 	.word	0x08002b4c

08001cf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001d0c:	f7ff f9a1 	bl	8001052 <LL_RCC_GetAHB3Prescaler>
 8001d10:	4603      	mov	r3, r0
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0c9c      	lsrs	r4, r3, #18
 8001d30:	f7fe ffa0 	bl	8000c74 <HAL_PWREx_GetVoltageRange>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4619      	mov	r1, r3
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f000 f80b 	bl	8001d54 <RCC_SetFlashLatency>
 8001d3e:	4603      	mov	r3, r0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	08002b8c 	.word	0x08002b8c
 8001d4c:	08002b4c 	.word	0x08002b4c
 8001d50:	431bde83 	.word	0x431bde83

08001d54 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001d5e:	4a3a      	ldr	r2, [pc, #232]	; (8001e48 <RCC_SetFlashLatency+0xf4>)
 8001d60:	f107 0320 	add.w	r3, r7, #32
 8001d64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d68:	6018      	str	r0, [r3, #0]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001d6e:	4a37      	ldr	r2, [pc, #220]	; (8001e4c <RCC_SetFlashLatency+0xf8>)
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d78:	6018      	str	r0, [r3, #0]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001d7e:	4a34      	ldr	r2, [pc, #208]	; (8001e50 <RCC_SetFlashLatency+0xfc>)
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d86:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d94:	d11b      	bne.n	8001dce <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
 8001d9a:	e014      	b.n	8001dc6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	3338      	adds	r3, #56	; 0x38
 8001da2:	443b      	add	r3, r7
 8001da4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001da8:	461a      	mov	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d807      	bhi.n	8001dc0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	3338      	adds	r3, #56	; 0x38
 8001db6:	443b      	add	r3, r7
 8001db8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001dbe:	e021      	b.n	8001e04 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d9e7      	bls.n	8001d9c <RCC_SetFlashLatency+0x48>
 8001dcc:	e01a      	b.n	8001e04 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd2:	e014      	b.n	8001dfe <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	3338      	adds	r3, #56	; 0x38
 8001dda:	443b      	add	r3, r7
 8001ddc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d807      	bhi.n	8001df8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	3338      	adds	r3, #56	; 0x38
 8001dee:	443b      	add	r3, r7
 8001df0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001df6:	e005      	b.n	8001e04 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d9e7      	bls.n	8001dd4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <RCC_SetFlashLatency+0x100>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 0207 	bic.w	r2, r3, #7
 8001e0c:	4911      	ldr	r1, [pc, #68]	; (8001e54 <RCC_SetFlashLatency+0x100>)
 8001e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e14:	f7fe fcbc 	bl	8000790 <HAL_GetTick>
 8001e18:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e1a:	e008      	b.n	8001e2e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e1c:	f7fe fcb8 	bl	8000790 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e007      	b.n	8001e3e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <RCC_SetFlashLatency+0x100>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1ef      	bne.n	8001e1c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3738      	adds	r7, #56	; 0x38
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	08002b28 	.word	0x08002b28
 8001e4c:	08002b30 	.word	0x08002b30
 8001e50:	08002b38 	.word	0x08002b38
 8001e54:	58004000 	.word	0x58004000

08001e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e049      	b.n	8001efe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe fb4c 	bl	800051c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3304      	adds	r3, #4
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f000 fa24 	bl	80022e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_TIM_PWM_Start+0x24>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e03c      	b.n	8001fa6 <HAL_TIM_PWM_Start+0x9e>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d109      	bne.n	8001f46 <HAL_TIM_PWM_Start+0x3e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	e02f      	b.n	8001fa6 <HAL_TIM_PWM_Start+0x9e>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d109      	bne.n	8001f60 <HAL_TIM_PWM_Start+0x58>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	bf14      	ite	ne
 8001f58:	2301      	movne	r3, #1
 8001f5a:	2300      	moveq	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	e022      	b.n	8001fa6 <HAL_TIM_PWM_Start+0x9e>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d109      	bne.n	8001f7a <HAL_TIM_PWM_Start+0x72>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e015      	b.n	8001fa6 <HAL_TIM_PWM_Start+0x9e>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d109      	bne.n	8001f94 <HAL_TIM_PWM_Start+0x8c>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e008      	b.n	8001fa6 <HAL_TIM_PWM_Start+0x9e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e079      	b.n	80020a2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d104      	bne.n	8001fbe <HAL_TIM_PWM_Start+0xb6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fbc:	e023      	b.n	8002006 <HAL_TIM_PWM_Start+0xfe>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d104      	bne.n	8001fce <HAL_TIM_PWM_Start+0xc6>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fcc:	e01b      	b.n	8002006 <HAL_TIM_PWM_Start+0xfe>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d104      	bne.n	8001fde <HAL_TIM_PWM_Start+0xd6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fdc:	e013      	b.n	8002006 <HAL_TIM_PWM_Start+0xfe>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d104      	bne.n	8001fee <HAL_TIM_PWM_Start+0xe6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fec:	e00b      	b.n	8002006 <HAL_TIM_PWM_Start+0xfe>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d104      	bne.n	8001ffe <HAL_TIM_PWM_Start+0xf6>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ffc:	e003      	b.n	8002006 <HAL_TIM_PWM_Start+0xfe>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2201      	movs	r2, #1
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fc42 	bl	8002898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a24      	ldr	r2, [pc, #144]	; (80020ac <HAL_TIM_PWM_Start+0x1a4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d009      	beq.n	8002032 <HAL_TIM_PWM_Start+0x12a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <HAL_TIM_PWM_Start+0x1a8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_TIM_PWM_Start+0x12a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <HAL_TIM_PWM_Start+0x1ac>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_TIM_PWM_Start+0x12e>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_TIM_PWM_Start+0x130>
 8002036:	2300      	movs	r3, #0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d007      	beq.n	800204c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800204a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a16      	ldr	r2, [pc, #88]	; (80020ac <HAL_TIM_PWM_Start+0x1a4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d004      	beq.n	8002060 <HAL_TIM_PWM_Start+0x158>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205e:	d115      	bne.n	800208c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_TIM_PWM_Start+0x1b0>)
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b06      	cmp	r3, #6
 8002070:	d015      	beq.n	800209e <HAL_TIM_PWM_Start+0x196>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002078:	d011      	beq.n	800209e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208a:	e008      	b.n	800209e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e000      	b.n	80020a0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40014400 	.word	0x40014400
 80020b4:	40014800 	.word	0x40014800
 80020b8:	00010007 	.word	0x00010007

080020bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e0ff      	b.n	80022da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b14      	cmp	r3, #20
 80020e6:	f200 80f0 	bhi.w	80022ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002145 	.word	0x08002145
 80020f4:	080022cb 	.word	0x080022cb
 80020f8:	080022cb 	.word	0x080022cb
 80020fc:	080022cb 	.word	0x080022cb
 8002100:	08002185 	.word	0x08002185
 8002104:	080022cb 	.word	0x080022cb
 8002108:	080022cb 	.word	0x080022cb
 800210c:	080022cb 	.word	0x080022cb
 8002110:	080021c7 	.word	0x080021c7
 8002114:	080022cb 	.word	0x080022cb
 8002118:	080022cb 	.word	0x080022cb
 800211c:	080022cb 	.word	0x080022cb
 8002120:	08002207 	.word	0x08002207
 8002124:	080022cb 	.word	0x080022cb
 8002128:	080022cb 	.word	0x080022cb
 800212c:	080022cb 	.word	0x080022cb
 8002130:	08002249 	.word	0x08002249
 8002134:	080022cb 	.word	0x080022cb
 8002138:	080022cb 	.word	0x080022cb
 800213c:	080022cb 	.word	0x080022cb
 8002140:	08002289 	.word	0x08002289
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f92c 	bl	80023a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0208 	orr.w	r2, r2, #8
 800215e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0204 	bic.w	r2, r2, #4
 800216e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6999      	ldr	r1, [r3, #24]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	619a      	str	r2, [r3, #24]
      break;
 8002182:	e0a5      	b.n	80022d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f988 	bl	80024a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800219e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6999      	ldr	r1, [r3, #24]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	021a      	lsls	r2, r3, #8
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	619a      	str	r2, [r3, #24]
      break;
 80021c4:	e084      	b.n	80022d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f9df 	bl	8002590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0208 	orr.w	r2, r2, #8
 80021e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0204 	bic.w	r2, r2, #4
 80021f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69d9      	ldr	r1, [r3, #28]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	61da      	str	r2, [r3, #28]
      break;
 8002204:	e064      	b.n	80022d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fa37 	bl	8002680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69da      	ldr	r2, [r3, #28]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69d9      	ldr	r1, [r3, #28]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	021a      	lsls	r2, r3, #8
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	61da      	str	r2, [r3, #28]
      break;
 8002246:	e043      	b.n	80022d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fa72 	bl	8002738 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0208 	orr.w	r2, r2, #8
 8002262:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0204 	bic.w	r2, r2, #4
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002286:	e023      	b.n	80022d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	4618      	mov	r0, r3
 8002290:	f000 faaa 	bl	80027e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	021a      	lsls	r2, r3, #8
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80022c8:	e002      	b.n	80022d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
      break;
 80022ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop

080022e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a29      	ldr	r2, [pc, #164]	; (800239c <TIM_Base_SetConfig+0xb8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <TIM_Base_SetConfig+0x20>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002302:	d108      	bne.n	8002316 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a20      	ldr	r2, [pc, #128]	; (800239c <TIM_Base_SetConfig+0xb8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00b      	beq.n	8002336 <TIM_Base_SetConfig+0x52>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002324:	d007      	beq.n	8002336 <TIM_Base_SetConfig+0x52>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <TIM_Base_SetConfig+0xbc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d003      	beq.n	8002336 <TIM_Base_SetConfig+0x52>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <TIM_Base_SetConfig+0xc0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d108      	bne.n	8002348 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <TIM_Base_SetConfig+0xb8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <TIM_Base_SetConfig+0xa0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <TIM_Base_SetConfig+0xbc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d003      	beq.n	8002384 <TIM_Base_SetConfig+0xa0>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <TIM_Base_SetConfig+0xc0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d103      	bne.n	800238c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	615a      	str	r2, [r3, #20]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40014400 	.word	0x40014400
 80023a4:	40014800 	.word	0x40014800

080023a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f023 0201 	bic.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0303 	bic.w	r3, r3, #3
 80023e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f023 0302 	bic.w	r3, r3, #2
 80023f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a24      	ldr	r2, [pc, #144]	; (8002494 <TIM_OC1_SetConfig+0xec>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d007      	beq.n	8002418 <TIM_OC1_SetConfig+0x70>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a23      	ldr	r2, [pc, #140]	; (8002498 <TIM_OC1_SetConfig+0xf0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d003      	beq.n	8002418 <TIM_OC1_SetConfig+0x70>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a22      	ldr	r2, [pc, #136]	; (800249c <TIM_OC1_SetConfig+0xf4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d10c      	bne.n	8002432 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f023 0308 	bic.w	r3, r3, #8
 800241e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a17      	ldr	r2, [pc, #92]	; (8002494 <TIM_OC1_SetConfig+0xec>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <TIM_OC1_SetConfig+0xa2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a17      	ldr	r2, [pc, #92]	; (800249c <TIM_OC1_SetConfig+0xf4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d003      	beq.n	800244a <TIM_OC1_SetConfig+0xa2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <TIM_OC1_SetConfig+0xf0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d111      	bne.n	800246e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	621a      	str	r2, [r3, #32]
}
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40014800 	.word	0x40014800
 800249c:	40014400 	.word	0x40014400

080024a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f023 0210 	bic.w	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f023 0320 	bic.w	r3, r3, #32
 80024ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a21      	ldr	r2, [pc, #132]	; (8002584 <TIM_OC2_SetConfig+0xe4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10d      	bne.n	8002520 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800250a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800251e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a18      	ldr	r2, [pc, #96]	; (8002584 <TIM_OC2_SetConfig+0xe4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <TIM_OC2_SetConfig+0x98>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a17      	ldr	r2, [pc, #92]	; (8002588 <TIM_OC2_SetConfig+0xe8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_OC2_SetConfig+0x98>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a16      	ldr	r2, [pc, #88]	; (800258c <TIM_OC2_SetConfig+0xec>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d113      	bne.n	8002560 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800253e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	621a      	str	r2, [r3, #32]
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40014400 	.word	0x40014400
 800258c:	40014800 	.word	0x40014800

08002590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a21      	ldr	r2, [pc, #132]	; (8002674 <TIM_OC3_SetConfig+0xe4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10d      	bne.n	800260e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800260c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a18      	ldr	r2, [pc, #96]	; (8002674 <TIM_OC3_SetConfig+0xe4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d007      	beq.n	8002626 <TIM_OC3_SetConfig+0x96>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a17      	ldr	r2, [pc, #92]	; (8002678 <TIM_OC3_SetConfig+0xe8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d003      	beq.n	8002626 <TIM_OC3_SetConfig+0x96>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a16      	ldr	r2, [pc, #88]	; (800267c <TIM_OC3_SetConfig+0xec>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d113      	bne.n	800264e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800262c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	621a      	str	r2, [r3, #32]
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40014400 	.word	0x40014400
 800267c:	40014800 	.word	0x40014800

08002680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	031b      	lsls	r3, r3, #12
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <TIM_OC4_SetConfig+0xac>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d007      	beq.n	80026f4 <TIM_OC4_SetConfig+0x74>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <TIM_OC4_SetConfig+0xb0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d003      	beq.n	80026f4 <TIM_OC4_SetConfig+0x74>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a11      	ldr	r2, [pc, #68]	; (8002734 <TIM_OC4_SetConfig+0xb4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d109      	bne.n	8002708 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	019b      	lsls	r3, r3, #6
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	621a      	str	r2, [r3, #32]
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40014400 	.word	0x40014400
 8002734:	40014800 	.word	0x40014800

08002738 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800277c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	041b      	lsls	r3, r3, #16
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a13      	ldr	r2, [pc, #76]	; (80027dc <TIM_OC5_SetConfig+0xa4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <TIM_OC5_SetConfig+0x6a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <TIM_OC5_SetConfig+0xa8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d003      	beq.n	80027a2 <TIM_OC5_SetConfig+0x6a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <TIM_OC5_SetConfig+0xac>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d109      	bne.n	80027b6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	621a      	str	r2, [r3, #32]
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40014400 	.word	0x40014400
 80027e4:	40014800 	.word	0x40014800

080027e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800282e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	051b      	lsls	r3, r3, #20
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <TIM_OC6_SetConfig+0xa4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d007      	beq.n	8002854 <TIM_OC6_SetConfig+0x6c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <TIM_OC6_SetConfig+0xa8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d003      	beq.n	8002854 <TIM_OC6_SetConfig+0x6c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a11      	ldr	r2, [pc, #68]	; (8002894 <TIM_OC6_SetConfig+0xac>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d109      	bne.n	8002868 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	029b      	lsls	r3, r3, #10
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40014400 	.word	0x40014400
 8002894:	40014800 	.word	0x40014800

08002898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2201      	movs	r2, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	401a      	ands	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a1a      	ldr	r2, [r3, #32]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	431a      	orrs	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e04a      	b.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d108      	bne.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002928:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a11      	ldr	r2, [pc, #68]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d10c      	bne.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	4313      	orrs	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	40012c00 	.word	0x40012c00

0800299c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e078      	b.n	8002aaa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d106      	bne.n	8002a4a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d121      	bne.n	8002a98 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	051b      	lsls	r3, r3, #20
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d106      	bne.n	8002a98 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	40012c00 	.word	0x40012c00

08002ab8 <__libc_init_array>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	4d0d      	ldr	r5, [pc, #52]	; (8002af0 <__libc_init_array+0x38>)
 8002abc:	4c0d      	ldr	r4, [pc, #52]	; (8002af4 <__libc_init_array+0x3c>)
 8002abe:	1b64      	subs	r4, r4, r5
 8002ac0:	10a4      	asrs	r4, r4, #2
 8002ac2:	2600      	movs	r6, #0
 8002ac4:	42a6      	cmp	r6, r4
 8002ac6:	d109      	bne.n	8002adc <__libc_init_array+0x24>
 8002ac8:	4d0b      	ldr	r5, [pc, #44]	; (8002af8 <__libc_init_array+0x40>)
 8002aca:	4c0c      	ldr	r4, [pc, #48]	; (8002afc <__libc_init_array+0x44>)
 8002acc:	f000 f820 	bl	8002b10 <_init>
 8002ad0:	1b64      	subs	r4, r4, r5
 8002ad2:	10a4      	asrs	r4, r4, #2
 8002ad4:	2600      	movs	r6, #0
 8002ad6:	42a6      	cmp	r6, r4
 8002ad8:	d105      	bne.n	8002ae6 <__libc_init_array+0x2e>
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae0:	4798      	blx	r3
 8002ae2:	3601      	adds	r6, #1
 8002ae4:	e7ee      	b.n	8002ac4 <__libc_init_array+0xc>
 8002ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aea:	4798      	blx	r3
 8002aec:	3601      	adds	r6, #1
 8002aee:	e7f2      	b.n	8002ad6 <__libc_init_array+0x1e>
 8002af0:	08002bd0 	.word	0x08002bd0
 8002af4:	08002bd0 	.word	0x08002bd0
 8002af8:	08002bd0 	.word	0x08002bd0
 8002afc:	08002bd4 	.word	0x08002bd4

08002b00 <memset>:
 8002b00:	4402      	add	r2, r0
 8002b02:	4603      	mov	r3, r0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d100      	bne.n	8002b0a <memset+0xa>
 8002b08:	4770      	bx	lr
 8002b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0e:	e7f9      	b.n	8002b04 <memset+0x4>

08002b10 <_init>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr

08002b1c <_fini>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr
